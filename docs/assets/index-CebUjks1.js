(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function e(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(i){if(i.ep)return;i.ep=!0;const s=e(i);fetch(i.href,s)}})();/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Ym="169",ba={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},pa={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},Cv=0,bx=1,Pv=2,jm=1,Fv=2,xs=3,gr=0,Zn=1,Ui=2,dr=0,Ea=1,dp=2,Ex=3,Ax=4,Iv=5,qr=100,Dv=101,Lv=102,Uv=103,Bv=104,Ov=200,zv=201,Gv=202,kv=203,fp=204,pp=205,Vv=206,Hv=207,$v=208,Wv=209,qv=210,Xv=211,Yv=212,jv=213,Kv=214,mp=0,gp=1,xp=2,La=3,_p=4,yp=5,Sp=6,Tp=7,By=0,Zv=1,Qv=2,fr=0,Jv=1,tb=2,eb=3,nb=4,ib=5,sb=6,rb=7,Oy=300,Ua=301,Ba=302,Mp=303,vp=304,qu=306,bp=1e3,jr=1001,Ep=1002,jn=1003,ob=1004,kc=1005,Bi=1006,vd=1007,Kr=1008,Is=1009,zy=1010,Gy=1011,ic=1012,Km=1013,eo=1014,Ki=1015,mc=1016,Zm=1017,Qm=1018,Oa=1020,ky=35902,Vy=1021,Hy=1022,Gi=1023,$y=1024,Wy=1025,Aa=1026,za=1027,Jm=1028,tg=1029,qy=1030,eg=1031,ng=1033,Qh=33776,Jh=33777,tu=33778,eu=33779,Ap=35840,wp=35841,Np=35842,Rp=35843,Cp=36196,Pp=37492,Fp=37496,Ip=37808,Dp=37809,Lp=37810,Up=37811,Bp=37812,Op=37813,zp=37814,Gp=37815,kp=37816,Vp=37817,Hp=37818,$p=37819,Wp=37820,qp=37821,nu=36492,Xp=36494,Yp=36495,Xy=36283,jp=36284,Kp=36285,Zp=36286,ab=3200,lb=3201,ig=0,cb=1,ar="",Xi="srgb",vr="srgb-linear",sg="display-p3",Xu="display-p3-linear",gu="linear",Ie="srgb",xu="rec709",_u="p3",bo=7680,wx=519,hb=512,ub=513,db=514,Yy=515,fb=516,pb=517,mb=518,gb=519,Nx=35044,Rx="300 es",As=2e3,yu=2001;let mo=class{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const i=this._listeners[t];if(i!==void 0){const s=i.indexOf(e);s!==-1&&i.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,t);t.target=null}}};const _n=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Cx=1234567;const Yl=Math.PI/180,sc=180/Math.PI;function Za(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(_n[r&255]+_n[r>>8&255]+_n[r>>16&255]+_n[r>>24&255]+"-"+_n[t&255]+_n[t>>8&255]+"-"+_n[t>>16&15|64]+_n[t>>24&255]+"-"+_n[e&63|128]+_n[e>>8&255]+"-"+_n[e>>16&255]+_n[e>>24&255]+_n[n&255]+_n[n>>8&255]+_n[n>>16&255]+_n[n>>24&255]).toLowerCase()}function An(r,t,e){return Math.max(t,Math.min(e,r))}function rg(r,t){return(r%t+t)%t}function xb(r,t,e,n,i){return n+(r-t)*(i-n)/(e-t)}function _b(r,t,e){return r!==t?(e-r)/(t-r):0}function jl(r,t,e){return(1-e)*r+e*t}function yb(r,t,e,n){return jl(r,t,1-Math.exp(-e*n))}function Sb(r,t=1){return t-Math.abs(rg(r,t*2)-t)}function Tb(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function Mb(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function vb(r,t){return r+Math.floor(Math.random()*(t-r+1))}function bb(r,t){return r+Math.random()*(t-r)}function Eb(r){return r*(.5-Math.random())}function Ab(r){r!==void 0&&(Cx=r);let t=Cx+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function wb(r){return r*Yl}function Nb(r){return r*sc}function Rb(r){return(r&r-1)===0&&r!==0}function Cb(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function Pb(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function Fb(r,t,e,n,i){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+n)/2),h=o((t+n)/2),u=s((t-n)/2),d=o((t-n)/2),f=s((n-t)/2),p=o((n-t)/2);switch(i){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*p,l*f,a*c);break;case"YXY":r.set(l*f,a*h,l*p,a*c);break;case"ZYZ":r.set(l*p,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function la(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function Un(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const Ib={DEG2RAD:Yl,RAD2DEG:sc,generateUUID:Za,clamp:An,euclideanModulo:rg,mapLinear:xb,inverseLerp:_b,lerp:jl,damp:yb,pingpong:Sb,smoothstep:Tb,smootherstep:Mb,randInt:vb,randFloat:bb,randFloatSpread:Eb,seededRandom:Ab,degToRad:wb,radToDeg:Nb,isPowerOfTwo:Rb,ceilPowerOfTwo:Cb,floorPowerOfTwo:Pb,setQuaternionFromProperEuler:Fb,normalize:Un,denormalize:la};let Jt=class jy{constructor(t=0,e=0){jy.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(An(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*n-o*i+t.x,this.y=s*i+o*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},ie=class Ky{constructor(t,e,n,i,s,o,a,l,c){Ky.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c)}set(t,e,n,i,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=i,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=n,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],f=n[5],p=n[8],x=i[0],m=i[3],g=i[6],y=i[1],_=i[4],T=i[7],w=i[2],A=i[5],v=i[8];return s[0]=o*x+a*y+l*w,s[3]=o*m+a*_+l*A,s[6]=o*g+a*T+l*v,s[1]=c*x+h*y+u*w,s[4]=c*m+h*_+u*A,s[7]=c*g+h*T+u*v,s[2]=d*x+f*y+p*w,s[5]=d*m+f*_+p*A,s[8]=d*g+f*T+p*v,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-n*s*h+n*a*l+i*s*c-i*o*l}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,p=e*u+n*d+i*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/p;return t[0]=u*x,t[1]=(i*c-h*n)*x,t[2]=(a*n-i*o)*x,t[3]=d*x,t[4]=(h*e-i*l)*x,t[5]=(i*s-a*e)*x,t[6]=f*x,t[7]=(n*l-c*e)*x,t[8]=(o*e-n*s)*x,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*o+c*a)+o+t,-i*c,i*l,-i*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(bd.makeScale(t,e)),this}rotate(t){return this.premultiply(bd.makeRotation(-t)),this}translate(t,e){return this.premultiply(bd.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}};const bd=new ie;function Zy(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function Su(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function Db(){const r=Su("canvas");return r.style.display="block",r}const Px={};function iu(r){r in Px||(Px[r]=!0,console.warn(r))}function Lb(r,t,e){return new Promise(function(n,i){function s(){switch(r.clientWaitSync(t,r.SYNC_FLUSH_COMMANDS_BIT,0)){case r.WAIT_FAILED:i();break;case r.TIMEOUT_EXPIRED:setTimeout(s,e);break;default:n()}}setTimeout(s,e)})}function Ub(r){const t=r.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function Bb(r){const t=r.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const Fx=new ie().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),Ix=new ie().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),hl={[vr]:{transfer:gu,primaries:xu,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r,fromReference:r=>r},[Xi]:{transfer:Ie,primaries:xu,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r.convertSRGBToLinear(),fromReference:r=>r.convertLinearToSRGB()},[Xu]:{transfer:gu,primaries:_u,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.applyMatrix3(Ix),fromReference:r=>r.applyMatrix3(Fx)},[sg]:{transfer:Ie,primaries:_u,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.convertSRGBToLinear().applyMatrix3(Ix),fromReference:r=>r.applyMatrix3(Fx).convertLinearToSRGB()}},Ob=new Set([vr,Xu]),Me={enabled:!0,_workingColorSpace:vr,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(r){if(!Ob.has(r))throw new Error(`Unsupported working color space, "${r}".`);this._workingColorSpace=r},convert:function(r,t,e){if(this.enabled===!1||t===e||!t||!e)return r;const n=hl[t].toReference,i=hl[e].fromReference;return i(n(r))},fromWorkingColorSpace:function(r,t){return this.convert(r,this._workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this._workingColorSpace)},getPrimaries:function(r){return hl[r].primaries},getTransfer:function(r){return r===ar?gu:hl[r].transfer},getLuminanceCoefficients:function(r,t=this._workingColorSpace){return r.fromArray(hl[t].luminanceCoefficients)}};function wa(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Ed(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let Eo,zb=class{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{Eo===void 0&&(Eo=Su("canvas")),Eo.width=t.width,Eo.height=t.height;const n=Eo.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Eo}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=Su("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),s=i.data;for(let o=0;o<s.length;o++)s[o]=wa(s[o]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(wa(e[n]/255)*255):e[n]=wa(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}},Gb=0,Qy=class{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:Gb++}),this.uuid=Za(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?s.push(Ad(i[o].image)):s.push(Ad(i[o]))}else s=Ad(i);n.url=s}return e||(t.images[this.uuid]=n),n}};function Ad(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?zb.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let kb=0,qi=class su extends mo{constructor(t=su.DEFAULT_IMAGE,e=su.DEFAULT_MAPPING,n=jr,i=jr,s=Bi,o=Kr,a=Gi,l=Is,c=su.DEFAULT_ANISOTROPY,h=ar){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:kb++}),this.uuid=Za(),this.name="",this.source=new Qy(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new Jt(0,0),this.repeat=new Jt(1,1),this.center=new Jt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ie,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==Oy)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case bp:t.x=t.x-Math.floor(t.x);break;case jr:t.x=t.x<0?0:1;break;case Ep:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case bp:t.y=t.y-Math.floor(t.y);break;case jr:t.y=t.y<0?0:1;break;case Ep:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}};qi.DEFAULT_IMAGE=null;qi.DEFAULT_MAPPING=Oy;qi.DEFAULT_ANISOTROPY=1;let Je=class Jy{constructor(t=0,e=0,n=0,i=1){Jy.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*e+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*e+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*e+o[7]*n+o[11]*i+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,s;const l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],p=l[9],x=l[2],m=l[6],g=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-x)<.01&&Math.abs(p-m)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+x)<.1&&Math.abs(p+m)<.1&&Math.abs(c+f+g-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const _=(c+1)/2,T=(f+1)/2,w=(g+1)/2,A=(h+d)/4,v=(u+x)/4,R=(p+m)/4;return _>T&&_>w?_<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(_),i=A/n,s=v/n):T>w?T<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(T),n=A/i,s=R/i):w<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(w),n=v/s,i=R/s),this.set(n,i,s,e),this}let y=Math.sqrt((m-p)*(m-p)+(u-x)*(u-x)+(d-h)*(d-h));return Math.abs(y)<.001&&(y=1),this.x=(m-p)/y,this.y=(u-x)/y,this.z=(d-h)/y,this.w=Math.acos((c+f+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}},Vb=class extends mo{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Je(0,0,t,e),this.scissorTest=!1,this.viewport=new Je(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Bi,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const s=new qi(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let n=0,i=t.textures.length;n<i;n++)this.textures[n]=t.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new Qy(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}},no=class extends Vb{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}},tS=class extends qi{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=jn,this.minFilter=jn,this.wrapR=jr,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}};class Hb extends qi{constructor(t=null,e=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=jn,this.minFilter=jn,this.wrapR=jr,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}let io=class{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,s,o,a){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[o+0],f=s[o+1],p=s[o+2],x=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=x;return}if(u!==x||l!==d||c!==f||h!==p){let m=1-a;const g=l*d+c*f+h*p+u*x,y=g>=0?1:-1,_=1-g*g;if(_>Number.EPSILON){const w=Math.sqrt(_),A=Math.atan2(w,g*y);m=Math.sin(m*A)/w,a=Math.sin(a*A)/w}const T=a*y;if(l=l*m+d*T,c=c*m+f*T,h=h*m+p*T,u=u*m+x*T,m===1-a){const w=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=w,c*=w,h*=w,u*=w}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,n,i,s,o){const a=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[o],d=s[o+1],f=s[o+2],p=s[o+3];return t[e]=a*p+h*u+l*f-c*d,t[e+1]=l*p+h*d+c*u-a*f,t[e+2]=c*p+h*f+a*d-l*u,t[e+3]=h*p-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(n/2),h=a(i/2),u=a(s/2),d=l(n/2),f=l(i/2),p=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"YXZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"ZXY":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"ZYX":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"YZX":this._x=d*h*u+c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u-d*f*p;break;case"XZY":this._x=d*h*u-c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=n+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-i)*f}else if(n>a&&n>u){const f=2*Math.sqrt(1+n-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(i+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-n-u);this._w=(s-c)/f,this._x=(i+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-n-a);this._w=(o-i)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(An(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=n*h+o*a+i*c-s*l,this._y=i*h+o*l+s*a-n*c,this._z=s*h+o*c+n*l-i*a,this._w=o*h-n*a-i*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*t._w+n*t._x+i*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*n+e*this._x,this._y=f*i+e*this._y,this._z=f*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},U=class eS{constructor(t=0,e=0,n=0){eS.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(Dx.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Dx.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*i,this.y=s[1]*e+s[4]*n+s[7]*i,this.z=s[2]*e+s[5]*n+s[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=t.elements,o=1/(s[3]*e+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*e+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*e+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=2*(o*i-a*n),h=2*(a*e-s*i),u=2*(s*n-o*e);return this.x=e+l*c+o*u-a*h,this.y=n+l*h+a*c-s*u,this.z=i+l*u+s*h-o*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i,this.y=s[1]*e+s[5]*n+s[9]*i,this.z=s[2]*e+s[6]*n+s[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=i*l-s*a,this.y=s*o-n*l,this.z=n*a-i*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return wd.copy(this).projectOnVector(t),this.sub(wd)}reflect(t){return this.sub(wd.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(An(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const wd=new U,Dx=new io;let go=class{constructor(t=new U(1/0,1/0,1/0),e=new U(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(wi.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(wi.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=wi.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const s=n.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let o=0,a=s.count;o<a;o++)t.isMesh===!0?t.getVertexPosition(o,wi):wi.fromBufferAttribute(s,o),wi.applyMatrix4(t.matrixWorld),this.expandByPoint(wi);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),Vc.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),Vc.copy(n.boundingBox)),Vc.applyMatrix4(t.matrixWorld),this.union(Vc)}const i=t.children;for(let s=0,o=i.length;s<o;s++)this.expandByObject(i[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,wi),wi.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(ul),Hc.subVectors(this.max,ul),Ao.subVectors(t.a,ul),wo.subVectors(t.b,ul),No.subVectors(t.c,ul),Vs.subVectors(wo,Ao),Hs.subVectors(No,wo),Nr.subVectors(Ao,No);let e=[0,-Vs.z,Vs.y,0,-Hs.z,Hs.y,0,-Nr.z,Nr.y,Vs.z,0,-Vs.x,Hs.z,0,-Hs.x,Nr.z,0,-Nr.x,-Vs.y,Vs.x,0,-Hs.y,Hs.x,0,-Nr.y,Nr.x,0];return!Nd(e,Ao,wo,No,Hc)||(e=[1,0,0,0,1,0,0,0,1],!Nd(e,Ao,wo,No,Hc))?!1:($c.crossVectors(Vs,Hs),e=[$c.x,$c.y,$c.z],Nd(e,Ao,wo,No,Hc))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,wi).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(wi).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(os[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),os[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),os[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),os[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),os[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),os[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),os[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),os[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(os),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}};const os=[new U,new U,new U,new U,new U,new U,new U,new U],wi=new U,Vc=new go,Ao=new U,wo=new U,No=new U,Vs=new U,Hs=new U,Nr=new U,ul=new U,Hc=new U,$c=new U,Rr=new U;function Nd(r,t,e,n,i){for(let s=0,o=r.length-3;s<=o;s+=3){Rr.fromArray(r,s);const a=i.x*Math.abs(Rr.x)+i.y*Math.abs(Rr.y)+i.z*Math.abs(Rr.z),l=t.dot(Rr),c=e.dot(Rr),h=n.dot(Rr);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const $b=new go,dl=new U,Rd=new U;let Qa=class{constructor(t=new U,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):$b.setFromPoints(t).getCenter(n);let i=0;for(let s=0,o=t.length;s<o;s++)i=Math.max(i,n.distanceToSquared(t[s]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;dl.subVectors(t,this.center);const e=dl.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),i=(n-this.radius)*.5;this.center.addScaledVector(dl,i/n),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(Rd.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(dl.copy(t.center).add(Rd)),this.expandByPoint(dl.copy(t.center).sub(Rd))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}};const as=new U,Cd=new U,Wc=new U,$s=new U,Pd=new U,qc=new U,Fd=new U;let og=class{constructor(t=new U,e=new U(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,as)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=as.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(as.copy(this.origin).addScaledVector(this.direction,e),as.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){Cd.copy(t).add(e).multiplyScalar(.5),Wc.copy(e).sub(t).normalize(),$s.copy(this.origin).sub(Cd);const s=t.distanceTo(e)*.5,o=-this.direction.dot(Wc),a=$s.dot(this.direction),l=-$s.dot(Wc),c=$s.lengthSq(),h=Math.abs(1-o*o);let u,d,f,p;if(h>0)if(u=o*l-a,d=o*a-l,p=s*h,u>=0)if(d>=-p)if(d<=p){const x=1/h;u*=x,d*=x,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-p?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c):d<=p?(u=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,u),i&&i.copy(Cd).addScaledVector(Wc,d),f}intersectSphere(t,e){as.subVectors(t.center,this.origin);const n=as.dot(this.direction),i=as.dot(as)-n*n,s=t.radius*t.radius;if(i>s)return null;const o=Math.sqrt(s-i),a=n-o,l=n+o;return l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(n=(t.min.x-d.x)*c,i=(t.max.x-d.x)*c):(n=(t.max.x-d.x)*c,i=(t.min.x-d.x)*c),h>=0?(s=(t.min.y-d.y)*h,o=(t.max.y-d.y)*h):(s=(t.max.y-d.y)*h,o=(t.min.y-d.y)*h),n>o||s>i||((s>n||isNaN(n))&&(n=s),(o<i||isNaN(i))&&(i=o),u>=0?(a=(t.min.z-d.z)*u,l=(t.max.z-d.z)*u):(a=(t.max.z-d.z)*u,l=(t.min.z-d.z)*u),n>l||a>i)||((a>n||n!==n)&&(n=a),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,as)!==null}intersectTriangle(t,e,n,i,s){Pd.subVectors(e,t),qc.subVectors(n,t),Fd.crossVectors(Pd,qc);let o=this.direction.dot(Fd),a;if(o>0){if(i)return null;a=1}else if(o<0)a=-1,o=-o;else return null;$s.subVectors(this.origin,t);const l=a*this.direction.dot(qc.crossVectors($s,qc));if(l<0)return null;const c=a*this.direction.dot(Pd.cross($s));if(c<0||l+c>o)return null;const h=-a*$s.dot(Fd);return h<0?null:this.at(h/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}},Ue=class Qp{constructor(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){Qp.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m)}set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=s,g[5]=o,g[9]=a,g[13]=l,g[2]=c,g[6]=h,g[10]=u,g[14]=d,g[3]=f,g[7]=p,g[11]=x,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Qp().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Ro.setFromMatrixColumn(t,0).length(),s=1/Ro.setFromMatrixColumn(t,1).length(),o=1/Ro.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*o,e[9]=n[9]*o,e[10]=n[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,s=t.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+p*c,e[5]=d-x*c,e[9]=-a*l,e[2]=x-d*c,e[6]=p+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d+x*a,e[4]=p*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=x+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d-x*a,e[4]=-o*u,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=x-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=p*c-f,e[8]=d*c+x,e[1]=l*u,e[5]=x*c+d,e[9]=f*c-p,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=x-d*u,e[8]=p*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+p,e[10]=d-x*u}else if(t.order==="XZY"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+x,e[5]=o*h,e[9]=f*u-p,e[2]=p*u-f,e[6]=a*h,e[10]=x*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Wb,t,qb)}lookAt(t,e,n){const i=this.elements;return si.subVectors(t,e),si.lengthSq()===0&&(si.z=1),si.normalize(),Ws.crossVectors(n,si),Ws.lengthSq()===0&&(Math.abs(n.z)===1?si.x+=1e-4:si.z+=1e-4,si.normalize(),Ws.crossVectors(n,si)),Ws.normalize(),Xc.crossVectors(si,Ws),i[0]=Ws.x,i[4]=Xc.x,i[8]=si.x,i[1]=Ws.y,i[5]=Xc.y,i[9]=si.y,i[2]=Ws.z,i[6]=Xc.z,i[10]=si.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],f=n[13],p=n[2],x=n[6],m=n[10],g=n[14],y=n[3],_=n[7],T=n[11],w=n[15],A=i[0],v=i[4],R=i[8],W=i[12],S=i[1],b=i[5],H=i[9],z=i[13],Z=i[2],tt=i[6],q=i[10],nt=i[14],$=i[3],ct=i[7],ut=i[11],mt=i[15];return s[0]=o*A+a*S+l*Z+c*$,s[4]=o*v+a*b+l*tt+c*ct,s[8]=o*R+a*H+l*q+c*ut,s[12]=o*W+a*z+l*nt+c*mt,s[1]=h*A+u*S+d*Z+f*$,s[5]=h*v+u*b+d*tt+f*ct,s[9]=h*R+u*H+d*q+f*ut,s[13]=h*W+u*z+d*nt+f*mt,s[2]=p*A+x*S+m*Z+g*$,s[6]=p*v+x*b+m*tt+g*ct,s[10]=p*R+x*H+m*q+g*ut,s[14]=p*W+x*z+m*nt+g*mt,s[3]=y*A+_*S+T*Z+w*$,s[7]=y*v+_*b+T*tt+w*ct,s[11]=y*R+_*H+T*q+w*ut,s[15]=y*W+_*z+T*nt+w*mt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],p=t[3],x=t[7],m=t[11],g=t[15];return p*(+s*l*u-i*c*u-s*a*d+n*c*d+i*a*f-n*l*f)+x*(+e*l*f-e*c*d+s*o*d-i*o*f+i*c*h-s*l*h)+m*(+e*c*u-e*a*f-s*o*u+n*o*f+s*a*h-n*c*h)+g*(-i*a*h-e*l*u+e*a*d+i*o*u-n*o*d+n*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],p=t[12],x=t[13],m=t[14],g=t[15],y=u*m*c-x*d*c+x*l*f-a*m*f-u*l*g+a*d*g,_=p*d*c-h*m*c-p*l*f+o*m*f+h*l*g-o*d*g,T=h*x*c-p*u*c+p*a*f-o*x*f-h*a*g+o*u*g,w=p*u*l-h*x*l-p*a*d+o*x*d+h*a*m-o*u*m,A=e*y+n*_+i*T+s*w;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const v=1/A;return t[0]=y*v,t[1]=(x*d*s-u*m*s-x*i*f+n*m*f+u*i*g-n*d*g)*v,t[2]=(a*m*s-x*l*s+x*i*c-n*m*c-a*i*g+n*l*g)*v,t[3]=(u*l*s-a*d*s-u*i*c+n*d*c+a*i*f-n*l*f)*v,t[4]=_*v,t[5]=(h*m*s-p*d*s+p*i*f-e*m*f-h*i*g+e*d*g)*v,t[6]=(p*l*s-o*m*s-p*i*c+e*m*c+o*i*g-e*l*g)*v,t[7]=(o*d*s-h*l*s+h*i*c-e*d*c-o*i*f+e*l*f)*v,t[8]=T*v,t[9]=(p*u*s-h*x*s-p*n*f+e*x*f+h*n*g-e*u*g)*v,t[10]=(o*x*s-p*a*s+p*n*c-e*x*c-o*n*g+e*a*g)*v,t[11]=(h*a*s-o*u*s-h*n*c+e*u*c+o*n*f-e*a*f)*v,t[12]=w*v,t[13]=(h*x*i-p*u*i+p*n*d-e*x*d-h*n*m+e*u*m)*v,t[14]=(p*a*i-o*x*i-p*n*l+e*x*l+o*n*m-e*a*m)*v,t[15]=(o*u*i-h*a*i+h*n*l-e*u*l-o*n*d+e*a*d)*v,this}scale(t){const e=this.elements,n=t.x,i=t.y,s=t.z;return e[0]*=n,e[4]*=i,e[8]*=s,e[1]*=n,e[5]*=i,e[9]*=s,e[2]*=n,e[6]*=i,e[10]*=s,e[3]*=n,e[7]*=i,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),s=1-n,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+n,c*a-i*l,c*l+i*a,0,c*a+i*l,h*a+n,h*l-i*o,0,c*l-i*a,h*l+i*o,s*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,s,o){return this.set(1,n,s,0,t,1,o,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,p=s*u,x=o*h,m=o*u,g=a*u,y=l*c,_=l*h,T=l*u,w=n.x,A=n.y,v=n.z;return i[0]=(1-(x+g))*w,i[1]=(f+T)*w,i[2]=(p-_)*w,i[3]=0,i[4]=(f-T)*A,i[5]=(1-(d+g))*A,i[6]=(m+y)*A,i[7]=0,i[8]=(p+_)*v,i[9]=(m-y)*v,i[10]=(1-(d+x))*v,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let s=Ro.set(i[0],i[1],i[2]).length();const o=Ro.set(i[4],i[5],i[6]).length(),a=Ro.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),t.x=i[12],t.y=i[13],t.z=i[14],Ni.copy(this);const c=1/s,h=1/o,u=1/a;return Ni.elements[0]*=c,Ni.elements[1]*=c,Ni.elements[2]*=c,Ni.elements[4]*=h,Ni.elements[5]*=h,Ni.elements[6]*=h,Ni.elements[8]*=u,Ni.elements[9]*=u,Ni.elements[10]*=u,e.setFromRotationMatrix(Ni),n.x=s,n.y=o,n.z=a,this}makePerspective(t,e,n,i,s,o,a=As){const l=this.elements,c=2*s/(e-t),h=2*s/(n-i),u=(e+t)/(e-t),d=(n+i)/(n-i);let f,p;if(a===As)f=-(o+s)/(o-s),p=-2*o*s/(o-s);else if(a===yu)f=-o/(o-s),p=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,i,s,o,a=As){const l=this.elements,c=1/(e-t),h=1/(n-i),u=1/(o-s),d=(e+t)*c,f=(n+i)*h;let p,x;if(a===As)p=(o+s)*u,x=-2*u;else if(a===yu)p=s*u,x=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=x,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}};const Ro=new U,Ni=new Ue,Wb=new U(0,0,0),qb=new U(1,1,1),Ws=new U,Xc=new U,si=new U,Lx=new Ue,Ux=new io;let xr=class nS{constructor(t=0,e=0,n=0,i=nS.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,s=i[0],o=i[4],a=i[8],l=i[1],c=i[5],h=i[9],u=i[2],d=i[6],f=i[10];switch(e){case"XYZ":this._y=Math.asin(An(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-An(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(An(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-An(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(An(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-An(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return Lx.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Lx,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Ux.setFromEuler(this),this.setFromQuaternion(Ux,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}};xr.DEFAULT_ORDER="XYZ";let iS=class{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}},Xb=0;const Bx=new U,Co=new io,ls=new Ue,Yc=new U,fl=new U,Yb=new U,jb=new io,Ox=new U(1,0,0),zx=new U(0,1,0),Gx=new U(0,0,1),kx={type:"added"},Kb={type:"removed"},Po={type:"childadded",child:null},Id={type:"childremoved",child:null};let Wn=class ru extends mo{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Xb++}),this.uuid=Za(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ru.DEFAULT_UP.clone();const t=new U,e=new xr,n=new io,i=new U(1,1,1);function s(){n.setFromEuler(e,!1)}function o(){e.setFromQuaternion(n,void 0,!1)}e._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Ue},normalMatrix:{value:new ie}}),this.matrix=new Ue,this.matrixWorld=new Ue,this.matrixAutoUpdate=ru.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=ru.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new iS,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Co.setFromAxisAngle(t,e),this.quaternion.multiply(Co),this}rotateOnWorldAxis(t,e){return Co.setFromAxisAngle(t,e),this.quaternion.premultiply(Co),this}rotateX(t){return this.rotateOnAxis(Ox,t)}rotateY(t){return this.rotateOnAxis(zx,t)}rotateZ(t){return this.rotateOnAxis(Gx,t)}translateOnAxis(t,e){return Bx.copy(t).applyQuaternion(this.quaternion),this.position.add(Bx.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Ox,t)}translateY(t){return this.translateOnAxis(zx,t)}translateZ(t){return this.translateOnAxis(Gx,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(ls.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?Yc.copy(t):Yc.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),fl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ls.lookAt(fl,Yc,this.up):ls.lookAt(Yc,fl,this.up),this.quaternion.setFromRotationMatrix(ls),i&&(ls.extractRotation(i.matrixWorld),Co.setFromRotationMatrix(ls),this.quaternion.premultiply(Co.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(kx),Po.child=t,this.dispatchEvent(Po),Po.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Kb),Id.child=t,this.dispatchEvent(Id),Id.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),ls.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),ls.multiply(t.parent.matrixWorld)),t.applyMatrix4(ls),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(kx),Po.child=t,this.dispatchEvent(Po),Po.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(fl,t,Yb),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(fl,jb,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));i.material=a}else i.material=s(t.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];i.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(n.geometries=a),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f),p.length>0&&(n.nodes=p)}return n.object=i,n;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}};Wn.DEFAULT_UP=new U(0,1,0);Wn.DEFAULT_MATRIX_AUTO_UPDATE=!0;Wn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Ri=new U,cs=new U,Dd=new U,hs=new U,Fo=new U,Io=new U,Vx=new U,Ld=new U,Ud=new U,Bd=new U,Od=new Je,zd=new Je,Gd=new Je;let pl=class ca{constructor(t=new U,e=new U,n=new U){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Ri.subVectors(t,e),i.cross(Ri);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(t,e,n,i,s){Ri.subVectors(i,e),cs.subVectors(n,e),Dd.subVectors(t,e);const o=Ri.dot(Ri),a=Ri.dot(cs),l=Ri.dot(Dd),c=cs.dot(cs),h=cs.dot(Dd),u=o*c-a*a;if(u===0)return s.set(0,0,0),null;const d=1/u,f=(c*l-a*h)*d,p=(o*h-a*l)*d;return s.set(1-f-p,p,f)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,hs)===null?!1:hs.x>=0&&hs.y>=0&&hs.x+hs.y<=1}static getInterpolation(t,e,n,i,s,o,a,l){return this.getBarycoord(t,e,n,i,hs)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,hs.x),l.addScaledVector(o,hs.y),l.addScaledVector(a,hs.z),l)}static getInterpolatedAttribute(t,e,n,i,s,o){return Od.setScalar(0),zd.setScalar(0),Gd.setScalar(0),Od.fromBufferAttribute(t,e),zd.fromBufferAttribute(t,n),Gd.fromBufferAttribute(t,i),o.setScalar(0),o.addScaledVector(Od,s.x),o.addScaledVector(zd,s.y),o.addScaledVector(Gd,s.z),o}static isFrontFacing(t,e,n,i){return Ri.subVectors(n,e),cs.subVectors(t,e),Ri.cross(cs).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ri.subVectors(this.c,this.b),cs.subVectors(this.a,this.b),Ri.cross(cs).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return ca.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return ca.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,s){return ca.getInterpolation(t,this.a,this.b,this.c,e,n,i,s)}containsPoint(t){return ca.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return ca.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,s=this.c;let o,a;Fo.subVectors(i,n),Io.subVectors(s,n),Ld.subVectors(t,n);const l=Fo.dot(Ld),c=Io.dot(Ld);if(l<=0&&c<=0)return e.copy(n);Ud.subVectors(t,i);const h=Fo.dot(Ud),u=Io.dot(Ud);if(h>=0&&u<=h)return e.copy(i);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),e.copy(n).addScaledVector(Fo,o);Bd.subVectors(t,s);const f=Fo.dot(Bd),p=Io.dot(Bd);if(p>=0&&f<=p)return e.copy(s);const x=f*c-l*p;if(x<=0&&c>=0&&p<=0)return a=c/(c-p),e.copy(n).addScaledVector(Io,a);const m=h*p-f*u;if(m<=0&&u-h>=0&&f-p>=0)return Vx.subVectors(s,i),a=(u-h)/(u-h+(f-p)),e.copy(i).addScaledVector(Vx,a);const g=1/(m+x+d);return o=x*g,a=d*g,e.copy(n).addScaledVector(Fo,o).addScaledVector(Io,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}};const sS={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},qs={h:0,s:0,l:0},jc={h:0,s:0,l:0};function kd(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}let ae=class{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Xi){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,Me.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=Me.workingColorSpace){return this.r=t,this.g=e,this.b=n,Me.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=Me.workingColorSpace){if(t=rg(t,1),e=An(e,0,1),n=An(n,0,1),e===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+e):n+e-n*e,o=2*n-s;this.r=kd(o,s,t+1/3),this.g=kd(o,s,t),this.b=kd(o,s,t-1/3)}return Me.toWorkingColorSpace(this,i),this}setStyle(t,e=Xi){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=i[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Xi){const n=sS[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=wa(t.r),this.g=wa(t.g),this.b=wa(t.b),this}copyLinearToSRGB(t){return this.r=Ed(t.r),this.g=Ed(t.g),this.b=Ed(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Xi){return Me.fromWorkingColorSpace(yn.copy(this),t),Math.round(An(yn.r*255,0,255))*65536+Math.round(An(yn.g*255,0,255))*256+Math.round(An(yn.b*255,0,255))}getHexString(t=Xi){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Me.workingColorSpace){Me.fromWorkingColorSpace(yn.copy(this),e);const n=yn.r,i=yn.g,s=yn.b,o=Math.max(n,i,s),a=Math.min(n,i,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=Me.workingColorSpace){return Me.fromWorkingColorSpace(yn.copy(this),e),t.r=yn.r,t.g=yn.g,t.b=yn.b,t}getStyle(t=Xi){Me.fromWorkingColorSpace(yn.copy(this),t);const e=yn.r,n=yn.g,i=yn.b;return t!==Xi?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){return this.getHSL(qs),this.setHSL(qs.h+t,qs.s+e,qs.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(qs),t.getHSL(jc);const n=jl(qs.h,jc.h,e),i=jl(qs.s,jc.s,e),s=jl(qs.l,jc.l,e);return this.setHSL(n,i,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,s=t.elements;return this.r=s[0]*e+s[3]*n+s[6]*i,this.g=s[1]*e+s[4]*n+s[7]*i,this.b=s[2]*e+s[5]*n+s[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};const yn=new ae;ae.NAMES=sS;let Zb=0,xo=class extends mo{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Zb++}),this.uuid=Za(),this.name="",this.type="Material",this.blending=Ea,this.side=gr,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=fp,this.blendDst=pp,this.blendEquation=qr,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new ae(0,0,0),this.blendAlpha=0,this.depthFunc=La,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=wx,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=bo,this.stencilZFail=bo,this.stencilZPass=bo,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Ea&&(n.blending=this.blending),this.side!==gr&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==fp&&(n.blendSrc=this.blendSrc),this.blendDst!==pp&&(n.blendDst=this.blendDst),this.blendEquation!==qr&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==La&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==wx&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==bo&&(n.stencilFail=this.stencilFail),this.stencilZFail!==bo&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==bo&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(e){const s=i(t.textures),o=i(t.images);s.length>0&&(n.textures=s),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const i=e.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=e[s].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}},gc=class extends xo{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new ae(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new xr,this.combine=By,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}};const qe=new U,Kc=new Jt;let $i=class{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=Nx,this.updateRanges=[],this.gpuType=Ki,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)Kc.fromBufferAttribute(this,e),Kc.applyMatrix3(t),this.setXY(e,Kc.x,Kc.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)qe.fromBufferAttribute(this,e),qe.applyMatrix3(t),this.setXYZ(e,qe.x,qe.y,qe.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)qe.fromBufferAttribute(this,e),qe.applyMatrix4(t),this.setXYZ(e,qe.x,qe.y,qe.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)qe.fromBufferAttribute(this,e),qe.applyNormalMatrix(t),this.setXYZ(e,qe.x,qe.y,qe.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)qe.fromBufferAttribute(this,e),qe.transformDirection(t),this.setXYZ(e,qe.x,qe.y,qe.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=la(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Un(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=la(e,this.array)),e}setX(t,e){return this.normalized&&(e=Un(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=la(e,this.array)),e}setY(t,e){return this.normalized&&(e=Un(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=la(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Un(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=la(e,this.array)),e}setW(t,e){return this.normalized&&(e=Un(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=Un(e,this.array),n=Un(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=Un(e,this.array),n=Un(n,this.array),i=Un(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=Un(e,this.array),n=Un(n,this.array),i=Un(i,this.array),s=Un(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Nx&&(t.usage=this.usage),t}},rS=class extends $i{constructor(t,e,n){super(new Uint16Array(t),e,n)}},oS=class extends $i{constructor(t,e,n){super(new Uint32Array(t),e,n)}},Cn=class extends $i{constructor(t,e,n){super(new Float32Array(t),e,n)}},Qb=0;const xi=new Ue,Vd=new Wn,Do=new U,ri=new go,ml=new go,ln=new U;let Wi=class aS extends mo{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Qb++}),this.uuid=Za(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Zy(t)?oS:rS)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new ie().getNormalMatrix(t);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(t),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return xi.makeRotationFromQuaternion(t),this.applyMatrix4(xi),this}rotateX(t){return xi.makeRotationX(t),this.applyMatrix4(xi),this}rotateY(t){return xi.makeRotationY(t),this.applyMatrix4(xi),this}rotateZ(t){return xi.makeRotationZ(t),this.applyMatrix4(xi),this}translate(t,e,n){return xi.makeTranslation(t,e,n),this.applyMatrix4(xi),this}scale(t,e,n){return xi.makeScale(t,e,n),this.applyMatrix4(xi),this}lookAt(t){return Vd.lookAt(t),Vd.updateMatrix(),this.applyMatrix4(Vd.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Do).negate(),this.translate(Do.x,Do.y,Do.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const s=t[n];e.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new Cn(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new go);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new U(-1/0,-1/0,-1/0),new U(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,i=e.length;n<i;n++){const s=e[n];ri.setFromBufferAttribute(s),this.morphTargetsRelative?(ln.addVectors(this.boundingBox.min,ri.min),this.boundingBox.expandByPoint(ln),ln.addVectors(this.boundingBox.max,ri.max),this.boundingBox.expandByPoint(ln)):(this.boundingBox.expandByPoint(ri.min),this.boundingBox.expandByPoint(ri.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Qa);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new U,1/0);return}if(t){const n=this.boundingSphere.center;if(ri.setFromBufferAttribute(t),e)for(let s=0,o=e.length;s<o;s++){const a=e[s];ml.setFromBufferAttribute(a),this.morphTargetsRelative?(ln.addVectors(ri.min,ml.min),ri.expandByPoint(ln),ln.addVectors(ri.max,ml.max),ri.expandByPoint(ln)):(ri.expandByPoint(ml.min),ri.expandByPoint(ml.max))}ri.getCenter(n);let i=0;for(let s=0,o=t.count;s<o;s++)ln.fromBufferAttribute(t,s),i=Math.max(i,n.distanceToSquared(ln));if(e)for(let s=0,o=e.length;s<o;s++){const a=e[s],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)ln.fromBufferAttribute(a,c),l&&(Do.fromBufferAttribute(t,c),ln.add(Do)),i=Math.max(i,n.distanceToSquared(ln))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position,i=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new $i(new Float32Array(4*n.count),4));const o=this.getAttribute("tangent"),a=[],l=[];for(let R=0;R<n.count;R++)a[R]=new U,l[R]=new U;const c=new U,h=new U,u=new U,d=new Jt,f=new Jt,p=new Jt,x=new U,m=new U;function g(R,W,S){c.fromBufferAttribute(n,R),h.fromBufferAttribute(n,W),u.fromBufferAttribute(n,S),d.fromBufferAttribute(s,R),f.fromBufferAttribute(s,W),p.fromBufferAttribute(s,S),h.sub(c),u.sub(c),f.sub(d),p.sub(d);const b=1/(f.x*p.y-p.x*f.y);isFinite(b)&&(x.copy(h).multiplyScalar(p.y).addScaledVector(u,-f.y).multiplyScalar(b),m.copy(u).multiplyScalar(f.x).addScaledVector(h,-p.x).multiplyScalar(b),a[R].add(x),a[W].add(x),a[S].add(x),l[R].add(m),l[W].add(m),l[S].add(m))}let y=this.groups;y.length===0&&(y=[{start:0,count:t.count}]);for(let R=0,W=y.length;R<W;++R){const S=y[R],b=S.start,H=S.count;for(let z=b,Z=b+H;z<Z;z+=3)g(t.getX(z+0),t.getX(z+1),t.getX(z+2))}const _=new U,T=new U,w=new U,A=new U;function v(R){w.fromBufferAttribute(i,R),A.copy(w);const W=a[R];_.copy(W),_.sub(w.multiplyScalar(w.dot(W))).normalize(),T.crossVectors(A,W);const b=T.dot(l[R])<0?-1:1;o.setXYZW(R,_.x,_.y,_.z,b)}for(let R=0,W=y.length;R<W;++R){const S=y[R],b=S.start,H=S.count;for(let z=b,Z=b+H;z<Z;z+=3)v(t.getX(z+0)),v(t.getX(z+1)),v(t.getX(z+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new $i(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let d=0,f=n.count;d<f;d++)n.setXYZ(d,0,0,0);const i=new U,s=new U,o=new U,a=new U,l=new U,c=new U,h=new U,u=new U;if(t)for(let d=0,f=t.count;d<f;d+=3){const p=t.getX(d+0),x=t.getX(d+1),m=t.getX(d+2);i.fromBufferAttribute(e,p),s.fromBufferAttribute(e,x),o.fromBufferAttribute(e,m),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),a.fromBufferAttribute(n,p),l.fromBufferAttribute(n,x),c.fromBufferAttribute(n,m),a.add(h),l.add(h),c.add(h),n.setXYZ(p,a.x,a.y,a.z),n.setXYZ(x,l.x,l.y,l.z),n.setXYZ(m,c.x,c.y,c.z)}else for(let d=0,f=e.count;d<f;d+=3)i.fromBufferAttribute(e,d+0),s.fromBufferAttribute(e,d+1),o.fromBufferAttribute(e,d+2),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),n.setXYZ(d+0,h.x,h.y,h.z),n.setXYZ(d+1,h.x,h.y,h.z),n.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)ln.fromBufferAttribute(t,e),ln.normalize(),t.setXYZ(e,ln.x,ln.y,ln.z)}toNonIndexed(){function t(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let f=0,p=0;for(let x=0,m=l.length;x<m;x++){a.isInterleavedBufferAttribute?f=l[x]*a.data.stride+a.offset:f=l[x]*h;for(let g=0;g<h;g++)d[p++]=c[f++]}return new $i(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new aS,n=this.index.array,i=this.attributes;for(const a in i){const l=i[a],c=t(l,n);e.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[],c=s[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],f=t(d,n);l.push(f)}e.morphAttributes[a]=l}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const l in n){const c=n[l];t.data.attributes[l]=c.toJSON(t.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u];h.push(f.toJSON(t.data))}h.length>0&&(i[l]=h,s=!0)}s&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone(e));const i=t.attributes;for(const c in i){const h=i[c];this.setAttribute(c,h.clone(e))}const s=t.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,f=u.length;d<f;d++)h.push(u[d].clone(e));this.morphAttributes[c]=h}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}};const Hx=new Ue,Cr=new og,Zc=new Qa,$x=new U,Qc=new U,Jc=new U,th=new U,Hd=new U,eh=new U,Wx=new U,nh=new U;let Rn=class extends Wn{constructor(t=new Wi,e=new gc){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,o=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const a=this.morphTargetInfluences;if(s&&a){eh.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const h=a[l],u=s[l];h!==0&&(Hd.fromBufferAttribute(u,t),o?eh.addScaledVector(Hd,h):eh.addScaledVector(Hd.sub(e),h))}e.add(eh)}return e}raycast(t,e){const n=this.geometry,i=this.material,s=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),Zc.copy(n.boundingSphere),Zc.applyMatrix4(s),Cr.copy(t.ray).recast(t.near),!(Zc.containsPoint(Cr.origin)===!1&&(Cr.intersectSphere(Zc,$x)===null||Cr.origin.distanceToSquared($x)>(t.far-t.near)**2))&&(Hx.copy(s).invert(),Cr.copy(t.ray).applyMatrix4(Hx),!(n.boundingBox!==null&&Cr.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,Cr)))}_computeIntersections(t,e,n){let i;const s=this.geometry,o=this.material,a=s.index,l=s.attributes.position,c=s.attributes.uv,h=s.attributes.uv1,u=s.attributes.normal,d=s.groups,f=s.drawRange;if(a!==null)if(Array.isArray(o))for(let p=0,x=d.length;p<x;p++){const m=d[p],g=o[m.materialIndex],y=Math.max(m.start,f.start),_=Math.min(a.count,Math.min(m.start+m.count,f.start+f.count));for(let T=y,w=_;T<w;T+=3){const A=a.getX(T),v=a.getX(T+1),R=a.getX(T+2);i=ih(this,g,t,n,c,h,u,A,v,R),i&&(i.faceIndex=Math.floor(T/3),i.face.materialIndex=m.materialIndex,e.push(i))}}else{const p=Math.max(0,f.start),x=Math.min(a.count,f.start+f.count);for(let m=p,g=x;m<g;m+=3){const y=a.getX(m),_=a.getX(m+1),T=a.getX(m+2);i=ih(this,o,t,n,c,h,u,y,_,T),i&&(i.faceIndex=Math.floor(m/3),e.push(i))}}else if(l!==void 0)if(Array.isArray(o))for(let p=0,x=d.length;p<x;p++){const m=d[p],g=o[m.materialIndex],y=Math.max(m.start,f.start),_=Math.min(l.count,Math.min(m.start+m.count,f.start+f.count));for(let T=y,w=_;T<w;T+=3){const A=T,v=T+1,R=T+2;i=ih(this,g,t,n,c,h,u,A,v,R),i&&(i.faceIndex=Math.floor(T/3),i.face.materialIndex=m.materialIndex,e.push(i))}}else{const p=Math.max(0,f.start),x=Math.min(l.count,f.start+f.count);for(let m=p,g=x;m<g;m+=3){const y=m,_=m+1,T=m+2;i=ih(this,o,t,n,c,h,u,y,_,T),i&&(i.faceIndex=Math.floor(m/3),e.push(i))}}}};function Jb(r,t,e,n,i,s,o,a){let l;if(t.side===Zn?l=n.intersectTriangle(o,s,i,!0,a):l=n.intersectTriangle(i,s,o,t.side===gr,a),l===null)return null;nh.copy(a),nh.applyMatrix4(r.matrixWorld);const c=e.ray.origin.distanceTo(nh);return c<e.near||c>e.far?null:{distance:c,point:nh.clone(),object:r}}function ih(r,t,e,n,i,s,o,a,l,c){r.getVertexPosition(a,Qc),r.getVertexPosition(l,Jc),r.getVertexPosition(c,th);const h=Jb(r,t,e,n,Qc,Jc,th,Wx);if(h){const u=new U;pl.getBarycoord(Wx,Qc,Jc,th,u),i&&(h.uv=pl.getInterpolatedAttribute(i,a,l,c,u,new Jt)),s&&(h.uv1=pl.getInterpolatedAttribute(s,a,l,c,u,new Jt)),o&&(h.normal=pl.getInterpolatedAttribute(o,a,l,c,u,new U),h.normal.dot(n.direction)>0&&h.normal.multiplyScalar(-1));const d={a,b:l,c,normal:new U,materialIndex:0};pl.getNormal(Qc,Jc,th,d.normal),h.face=d,h.barycoord=u}return h}let xc=class lS extends Wi{constructor(t=1,e=1,n=1,i=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:s,depthSegments:o};const a=this;i=Math.floor(i),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;p("z","y","x",-1,-1,n,e,t,o,s,0),p("z","y","x",1,-1,n,e,-t,o,s,1),p("x","z","y",1,1,t,n,e,i,o,2),p("x","z","y",1,-1,t,n,-e,i,o,3),p("x","y","z",1,-1,t,e,n,i,s,4),p("x","y","z",-1,-1,t,e,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new Cn(c,3)),this.setAttribute("normal",new Cn(h,3)),this.setAttribute("uv",new Cn(u,2));function p(x,m,g,y,_,T,w,A,v,R,W){const S=T/v,b=w/R,H=T/2,z=w/2,Z=A/2,tt=v+1,q=R+1;let nt=0,$=0;const ct=new U;for(let ut=0;ut<q;ut++){const mt=ut*b-z;for(let ne=0;ne<tt;ne++){const ce=ne*S-H;ct[x]=ce*y,ct[m]=mt*_,ct[g]=Z,c.push(ct.x,ct.y,ct.z),ct[x]=0,ct[m]=0,ct[g]=A>0?1:-1,h.push(ct.x,ct.y,ct.z),u.push(ne/v),u.push(1-ut/R),nt+=1}}for(let ut=0;ut<R;ut++)for(let mt=0;mt<v;mt++){const ne=d+mt+tt*ut,ce=d+mt+tt*(ut+1),J=d+(mt+1)+tt*(ut+1),lt=d+(mt+1)+tt*ut;l.push(ne,ce,lt),l.push(ce,J,lt),$+=6}a.addGroup(f,$,W),f+=$,d+=nt}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new lS(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}};function Ga(r){const t={};for(const e in r){t[e]={};for(const n in r[e]){const i=r[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function Bn(r){const t={};for(let e=0;e<r.length;e++){const n=Ga(r[e]);for(const i in n)t[i]=n[i]}return t}function tE(r){const t=[];for(let e=0;e<r.length;e++)t.push(r[e].clone());return t}function cS(r){const t=r.getRenderTarget();return t===null?r.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:Me.workingColorSpace}const eE={clone:Ga,merge:Bn};var nE=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,iE=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;let _r=class extends xo{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=nE,this.fragmentShader=iE,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Ga(t.uniforms),this.uniformsGroups=tE(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const o=this.uniforms[i].value;o&&o.isTexture?e.uniforms[i]={type:"t",value:o.toJSON(t).uuid}:o&&o.isColor?e.uniforms[i]={type:"c",value:o.getHex()}:o&&o.isVector2?e.uniforms[i]={type:"v2",value:o.toArray()}:o&&o.isVector3?e.uniforms[i]={type:"v3",value:o.toArray()}:o&&o.isVector4?e.uniforms[i]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?e.uniforms[i]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?e.uniforms[i]={type:"m4",value:o.toArray()}:e.uniforms[i]={value:o}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}},hS=class extends Wn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Ue,this.projectionMatrix=new Ue,this.projectionMatrixInverse=new Ue,this.coordinateSystem=As}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}};const Xs=new U,qx=new Jt,Xx=new Jt;let Si=class extends hS{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=sc*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(Yl*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return sc*2*Math.atan(Math.tan(Yl*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){Xs.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(Xs.x,Xs.y).multiplyScalar(-t/Xs.z),Xs.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(Xs.x,Xs.y).multiplyScalar(-t/Xs.z)}getViewSize(t,e){return this.getViewBounds(t,qx,Xx),e.subVectors(Xx,qx)}setViewOffset(t,e,n,i,s,o){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(Yl*.5*this.fov)/this.zoom,n=2*e,i=this.aspect*n,s=-.5*i;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*i/l,e-=o.offsetY*n/c,i*=o.width/l,n*=o.height/c}const a=this.filmOffset;a!==0&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}};const Lo=-90,Uo=1;let sE=class extends Wn{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Si(Lo,Uo,t,e);i.layers=this.layers,this.add(i);const s=new Si(Lo,Uo,t,e);s.layers=this.layers,this.add(s);const o=new Si(Lo,Uo,t,e);o.layers=this.layers,this.add(o);const a=new Si(Lo,Uo,t,e);a.layers=this.layers,this.add(a);const l=new Si(Lo,Uo,t,e);l.layers=this.layers,this.add(l);const c=new Si(Lo,Uo,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,s,o,a,l]=e;for(const c of e)this.remove(c);if(t===As)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===yu)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,o,a,l,c,h]=this.children,u=t.getRenderTarget(),d=t.getActiveCubeFace(),f=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const x=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,s),t.setRenderTarget(n,1,i),t.render(e,o),t.setRenderTarget(n,2,i),t.render(e,a),t.setRenderTarget(n,3,i),t.render(e,l),t.setRenderTarget(n,4,i),t.render(e,c),n.texture.generateMipmaps=x,t.setRenderTarget(n,5,i),t.render(e,h),t.setRenderTarget(u,d,f),t.xr.enabled=p,n.texture.needsPMREMUpdate=!0}},uS=class extends qi{constructor(t,e,n,i,s,o,a,l,c,h){t=t!==void 0?t:[],e=e!==void 0?e:Ua,super(t,e,n,i,s,o,a,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}},rE=class extends no{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new uS(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:Bi}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new xc(5,5,5),s=new _r({name:"CubemapFromEquirect",uniforms:Ga(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Zn,blending:dr});s.uniforms.tEquirect.value=e;const o=new Rn(i,s),a=e.minFilter;return e.minFilter===Kr&&(e.minFilter=Bi),new sE(1,10,this).update(t,o),e.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,i){const s=t.getRenderTarget();for(let o=0;o<6;o++)t.setRenderTarget(this,o),t.clear(e,n,i);t.setRenderTarget(s)}};const $d=new U,oE=new U,aE=new ie;let sr=class{constructor(t=new U(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=$d.subVectors(n,e).cross(oE.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta($d),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:e.copy(t.start).addScaledVector(n,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||aE.getNormalMatrix(t),i=this.coplanarPoint($d).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}};const Pr=new Qa,sh=new U;let ag=class{constructor(t=new sr,e=new sr,n=new sr,i=new sr,s=new sr,o=new sr){this.planes=[t,e,n,i,s,o]}set(t,e,n,i,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(s),a[5].copy(o),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=As){const n=this.planes,i=t.elements,s=i[0],o=i[1],a=i[2],l=i[3],c=i[4],h=i[5],u=i[6],d=i[7],f=i[8],p=i[9],x=i[10],m=i[11],g=i[12],y=i[13],_=i[14],T=i[15];if(n[0].setComponents(l-s,d-c,m-f,T-g).normalize(),n[1].setComponents(l+s,d+c,m+f,T+g).normalize(),n[2].setComponents(l+o,d+h,m+p,T+y).normalize(),n[3].setComponents(l-o,d-h,m-p,T-y).normalize(),n[4].setComponents(l-a,d-u,m-x,T-_).normalize(),e===As)n[5].setComponents(l+a,d+u,m+x,T+_).normalize();else if(e===yu)n[5].setComponents(a,u,x,_).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),Pr.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),Pr.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(Pr)}intersectsSprite(t){return Pr.center.set(0,0,0),Pr.radius=.7071067811865476,Pr.applyMatrix4(t.matrixWorld),this.intersectsSphere(Pr)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(sh.x=i.normal.x>0?t.max.x:t.min.x,sh.y=i.normal.y>0?t.max.y:t.min.y,sh.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(sh)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}};function dS(){let r=null,t=!1,e=null,n=null;function i(s,o){e(s,o),n=r.requestAnimationFrame(i)}return{start:function(){t!==!0&&e!==null&&(n=r.requestAnimationFrame(i),t=!0)},stop:function(){r.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){r=s}}}function lE(r){const t=new WeakMap;function e(a,l){const c=a.array,h=a.usage,u=c.byteLength,d=r.createBuffer();r.bindBuffer(l,d),r.bufferData(l,c,h),a.onUploadCallback();let f;if(c instanceof Float32Array)f=r.FLOAT;else if(c instanceof Uint16Array)a.isFloat16BufferAttribute?f=r.HALF_FLOAT:f=r.UNSIGNED_SHORT;else if(c instanceof Int16Array)f=r.SHORT;else if(c instanceof Uint32Array)f=r.UNSIGNED_INT;else if(c instanceof Int32Array)f=r.INT;else if(c instanceof Int8Array)f=r.BYTE;else if(c instanceof Uint8Array)f=r.UNSIGNED_BYTE;else if(c instanceof Uint8ClampedArray)f=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:d,type:f,bytesPerElement:c.BYTES_PER_ELEMENT,version:a.version,size:u}}function n(a,l,c){const h=l.array,u=l.updateRanges;if(r.bindBuffer(c,a),u.length===0)r.bufferSubData(c,0,h);else{u.sort((f,p)=>f.start-p.start);let d=0;for(let f=1;f<u.length;f++){const p=u[d],x=u[f];x.start<=p.start+p.count+1?p.count=Math.max(p.count,x.start+x.count-p.start):(++d,u[d]=x)}u.length=d+1;for(let f=0,p=u.length;f<p;f++){const x=u[f];r.bufferSubData(c,x.start*h.BYTES_PER_ELEMENT,h,x.start,x.count)}l.clearUpdateRanges()}l.onUploadCallback()}function i(a){return a.isInterleavedBufferAttribute&&(a=a.data),t.get(a)}function s(a){a.isInterleavedBufferAttribute&&(a=a.data);const l=t.get(a);l&&(r.deleteBuffer(l.buffer),t.delete(a))}function o(a,l){if(a.isInterleavedBufferAttribute&&(a=a.data),a.isGLBufferAttribute){const h=t.get(a);(!h||h.version<a.version)&&t.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}const c=t.get(a);if(c===void 0)t.set(a,e(a,l));else if(c.version<a.version){if(c.size!==a.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(c.buffer,a,l),c.version=a.version}}return{get:i,remove:s,update:o}}class _o extends Wi{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const s=t/2,o=e/2,a=Math.floor(n),l=Math.floor(i),c=a+1,h=l+1,u=t/a,d=e/l,f=[],p=[],x=[],m=[];for(let g=0;g<h;g++){const y=g*d-o;for(let _=0;_<c;_++){const T=_*u-s;p.push(T,-y,0),x.push(0,0,1),m.push(_/a),m.push(1-g/l)}}for(let g=0;g<l;g++)for(let y=0;y<a;y++){const _=y+c*g,T=y+c*(g+1),w=y+1+c*(g+1),A=y+1+c*g;f.push(_,T,A),f.push(T,w,A)}this.setIndex(f),this.setAttribute("position",new Cn(p,3)),this.setAttribute("normal",new Cn(x,3)),this.setAttribute("uv",new Cn(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new _o(t.width,t.height,t.widthSegments,t.heightSegments)}}var cE=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,hE=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,uE=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,dE=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,fE=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,pE=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,mE=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,gE=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,xE=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,_E=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,yE=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,SE=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,TE=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,ME=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,vE=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,bE=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,EE=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,AE=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,wE=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,NE=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,RE=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,CE=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,PE=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,FE=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,IE=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,DE=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,LE=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,UE=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,BE=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,OE=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,zE="gl_FragColor = linearToOutputTexel( gl_FragColor );",GE=`
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,kE=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,VE=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,HE=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,$E=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,WE=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,qE=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,XE=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,YE=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,jE=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,KE=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,ZE=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,QE=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,JE=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,t1=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,e1=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,n1=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,i1=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,s1=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,r1=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,o1=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,a1=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,l1=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,c1=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,h1=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,u1=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,d1=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,f1=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,p1=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,m1=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,g1=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,x1=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,_1=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,y1=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,S1=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,T1=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,M1=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,v1=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,b1=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,E1=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,A1=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,w1=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,N1=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,R1=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,C1=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,P1=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,F1=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,I1=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,D1=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,L1=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,U1=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,B1=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,O1=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,z1=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,G1=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,k1=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,V1=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,H1=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,$1=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,W1=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,q1=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,X1=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Y1=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,j1=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,K1=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Z1=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Q1=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,J1=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,tA=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,eA=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,nA=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,iA=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,sA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,rA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,oA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,aA=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const lA=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,cA=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,hA=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,uA=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,dA=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,fA=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,pA=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,mA=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,gA=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,xA=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,_A=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,yA=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,SA=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,TA=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,MA=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,vA=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,bA=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,EA=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,AA=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,wA=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,NA=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,RA=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,CA=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,PA=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,FA=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,IA=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,DA=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,LA=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,UA=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,BA=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,OA=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,zA=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,GA=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,kA=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Qt={alphahash_fragment:cE,alphahash_pars_fragment:hE,alphamap_fragment:uE,alphamap_pars_fragment:dE,alphatest_fragment:fE,alphatest_pars_fragment:pE,aomap_fragment:mE,aomap_pars_fragment:gE,batching_pars_vertex:xE,batching_vertex:_E,begin_vertex:yE,beginnormal_vertex:SE,bsdfs:TE,iridescence_fragment:ME,bumpmap_pars_fragment:vE,clipping_planes_fragment:bE,clipping_planes_pars_fragment:EE,clipping_planes_pars_vertex:AE,clipping_planes_vertex:wE,color_fragment:NE,color_pars_fragment:RE,color_pars_vertex:CE,color_vertex:PE,common:FE,cube_uv_reflection_fragment:IE,defaultnormal_vertex:DE,displacementmap_pars_vertex:LE,displacementmap_vertex:UE,emissivemap_fragment:BE,emissivemap_pars_fragment:OE,colorspace_fragment:zE,colorspace_pars_fragment:GE,envmap_fragment:kE,envmap_common_pars_fragment:VE,envmap_pars_fragment:HE,envmap_pars_vertex:$E,envmap_physical_pars_fragment:e1,envmap_vertex:WE,fog_vertex:qE,fog_pars_vertex:XE,fog_fragment:YE,fog_pars_fragment:jE,gradientmap_pars_fragment:KE,lightmap_pars_fragment:ZE,lights_lambert_fragment:QE,lights_lambert_pars_fragment:JE,lights_pars_begin:t1,lights_toon_fragment:n1,lights_toon_pars_fragment:i1,lights_phong_fragment:s1,lights_phong_pars_fragment:r1,lights_physical_fragment:o1,lights_physical_pars_fragment:a1,lights_fragment_begin:l1,lights_fragment_maps:c1,lights_fragment_end:h1,logdepthbuf_fragment:u1,logdepthbuf_pars_fragment:d1,logdepthbuf_pars_vertex:f1,logdepthbuf_vertex:p1,map_fragment:m1,map_pars_fragment:g1,map_particle_fragment:x1,map_particle_pars_fragment:_1,metalnessmap_fragment:y1,metalnessmap_pars_fragment:S1,morphinstance_vertex:T1,morphcolor_vertex:M1,morphnormal_vertex:v1,morphtarget_pars_vertex:b1,morphtarget_vertex:E1,normal_fragment_begin:A1,normal_fragment_maps:w1,normal_pars_fragment:N1,normal_pars_vertex:R1,normal_vertex:C1,normalmap_pars_fragment:P1,clearcoat_normal_fragment_begin:F1,clearcoat_normal_fragment_maps:I1,clearcoat_pars_fragment:D1,iridescence_pars_fragment:L1,opaque_fragment:U1,packing:B1,premultiplied_alpha_fragment:O1,project_vertex:z1,dithering_fragment:G1,dithering_pars_fragment:k1,roughnessmap_fragment:V1,roughnessmap_pars_fragment:H1,shadowmap_pars_fragment:$1,shadowmap_pars_vertex:W1,shadowmap_vertex:q1,shadowmask_pars_fragment:X1,skinbase_vertex:Y1,skinning_pars_vertex:j1,skinning_vertex:K1,skinnormal_vertex:Z1,specularmap_fragment:Q1,specularmap_pars_fragment:J1,tonemapping_fragment:tA,tonemapping_pars_fragment:eA,transmission_fragment:nA,transmission_pars_fragment:iA,uv_pars_fragment:sA,uv_pars_vertex:rA,uv_vertex:oA,worldpos_vertex:aA,background_vert:lA,background_frag:cA,backgroundCube_vert:hA,backgroundCube_frag:uA,cube_vert:dA,cube_frag:fA,depth_vert:pA,depth_frag:mA,distanceRGBA_vert:gA,distanceRGBA_frag:xA,equirect_vert:_A,equirect_frag:yA,linedashed_vert:SA,linedashed_frag:TA,meshbasic_vert:MA,meshbasic_frag:vA,meshlambert_vert:bA,meshlambert_frag:EA,meshmatcap_vert:AA,meshmatcap_frag:wA,meshnormal_vert:NA,meshnormal_frag:RA,meshphong_vert:CA,meshphong_frag:PA,meshphysical_vert:FA,meshphysical_frag:IA,meshtoon_vert:DA,meshtoon_frag:LA,points_vert:UA,points_frag:BA,shadow_vert:OA,shadow_frag:zA,sprite_vert:GA,sprite_frag:kA},xt={common:{diffuse:{value:new ae(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new ie},alphaMap:{value:null},alphaMapTransform:{value:new ie},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new ie}},envmap:{envMap:{value:null},envMapRotation:{value:new ie},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new ie}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new ie}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new ie},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new ie},normalScale:{value:new Jt(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new ie},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new ie}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new ie}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new ie}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new ae(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new ae(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new ie},alphaTest:{value:0},uvTransform:{value:new ie}},sprite:{diffuse:{value:new ae(16777215)},opacity:{value:1},center:{value:new Jt(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new ie},alphaMap:{value:null},alphaMapTransform:{value:new ie},alphaTest:{value:0}}},Yi={basic:{uniforms:Bn([xt.common,xt.specularmap,xt.envmap,xt.aomap,xt.lightmap,xt.fog]),vertexShader:Qt.meshbasic_vert,fragmentShader:Qt.meshbasic_frag},lambert:{uniforms:Bn([xt.common,xt.specularmap,xt.envmap,xt.aomap,xt.lightmap,xt.emissivemap,xt.bumpmap,xt.normalmap,xt.displacementmap,xt.fog,xt.lights,{emissive:{value:new ae(0)}}]),vertexShader:Qt.meshlambert_vert,fragmentShader:Qt.meshlambert_frag},phong:{uniforms:Bn([xt.common,xt.specularmap,xt.envmap,xt.aomap,xt.lightmap,xt.emissivemap,xt.bumpmap,xt.normalmap,xt.displacementmap,xt.fog,xt.lights,{emissive:{value:new ae(0)},specular:{value:new ae(1118481)},shininess:{value:30}}]),vertexShader:Qt.meshphong_vert,fragmentShader:Qt.meshphong_frag},standard:{uniforms:Bn([xt.common,xt.envmap,xt.aomap,xt.lightmap,xt.emissivemap,xt.bumpmap,xt.normalmap,xt.displacementmap,xt.roughnessmap,xt.metalnessmap,xt.fog,xt.lights,{emissive:{value:new ae(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Qt.meshphysical_vert,fragmentShader:Qt.meshphysical_frag},toon:{uniforms:Bn([xt.common,xt.aomap,xt.lightmap,xt.emissivemap,xt.bumpmap,xt.normalmap,xt.displacementmap,xt.gradientmap,xt.fog,xt.lights,{emissive:{value:new ae(0)}}]),vertexShader:Qt.meshtoon_vert,fragmentShader:Qt.meshtoon_frag},matcap:{uniforms:Bn([xt.common,xt.bumpmap,xt.normalmap,xt.displacementmap,xt.fog,{matcap:{value:null}}]),vertexShader:Qt.meshmatcap_vert,fragmentShader:Qt.meshmatcap_frag},points:{uniforms:Bn([xt.points,xt.fog]),vertexShader:Qt.points_vert,fragmentShader:Qt.points_frag},dashed:{uniforms:Bn([xt.common,xt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Qt.linedashed_vert,fragmentShader:Qt.linedashed_frag},depth:{uniforms:Bn([xt.common,xt.displacementmap]),vertexShader:Qt.depth_vert,fragmentShader:Qt.depth_frag},normal:{uniforms:Bn([xt.common,xt.bumpmap,xt.normalmap,xt.displacementmap,{opacity:{value:1}}]),vertexShader:Qt.meshnormal_vert,fragmentShader:Qt.meshnormal_frag},sprite:{uniforms:Bn([xt.sprite,xt.fog]),vertexShader:Qt.sprite_vert,fragmentShader:Qt.sprite_frag},background:{uniforms:{uvTransform:{value:new ie},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Qt.background_vert,fragmentShader:Qt.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new ie}},vertexShader:Qt.backgroundCube_vert,fragmentShader:Qt.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Qt.cube_vert,fragmentShader:Qt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Qt.equirect_vert,fragmentShader:Qt.equirect_frag},distanceRGBA:{uniforms:Bn([xt.common,xt.displacementmap,{referencePosition:{value:new U},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Qt.distanceRGBA_vert,fragmentShader:Qt.distanceRGBA_frag},shadow:{uniforms:Bn([xt.lights,xt.fog,{color:{value:new ae(0)},opacity:{value:1}}]),vertexShader:Qt.shadow_vert,fragmentShader:Qt.shadow_frag}};Yi.physical={uniforms:Bn([Yi.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new ie},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new ie},clearcoatNormalScale:{value:new Jt(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new ie},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new ie},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new ie},sheen:{value:0},sheenColor:{value:new ae(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new ie},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new ie},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new ie},transmissionSamplerSize:{value:new Jt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new ie},attenuationDistance:{value:0},attenuationColor:{value:new ae(0)},specularColor:{value:new ae(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new ie},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new ie},anisotropyVector:{value:new Jt},anisotropyMap:{value:null},anisotropyMapTransform:{value:new ie}}]),vertexShader:Qt.meshphysical_vert,fragmentShader:Qt.meshphysical_frag};const rh={r:0,b:0,g:0},Fr=new xr,VA=new Ue;function HA(r,t,e,n,i,s,o){const a=new ae(0);let l=s===!0?0:1,c,h,u=null,d=0,f=null;function p(y){let _=y.isScene===!0?y.background:null;return _&&_.isTexture&&(_=(y.backgroundBlurriness>0?e:t).get(_)),_}function x(y){let _=!1;const T=p(y);T===null?g(a,l):T&&T.isColor&&(g(T,1),_=!0);const w=r.xr.getEnvironmentBlendMode();w==="additive"?n.buffers.color.setClear(0,0,0,1,o):w==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,o),(r.autoClear||_)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil))}function m(y,_){const T=p(_);T&&(T.isCubeTexture||T.mapping===qu)?(h===void 0&&(h=new Rn(new xc(1,1,1),new _r({name:"BackgroundCubeMaterial",uniforms:Ga(Yi.backgroundCube.uniforms),vertexShader:Yi.backgroundCube.vertexShader,fragmentShader:Yi.backgroundCube.fragmentShader,side:Zn,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(w,A,v){this.matrixWorld.copyPosition(v.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(h)),Fr.copy(_.backgroundRotation),Fr.x*=-1,Fr.y*=-1,Fr.z*=-1,T.isCubeTexture&&T.isRenderTargetTexture===!1&&(Fr.y*=-1,Fr.z*=-1),h.material.uniforms.envMap.value=T,h.material.uniforms.flipEnvMap.value=T.isCubeTexture&&T.isRenderTargetTexture===!1?-1:1,h.material.uniforms.backgroundBlurriness.value=_.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=_.backgroundIntensity,h.material.uniforms.backgroundRotation.value.setFromMatrix4(VA.makeRotationFromEuler(Fr)),h.material.toneMapped=Me.getTransfer(T.colorSpace)!==Ie,(u!==T||d!==T.version||f!==r.toneMapping)&&(h.material.needsUpdate=!0,u=T,d=T.version,f=r.toneMapping),h.layers.enableAll(),y.unshift(h,h.geometry,h.material,0,0,null)):T&&T.isTexture&&(c===void 0&&(c=new Rn(new _o(2,2),new _r({name:"BackgroundMaterial",uniforms:Ga(Yi.background.uniforms),vertexShader:Yi.background.vertexShader,fragmentShader:Yi.background.fragmentShader,side:gr,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(c)),c.material.uniforms.t2D.value=T,c.material.uniforms.backgroundIntensity.value=_.backgroundIntensity,c.material.toneMapped=Me.getTransfer(T.colorSpace)!==Ie,T.matrixAutoUpdate===!0&&T.updateMatrix(),c.material.uniforms.uvTransform.value.copy(T.matrix),(u!==T||d!==T.version||f!==r.toneMapping)&&(c.material.needsUpdate=!0,u=T,d=T.version,f=r.toneMapping),c.layers.enableAll(),y.unshift(c,c.geometry,c.material,0,0,null))}function g(y,_){y.getRGB(rh,cS(r)),n.buffers.color.setClear(rh.r,rh.g,rh.b,_,o)}return{getClearColor:function(){return a},setClearColor:function(y,_=1){a.set(y),l=_,g(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(y){l=y,g(a,l)},render:x,addToRenderList:m}}function $A(r,t){const e=r.getParameter(r.MAX_VERTEX_ATTRIBS),n={},i=d(null);let s=i,o=!1;function a(S,b,H,z,Z){let tt=!1;const q=u(z,H,b);s!==q&&(s=q,c(s.object)),tt=f(S,z,H,Z),tt&&p(S,z,H,Z),Z!==null&&t.update(Z,r.ELEMENT_ARRAY_BUFFER),(tt||o)&&(o=!1,T(S,b,H,z),Z!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.get(Z).buffer))}function l(){return r.createVertexArray()}function c(S){return r.bindVertexArray(S)}function h(S){return r.deleteVertexArray(S)}function u(S,b,H){const z=H.wireframe===!0;let Z=n[S.id];Z===void 0&&(Z={},n[S.id]=Z);let tt=Z[b.id];tt===void 0&&(tt={},Z[b.id]=tt);let q=tt[z];return q===void 0&&(q=d(l()),tt[z]=q),q}function d(S){const b=[],H=[],z=[];for(let Z=0;Z<e;Z++)b[Z]=0,H[Z]=0,z[Z]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:b,enabledAttributes:H,attributeDivisors:z,object:S,attributes:{},index:null}}function f(S,b,H,z){const Z=s.attributes,tt=b.attributes;let q=0;const nt=H.getAttributes();for(const $ in nt)if(nt[$].location>=0){const ut=Z[$];let mt=tt[$];if(mt===void 0&&($==="instanceMatrix"&&S.instanceMatrix&&(mt=S.instanceMatrix),$==="instanceColor"&&S.instanceColor&&(mt=S.instanceColor)),ut===void 0||ut.attribute!==mt||mt&&ut.data!==mt.data)return!0;q++}return s.attributesNum!==q||s.index!==z}function p(S,b,H,z){const Z={},tt=b.attributes;let q=0;const nt=H.getAttributes();for(const $ in nt)if(nt[$].location>=0){let ut=tt[$];ut===void 0&&($==="instanceMatrix"&&S.instanceMatrix&&(ut=S.instanceMatrix),$==="instanceColor"&&S.instanceColor&&(ut=S.instanceColor));const mt={};mt.attribute=ut,ut&&ut.data&&(mt.data=ut.data),Z[$]=mt,q++}s.attributes=Z,s.attributesNum=q,s.index=z}function x(){const S=s.newAttributes;for(let b=0,H=S.length;b<H;b++)S[b]=0}function m(S){g(S,0)}function g(S,b){const H=s.newAttributes,z=s.enabledAttributes,Z=s.attributeDivisors;H[S]=1,z[S]===0&&(r.enableVertexAttribArray(S),z[S]=1),Z[S]!==b&&(r.vertexAttribDivisor(S,b),Z[S]=b)}function y(){const S=s.newAttributes,b=s.enabledAttributes;for(let H=0,z=b.length;H<z;H++)b[H]!==S[H]&&(r.disableVertexAttribArray(H),b[H]=0)}function _(S,b,H,z,Z,tt,q){q===!0?r.vertexAttribIPointer(S,b,H,Z,tt):r.vertexAttribPointer(S,b,H,z,Z,tt)}function T(S,b,H,z){x();const Z=z.attributes,tt=H.getAttributes(),q=b.defaultAttributeValues;for(const nt in tt){const $=tt[nt];if($.location>=0){let ct=Z[nt];if(ct===void 0&&(nt==="instanceMatrix"&&S.instanceMatrix&&(ct=S.instanceMatrix),nt==="instanceColor"&&S.instanceColor&&(ct=S.instanceColor)),ct!==void 0){const ut=ct.normalized,mt=ct.itemSize,ne=t.get(ct);if(ne===void 0)continue;const ce=ne.buffer,J=ne.type,lt=ne.bytesPerElement,Rt=J===r.INT||J===r.UNSIGNED_INT||ct.gpuType===Km;if(ct.isInterleavedBufferAttribute){const bt=ct.data,Xt=bt.stride,zt=ct.offset;if(bt.isInstancedInterleavedBuffer){for(let de=0;de<$.locationSize;de++)g($.location+de,bt.meshPerAttribute);S.isInstancedMesh!==!0&&z._maxInstanceCount===void 0&&(z._maxInstanceCount=bt.meshPerAttribute*bt.count)}else for(let de=0;de<$.locationSize;de++)m($.location+de);r.bindBuffer(r.ARRAY_BUFFER,ce);for(let de=0;de<$.locationSize;de++)_($.location+de,mt/$.locationSize,J,ut,Xt*lt,(zt+mt/$.locationSize*de)*lt,Rt)}else{if(ct.isInstancedBufferAttribute){for(let bt=0;bt<$.locationSize;bt++)g($.location+bt,ct.meshPerAttribute);S.isInstancedMesh!==!0&&z._maxInstanceCount===void 0&&(z._maxInstanceCount=ct.meshPerAttribute*ct.count)}else for(let bt=0;bt<$.locationSize;bt++)m($.location+bt);r.bindBuffer(r.ARRAY_BUFFER,ce);for(let bt=0;bt<$.locationSize;bt++)_($.location+bt,mt/$.locationSize,J,ut,mt*lt,mt/$.locationSize*bt*lt,Rt)}}else if(q!==void 0){const ut=q[nt];if(ut!==void 0)switch(ut.length){case 2:r.vertexAttrib2fv($.location,ut);break;case 3:r.vertexAttrib3fv($.location,ut);break;case 4:r.vertexAttrib4fv($.location,ut);break;default:r.vertexAttrib1fv($.location,ut)}}}}y()}function w(){R();for(const S in n){const b=n[S];for(const H in b){const z=b[H];for(const Z in z)h(z[Z].object),delete z[Z];delete b[H]}delete n[S]}}function A(S){if(n[S.id]===void 0)return;const b=n[S.id];for(const H in b){const z=b[H];for(const Z in z)h(z[Z].object),delete z[Z];delete b[H]}delete n[S.id]}function v(S){for(const b in n){const H=n[b];if(H[S.id]===void 0)continue;const z=H[S.id];for(const Z in z)h(z[Z].object),delete z[Z];delete H[S.id]}}function R(){W(),o=!0,s!==i&&(s=i,c(s.object))}function W(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:a,reset:R,resetDefaultState:W,dispose:w,releaseStatesOfGeometry:A,releaseStatesOfProgram:v,initAttributes:x,enableAttribute:m,disableUnusedAttributes:y}}function WA(r,t,e){let n;function i(c){n=c}function s(c,h){r.drawArrays(n,c,h),e.update(h,n,1)}function o(c,h,u){u!==0&&(r.drawArraysInstanced(n,c,h,u),e.update(h,n,u))}function a(c,h,u){if(u===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,c,0,h,0,u);let f=0;for(let p=0;p<u;p++)f+=h[p];e.update(f,n,1)}function l(c,h,u,d){if(u===0)return;const f=t.get("WEBGL_multi_draw");if(f===null)for(let p=0;p<c.length;p++)o(c[p],h[p],d[p]);else{f.multiDrawArraysInstancedWEBGL(n,c,0,h,0,d,0,u);let p=0;for(let x=0;x<u;x++)p+=h[x];for(let x=0;x<d.length;x++)e.update(p,n,d[x])}}this.setMode=i,this.render=s,this.renderInstances=o,this.renderMultiDraw=a,this.renderMultiDrawInstances=l}function qA(r,t,e,n){let i;function s(){if(i!==void 0)return i;if(t.has("EXT_texture_filter_anisotropic")===!0){const v=t.get("EXT_texture_filter_anisotropic");i=r.getParameter(v.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function o(v){return!(v!==Gi&&n.convert(v)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT))}function a(v){const R=v===mc&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(v!==Is&&n.convert(v)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)&&v!==Ki&&!R)}function l(v){if(v==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";v="mediump"}return v==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=e.precision!==void 0?e.precision:"highp";const h=l(c);h!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",h,"instead."),c=h);const u=e.logarithmicDepthBuffer===!0,d=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control");if(d===!0){const v=t.get("EXT_clip_control");v.clipControlEXT(v.LOWER_LEFT_EXT,v.ZERO_TO_ONE_EXT)}const f=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),p=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),x=r.getParameter(r.MAX_TEXTURE_SIZE),m=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),g=r.getParameter(r.MAX_VERTEX_ATTRIBS),y=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),_=r.getParameter(r.MAX_VARYING_VECTORS),T=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),w=p>0,A=r.getParameter(r.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:o,textureTypeReadable:a,precision:c,logarithmicDepthBuffer:u,reverseDepthBuffer:d,maxTextures:f,maxVertexTextures:p,maxTextureSize:x,maxCubemapSize:m,maxAttributes:g,maxVertexUniforms:y,maxVaryings:_,maxFragmentUniforms:T,vertexTextures:w,maxSamples:A}}function XA(r){const t=this;let e=null,n=0,i=!1,s=!1;const o=new sr,a=new ie,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,d){const f=u.length!==0||d||n!==0||i;return i=d,n=u.length,f},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(u,d){e=h(u,d,0)},this.setState=function(u,d,f){const p=u.clippingPlanes,x=u.clipIntersection,m=u.clipShadows,g=r.get(u);if(!i||p===null||p.length===0||s&&!m)s?h(null):c();else{const y=s?0:n,_=y*4;let T=g.clippingState||null;l.value=T,T=h(p,d,_,f);for(let w=0;w!==_;++w)T[w]=e[w];g.clippingState=T,this.numIntersection=x?this.numPlanes:0,this.numPlanes+=y}};function c(){l.value!==e&&(l.value=e,l.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function h(u,d,f,p){const x=u!==null?u.length:0;let m=null;if(x!==0){if(m=l.value,p!==!0||m===null){const g=f+x*4,y=d.matrixWorldInverse;a.getNormalMatrix(y),(m===null||m.length<g)&&(m=new Float32Array(g));for(let _=0,T=f;_!==x;++_,T+=4)o.copy(u[_]).applyMatrix4(y,a),o.normal.toArray(m,T),m[T+3]=o.constant}l.value=m,l.needsUpdate=!0}return t.numPlanes=x,t.numIntersection=0,m}}function YA(r){let t=new WeakMap;function e(o,a){return a===Mp?o.mapping=Ua:a===vp&&(o.mapping=Ba),o}function n(o){if(o&&o.isTexture){const a=o.mapping;if(a===Mp||a===vp)if(t.has(o)){const l=t.get(o).texture;return e(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=new rE(l.height);return c.fromEquirectangularTexture(r,o),t.set(o,c),o.addEventListener("dispose",i),e(c.texture,o.mapping)}else return null}}return o}function i(o){const a=o.target;a.removeEventListener("dispose",i);const l=t.get(a);l!==void 0&&(t.delete(a),l.dispose())}function s(){t=new WeakMap}return{get:n,dispose:s}}let fS=class extends hS{constructor(t=-1,e=1,n=1,i=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-t,o=n+t,a=i+e,l=i-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,o=s+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}};const ma=4,Yx=[.125,.215,.35,.446,.526,.582],Xr=20,Wd=new fS,jx=new ae;let qd=null,Xd=0,Yd=0,jd=!1;const Vr=(1+Math.sqrt(5))/2,Bo=1/Vr,Kx=[new U(-Vr,Bo,0),new U(Vr,Bo,0),new U(-Bo,0,Vr),new U(Bo,0,Vr),new U(0,Vr,-Bo),new U(0,Vr,Bo),new U(-1,1,-1),new U(1,1,-1),new U(-1,1,1),new U(1,1,1)];let Zx=class{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){qd=this._renderer.getRenderTarget(),Xd=this._renderer.getActiveCubeFace(),Yd=this._renderer.getActiveMipmapLevel(),jd=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(t,n,i,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=t0(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Jx(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(qd,Xd,Yd),this._renderer.xr.enabled=jd,t.scissorTest=!1,oh(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===Ua||t.mapping===Ba?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),qd=this._renderer.getRenderTarget(),Xd=this._renderer.getActiveCubeFace(),Yd=this._renderer.getActiveMipmapLevel(),jd=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:Bi,minFilter:Bi,generateMipmaps:!1,type:mc,format:Gi,colorSpace:vr,depthBuffer:!1},i=Qx(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Qx(t,e,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=jA(s)),this._blurMaterial=KA(s,t,e)}return i}_compileMaterial(t){const e=new Rn(this._lodPlanes[0],t);this._renderer.compile(e,Wd)}_sceneToCubeUV(t,e,n,i){const a=new Si(90,1,e,n),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,u=h.autoClear,d=h.toneMapping;h.getClearColor(jx),h.toneMapping=fr,h.autoClear=!1;const f=new gc({name:"PMREM.Background",side:Zn,depthWrite:!1,depthTest:!1}),p=new Rn(new xc,f);let x=!1;const m=t.background;m?m.isColor&&(f.color.copy(m),t.background=null,x=!0):(f.color.copy(jx),x=!0);for(let g=0;g<6;g++){const y=g%3;y===0?(a.up.set(0,l[g],0),a.lookAt(c[g],0,0)):y===1?(a.up.set(0,0,l[g]),a.lookAt(0,c[g],0)):(a.up.set(0,l[g],0),a.lookAt(0,0,c[g]));const _=this._cubeSize;oh(i,y*_,g>2?_:0,_,_),h.setRenderTarget(i),x&&h.render(p,a),h.render(t,a)}p.geometry.dispose(),p.material.dispose(),h.toneMapping=d,h.autoClear=u,t.background=m}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===Ua||t.mapping===Ba;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=t0()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Jx());const s=i?this._cubemapMaterial:this._equirectMaterial,o=new Rn(this._lodPlanes[0],s),a=s.uniforms;a.envMap.value=t;const l=this._cubeSize;oh(e,0,0,3*l,2*l),n.setRenderTarget(e),n.render(o,Wd)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const i=this._lodPlanes.length;for(let s=1;s<i;s++){const o=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),a=Kx[(i-s-1)%Kx.length];this._blur(t,s-1,s,o,a)}e.autoClear=n}_blur(t,e,n,i,s){const o=this._pingPongRenderTarget;this._halfBlur(t,o,e,n,i,"latitudinal",s),this._halfBlur(o,t,n,n,i,"longitudinal",s)}_halfBlur(t,e,n,i,s,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=new Rn(this._lodPlanes[i],c),d=c.uniforms,f=this._sizeLods[n]-1,p=isFinite(s)?Math.PI/(2*f):2*Math.PI/(2*Xr-1),x=s/p,m=isFinite(s)?1+Math.floor(h*x):Xr;m>Xr&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${Xr}`);const g=[];let y=0;for(let v=0;v<Xr;++v){const R=v/x,W=Math.exp(-R*R/2);g.push(W),v===0?y+=W:v<m&&(y+=2*W)}for(let v=0;v<g.length;v++)g[v]=g[v]/y;d.envMap.value=t.texture,d.samples.value=m,d.weights.value=g,d.latitudinal.value=o==="latitudinal",a&&(d.poleAxis.value=a);const{_lodMax:_}=this;d.dTheta.value=p,d.mipInt.value=_-n;const T=this._sizeLods[i],w=3*T*(i>_-ma?i-_+ma:0),A=4*(this._cubeSize-T);oh(e,w,A,3*T,2*T),l.setRenderTarget(e),l.render(u,Wd)}};function jA(r){const t=[],e=[],n=[];let i=r;const s=r-ma+1+Yx.length;for(let o=0;o<s;o++){const a=Math.pow(2,i);e.push(a);let l=1/a;o>r-ma?l=Yx[o-r+ma-1]:o===0&&(l=0),n.push(l);const c=1/(a-2),h=-c,u=1+c,d=[h,h,u,h,u,u,h,h,u,u,h,u],f=6,p=6,x=3,m=2,g=1,y=new Float32Array(x*p*f),_=new Float32Array(m*p*f),T=new Float32Array(g*p*f);for(let A=0;A<f;A++){const v=A%3*2/3-1,R=A>2?0:-1,W=[v,R,0,v+2/3,R,0,v+2/3,R+1,0,v,R,0,v+2/3,R+1,0,v,R+1,0];y.set(W,x*p*A),_.set(d,m*p*A);const S=[A,A,A,A,A,A];T.set(S,g*p*A)}const w=new Wi;w.setAttribute("position",new $i(y,x)),w.setAttribute("uv",new $i(_,m)),w.setAttribute("faceIndex",new $i(T,g)),t.push(w),i>ma&&i--}return{lodPlanes:t,sizeLods:e,sigmas:n}}function Qx(r,t,e){const n=new no(r,t,e);return n.texture.mapping=qu,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function oh(r,t,e,n,i){r.viewport.set(t,e,n,i),r.scissor.set(t,e,n,i)}function KA(r,t,e){const n=new Float32Array(Xr),i=new U(0,1,0);return new _r({name:"SphericalGaussianBlur",defines:{n:Xr,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:lg(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:dr,depthTest:!1,depthWrite:!1})}function Jx(){return new _r({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:lg(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:dr,depthTest:!1,depthWrite:!1})}function t0(){return new _r({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:lg(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:dr,depthTest:!1,depthWrite:!1})}function lg(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function ZA(r){let t=new WeakMap,e=null;function n(a){if(a&&a.isTexture){const l=a.mapping,c=l===Mp||l===vp,h=l===Ua||l===Ba;if(c||h){let u=t.get(a);const d=u!==void 0?u.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==d)return e===null&&(e=new Zx(r)),u=c?e.fromEquirectangular(a,u):e.fromCubemap(a,u),u.texture.pmremVersion=a.pmremVersion,t.set(a,u),u.texture;if(u!==void 0)return u.texture;{const f=a.image;return c&&f&&f.height>0||h&&f&&i(f)?(e===null&&(e=new Zx(r)),u=c?e.fromEquirectangular(a):e.fromCubemap(a),u.texture.pmremVersion=a.pmremVersion,t.set(a,u),a.addEventListener("dispose",s),u.texture):null}}}return a}function i(a){let l=0;const c=6;for(let h=0;h<c;h++)a[h]!==void 0&&l++;return l===c}function s(a){const l=a.target;l.removeEventListener("dispose",s);const c=t.get(l);c!==void 0&&(t.delete(l),c.dispose())}function o(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:n,dispose:o}}function QA(r){const t={};function e(n){if(t[n]!==void 0)return t[n];let i;switch(n){case"WEBGL_depth_texture":i=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=r.getExtension(n)}return t[n]=i,i}return{has:function(n){return e(n)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(n){const i=e(n);return i===null&&iu("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function JA(r,t,e,n){const i={},s=new WeakMap;function o(u){const d=u.target;d.index!==null&&t.remove(d.index);for(const p in d.attributes)t.remove(d.attributes[p]);for(const p in d.morphAttributes){const x=d.morphAttributes[p];for(let m=0,g=x.length;m<g;m++)t.remove(x[m])}d.removeEventListener("dispose",o),delete i[d.id];const f=s.get(d);f&&(t.remove(f),s.delete(d)),n.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,e.memory.geometries--}function a(u,d){return i[d.id]===!0||(d.addEventListener("dispose",o),i[d.id]=!0,e.memory.geometries++),d}function l(u){const d=u.attributes;for(const p in d)t.update(d[p],r.ARRAY_BUFFER);const f=u.morphAttributes;for(const p in f){const x=f[p];for(let m=0,g=x.length;m<g;m++)t.update(x[m],r.ARRAY_BUFFER)}}function c(u){const d=[],f=u.index,p=u.attributes.position;let x=0;if(f!==null){const y=f.array;x=f.version;for(let _=0,T=y.length;_<T;_+=3){const w=y[_+0],A=y[_+1],v=y[_+2];d.push(w,A,A,v,v,w)}}else if(p!==void 0){const y=p.array;x=p.version;for(let _=0,T=y.length/3-1;_<T;_+=3){const w=_+0,A=_+1,v=_+2;d.push(w,A,A,v,v,w)}}else return;const m=new(Zy(d)?oS:rS)(d,1);m.version=x;const g=s.get(u);g&&t.remove(g),s.set(u,m)}function h(u){const d=s.get(u);if(d){const f=u.index;f!==null&&d.version<f.version&&c(u)}else c(u);return s.get(u)}return{get:a,update:l,getWireframeAttribute:h}}function tw(r,t,e){let n;function i(d){n=d}let s,o;function a(d){s=d.type,o=d.bytesPerElement}function l(d,f){r.drawElements(n,f,s,d*o),e.update(f,n,1)}function c(d,f,p){p!==0&&(r.drawElementsInstanced(n,f,s,d*o,p),e.update(f,n,p))}function h(d,f,p){if(p===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,f,0,s,d,0,p);let m=0;for(let g=0;g<p;g++)m+=f[g];e.update(m,n,1)}function u(d,f,p,x){if(p===0)return;const m=t.get("WEBGL_multi_draw");if(m===null)for(let g=0;g<d.length;g++)c(d[g]/o,f[g],x[g]);else{m.multiDrawElementsInstancedWEBGL(n,f,0,s,d,0,x,0,p);let g=0;for(let y=0;y<p;y++)g+=f[y];for(let y=0;y<x.length;y++)e.update(g,n,x[y])}}this.setMode=i,this.setIndex=a,this.render=l,this.renderInstances=c,this.renderMultiDraw=h,this.renderMultiDrawInstances=u}function ew(r){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,o,a){switch(e.calls++,o){case r.TRIANGLES:e.triangles+=a*(s/3);break;case r.LINES:e.lines+=a*(s/2);break;case r.LINE_STRIP:e.lines+=a*(s-1);break;case r.LINE_LOOP:e.lines+=a*s;break;case r.POINTS:e.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function i(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:i,update:n}}function nw(r,t,e){const n=new WeakMap,i=new Je;function s(o,a,l){const c=o.morphTargetInfluences,h=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,u=h!==void 0?h.length:0;let d=n.get(a);if(d===void 0||d.count!==u){let S=function(){R.dispose(),n.delete(a),a.removeEventListener("dispose",S)};var f=S;d!==void 0&&d.texture.dispose();const p=a.morphAttributes.position!==void 0,x=a.morphAttributes.normal!==void 0,m=a.morphAttributes.color!==void 0,g=a.morphAttributes.position||[],y=a.morphAttributes.normal||[],_=a.morphAttributes.color||[];let T=0;p===!0&&(T=1),x===!0&&(T=2),m===!0&&(T=3);let w=a.attributes.position.count*T,A=1;w>t.maxTextureSize&&(A=Math.ceil(w/t.maxTextureSize),w=t.maxTextureSize);const v=new Float32Array(w*A*4*u),R=new tS(v,w,A,u);R.type=Ki,R.needsUpdate=!0;const W=T*4;for(let b=0;b<u;b++){const H=g[b],z=y[b],Z=_[b],tt=w*A*4*b;for(let q=0;q<H.count;q++){const nt=q*W;p===!0&&(i.fromBufferAttribute(H,q),v[tt+nt+0]=i.x,v[tt+nt+1]=i.y,v[tt+nt+2]=i.z,v[tt+nt+3]=0),x===!0&&(i.fromBufferAttribute(z,q),v[tt+nt+4]=i.x,v[tt+nt+5]=i.y,v[tt+nt+6]=i.z,v[tt+nt+7]=0),m===!0&&(i.fromBufferAttribute(Z,q),v[tt+nt+8]=i.x,v[tt+nt+9]=i.y,v[tt+nt+10]=i.z,v[tt+nt+11]=Z.itemSize===4?i.w:1)}}d={count:u,texture:R,size:new Jt(w,A)},n.set(a,d),a.addEventListener("dispose",S)}if(o.isInstancedMesh===!0&&o.morphTexture!==null)l.getUniforms().setValue(r,"morphTexture",o.morphTexture,e);else{let p=0;for(let m=0;m<c.length;m++)p+=c[m];const x=a.morphTargetsRelative?1:1-p;l.getUniforms().setValue(r,"morphTargetBaseInfluence",x),l.getUniforms().setValue(r,"morphTargetInfluences",c)}l.getUniforms().setValue(r,"morphTargetsTexture",d.texture,e),l.getUniforms().setValue(r,"morphTargetsTextureSize",d.size)}return{update:s}}function iw(r,t,e,n){let i=new WeakMap;function s(l){const c=n.render.frame,h=l.geometry,u=t.get(l,h);if(i.get(u)!==c&&(t.update(u),i.set(u,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",a)===!1&&l.addEventListener("dispose",a),i.get(l)!==c&&(e.update(l.instanceMatrix,r.ARRAY_BUFFER),l.instanceColor!==null&&e.update(l.instanceColor,r.ARRAY_BUFFER),i.set(l,c))),l.isSkinnedMesh){const d=l.skeleton;i.get(d)!==c&&(d.update(),i.set(d,c))}return u}function o(){i=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a),e.remove(c.instanceMatrix),c.instanceColor!==null&&e.remove(c.instanceColor)}return{update:s,dispose:o}}let pS=class extends qi{constructor(t,e,n,i,s,o,a,l,c,h=Aa){if(h!==Aa&&h!==za)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===Aa&&(n=eo),n===void 0&&h===za&&(n=Oa),super(null,i,s,o,a,l,h,n,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:jn,this.minFilter=l!==void 0?l:jn,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}};const mS=new qi,e0=new pS(1,1),gS=new tS,xS=new Hb,_S=new uS,n0=[],i0=[],s0=new Float32Array(16),r0=new Float32Array(9),o0=new Float32Array(4);function Ja(r,t,e){const n=r[0];if(n<=0||n>0)return r;const i=t*e;let s=n0[i];if(s===void 0&&(s=new Float32Array(i),n0[i]=s),t!==0){n.toArray(s,0);for(let o=1,a=0;o!==t;++o)a+=e,r[o].toArray(s,a)}return s}function rn(r,t){if(r.length!==t.length)return!1;for(let e=0,n=r.length;e<n;e++)if(r[e]!==t[e])return!1;return!0}function on(r,t){for(let e=0,n=t.length;e<n;e++)r[e]=t[e]}function Yu(r,t){let e=i0[t];e===void 0&&(e=new Int32Array(t),i0[t]=e);for(let n=0;n!==t;++n)e[n]=r.allocateTextureUnit();return e}function sw(r,t){const e=this.cache;e[0]!==t&&(r.uniform1f(this.addr,t),e[0]=t)}function rw(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(rn(e,t))return;r.uniform2fv(this.addr,t),on(e,t)}}function ow(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(r.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(rn(e,t))return;r.uniform3fv(this.addr,t),on(e,t)}}function aw(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(rn(e,t))return;r.uniform4fv(this.addr,t),on(e,t)}}function lw(r,t){const e=this.cache,n=t.elements;if(n===void 0){if(rn(e,t))return;r.uniformMatrix2fv(this.addr,!1,t),on(e,t)}else{if(rn(e,n))return;o0.set(n),r.uniformMatrix2fv(this.addr,!1,o0),on(e,n)}}function cw(r,t){const e=this.cache,n=t.elements;if(n===void 0){if(rn(e,t))return;r.uniformMatrix3fv(this.addr,!1,t),on(e,t)}else{if(rn(e,n))return;r0.set(n),r.uniformMatrix3fv(this.addr,!1,r0),on(e,n)}}function hw(r,t){const e=this.cache,n=t.elements;if(n===void 0){if(rn(e,t))return;r.uniformMatrix4fv(this.addr,!1,t),on(e,t)}else{if(rn(e,n))return;s0.set(n),r.uniformMatrix4fv(this.addr,!1,s0),on(e,n)}}function uw(r,t){const e=this.cache;e[0]!==t&&(r.uniform1i(this.addr,t),e[0]=t)}function dw(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(rn(e,t))return;r.uniform2iv(this.addr,t),on(e,t)}}function fw(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(rn(e,t))return;r.uniform3iv(this.addr,t),on(e,t)}}function pw(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(rn(e,t))return;r.uniform4iv(this.addr,t),on(e,t)}}function mw(r,t){const e=this.cache;e[0]!==t&&(r.uniform1ui(this.addr,t),e[0]=t)}function gw(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(rn(e,t))return;r.uniform2uiv(this.addr,t),on(e,t)}}function xw(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(rn(e,t))return;r.uniform3uiv(this.addr,t),on(e,t)}}function _w(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(rn(e,t))return;r.uniform4uiv(this.addr,t),on(e,t)}}function yw(r,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i);let s;this.type===r.SAMPLER_2D_SHADOW?(e0.compareFunction=Yy,s=e0):s=mS,e.setTexture2D(t||s,i)}function Sw(r,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),e.setTexture3D(t||xS,i)}function Tw(r,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),e.setTextureCube(t||_S,i)}function Mw(r,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),e.setTexture2DArray(t||gS,i)}function vw(r){switch(r){case 5126:return sw;case 35664:return rw;case 35665:return ow;case 35666:return aw;case 35674:return lw;case 35675:return cw;case 35676:return hw;case 5124:case 35670:return uw;case 35667:case 35671:return dw;case 35668:case 35672:return fw;case 35669:case 35673:return pw;case 5125:return mw;case 36294:return gw;case 36295:return xw;case 36296:return _w;case 35678:case 36198:case 36298:case 36306:case 35682:return yw;case 35679:case 36299:case 36307:return Sw;case 35680:case 36300:case 36308:case 36293:return Tw;case 36289:case 36303:case 36311:case 36292:return Mw}}function bw(r,t){r.uniform1fv(this.addr,t)}function Ew(r,t){const e=Ja(t,this.size,2);r.uniform2fv(this.addr,e)}function Aw(r,t){const e=Ja(t,this.size,3);r.uniform3fv(this.addr,e)}function ww(r,t){const e=Ja(t,this.size,4);r.uniform4fv(this.addr,e)}function Nw(r,t){const e=Ja(t,this.size,4);r.uniformMatrix2fv(this.addr,!1,e)}function Rw(r,t){const e=Ja(t,this.size,9);r.uniformMatrix3fv(this.addr,!1,e)}function Cw(r,t){const e=Ja(t,this.size,16);r.uniformMatrix4fv(this.addr,!1,e)}function Pw(r,t){r.uniform1iv(this.addr,t)}function Fw(r,t){r.uniform2iv(this.addr,t)}function Iw(r,t){r.uniform3iv(this.addr,t)}function Dw(r,t){r.uniform4iv(this.addr,t)}function Lw(r,t){r.uniform1uiv(this.addr,t)}function Uw(r,t){r.uniform2uiv(this.addr,t)}function Bw(r,t){r.uniform3uiv(this.addr,t)}function Ow(r,t){r.uniform4uiv(this.addr,t)}function zw(r,t,e){const n=this.cache,i=t.length,s=Yu(e,i);rn(n,s)||(r.uniform1iv(this.addr,s),on(n,s));for(let o=0;o!==i;++o)e.setTexture2D(t[o]||mS,s[o])}function Gw(r,t,e){const n=this.cache,i=t.length,s=Yu(e,i);rn(n,s)||(r.uniform1iv(this.addr,s),on(n,s));for(let o=0;o!==i;++o)e.setTexture3D(t[o]||xS,s[o])}function kw(r,t,e){const n=this.cache,i=t.length,s=Yu(e,i);rn(n,s)||(r.uniform1iv(this.addr,s),on(n,s));for(let o=0;o!==i;++o)e.setTextureCube(t[o]||_S,s[o])}function Vw(r,t,e){const n=this.cache,i=t.length,s=Yu(e,i);rn(n,s)||(r.uniform1iv(this.addr,s),on(n,s));for(let o=0;o!==i;++o)e.setTexture2DArray(t[o]||gS,s[o])}function Hw(r){switch(r){case 5126:return bw;case 35664:return Ew;case 35665:return Aw;case 35666:return ww;case 35674:return Nw;case 35675:return Rw;case 35676:return Cw;case 5124:case 35670:return Pw;case 35667:case 35671:return Fw;case 35668:case 35672:return Iw;case 35669:case 35673:return Dw;case 5125:return Lw;case 36294:return Uw;case 36295:return Bw;case 36296:return Ow;case 35678:case 36198:case 36298:case 36306:case 35682:return zw;case 35679:case 36299:case 36307:return Gw;case 35680:case 36300:case 36308:case 36293:return kw;case 36289:case 36303:case 36311:case 36292:return Vw}}class $w{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=vw(e.type)}}class Ww{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=Hw(e.type)}}class qw{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const i=this.seq;for(let s=0,o=i.length;s!==o;++s){const a=i[s];a.setValue(t,e[a.id],n)}}}const Kd=/(\w+)(\])?(\[|\.)?/g;function a0(r,t){r.seq.push(t),r.map[t.id]=t}function Xw(r,t,e){const n=r.name,i=n.length;for(Kd.lastIndex=0;;){const s=Kd.exec(n),o=Kd.lastIndex;let a=s[1];const l=s[2]==="]",c=s[3];if(l&&(a=a|0),c===void 0||c==="["&&o+2===i){a0(e,c===void 0?new $w(a,r,t):new Ww(a,r,t));break}else{let u=e.map[a];u===void 0&&(u=new qw(a),a0(e,u)),e=u}}}class ou{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const s=t.getActiveUniform(e,i),o=t.getUniformLocation(e,s.name);Xw(s,o,this)}}setValue(t,e,n,i){const s=this.map[e];s!==void 0&&s.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];i!==void 0&&this.setValue(t,n,i)}static upload(t,e,n,i){for(let s=0,o=e.length;s!==o;++s){const a=e[s],l=n[a.id];l.needsUpdate!==!1&&a.setValue(t,l.value,i)}}static seqWithValue(t,e){const n=[];for(let i=0,s=t.length;i!==s;++i){const o=t[i];o.id in e&&n.push(o)}return n}}function l0(r,t,e){const n=r.createShader(t);return r.shaderSource(n,e),r.compileShader(n),n}const Yw=37297;let jw=0;function Kw(r,t){const e=r.split(`
`),n=[],i=Math.max(t-6,0),s=Math.min(t+6,e.length);for(let o=i;o<s;o++){const a=o+1;n.push(`${a===t?">":" "} ${a}: ${e[o]}`)}return n.join(`
`)}function Zw(r){const t=Me.getPrimaries(Me.workingColorSpace),e=Me.getPrimaries(r);let n;switch(t===e?n="":t===_u&&e===xu?n="LinearDisplayP3ToLinearSRGB":t===xu&&e===_u&&(n="LinearSRGBToLinearDisplayP3"),r){case vr:case Xu:return[n,"LinearTransferOETF"];case Xi:case sg:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",r),[n,"LinearTransferOETF"]}}function c0(r,t,e){const n=r.getShaderParameter(t,r.COMPILE_STATUS),i=r.getShaderInfoLog(t).trim();if(n&&i==="")return"";const s=/ERROR: 0:(\d+)/.exec(i);if(s){const o=parseInt(s[1]);return e.toUpperCase()+`

`+i+`

`+Kw(r.getShaderSource(t),o)}else return i}function Qw(r,t){const e=Zw(t);return`vec4 ${r}( vec4 value ) { return ${e[0]}( ${e[1]}( value ) ); }`}function Jw(r,t){let e;switch(t){case Jv:e="Linear";break;case tb:e="Reinhard";break;case eb:e="Cineon";break;case nb:e="ACESFilmic";break;case sb:e="AgX";break;case rb:e="Neutral";break;case ib:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+r+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const ah=new U;function tN(){Me.getLuminanceCoefficients(ah);const r=ah.x.toFixed(4),t=ah.y.toFixed(4),e=ah.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${r}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function eN(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",r.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Vl).join(`
`)}function nN(r){const t=[];for(const e in r){const n=r[e];n!==!1&&t.push("#define "+e+" "+n)}return t.join(`
`)}function iN(r,t){const e={},n=r.getProgramParameter(t,r.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const s=r.getActiveAttrib(t,i),o=s.name;let a=1;s.type===r.FLOAT_MAT2&&(a=2),s.type===r.FLOAT_MAT3&&(a=3),s.type===r.FLOAT_MAT4&&(a=4),e[o]={type:s.type,location:r.getAttribLocation(t,o),locationSize:a}}return e}function Vl(r){return r!==""}function h0(r,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function u0(r,t){return r.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const sN=/^[ \t]*#include +<([\w\d./]+)>/gm;function Jp(r){return r.replace(sN,oN)}const rN=new Map;function oN(r,t){let e=Qt[t];if(e===void 0){const n=rN.get(t);if(n!==void 0)e=Qt[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,n);else throw new Error("Can not resolve #include <"+t+">")}return Jp(e)}const aN=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function d0(r){return r.replace(aN,lN)}function lN(r,t,e,n){let i="";for(let s=parseInt(t);s<parseInt(e);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function f0(r){let t=`precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;return r.precision==="highp"?t+=`
#define HIGH_PRECISION`:r.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function cN(r){let t="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===jm?t="SHADOWMAP_TYPE_PCF":r.shadowMapType===Fv?t="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===xs&&(t="SHADOWMAP_TYPE_VSM"),t}function hN(r){let t="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case Ua:case Ba:t="ENVMAP_TYPE_CUBE";break;case qu:t="ENVMAP_TYPE_CUBE_UV";break}return t}function uN(r){let t="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case Ba:t="ENVMAP_MODE_REFRACTION";break}return t}function dN(r){let t="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case By:t="ENVMAP_BLENDING_MULTIPLY";break;case Zv:t="ENVMAP_BLENDING_MIX";break;case Qv:t="ENVMAP_BLENDING_ADD";break}return t}function fN(r){const t=r.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,n=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:n,maxMip:e}}function pN(r,t,e,n){const i=r.getContext(),s=e.defines;let o=e.vertexShader,a=e.fragmentShader;const l=cN(e),c=hN(e),h=uN(e),u=dN(e),d=fN(e),f=eN(e),p=nN(s),x=i.createProgram();let m,g,y=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(m=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p].filter(Vl).join(`
`),m.length>0&&(m+=`
`),g=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p].filter(Vl).join(`
`),g.length>0&&(g+=`
`)):(m=[f0(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Vl).join(`
`),g=[f0(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+h:"",e.envMap?"#define "+u:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==fr?"#define TONE_MAPPING":"",e.toneMapping!==fr?Qt.tonemapping_pars_fragment:"",e.toneMapping!==fr?Jw("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",Qt.colorspace_pars_fragment,Qw("linearToOutputTexel",e.outputColorSpace),tN(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(Vl).join(`
`)),o=Jp(o),o=h0(o,e),o=u0(o,e),a=Jp(a),a=h0(a,e),a=u0(a,e),o=d0(o),a=d0(a),e.isRawShaderMaterial!==!0&&(y=`#version 300 es
`,m=[f,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+m,g=["#define varying in",e.glslVersion===Rx?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===Rx?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+g);const _=y+m+o,T=y+g+a,w=l0(i,i.VERTEX_SHADER,_),A=l0(i,i.FRAGMENT_SHADER,T);i.attachShader(x,w),i.attachShader(x,A),e.index0AttributeName!==void 0?i.bindAttribLocation(x,0,e.index0AttributeName):e.morphTargets===!0&&i.bindAttribLocation(x,0,"position"),i.linkProgram(x);function v(b){if(r.debug.checkShaderErrors){const H=i.getProgramInfoLog(x).trim(),z=i.getShaderInfoLog(w).trim(),Z=i.getShaderInfoLog(A).trim();let tt=!0,q=!0;if(i.getProgramParameter(x,i.LINK_STATUS)===!1)if(tt=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(i,x,w,A);else{const nt=c0(i,w,"vertex"),$=c0(i,A,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(x,i.VALIDATE_STATUS)+`

Material Name: `+b.name+`
Material Type: `+b.type+`

Program Info Log: `+H+`
`+nt+`
`+$)}else H!==""?console.warn("THREE.WebGLProgram: Program Info Log:",H):(z===""||Z==="")&&(q=!1);q&&(b.diagnostics={runnable:tt,programLog:H,vertexShader:{log:z,prefix:m},fragmentShader:{log:Z,prefix:g}})}i.deleteShader(w),i.deleteShader(A),R=new ou(i,x),W=iN(i,x)}let R;this.getUniforms=function(){return R===void 0&&v(this),R};let W;this.getAttributes=function(){return W===void 0&&v(this),W};let S=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return S===!1&&(S=i.getProgramParameter(x,Yw)),S},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(x),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=jw++,this.cacheKey=t,this.usedTimes=1,this.program=x,this.vertexShader=w,this.fragmentShader=A,this}let mN=0;class gN{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),s=this._getShaderStage(n),o=this._getShaderCacheForMaterial(t);return o.has(i)===!1&&(o.add(i),i.usedTimes++),o.has(s)===!1&&(o.add(s),s.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const n of e)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return n===void 0&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return n===void 0&&(n=new xN(t),e.set(t,n)),n}}class xN{constructor(t){this.id=mN++,this.code=t,this.usedTimes=0}}function _N(r,t,e,n,i,s,o){const a=new iS,l=new gN,c=new Set,h=[],u=i.logarithmicDepthBuffer,d=i.reverseDepthBuffer,f=i.vertexTextures;let p=i.precision;const x={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function m(S){return c.add(S),S===0?"uv":`uv${S}`}function g(S,b,H,z,Z){const tt=z.fog,q=Z.geometry,nt=S.isMeshStandardMaterial?z.environment:null,$=(S.isMeshStandardMaterial?e:t).get(S.envMap||nt),ct=$&&$.mapping===qu?$.image.height:null,ut=x[S.type];S.precision!==null&&(p=i.getMaxPrecision(S.precision),p!==S.precision&&console.warn("THREE.WebGLProgram.getParameters:",S.precision,"not supported, using",p,"instead."));const mt=q.morphAttributes.position||q.morphAttributes.normal||q.morphAttributes.color,ne=mt!==void 0?mt.length:0;let ce=0;q.morphAttributes.position!==void 0&&(ce=1),q.morphAttributes.normal!==void 0&&(ce=2),q.morphAttributes.color!==void 0&&(ce=3);let J,lt,Rt,bt;if(ut){const Xn=Yi[ut];J=Xn.vertexShader,lt=Xn.fragmentShader}else J=S.vertexShader,lt=S.fragmentShader,l.update(S),Rt=l.getVertexShaderID(S),bt=l.getFragmentShaderID(S);const Xt=r.getRenderTarget(),zt=Z.isInstancedMesh===!0,de=Z.isBatchedMesh===!0,we=!!S.map,fe=!!S.matcap,P=!!$,ei=!!S.aoMap,he=!!S.lightMap,ge=!!S.bumpMap,kt=!!S.normalMap,Pe=!!S.displacementMap,Wt=!!S.emissiveMap,N=!!S.metalnessMap,M=!!S.roughnessMap,G=S.anisotropy>0,it=S.clearcoat>0,at=S.dispersion>0,et=S.iridescence>0,Ft=S.sheen>0,_t=S.transmission>0,Et=G&&!!S.anisotropyMap,xe=it&&!!S.clearcoatMap,dt=it&&!!S.clearcoatNormalMap,At=it&&!!S.clearcoatRoughnessMap,Vt=et&&!!S.iridescenceMap,Ht=et&&!!S.iridescenceThicknessMap,wt=Ft&&!!S.sheenColorMap,ue=Ft&&!!S.sheenRoughnessMap,Yt=!!S.specularMap,Ce=!!S.specularColorMap,F=!!S.specularIntensityMap,Mt=_t&&!!S.transmissionMap,Y=_t&&!!S.thicknessMap,ot=!!S.gradientMap,yt=!!S.alphaMap,vt=S.alphaTest>0,pe=!!S.alphaHash,We=!!S.extensions;let qn=fr;S.toneMapped&&(Xt===null||Xt.isXRRenderTarget===!0)&&(qn=r.toneMapping);const ye={shaderID:ut,shaderType:S.type,shaderName:S.name,vertexShader:J,fragmentShader:lt,defines:S.defines,customVertexShaderID:Rt,customFragmentShaderID:bt,isRawShaderMaterial:S.isRawShaderMaterial===!0,glslVersion:S.glslVersion,precision:p,batching:de,batchingColor:de&&Z._colorsTexture!==null,instancing:zt,instancingColor:zt&&Z.instanceColor!==null,instancingMorph:zt&&Z.morphTexture!==null,supportsVertexTextures:f,outputColorSpace:Xt===null?r.outputColorSpace:Xt.isXRRenderTarget===!0?Xt.texture.colorSpace:vr,alphaToCoverage:!!S.alphaToCoverage,map:we,matcap:fe,envMap:P,envMapMode:P&&$.mapping,envMapCubeUVHeight:ct,aoMap:ei,lightMap:he,bumpMap:ge,normalMap:kt,displacementMap:f&&Pe,emissiveMap:Wt,normalMapObjectSpace:kt&&S.normalMapType===cb,normalMapTangentSpace:kt&&S.normalMapType===ig,metalnessMap:N,roughnessMap:M,anisotropy:G,anisotropyMap:Et,clearcoat:it,clearcoatMap:xe,clearcoatNormalMap:dt,clearcoatRoughnessMap:At,dispersion:at,iridescence:et,iridescenceMap:Vt,iridescenceThicknessMap:Ht,sheen:Ft,sheenColorMap:wt,sheenRoughnessMap:ue,specularMap:Yt,specularColorMap:Ce,specularIntensityMap:F,transmission:_t,transmissionMap:Mt,thicknessMap:Y,gradientMap:ot,opaque:S.transparent===!1&&S.blending===Ea&&S.alphaToCoverage===!1,alphaMap:yt,alphaTest:vt,alphaHash:pe,combine:S.combine,mapUv:we&&m(S.map.channel),aoMapUv:ei&&m(S.aoMap.channel),lightMapUv:he&&m(S.lightMap.channel),bumpMapUv:ge&&m(S.bumpMap.channel),normalMapUv:kt&&m(S.normalMap.channel),displacementMapUv:Pe&&m(S.displacementMap.channel),emissiveMapUv:Wt&&m(S.emissiveMap.channel),metalnessMapUv:N&&m(S.metalnessMap.channel),roughnessMapUv:M&&m(S.roughnessMap.channel),anisotropyMapUv:Et&&m(S.anisotropyMap.channel),clearcoatMapUv:xe&&m(S.clearcoatMap.channel),clearcoatNormalMapUv:dt&&m(S.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:At&&m(S.clearcoatRoughnessMap.channel),iridescenceMapUv:Vt&&m(S.iridescenceMap.channel),iridescenceThicknessMapUv:Ht&&m(S.iridescenceThicknessMap.channel),sheenColorMapUv:wt&&m(S.sheenColorMap.channel),sheenRoughnessMapUv:ue&&m(S.sheenRoughnessMap.channel),specularMapUv:Yt&&m(S.specularMap.channel),specularColorMapUv:Ce&&m(S.specularColorMap.channel),specularIntensityMapUv:F&&m(S.specularIntensityMap.channel),transmissionMapUv:Mt&&m(S.transmissionMap.channel),thicknessMapUv:Y&&m(S.thicknessMap.channel),alphaMapUv:yt&&m(S.alphaMap.channel),vertexTangents:!!q.attributes.tangent&&(kt||G),vertexColors:S.vertexColors,vertexAlphas:S.vertexColors===!0&&!!q.attributes.color&&q.attributes.color.itemSize===4,pointsUvs:Z.isPoints===!0&&!!q.attributes.uv&&(we||yt),fog:!!tt,useFog:S.fog===!0,fogExp2:!!tt&&tt.isFogExp2,flatShading:S.flatShading===!0,sizeAttenuation:S.sizeAttenuation===!0,logarithmicDepthBuffer:u,reverseDepthBuffer:d,skinning:Z.isSkinnedMesh===!0,morphTargets:q.morphAttributes.position!==void 0,morphNormals:q.morphAttributes.normal!==void 0,morphColors:q.morphAttributes.color!==void 0,morphTargetsCount:ne,morphTextureStride:ce,numDirLights:b.directional.length,numPointLights:b.point.length,numSpotLights:b.spot.length,numSpotLightMaps:b.spotLightMap.length,numRectAreaLights:b.rectArea.length,numHemiLights:b.hemi.length,numDirLightShadows:b.directionalShadowMap.length,numPointLightShadows:b.pointShadowMap.length,numSpotLightShadows:b.spotShadowMap.length,numSpotLightShadowsWithMaps:b.numSpotLightShadowsWithMaps,numLightProbes:b.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:S.dithering,shadowMapEnabled:r.shadowMap.enabled&&H.length>0,shadowMapType:r.shadowMap.type,toneMapping:qn,decodeVideoTexture:we&&S.map.isVideoTexture===!0&&Me.getTransfer(S.map.colorSpace)===Ie,premultipliedAlpha:S.premultipliedAlpha,doubleSided:S.side===Ui,flipSided:S.side===Zn,useDepthPacking:S.depthPacking>=0,depthPacking:S.depthPacking||0,index0AttributeName:S.index0AttributeName,extensionClipCullDistance:We&&S.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(We&&S.extensions.multiDraw===!0||de)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:S.customProgramCacheKey()};return ye.vertexUv1s=c.has(1),ye.vertexUv2s=c.has(2),ye.vertexUv3s=c.has(3),c.clear(),ye}function y(S){const b=[];if(S.shaderID?b.push(S.shaderID):(b.push(S.customVertexShaderID),b.push(S.customFragmentShaderID)),S.defines!==void 0)for(const H in S.defines)b.push(H),b.push(S.defines[H]);return S.isRawShaderMaterial===!1&&(_(b,S),T(b,S),b.push(r.outputColorSpace)),b.push(S.customProgramCacheKey),b.join()}function _(S,b){S.push(b.precision),S.push(b.outputColorSpace),S.push(b.envMapMode),S.push(b.envMapCubeUVHeight),S.push(b.mapUv),S.push(b.alphaMapUv),S.push(b.lightMapUv),S.push(b.aoMapUv),S.push(b.bumpMapUv),S.push(b.normalMapUv),S.push(b.displacementMapUv),S.push(b.emissiveMapUv),S.push(b.metalnessMapUv),S.push(b.roughnessMapUv),S.push(b.anisotropyMapUv),S.push(b.clearcoatMapUv),S.push(b.clearcoatNormalMapUv),S.push(b.clearcoatRoughnessMapUv),S.push(b.iridescenceMapUv),S.push(b.iridescenceThicknessMapUv),S.push(b.sheenColorMapUv),S.push(b.sheenRoughnessMapUv),S.push(b.specularMapUv),S.push(b.specularColorMapUv),S.push(b.specularIntensityMapUv),S.push(b.transmissionMapUv),S.push(b.thicknessMapUv),S.push(b.combine),S.push(b.fogExp2),S.push(b.sizeAttenuation),S.push(b.morphTargetsCount),S.push(b.morphAttributeCount),S.push(b.numDirLights),S.push(b.numPointLights),S.push(b.numSpotLights),S.push(b.numSpotLightMaps),S.push(b.numHemiLights),S.push(b.numRectAreaLights),S.push(b.numDirLightShadows),S.push(b.numPointLightShadows),S.push(b.numSpotLightShadows),S.push(b.numSpotLightShadowsWithMaps),S.push(b.numLightProbes),S.push(b.shadowMapType),S.push(b.toneMapping),S.push(b.numClippingPlanes),S.push(b.numClipIntersection),S.push(b.depthPacking)}function T(S,b){a.disableAll(),b.supportsVertexTextures&&a.enable(0),b.instancing&&a.enable(1),b.instancingColor&&a.enable(2),b.instancingMorph&&a.enable(3),b.matcap&&a.enable(4),b.envMap&&a.enable(5),b.normalMapObjectSpace&&a.enable(6),b.normalMapTangentSpace&&a.enable(7),b.clearcoat&&a.enable(8),b.iridescence&&a.enable(9),b.alphaTest&&a.enable(10),b.vertexColors&&a.enable(11),b.vertexAlphas&&a.enable(12),b.vertexUv1s&&a.enable(13),b.vertexUv2s&&a.enable(14),b.vertexUv3s&&a.enable(15),b.vertexTangents&&a.enable(16),b.anisotropy&&a.enable(17),b.alphaHash&&a.enable(18),b.batching&&a.enable(19),b.dispersion&&a.enable(20),b.batchingColor&&a.enable(21),S.push(a.mask),a.disableAll(),b.fog&&a.enable(0),b.useFog&&a.enable(1),b.flatShading&&a.enable(2),b.logarithmicDepthBuffer&&a.enable(3),b.reverseDepthBuffer&&a.enable(4),b.skinning&&a.enable(5),b.morphTargets&&a.enable(6),b.morphNormals&&a.enable(7),b.morphColors&&a.enable(8),b.premultipliedAlpha&&a.enable(9),b.shadowMapEnabled&&a.enable(10),b.doubleSided&&a.enable(11),b.flipSided&&a.enable(12),b.useDepthPacking&&a.enable(13),b.dithering&&a.enable(14),b.transmission&&a.enable(15),b.sheen&&a.enable(16),b.opaque&&a.enable(17),b.pointsUvs&&a.enable(18),b.decodeVideoTexture&&a.enable(19),b.alphaToCoverage&&a.enable(20),S.push(a.mask)}function w(S){const b=x[S.type];let H;if(b){const z=Yi[b];H=eE.clone(z.uniforms)}else H=S.uniforms;return H}function A(S,b){let H;for(let z=0,Z=h.length;z<Z;z++){const tt=h[z];if(tt.cacheKey===b){H=tt,++H.usedTimes;break}}return H===void 0&&(H=new pN(r,b,S,s),h.push(H)),H}function v(S){if(--S.usedTimes===0){const b=h.indexOf(S);h[b]=h[h.length-1],h.pop(),S.destroy()}}function R(S){l.remove(S)}function W(){l.dispose()}return{getParameters:g,getProgramCacheKey:y,getUniforms:w,acquireProgram:A,releaseProgram:v,releaseShaderCache:R,programs:h,dispose:W}}function yN(){let r=new WeakMap;function t(o){return r.has(o)}function e(o){let a=r.get(o);return a===void 0&&(a={},r.set(o,a)),a}function n(o){r.delete(o)}function i(o,a,l){r.get(o)[a]=l}function s(){r=new WeakMap}return{has:t,get:e,remove:n,update:i,dispose:s}}function SN(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.material.id!==t.material.id?r.material.id-t.material.id:r.z!==t.z?r.z-t.z:r.id-t.id}function p0(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.z!==t.z?t.z-r.z:r.id-t.id}function m0(){const r=[];let t=0;const e=[],n=[],i=[];function s(){t=0,e.length=0,n.length=0,i.length=0}function o(u,d,f,p,x,m){let g=r[t];return g===void 0?(g={id:u.id,object:u,geometry:d,material:f,groupOrder:p,renderOrder:u.renderOrder,z:x,group:m},r[t]=g):(g.id=u.id,g.object=u,g.geometry=d,g.material=f,g.groupOrder=p,g.renderOrder=u.renderOrder,g.z=x,g.group=m),t++,g}function a(u,d,f,p,x,m){const g=o(u,d,f,p,x,m);f.transmission>0?n.push(g):f.transparent===!0?i.push(g):e.push(g)}function l(u,d,f,p,x,m){const g=o(u,d,f,p,x,m);f.transmission>0?n.unshift(g):f.transparent===!0?i.unshift(g):e.unshift(g)}function c(u,d){e.length>1&&e.sort(u||SN),n.length>1&&n.sort(d||p0),i.length>1&&i.sort(d||p0)}function h(){for(let u=t,d=r.length;u<d;u++){const f=r[u];if(f.id===null)break;f.id=null,f.object=null,f.geometry=null,f.material=null,f.group=null}}return{opaque:e,transmissive:n,transparent:i,init:s,push:a,unshift:l,finish:h,sort:c}}function TN(){let r=new WeakMap;function t(n,i){const s=r.get(n);let o;return s===void 0?(o=new m0,r.set(n,[o])):i>=s.length?(o=new m0,s.push(o)):o=s[i],o}function e(){r=new WeakMap}return{get:t,dispose:e}}function MN(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new U,color:new ae};break;case"SpotLight":e={position:new U,direction:new U,color:new ae,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new U,color:new ae,distance:0,decay:0};break;case"HemisphereLight":e={direction:new U,skyColor:new ae,groundColor:new ae};break;case"RectAreaLight":e={color:new ae,position:new U,halfWidth:new U,halfHeight:new U};break}return r[t.id]=e,e}}}function vN(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Jt};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Jt};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Jt,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[t.id]=e,e}}}let bN=0;function EN(r,t){return(t.castShadow?2:0)-(r.castShadow?2:0)+(t.map?1:0)-(r.map?1:0)}function AN(r){const t=new MN,e=vN(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let c=0;c<9;c++)n.probe.push(new U);const i=new U,s=new Ue,o=new Ue;function a(c){let h=0,u=0,d=0;for(let W=0;W<9;W++)n.probe[W].set(0,0,0);let f=0,p=0,x=0,m=0,g=0,y=0,_=0,T=0,w=0,A=0,v=0;c.sort(EN);for(let W=0,S=c.length;W<S;W++){const b=c[W],H=b.color,z=b.intensity,Z=b.distance,tt=b.shadow&&b.shadow.map?b.shadow.map.texture:null;if(b.isAmbientLight)h+=H.r*z,u+=H.g*z,d+=H.b*z;else if(b.isLightProbe){for(let q=0;q<9;q++)n.probe[q].addScaledVector(b.sh.coefficients[q],z);v++}else if(b.isDirectionalLight){const q=t.get(b);if(q.color.copy(b.color).multiplyScalar(b.intensity),b.castShadow){const nt=b.shadow,$=e.get(b);$.shadowIntensity=nt.intensity,$.shadowBias=nt.bias,$.shadowNormalBias=nt.normalBias,$.shadowRadius=nt.radius,$.shadowMapSize=nt.mapSize,n.directionalShadow[f]=$,n.directionalShadowMap[f]=tt,n.directionalShadowMatrix[f]=b.shadow.matrix,y++}n.directional[f]=q,f++}else if(b.isSpotLight){const q=t.get(b);q.position.setFromMatrixPosition(b.matrixWorld),q.color.copy(H).multiplyScalar(z),q.distance=Z,q.coneCos=Math.cos(b.angle),q.penumbraCos=Math.cos(b.angle*(1-b.penumbra)),q.decay=b.decay,n.spot[x]=q;const nt=b.shadow;if(b.map&&(n.spotLightMap[w]=b.map,w++,nt.updateMatrices(b),b.castShadow&&A++),n.spotLightMatrix[x]=nt.matrix,b.castShadow){const $=e.get(b);$.shadowIntensity=nt.intensity,$.shadowBias=nt.bias,$.shadowNormalBias=nt.normalBias,$.shadowRadius=nt.radius,$.shadowMapSize=nt.mapSize,n.spotShadow[x]=$,n.spotShadowMap[x]=tt,T++}x++}else if(b.isRectAreaLight){const q=t.get(b);q.color.copy(H).multiplyScalar(z),q.halfWidth.set(b.width*.5,0,0),q.halfHeight.set(0,b.height*.5,0),n.rectArea[m]=q,m++}else if(b.isPointLight){const q=t.get(b);if(q.color.copy(b.color).multiplyScalar(b.intensity),q.distance=b.distance,q.decay=b.decay,b.castShadow){const nt=b.shadow,$=e.get(b);$.shadowIntensity=nt.intensity,$.shadowBias=nt.bias,$.shadowNormalBias=nt.normalBias,$.shadowRadius=nt.radius,$.shadowMapSize=nt.mapSize,$.shadowCameraNear=nt.camera.near,$.shadowCameraFar=nt.camera.far,n.pointShadow[p]=$,n.pointShadowMap[p]=tt,n.pointShadowMatrix[p]=b.shadow.matrix,_++}n.point[p]=q,p++}else if(b.isHemisphereLight){const q=t.get(b);q.skyColor.copy(b.color).multiplyScalar(z),q.groundColor.copy(b.groundColor).multiplyScalar(z),n.hemi[g]=q,g++}}m>0&&(r.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=xt.LTC_FLOAT_1,n.rectAreaLTC2=xt.LTC_FLOAT_2):(n.rectAreaLTC1=xt.LTC_HALF_1,n.rectAreaLTC2=xt.LTC_HALF_2)),n.ambient[0]=h,n.ambient[1]=u,n.ambient[2]=d;const R=n.hash;(R.directionalLength!==f||R.pointLength!==p||R.spotLength!==x||R.rectAreaLength!==m||R.hemiLength!==g||R.numDirectionalShadows!==y||R.numPointShadows!==_||R.numSpotShadows!==T||R.numSpotMaps!==w||R.numLightProbes!==v)&&(n.directional.length=f,n.spot.length=x,n.rectArea.length=m,n.point.length=p,n.hemi.length=g,n.directionalShadow.length=y,n.directionalShadowMap.length=y,n.pointShadow.length=_,n.pointShadowMap.length=_,n.spotShadow.length=T,n.spotShadowMap.length=T,n.directionalShadowMatrix.length=y,n.pointShadowMatrix.length=_,n.spotLightMatrix.length=T+w-A,n.spotLightMap.length=w,n.numSpotLightShadowsWithMaps=A,n.numLightProbes=v,R.directionalLength=f,R.pointLength=p,R.spotLength=x,R.rectAreaLength=m,R.hemiLength=g,R.numDirectionalShadows=y,R.numPointShadows=_,R.numSpotShadows=T,R.numSpotMaps=w,R.numLightProbes=v,n.version=bN++)}function l(c,h){let u=0,d=0,f=0,p=0,x=0;const m=h.matrixWorldInverse;for(let g=0,y=c.length;g<y;g++){const _=c[g];if(_.isDirectionalLight){const T=n.directional[u];T.direction.setFromMatrixPosition(_.matrixWorld),i.setFromMatrixPosition(_.target.matrixWorld),T.direction.sub(i),T.direction.transformDirection(m),u++}else if(_.isSpotLight){const T=n.spot[f];T.position.setFromMatrixPosition(_.matrixWorld),T.position.applyMatrix4(m),T.direction.setFromMatrixPosition(_.matrixWorld),i.setFromMatrixPosition(_.target.matrixWorld),T.direction.sub(i),T.direction.transformDirection(m),f++}else if(_.isRectAreaLight){const T=n.rectArea[p];T.position.setFromMatrixPosition(_.matrixWorld),T.position.applyMatrix4(m),o.identity(),s.copy(_.matrixWorld),s.premultiply(m),o.extractRotation(s),T.halfWidth.set(_.width*.5,0,0),T.halfHeight.set(0,_.height*.5,0),T.halfWidth.applyMatrix4(o),T.halfHeight.applyMatrix4(o),p++}else if(_.isPointLight){const T=n.point[d];T.position.setFromMatrixPosition(_.matrixWorld),T.position.applyMatrix4(m),d++}else if(_.isHemisphereLight){const T=n.hemi[x];T.direction.setFromMatrixPosition(_.matrixWorld),T.direction.transformDirection(m),x++}}}return{setup:a,setupView:l,state:n}}function g0(r){const t=new AN(r),e=[],n=[];function i(h){c.camera=h,e.length=0,n.length=0}function s(h){e.push(h)}function o(h){n.push(h)}function a(){t.setup(e)}function l(h){t.setupView(e,h)}const c={lightsArray:e,shadowsArray:n,camera:null,lights:t,transmissionRenderTarget:{}};return{init:i,state:c,setupLights:a,setupLightsView:l,pushLight:s,pushShadow:o}}function wN(r){let t=new WeakMap;function e(i,s=0){const o=t.get(i);let a;return o===void 0?(a=new g0(r),t.set(i,[a])):s>=o.length?(a=new g0(r),o.push(a)):a=o[s],a}function n(){t=new WeakMap}return{get:e,dispose:n}}class NN extends xo{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=ab,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class RN extends xo{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}const CN=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,PN=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function FN(r,t,e){let n=new ag;const i=new Jt,s=new Jt,o=new Je,a=new NN({depthPacking:lb}),l=new RN,c={},h=e.maxTextureSize,u={[gr]:Zn,[Zn]:gr,[Ui]:Ui},d=new _r({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Jt},radius:{value:4}},vertexShader:CN,fragmentShader:PN}),f=d.clone();f.defines.HORIZONTAL_PASS=1;const p=new Wi;p.setAttribute("position",new $i(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const x=new Rn(p,d),m=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=jm;let g=this.type;this.render=function(A,v,R){if(m.enabled===!1||m.autoUpdate===!1&&m.needsUpdate===!1||A.length===0)return;const W=r.getRenderTarget(),S=r.getActiveCubeFace(),b=r.getActiveMipmapLevel(),H=r.state;H.setBlending(dr),H.buffers.color.setClear(1,1,1,1),H.buffers.depth.setTest(!0),H.setScissorTest(!1);const z=g!==xs&&this.type===xs,Z=g===xs&&this.type!==xs;for(let tt=0,q=A.length;tt<q;tt++){const nt=A[tt],$=nt.shadow;if($===void 0){console.warn("THREE.WebGLShadowMap:",nt,"has no shadow.");continue}if($.autoUpdate===!1&&$.needsUpdate===!1)continue;i.copy($.mapSize);const ct=$.getFrameExtents();if(i.multiply(ct),s.copy($.mapSize),(i.x>h||i.y>h)&&(i.x>h&&(s.x=Math.floor(h/ct.x),i.x=s.x*ct.x,$.mapSize.x=s.x),i.y>h&&(s.y=Math.floor(h/ct.y),i.y=s.y*ct.y,$.mapSize.y=s.y)),$.map===null||z===!0||Z===!0){const mt=this.type!==xs?{minFilter:jn,magFilter:jn}:{};$.map!==null&&$.map.dispose(),$.map=new no(i.x,i.y,mt),$.map.texture.name=nt.name+".shadowMap",$.camera.updateProjectionMatrix()}r.setRenderTarget($.map),r.clear();const ut=$.getViewportCount();for(let mt=0;mt<ut;mt++){const ne=$.getViewport(mt);o.set(s.x*ne.x,s.y*ne.y,s.x*ne.z,s.y*ne.w),H.viewport(o),$.updateMatrices(nt,mt),n=$.getFrustum(),T(v,R,$.camera,nt,this.type)}$.isPointLightShadow!==!0&&this.type===xs&&y($,R),$.needsUpdate=!1}g=this.type,m.needsUpdate=!1,r.setRenderTarget(W,S,b)};function y(A,v){const R=t.update(x);d.defines.VSM_SAMPLES!==A.blurSamples&&(d.defines.VSM_SAMPLES=A.blurSamples,f.defines.VSM_SAMPLES=A.blurSamples,d.needsUpdate=!0,f.needsUpdate=!0),A.mapPass===null&&(A.mapPass=new no(i.x,i.y)),d.uniforms.shadow_pass.value=A.map.texture,d.uniforms.resolution.value=A.mapSize,d.uniforms.radius.value=A.radius,r.setRenderTarget(A.mapPass),r.clear(),r.renderBufferDirect(v,null,R,d,x,null),f.uniforms.shadow_pass.value=A.mapPass.texture,f.uniforms.resolution.value=A.mapSize,f.uniforms.radius.value=A.radius,r.setRenderTarget(A.map),r.clear(),r.renderBufferDirect(v,null,R,f,x,null)}function _(A,v,R,W){let S=null;const b=R.isPointLight===!0?A.customDistanceMaterial:A.customDepthMaterial;if(b!==void 0)S=b;else if(S=R.isPointLight===!0?l:a,r.localClippingEnabled&&v.clipShadows===!0&&Array.isArray(v.clippingPlanes)&&v.clippingPlanes.length!==0||v.displacementMap&&v.displacementScale!==0||v.alphaMap&&v.alphaTest>0||v.map&&v.alphaTest>0){const H=S.uuid,z=v.uuid;let Z=c[H];Z===void 0&&(Z={},c[H]=Z);let tt=Z[z];tt===void 0&&(tt=S.clone(),Z[z]=tt,v.addEventListener("dispose",w)),S=tt}if(S.visible=v.visible,S.wireframe=v.wireframe,W===xs?S.side=v.shadowSide!==null?v.shadowSide:v.side:S.side=v.shadowSide!==null?v.shadowSide:u[v.side],S.alphaMap=v.alphaMap,S.alphaTest=v.alphaTest,S.map=v.map,S.clipShadows=v.clipShadows,S.clippingPlanes=v.clippingPlanes,S.clipIntersection=v.clipIntersection,S.displacementMap=v.displacementMap,S.displacementScale=v.displacementScale,S.displacementBias=v.displacementBias,S.wireframeLinewidth=v.wireframeLinewidth,S.linewidth=v.linewidth,R.isPointLight===!0&&S.isMeshDistanceMaterial===!0){const H=r.properties.get(S);H.light=R}return S}function T(A,v,R,W,S){if(A.visible===!1)return;if(A.layers.test(v.layers)&&(A.isMesh||A.isLine||A.isPoints)&&(A.castShadow||A.receiveShadow&&S===xs)&&(!A.frustumCulled||n.intersectsObject(A))){A.modelViewMatrix.multiplyMatrices(R.matrixWorldInverse,A.matrixWorld);const z=t.update(A),Z=A.material;if(Array.isArray(Z)){const tt=z.groups;for(let q=0,nt=tt.length;q<nt;q++){const $=tt[q],ct=Z[$.materialIndex];if(ct&&ct.visible){const ut=_(A,ct,W,S);A.onBeforeShadow(r,A,v,R,z,ut,$),r.renderBufferDirect(R,null,z,ut,A,$),A.onAfterShadow(r,A,v,R,z,ut,$)}}}else if(Z.visible){const tt=_(A,Z,W,S);A.onBeforeShadow(r,A,v,R,z,tt,null),r.renderBufferDirect(R,null,z,tt,A,null),A.onAfterShadow(r,A,v,R,z,tt,null)}}const H=A.children;for(let z=0,Z=H.length;z<Z;z++)T(H[z],v,R,W,S)}function w(A){A.target.removeEventListener("dispose",w);for(const R in c){const W=c[R],S=A.target.uuid;S in W&&(W[S].dispose(),delete W[S])}}}const IN={[mp]:gp,[xp]:Sp,[_p]:Tp,[La]:yp,[gp]:mp,[Sp]:xp,[Tp]:_p,[yp]:La};function DN(r){function t(){let F=!1;const Mt=new Je;let Y=null;const ot=new Je(0,0,0,0);return{setMask:function(yt){Y!==yt&&!F&&(r.colorMask(yt,yt,yt,yt),Y=yt)},setLocked:function(yt){F=yt},setClear:function(yt,vt,pe,We,qn){qn===!0&&(yt*=We,vt*=We,pe*=We),Mt.set(yt,vt,pe,We),ot.equals(Mt)===!1&&(r.clearColor(yt,vt,pe,We),ot.copy(Mt))},reset:function(){F=!1,Y=null,ot.set(-1,0,0,0)}}}function e(){let F=!1,Mt=!1,Y=null,ot=null,yt=null;return{setReversed:function(vt){Mt=vt},setTest:function(vt){vt?Rt(r.DEPTH_TEST):bt(r.DEPTH_TEST)},setMask:function(vt){Y!==vt&&!F&&(r.depthMask(vt),Y=vt)},setFunc:function(vt){if(Mt&&(vt=IN[vt]),ot!==vt){switch(vt){case mp:r.depthFunc(r.NEVER);break;case gp:r.depthFunc(r.ALWAYS);break;case xp:r.depthFunc(r.LESS);break;case La:r.depthFunc(r.LEQUAL);break;case _p:r.depthFunc(r.EQUAL);break;case yp:r.depthFunc(r.GEQUAL);break;case Sp:r.depthFunc(r.GREATER);break;case Tp:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}ot=vt}},setLocked:function(vt){F=vt},setClear:function(vt){yt!==vt&&(r.clearDepth(vt),yt=vt)},reset:function(){F=!1,Y=null,ot=null,yt=null}}}function n(){let F=!1,Mt=null,Y=null,ot=null,yt=null,vt=null,pe=null,We=null,qn=null;return{setTest:function(ye){F||(ye?Rt(r.STENCIL_TEST):bt(r.STENCIL_TEST))},setMask:function(ye){Mt!==ye&&!F&&(r.stencilMask(ye),Mt=ye)},setFunc:function(ye,Xn,rs){(Y!==ye||ot!==Xn||yt!==rs)&&(r.stencilFunc(ye,Xn,rs),Y=ye,ot=Xn,yt=rs)},setOp:function(ye,Xn,rs){(vt!==ye||pe!==Xn||We!==rs)&&(r.stencilOp(ye,Xn,rs),vt=ye,pe=Xn,We=rs)},setLocked:function(ye){F=ye},setClear:function(ye){qn!==ye&&(r.clearStencil(ye),qn=ye)},reset:function(){F=!1,Mt=null,Y=null,ot=null,yt=null,vt=null,pe=null,We=null,qn=null}}}const i=new t,s=new e,o=new n,a=new WeakMap,l=new WeakMap;let c={},h={},u=new WeakMap,d=[],f=null,p=!1,x=null,m=null,g=null,y=null,_=null,T=null,w=null,A=new ae(0,0,0),v=0,R=!1,W=null,S=null,b=null,H=null,z=null;const Z=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let tt=!1,q=0;const nt=r.getParameter(r.VERSION);nt.indexOf("WebGL")!==-1?(q=parseFloat(/^WebGL (\d)/.exec(nt)[1]),tt=q>=1):nt.indexOf("OpenGL ES")!==-1&&(q=parseFloat(/^OpenGL ES (\d)/.exec(nt)[1]),tt=q>=2);let $=null,ct={};const ut=r.getParameter(r.SCISSOR_BOX),mt=r.getParameter(r.VIEWPORT),ne=new Je().fromArray(ut),ce=new Je().fromArray(mt);function J(F,Mt,Y,ot){const yt=new Uint8Array(4),vt=r.createTexture();r.bindTexture(F,vt),r.texParameteri(F,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(F,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let pe=0;pe<Y;pe++)F===r.TEXTURE_3D||F===r.TEXTURE_2D_ARRAY?r.texImage3D(Mt,0,r.RGBA,1,1,ot,0,r.RGBA,r.UNSIGNED_BYTE,yt):r.texImage2D(Mt+pe,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,yt);return vt}const lt={};lt[r.TEXTURE_2D]=J(r.TEXTURE_2D,r.TEXTURE_2D,1),lt[r.TEXTURE_CUBE_MAP]=J(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),lt[r.TEXTURE_2D_ARRAY]=J(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),lt[r.TEXTURE_3D]=J(r.TEXTURE_3D,r.TEXTURE_3D,1,1),i.setClear(0,0,0,1),s.setClear(1),o.setClear(0),Rt(r.DEPTH_TEST),s.setFunc(La),he(!1),ge(bx),Rt(r.CULL_FACE),P(dr);function Rt(F){c[F]!==!0&&(r.enable(F),c[F]=!0)}function bt(F){c[F]!==!1&&(r.disable(F),c[F]=!1)}function Xt(F,Mt){return h[F]!==Mt?(r.bindFramebuffer(F,Mt),h[F]=Mt,F===r.DRAW_FRAMEBUFFER&&(h[r.FRAMEBUFFER]=Mt),F===r.FRAMEBUFFER&&(h[r.DRAW_FRAMEBUFFER]=Mt),!0):!1}function zt(F,Mt){let Y=d,ot=!1;if(F){Y=u.get(Mt),Y===void 0&&(Y=[],u.set(Mt,Y));const yt=F.textures;if(Y.length!==yt.length||Y[0]!==r.COLOR_ATTACHMENT0){for(let vt=0,pe=yt.length;vt<pe;vt++)Y[vt]=r.COLOR_ATTACHMENT0+vt;Y.length=yt.length,ot=!0}}else Y[0]!==r.BACK&&(Y[0]=r.BACK,ot=!0);ot&&r.drawBuffers(Y)}function de(F){return f!==F?(r.useProgram(F),f=F,!0):!1}const we={[qr]:r.FUNC_ADD,[Dv]:r.FUNC_SUBTRACT,[Lv]:r.FUNC_REVERSE_SUBTRACT};we[Uv]=r.MIN,we[Bv]=r.MAX;const fe={[Ov]:r.ZERO,[zv]:r.ONE,[Gv]:r.SRC_COLOR,[fp]:r.SRC_ALPHA,[qv]:r.SRC_ALPHA_SATURATE,[$v]:r.DST_COLOR,[Vv]:r.DST_ALPHA,[kv]:r.ONE_MINUS_SRC_COLOR,[pp]:r.ONE_MINUS_SRC_ALPHA,[Wv]:r.ONE_MINUS_DST_COLOR,[Hv]:r.ONE_MINUS_DST_ALPHA,[Xv]:r.CONSTANT_COLOR,[Yv]:r.ONE_MINUS_CONSTANT_COLOR,[jv]:r.CONSTANT_ALPHA,[Kv]:r.ONE_MINUS_CONSTANT_ALPHA};function P(F,Mt,Y,ot,yt,vt,pe,We,qn,ye){if(F===dr){p===!0&&(bt(r.BLEND),p=!1);return}if(p===!1&&(Rt(r.BLEND),p=!0),F!==Iv){if(F!==x||ye!==R){if((m!==qr||_!==qr)&&(r.blendEquation(r.FUNC_ADD),m=qr,_=qr),ye)switch(F){case Ea:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case dp:r.blendFunc(r.ONE,r.ONE);break;case Ex:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case Ax:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",F);break}else switch(F){case Ea:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case dp:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case Ex:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case Ax:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",F);break}g=null,y=null,T=null,w=null,A.set(0,0,0),v=0,x=F,R=ye}return}yt=yt||Mt,vt=vt||Y,pe=pe||ot,(Mt!==m||yt!==_)&&(r.blendEquationSeparate(we[Mt],we[yt]),m=Mt,_=yt),(Y!==g||ot!==y||vt!==T||pe!==w)&&(r.blendFuncSeparate(fe[Y],fe[ot],fe[vt],fe[pe]),g=Y,y=ot,T=vt,w=pe),(We.equals(A)===!1||qn!==v)&&(r.blendColor(We.r,We.g,We.b,qn),A.copy(We),v=qn),x=F,R=!1}function ei(F,Mt){F.side===Ui?bt(r.CULL_FACE):Rt(r.CULL_FACE);let Y=F.side===Zn;Mt&&(Y=!Y),he(Y),F.blending===Ea&&F.transparent===!1?P(dr):P(F.blending,F.blendEquation,F.blendSrc,F.blendDst,F.blendEquationAlpha,F.blendSrcAlpha,F.blendDstAlpha,F.blendColor,F.blendAlpha,F.premultipliedAlpha),s.setFunc(F.depthFunc),s.setTest(F.depthTest),s.setMask(F.depthWrite),i.setMask(F.colorWrite);const ot=F.stencilWrite;o.setTest(ot),ot&&(o.setMask(F.stencilWriteMask),o.setFunc(F.stencilFunc,F.stencilRef,F.stencilFuncMask),o.setOp(F.stencilFail,F.stencilZFail,F.stencilZPass)),Pe(F.polygonOffset,F.polygonOffsetFactor,F.polygonOffsetUnits),F.alphaToCoverage===!0?Rt(r.SAMPLE_ALPHA_TO_COVERAGE):bt(r.SAMPLE_ALPHA_TO_COVERAGE)}function he(F){W!==F&&(F?r.frontFace(r.CW):r.frontFace(r.CCW),W=F)}function ge(F){F!==Cv?(Rt(r.CULL_FACE),F!==S&&(F===bx?r.cullFace(r.BACK):F===Pv?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):bt(r.CULL_FACE),S=F}function kt(F){F!==b&&(tt&&r.lineWidth(F),b=F)}function Pe(F,Mt,Y){F?(Rt(r.POLYGON_OFFSET_FILL),(H!==Mt||z!==Y)&&(r.polygonOffset(Mt,Y),H=Mt,z=Y)):bt(r.POLYGON_OFFSET_FILL)}function Wt(F){F?Rt(r.SCISSOR_TEST):bt(r.SCISSOR_TEST)}function N(F){F===void 0&&(F=r.TEXTURE0+Z-1),$!==F&&(r.activeTexture(F),$=F)}function M(F,Mt,Y){Y===void 0&&($===null?Y=r.TEXTURE0+Z-1:Y=$);let ot=ct[Y];ot===void 0&&(ot={type:void 0,texture:void 0},ct[Y]=ot),(ot.type!==F||ot.texture!==Mt)&&($!==Y&&(r.activeTexture(Y),$=Y),r.bindTexture(F,Mt||lt[F]),ot.type=F,ot.texture=Mt)}function G(){const F=ct[$];F!==void 0&&F.type!==void 0&&(r.bindTexture(F.type,null),F.type=void 0,F.texture=void 0)}function it(){try{r.compressedTexImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function at(){try{r.compressedTexImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function et(){try{r.texSubImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function Ft(){try{r.texSubImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function _t(){try{r.compressedTexSubImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function Et(){try{r.compressedTexSubImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function xe(){try{r.texStorage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function dt(){try{r.texStorage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function At(){try{r.texImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function Vt(){try{r.texImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function Ht(F){ne.equals(F)===!1&&(r.scissor(F.x,F.y,F.z,F.w),ne.copy(F))}function wt(F){ce.equals(F)===!1&&(r.viewport(F.x,F.y,F.z,F.w),ce.copy(F))}function ue(F,Mt){let Y=l.get(Mt);Y===void 0&&(Y=new WeakMap,l.set(Mt,Y));let ot=Y.get(F);ot===void 0&&(ot=r.getUniformBlockIndex(Mt,F.name),Y.set(F,ot))}function Yt(F,Mt){const ot=l.get(Mt).get(F);a.get(Mt)!==ot&&(r.uniformBlockBinding(Mt,ot,F.__bindingPointIndex),a.set(Mt,ot))}function Ce(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),c={},$=null,ct={},h={},u=new WeakMap,d=[],f=null,p=!1,x=null,m=null,g=null,y=null,_=null,T=null,w=null,A=new ae(0,0,0),v=0,R=!1,W=null,S=null,b=null,H=null,z=null,ne.set(0,0,r.canvas.width,r.canvas.height),ce.set(0,0,r.canvas.width,r.canvas.height),i.reset(),s.reset(),o.reset()}return{buffers:{color:i,depth:s,stencil:o},enable:Rt,disable:bt,bindFramebuffer:Xt,drawBuffers:zt,useProgram:de,setBlending:P,setMaterial:ei,setFlipSided:he,setCullFace:ge,setLineWidth:kt,setPolygonOffset:Pe,setScissorTest:Wt,activeTexture:N,bindTexture:M,unbindTexture:G,compressedTexImage2D:it,compressedTexImage3D:at,texImage2D:At,texImage3D:Vt,updateUBOMapping:ue,uniformBlockBinding:Yt,texStorage2D:xe,texStorage3D:dt,texSubImage2D:et,texSubImage3D:Ft,compressedTexSubImage2D:_t,compressedTexSubImage3D:Et,scissor:Ht,viewport:wt,reset:Ce}}function x0(r,t,e,n){const i=LN(n);switch(e){case Vy:return r*t;case $y:return r*t;case Wy:return r*t*2;case Jm:return r*t/i.components*i.byteLength;case tg:return r*t/i.components*i.byteLength;case qy:return r*t*2/i.components*i.byteLength;case eg:return r*t*2/i.components*i.byteLength;case Hy:return r*t*3/i.components*i.byteLength;case Gi:return r*t*4/i.components*i.byteLength;case ng:return r*t*4/i.components*i.byteLength;case Qh:case Jh:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*8;case tu:case eu:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case wp:case Rp:return Math.max(r,16)*Math.max(t,8)/4;case Ap:case Np:return Math.max(r,8)*Math.max(t,8)/2;case Cp:case Pp:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*8;case Fp:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case Ip:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case Dp:return Math.floor((r+4)/5)*Math.floor((t+3)/4)*16;case Lp:return Math.floor((r+4)/5)*Math.floor((t+4)/5)*16;case Up:return Math.floor((r+5)/6)*Math.floor((t+4)/5)*16;case Bp:return Math.floor((r+5)/6)*Math.floor((t+5)/6)*16;case Op:return Math.floor((r+7)/8)*Math.floor((t+4)/5)*16;case zp:return Math.floor((r+7)/8)*Math.floor((t+5)/6)*16;case Gp:return Math.floor((r+7)/8)*Math.floor((t+7)/8)*16;case kp:return Math.floor((r+9)/10)*Math.floor((t+4)/5)*16;case Vp:return Math.floor((r+9)/10)*Math.floor((t+5)/6)*16;case Hp:return Math.floor((r+9)/10)*Math.floor((t+7)/8)*16;case $p:return Math.floor((r+9)/10)*Math.floor((t+9)/10)*16;case Wp:return Math.floor((r+11)/12)*Math.floor((t+9)/10)*16;case qp:return Math.floor((r+11)/12)*Math.floor((t+11)/12)*16;case nu:case Xp:case Yp:return Math.ceil(r/4)*Math.ceil(t/4)*16;case Xy:case jp:return Math.ceil(r/4)*Math.ceil(t/4)*8;case Kp:case Zp:return Math.ceil(r/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function LN(r){switch(r){case Is:case zy:return{byteLength:1,components:1};case ic:case Gy:case mc:return{byteLength:2,components:1};case Zm:case Qm:return{byteLength:2,components:4};case eo:case Km:case Ki:return{byteLength:4,components:1};case ky:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${r}.`)}function UN(r,t,e,n,i,s,o){const a=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),c=new Jt,h=new WeakMap;let u;const d=new WeakMap;let f=!1;try{f=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function p(N,M){return f?new OffscreenCanvas(N,M):Su("canvas")}function x(N,M,G){let it=1;const at=Wt(N);if((at.width>G||at.height>G)&&(it=G/Math.max(at.width,at.height)),it<1)if(typeof HTMLImageElement<"u"&&N instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&N instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&N instanceof ImageBitmap||typeof VideoFrame<"u"&&N instanceof VideoFrame){const et=Math.floor(it*at.width),Ft=Math.floor(it*at.height);u===void 0&&(u=p(et,Ft));const _t=M?p(et,Ft):u;return _t.width=et,_t.height=Ft,_t.getContext("2d").drawImage(N,0,0,et,Ft),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+at.width+"x"+at.height+") to ("+et+"x"+Ft+")."),_t}else return"data"in N&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+at.width+"x"+at.height+")."),N;return N}function m(N){return N.generateMipmaps&&N.minFilter!==jn&&N.minFilter!==Bi}function g(N){r.generateMipmap(N)}function y(N,M,G,it,at=!1){if(N!==null){if(r[N]!==void 0)return r[N];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+N+"'")}let et=M;if(M===r.RED&&(G===r.FLOAT&&(et=r.R32F),G===r.HALF_FLOAT&&(et=r.R16F),G===r.UNSIGNED_BYTE&&(et=r.R8)),M===r.RED_INTEGER&&(G===r.UNSIGNED_BYTE&&(et=r.R8UI),G===r.UNSIGNED_SHORT&&(et=r.R16UI),G===r.UNSIGNED_INT&&(et=r.R32UI),G===r.BYTE&&(et=r.R8I),G===r.SHORT&&(et=r.R16I),G===r.INT&&(et=r.R32I)),M===r.RG&&(G===r.FLOAT&&(et=r.RG32F),G===r.HALF_FLOAT&&(et=r.RG16F),G===r.UNSIGNED_BYTE&&(et=r.RG8)),M===r.RG_INTEGER&&(G===r.UNSIGNED_BYTE&&(et=r.RG8UI),G===r.UNSIGNED_SHORT&&(et=r.RG16UI),G===r.UNSIGNED_INT&&(et=r.RG32UI),G===r.BYTE&&(et=r.RG8I),G===r.SHORT&&(et=r.RG16I),G===r.INT&&(et=r.RG32I)),M===r.RGB_INTEGER&&(G===r.UNSIGNED_BYTE&&(et=r.RGB8UI),G===r.UNSIGNED_SHORT&&(et=r.RGB16UI),G===r.UNSIGNED_INT&&(et=r.RGB32UI),G===r.BYTE&&(et=r.RGB8I),G===r.SHORT&&(et=r.RGB16I),G===r.INT&&(et=r.RGB32I)),M===r.RGBA_INTEGER&&(G===r.UNSIGNED_BYTE&&(et=r.RGBA8UI),G===r.UNSIGNED_SHORT&&(et=r.RGBA16UI),G===r.UNSIGNED_INT&&(et=r.RGBA32UI),G===r.BYTE&&(et=r.RGBA8I),G===r.SHORT&&(et=r.RGBA16I),G===r.INT&&(et=r.RGBA32I)),M===r.RGB&&G===r.UNSIGNED_INT_5_9_9_9_REV&&(et=r.RGB9_E5),M===r.RGBA){const Ft=at?gu:Me.getTransfer(it);G===r.FLOAT&&(et=r.RGBA32F),G===r.HALF_FLOAT&&(et=r.RGBA16F),G===r.UNSIGNED_BYTE&&(et=Ft===Ie?r.SRGB8_ALPHA8:r.RGBA8),G===r.UNSIGNED_SHORT_4_4_4_4&&(et=r.RGBA4),G===r.UNSIGNED_SHORT_5_5_5_1&&(et=r.RGB5_A1)}return(et===r.R16F||et===r.R32F||et===r.RG16F||et===r.RG32F||et===r.RGBA16F||et===r.RGBA32F)&&t.get("EXT_color_buffer_float"),et}function _(N,M){let G;return N?M===null||M===eo||M===Oa?G=r.DEPTH24_STENCIL8:M===Ki?G=r.DEPTH32F_STENCIL8:M===ic&&(G=r.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):M===null||M===eo||M===Oa?G=r.DEPTH_COMPONENT24:M===Ki?G=r.DEPTH_COMPONENT32F:M===ic&&(G=r.DEPTH_COMPONENT16),G}function T(N,M){return m(N)===!0||N.isFramebufferTexture&&N.minFilter!==jn&&N.minFilter!==Bi?Math.log2(Math.max(M.width,M.height))+1:N.mipmaps!==void 0&&N.mipmaps.length>0?N.mipmaps.length:N.isCompressedTexture&&Array.isArray(N.image)?M.mipmaps.length:1}function w(N){const M=N.target;M.removeEventListener("dispose",w),v(M),M.isVideoTexture&&h.delete(M)}function A(N){const M=N.target;M.removeEventListener("dispose",A),W(M)}function v(N){const M=n.get(N);if(M.__webglInit===void 0)return;const G=N.source,it=d.get(G);if(it){const at=it[M.__cacheKey];at.usedTimes--,at.usedTimes===0&&R(N),Object.keys(it).length===0&&d.delete(G)}n.remove(N)}function R(N){const M=n.get(N);r.deleteTexture(M.__webglTexture);const G=N.source,it=d.get(G);delete it[M.__cacheKey],o.memory.textures--}function W(N){const M=n.get(N);if(N.depthTexture&&N.depthTexture.dispose(),N.isWebGLCubeRenderTarget)for(let it=0;it<6;it++){if(Array.isArray(M.__webglFramebuffer[it]))for(let at=0;at<M.__webglFramebuffer[it].length;at++)r.deleteFramebuffer(M.__webglFramebuffer[it][at]);else r.deleteFramebuffer(M.__webglFramebuffer[it]);M.__webglDepthbuffer&&r.deleteRenderbuffer(M.__webglDepthbuffer[it])}else{if(Array.isArray(M.__webglFramebuffer))for(let it=0;it<M.__webglFramebuffer.length;it++)r.deleteFramebuffer(M.__webglFramebuffer[it]);else r.deleteFramebuffer(M.__webglFramebuffer);if(M.__webglDepthbuffer&&r.deleteRenderbuffer(M.__webglDepthbuffer),M.__webglMultisampledFramebuffer&&r.deleteFramebuffer(M.__webglMultisampledFramebuffer),M.__webglColorRenderbuffer)for(let it=0;it<M.__webglColorRenderbuffer.length;it++)M.__webglColorRenderbuffer[it]&&r.deleteRenderbuffer(M.__webglColorRenderbuffer[it]);M.__webglDepthRenderbuffer&&r.deleteRenderbuffer(M.__webglDepthRenderbuffer)}const G=N.textures;for(let it=0,at=G.length;it<at;it++){const et=n.get(G[it]);et.__webglTexture&&(r.deleteTexture(et.__webglTexture),o.memory.textures--),n.remove(G[it])}n.remove(N)}let S=0;function b(){S=0}function H(){const N=S;return N>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+N+" texture units while this GPU supports only "+i.maxTextures),S+=1,N}function z(N){const M=[];return M.push(N.wrapS),M.push(N.wrapT),M.push(N.wrapR||0),M.push(N.magFilter),M.push(N.minFilter),M.push(N.anisotropy),M.push(N.internalFormat),M.push(N.format),M.push(N.type),M.push(N.generateMipmaps),M.push(N.premultiplyAlpha),M.push(N.flipY),M.push(N.unpackAlignment),M.push(N.colorSpace),M.join()}function Z(N,M){const G=n.get(N);if(N.isVideoTexture&&kt(N),N.isRenderTargetTexture===!1&&N.version>0&&G.__version!==N.version){const it=N.image;if(it===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(it.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{ce(G,N,M);return}}e.bindTexture(r.TEXTURE_2D,G.__webglTexture,r.TEXTURE0+M)}function tt(N,M){const G=n.get(N);if(N.version>0&&G.__version!==N.version){ce(G,N,M);return}e.bindTexture(r.TEXTURE_2D_ARRAY,G.__webglTexture,r.TEXTURE0+M)}function q(N,M){const G=n.get(N);if(N.version>0&&G.__version!==N.version){ce(G,N,M);return}e.bindTexture(r.TEXTURE_3D,G.__webglTexture,r.TEXTURE0+M)}function nt(N,M){const G=n.get(N);if(N.version>0&&G.__version!==N.version){J(G,N,M);return}e.bindTexture(r.TEXTURE_CUBE_MAP,G.__webglTexture,r.TEXTURE0+M)}const $={[bp]:r.REPEAT,[jr]:r.CLAMP_TO_EDGE,[Ep]:r.MIRRORED_REPEAT},ct={[jn]:r.NEAREST,[ob]:r.NEAREST_MIPMAP_NEAREST,[kc]:r.NEAREST_MIPMAP_LINEAR,[Bi]:r.LINEAR,[vd]:r.LINEAR_MIPMAP_NEAREST,[Kr]:r.LINEAR_MIPMAP_LINEAR},ut={[hb]:r.NEVER,[gb]:r.ALWAYS,[ub]:r.LESS,[Yy]:r.LEQUAL,[db]:r.EQUAL,[mb]:r.GEQUAL,[fb]:r.GREATER,[pb]:r.NOTEQUAL};function mt(N,M){if(M.type===Ki&&t.has("OES_texture_float_linear")===!1&&(M.magFilter===Bi||M.magFilter===vd||M.magFilter===kc||M.magFilter===Kr||M.minFilter===Bi||M.minFilter===vd||M.minFilter===kc||M.minFilter===Kr)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),r.texParameteri(N,r.TEXTURE_WRAP_S,$[M.wrapS]),r.texParameteri(N,r.TEXTURE_WRAP_T,$[M.wrapT]),(N===r.TEXTURE_3D||N===r.TEXTURE_2D_ARRAY)&&r.texParameteri(N,r.TEXTURE_WRAP_R,$[M.wrapR]),r.texParameteri(N,r.TEXTURE_MAG_FILTER,ct[M.magFilter]),r.texParameteri(N,r.TEXTURE_MIN_FILTER,ct[M.minFilter]),M.compareFunction&&(r.texParameteri(N,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(N,r.TEXTURE_COMPARE_FUNC,ut[M.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(M.magFilter===jn||M.minFilter!==kc&&M.minFilter!==Kr||M.type===Ki&&t.has("OES_texture_float_linear")===!1)return;if(M.anisotropy>1||n.get(M).__currentAnisotropy){const G=t.get("EXT_texture_filter_anisotropic");r.texParameterf(N,G.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(M.anisotropy,i.getMaxAnisotropy())),n.get(M).__currentAnisotropy=M.anisotropy}}}function ne(N,M){let G=!1;N.__webglInit===void 0&&(N.__webglInit=!0,M.addEventListener("dispose",w));const it=M.source;let at=d.get(it);at===void 0&&(at={},d.set(it,at));const et=z(M);if(et!==N.__cacheKey){at[et]===void 0&&(at[et]={texture:r.createTexture(),usedTimes:0},o.memory.textures++,G=!0),at[et].usedTimes++;const Ft=at[N.__cacheKey];Ft!==void 0&&(at[N.__cacheKey].usedTimes--,Ft.usedTimes===0&&R(M)),N.__cacheKey=et,N.__webglTexture=at[et].texture}return G}function ce(N,M,G){let it=r.TEXTURE_2D;(M.isDataArrayTexture||M.isCompressedArrayTexture)&&(it=r.TEXTURE_2D_ARRAY),M.isData3DTexture&&(it=r.TEXTURE_3D);const at=ne(N,M),et=M.source;e.bindTexture(it,N.__webglTexture,r.TEXTURE0+G);const Ft=n.get(et);if(et.version!==Ft.__version||at===!0){e.activeTexture(r.TEXTURE0+G);const _t=Me.getPrimaries(Me.workingColorSpace),Et=M.colorSpace===ar?null:Me.getPrimaries(M.colorSpace),xe=M.colorSpace===ar||_t===Et?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,M.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,M.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,M.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,xe);let dt=x(M.image,!1,i.maxTextureSize);dt=Pe(M,dt);const At=s.convert(M.format,M.colorSpace),Vt=s.convert(M.type);let Ht=y(M.internalFormat,At,Vt,M.colorSpace,M.isVideoTexture);mt(it,M);let wt;const ue=M.mipmaps,Yt=M.isVideoTexture!==!0,Ce=Ft.__version===void 0||at===!0,F=et.dataReady,Mt=T(M,dt);if(M.isDepthTexture)Ht=_(M.format===za,M.type),Ce&&(Yt?e.texStorage2D(r.TEXTURE_2D,1,Ht,dt.width,dt.height):e.texImage2D(r.TEXTURE_2D,0,Ht,dt.width,dt.height,0,At,Vt,null));else if(M.isDataTexture)if(ue.length>0){Yt&&Ce&&e.texStorage2D(r.TEXTURE_2D,Mt,Ht,ue[0].width,ue[0].height);for(let Y=0,ot=ue.length;Y<ot;Y++)wt=ue[Y],Yt?F&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,wt.width,wt.height,At,Vt,wt.data):e.texImage2D(r.TEXTURE_2D,Y,Ht,wt.width,wt.height,0,At,Vt,wt.data);M.generateMipmaps=!1}else Yt?(Ce&&e.texStorage2D(r.TEXTURE_2D,Mt,Ht,dt.width,dt.height),F&&e.texSubImage2D(r.TEXTURE_2D,0,0,0,dt.width,dt.height,At,Vt,dt.data)):e.texImage2D(r.TEXTURE_2D,0,Ht,dt.width,dt.height,0,At,Vt,dt.data);else if(M.isCompressedTexture)if(M.isCompressedArrayTexture){Yt&&Ce&&e.texStorage3D(r.TEXTURE_2D_ARRAY,Mt,Ht,ue[0].width,ue[0].height,dt.depth);for(let Y=0,ot=ue.length;Y<ot;Y++)if(wt=ue[Y],M.format!==Gi)if(At!==null)if(Yt){if(F)if(M.layerUpdates.size>0){const yt=x0(wt.width,wt.height,M.format,M.type);for(const vt of M.layerUpdates){const pe=wt.data.subarray(vt*yt/wt.data.BYTES_PER_ELEMENT,(vt+1)*yt/wt.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,vt,wt.width,wt.height,1,At,pe,0,0)}M.clearLayerUpdates()}else e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,0,wt.width,wt.height,dt.depth,At,wt.data,0,0)}else e.compressedTexImage3D(r.TEXTURE_2D_ARRAY,Y,Ht,wt.width,wt.height,dt.depth,0,wt.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else Yt?F&&e.texSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,0,wt.width,wt.height,dt.depth,At,Vt,wt.data):e.texImage3D(r.TEXTURE_2D_ARRAY,Y,Ht,wt.width,wt.height,dt.depth,0,At,Vt,wt.data)}else{Yt&&Ce&&e.texStorage2D(r.TEXTURE_2D,Mt,Ht,ue[0].width,ue[0].height);for(let Y=0,ot=ue.length;Y<ot;Y++)wt=ue[Y],M.format!==Gi?At!==null?Yt?F&&e.compressedTexSubImage2D(r.TEXTURE_2D,Y,0,0,wt.width,wt.height,At,wt.data):e.compressedTexImage2D(r.TEXTURE_2D,Y,Ht,wt.width,wt.height,0,wt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Yt?F&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,wt.width,wt.height,At,Vt,wt.data):e.texImage2D(r.TEXTURE_2D,Y,Ht,wt.width,wt.height,0,At,Vt,wt.data)}else if(M.isDataArrayTexture)if(Yt){if(Ce&&e.texStorage3D(r.TEXTURE_2D_ARRAY,Mt,Ht,dt.width,dt.height,dt.depth),F)if(M.layerUpdates.size>0){const Y=x0(dt.width,dt.height,M.format,M.type);for(const ot of M.layerUpdates){const yt=dt.data.subarray(ot*Y/dt.data.BYTES_PER_ELEMENT,(ot+1)*Y/dt.data.BYTES_PER_ELEMENT);e.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,ot,dt.width,dt.height,1,At,Vt,yt)}M.clearLayerUpdates()}else e.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,dt.width,dt.height,dt.depth,At,Vt,dt.data)}else e.texImage3D(r.TEXTURE_2D_ARRAY,0,Ht,dt.width,dt.height,dt.depth,0,At,Vt,dt.data);else if(M.isData3DTexture)Yt?(Ce&&e.texStorage3D(r.TEXTURE_3D,Mt,Ht,dt.width,dt.height,dt.depth),F&&e.texSubImage3D(r.TEXTURE_3D,0,0,0,0,dt.width,dt.height,dt.depth,At,Vt,dt.data)):e.texImage3D(r.TEXTURE_3D,0,Ht,dt.width,dt.height,dt.depth,0,At,Vt,dt.data);else if(M.isFramebufferTexture){if(Ce)if(Yt)e.texStorage2D(r.TEXTURE_2D,Mt,Ht,dt.width,dt.height);else{let Y=dt.width,ot=dt.height;for(let yt=0;yt<Mt;yt++)e.texImage2D(r.TEXTURE_2D,yt,Ht,Y,ot,0,At,Vt,null),Y>>=1,ot>>=1}}else if(ue.length>0){if(Yt&&Ce){const Y=Wt(ue[0]);e.texStorage2D(r.TEXTURE_2D,Mt,Ht,Y.width,Y.height)}for(let Y=0,ot=ue.length;Y<ot;Y++)wt=ue[Y],Yt?F&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,At,Vt,wt):e.texImage2D(r.TEXTURE_2D,Y,Ht,At,Vt,wt);M.generateMipmaps=!1}else if(Yt){if(Ce){const Y=Wt(dt);e.texStorage2D(r.TEXTURE_2D,Mt,Ht,Y.width,Y.height)}F&&e.texSubImage2D(r.TEXTURE_2D,0,0,0,At,Vt,dt)}else e.texImage2D(r.TEXTURE_2D,0,Ht,At,Vt,dt);m(M)&&g(it),Ft.__version=et.version,M.onUpdate&&M.onUpdate(M)}N.__version=M.version}function J(N,M,G){if(M.image.length!==6)return;const it=ne(N,M),at=M.source;e.bindTexture(r.TEXTURE_CUBE_MAP,N.__webglTexture,r.TEXTURE0+G);const et=n.get(at);if(at.version!==et.__version||it===!0){e.activeTexture(r.TEXTURE0+G);const Ft=Me.getPrimaries(Me.workingColorSpace),_t=M.colorSpace===ar?null:Me.getPrimaries(M.colorSpace),Et=M.colorSpace===ar||Ft===_t?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,M.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,M.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,M.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Et);const xe=M.isCompressedTexture||M.image[0].isCompressedTexture,dt=M.image[0]&&M.image[0].isDataTexture,At=[];for(let ot=0;ot<6;ot++)!xe&&!dt?At[ot]=x(M.image[ot],!0,i.maxCubemapSize):At[ot]=dt?M.image[ot].image:M.image[ot],At[ot]=Pe(M,At[ot]);const Vt=At[0],Ht=s.convert(M.format,M.colorSpace),wt=s.convert(M.type),ue=y(M.internalFormat,Ht,wt,M.colorSpace),Yt=M.isVideoTexture!==!0,Ce=et.__version===void 0||it===!0,F=at.dataReady;let Mt=T(M,Vt);mt(r.TEXTURE_CUBE_MAP,M);let Y;if(xe){Yt&&Ce&&e.texStorage2D(r.TEXTURE_CUBE_MAP,Mt,ue,Vt.width,Vt.height);for(let ot=0;ot<6;ot++){Y=At[ot].mipmaps;for(let yt=0;yt<Y.length;yt++){const vt=Y[yt];M.format!==Gi?Ht!==null?Yt?F&&e.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,yt,0,0,vt.width,vt.height,Ht,vt.data):e.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,yt,ue,vt.width,vt.height,0,vt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,yt,0,0,vt.width,vt.height,Ht,wt,vt.data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,yt,ue,vt.width,vt.height,0,Ht,wt,vt.data)}}}else{if(Y=M.mipmaps,Yt&&Ce){Y.length>0&&Mt++;const ot=Wt(At[0]);e.texStorage2D(r.TEXTURE_CUBE_MAP,Mt,ue,ot.width,ot.height)}for(let ot=0;ot<6;ot++)if(dt){Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,0,0,0,At[ot].width,At[ot].height,Ht,wt,At[ot].data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,0,ue,At[ot].width,At[ot].height,0,Ht,wt,At[ot].data);for(let yt=0;yt<Y.length;yt++){const pe=Y[yt].image[ot].image;Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,yt+1,0,0,pe.width,pe.height,Ht,wt,pe.data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,yt+1,ue,pe.width,pe.height,0,Ht,wt,pe.data)}}else{Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,0,0,0,Ht,wt,At[ot]):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,0,ue,Ht,wt,At[ot]);for(let yt=0;yt<Y.length;yt++){const vt=Y[yt];Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,yt+1,0,0,Ht,wt,vt.image[ot]):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ot,yt+1,ue,Ht,wt,vt.image[ot])}}}m(M)&&g(r.TEXTURE_CUBE_MAP),et.__version=at.version,M.onUpdate&&M.onUpdate(M)}N.__version=M.version}function lt(N,M,G,it,at,et){const Ft=s.convert(G.format,G.colorSpace),_t=s.convert(G.type),Et=y(G.internalFormat,Ft,_t,G.colorSpace);if(!n.get(M).__hasExternalTextures){const dt=Math.max(1,M.width>>et),At=Math.max(1,M.height>>et);at===r.TEXTURE_3D||at===r.TEXTURE_2D_ARRAY?e.texImage3D(at,et,Et,dt,At,M.depth,0,Ft,_t,null):e.texImage2D(at,et,Et,dt,At,0,Ft,_t,null)}e.bindFramebuffer(r.FRAMEBUFFER,N),ge(M)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,it,at,n.get(G).__webglTexture,0,he(M)):(at===r.TEXTURE_2D||at>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&at<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,it,at,n.get(G).__webglTexture,et),e.bindFramebuffer(r.FRAMEBUFFER,null)}function Rt(N,M,G){if(r.bindRenderbuffer(r.RENDERBUFFER,N),M.depthBuffer){const it=M.depthTexture,at=it&&it.isDepthTexture?it.type:null,et=_(M.stencilBuffer,at),Ft=M.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,_t=he(M);ge(M)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,_t,et,M.width,M.height):G?r.renderbufferStorageMultisample(r.RENDERBUFFER,_t,et,M.width,M.height):r.renderbufferStorage(r.RENDERBUFFER,et,M.width,M.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,Ft,r.RENDERBUFFER,N)}else{const it=M.textures;for(let at=0;at<it.length;at++){const et=it[at],Ft=s.convert(et.format,et.colorSpace),_t=s.convert(et.type),Et=y(et.internalFormat,Ft,_t,et.colorSpace),xe=he(M);G&&ge(M)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,xe,Et,M.width,M.height):ge(M)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,xe,Et,M.width,M.height):r.renderbufferStorage(r.RENDERBUFFER,Et,M.width,M.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function bt(N,M){if(M&&M.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(r.FRAMEBUFFER,N),!(M.depthTexture&&M.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(M.depthTexture).__webglTexture||M.depthTexture.image.width!==M.width||M.depthTexture.image.height!==M.height)&&(M.depthTexture.image.width=M.width,M.depthTexture.image.height=M.height,M.depthTexture.needsUpdate=!0),Z(M.depthTexture,0);const it=n.get(M.depthTexture).__webglTexture,at=he(M);if(M.depthTexture.format===Aa)ge(M)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,it,0,at):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,it,0);else if(M.depthTexture.format===za)ge(M)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,it,0,at):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,it,0);else throw new Error("Unknown depthTexture format")}function Xt(N){const M=n.get(N),G=N.isWebGLCubeRenderTarget===!0;if(M.__boundDepthTexture!==N.depthTexture){const it=N.depthTexture;if(M.__depthDisposeCallback&&M.__depthDisposeCallback(),it){const at=()=>{delete M.__boundDepthTexture,delete M.__depthDisposeCallback,it.removeEventListener("dispose",at)};it.addEventListener("dispose",at),M.__depthDisposeCallback=at}M.__boundDepthTexture=it}if(N.depthTexture&&!M.__autoAllocateDepthBuffer){if(G)throw new Error("target.depthTexture not supported in Cube render targets");bt(M.__webglFramebuffer,N)}else if(G){M.__webglDepthbuffer=[];for(let it=0;it<6;it++)if(e.bindFramebuffer(r.FRAMEBUFFER,M.__webglFramebuffer[it]),M.__webglDepthbuffer[it]===void 0)M.__webglDepthbuffer[it]=r.createRenderbuffer(),Rt(M.__webglDepthbuffer[it],N,!1);else{const at=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,et=M.__webglDepthbuffer[it];r.bindRenderbuffer(r.RENDERBUFFER,et),r.framebufferRenderbuffer(r.FRAMEBUFFER,at,r.RENDERBUFFER,et)}}else if(e.bindFramebuffer(r.FRAMEBUFFER,M.__webglFramebuffer),M.__webglDepthbuffer===void 0)M.__webglDepthbuffer=r.createRenderbuffer(),Rt(M.__webglDepthbuffer,N,!1);else{const it=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,at=M.__webglDepthbuffer;r.bindRenderbuffer(r.RENDERBUFFER,at),r.framebufferRenderbuffer(r.FRAMEBUFFER,it,r.RENDERBUFFER,at)}e.bindFramebuffer(r.FRAMEBUFFER,null)}function zt(N,M,G){const it=n.get(N);M!==void 0&&lt(it.__webglFramebuffer,N,N.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),G!==void 0&&Xt(N)}function de(N){const M=N.texture,G=n.get(N),it=n.get(M);N.addEventListener("dispose",A);const at=N.textures,et=N.isWebGLCubeRenderTarget===!0,Ft=at.length>1;if(Ft||(it.__webglTexture===void 0&&(it.__webglTexture=r.createTexture()),it.__version=M.version,o.memory.textures++),et){G.__webglFramebuffer=[];for(let _t=0;_t<6;_t++)if(M.mipmaps&&M.mipmaps.length>0){G.__webglFramebuffer[_t]=[];for(let Et=0;Et<M.mipmaps.length;Et++)G.__webglFramebuffer[_t][Et]=r.createFramebuffer()}else G.__webglFramebuffer[_t]=r.createFramebuffer()}else{if(M.mipmaps&&M.mipmaps.length>0){G.__webglFramebuffer=[];for(let _t=0;_t<M.mipmaps.length;_t++)G.__webglFramebuffer[_t]=r.createFramebuffer()}else G.__webglFramebuffer=r.createFramebuffer();if(Ft)for(let _t=0,Et=at.length;_t<Et;_t++){const xe=n.get(at[_t]);xe.__webglTexture===void 0&&(xe.__webglTexture=r.createTexture(),o.memory.textures++)}if(N.samples>0&&ge(N)===!1){G.__webglMultisampledFramebuffer=r.createFramebuffer(),G.__webglColorRenderbuffer=[],e.bindFramebuffer(r.FRAMEBUFFER,G.__webglMultisampledFramebuffer);for(let _t=0;_t<at.length;_t++){const Et=at[_t];G.__webglColorRenderbuffer[_t]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,G.__webglColorRenderbuffer[_t]);const xe=s.convert(Et.format,Et.colorSpace),dt=s.convert(Et.type),At=y(Et.internalFormat,xe,dt,Et.colorSpace,N.isXRRenderTarget===!0),Vt=he(N);r.renderbufferStorageMultisample(r.RENDERBUFFER,Vt,At,N.width,N.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+_t,r.RENDERBUFFER,G.__webglColorRenderbuffer[_t])}r.bindRenderbuffer(r.RENDERBUFFER,null),N.depthBuffer&&(G.__webglDepthRenderbuffer=r.createRenderbuffer(),Rt(G.__webglDepthRenderbuffer,N,!0)),e.bindFramebuffer(r.FRAMEBUFFER,null)}}if(et){e.bindTexture(r.TEXTURE_CUBE_MAP,it.__webglTexture),mt(r.TEXTURE_CUBE_MAP,M);for(let _t=0;_t<6;_t++)if(M.mipmaps&&M.mipmaps.length>0)for(let Et=0;Et<M.mipmaps.length;Et++)lt(G.__webglFramebuffer[_t][Et],N,M,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+_t,Et);else lt(G.__webglFramebuffer[_t],N,M,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+_t,0);m(M)&&g(r.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(Ft){for(let _t=0,Et=at.length;_t<Et;_t++){const xe=at[_t],dt=n.get(xe);e.bindTexture(r.TEXTURE_2D,dt.__webglTexture),mt(r.TEXTURE_2D,xe),lt(G.__webglFramebuffer,N,xe,r.COLOR_ATTACHMENT0+_t,r.TEXTURE_2D,0),m(xe)&&g(r.TEXTURE_2D)}e.unbindTexture()}else{let _t=r.TEXTURE_2D;if((N.isWebGL3DRenderTarget||N.isWebGLArrayRenderTarget)&&(_t=N.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY),e.bindTexture(_t,it.__webglTexture),mt(_t,M),M.mipmaps&&M.mipmaps.length>0)for(let Et=0;Et<M.mipmaps.length;Et++)lt(G.__webglFramebuffer[Et],N,M,r.COLOR_ATTACHMENT0,_t,Et);else lt(G.__webglFramebuffer,N,M,r.COLOR_ATTACHMENT0,_t,0);m(M)&&g(_t),e.unbindTexture()}N.depthBuffer&&Xt(N)}function we(N){const M=N.textures;for(let G=0,it=M.length;G<it;G++){const at=M[G];if(m(at)){const et=N.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:r.TEXTURE_2D,Ft=n.get(at).__webglTexture;e.bindTexture(et,Ft),g(et),e.unbindTexture()}}}const fe=[],P=[];function ei(N){if(N.samples>0){if(ge(N)===!1){const M=N.textures,G=N.width,it=N.height;let at=r.COLOR_BUFFER_BIT;const et=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Ft=n.get(N),_t=M.length>1;if(_t)for(let Et=0;Et<M.length;Et++)e.bindFramebuffer(r.FRAMEBUFFER,Ft.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Et,r.RENDERBUFFER,null),e.bindFramebuffer(r.FRAMEBUFFER,Ft.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Et,r.TEXTURE_2D,null,0);e.bindFramebuffer(r.READ_FRAMEBUFFER,Ft.__webglMultisampledFramebuffer),e.bindFramebuffer(r.DRAW_FRAMEBUFFER,Ft.__webglFramebuffer);for(let Et=0;Et<M.length;Et++){if(N.resolveDepthBuffer&&(N.depthBuffer&&(at|=r.DEPTH_BUFFER_BIT),N.stencilBuffer&&N.resolveStencilBuffer&&(at|=r.STENCIL_BUFFER_BIT)),_t){r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,Ft.__webglColorRenderbuffer[Et]);const xe=n.get(M[Et]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,xe,0)}r.blitFramebuffer(0,0,G,it,0,0,G,it,at,r.NEAREST),l===!0&&(fe.length=0,P.length=0,fe.push(r.COLOR_ATTACHMENT0+Et),N.depthBuffer&&N.resolveDepthBuffer===!1&&(fe.push(et),P.push(et),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,P)),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,fe))}if(e.bindFramebuffer(r.READ_FRAMEBUFFER,null),e.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),_t)for(let Et=0;Et<M.length;Et++){e.bindFramebuffer(r.FRAMEBUFFER,Ft.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Et,r.RENDERBUFFER,Ft.__webglColorRenderbuffer[Et]);const xe=n.get(M[Et]).__webglTexture;e.bindFramebuffer(r.FRAMEBUFFER,Ft.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Et,r.TEXTURE_2D,xe,0)}e.bindFramebuffer(r.DRAW_FRAMEBUFFER,Ft.__webglMultisampledFramebuffer)}else if(N.depthBuffer&&N.resolveDepthBuffer===!1&&l){const M=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[M])}}}function he(N){return Math.min(i.maxSamples,N.samples)}function ge(N){const M=n.get(N);return N.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&M.__useRenderToTexture!==!1}function kt(N){const M=o.render.frame;h.get(N)!==M&&(h.set(N,M),N.update())}function Pe(N,M){const G=N.colorSpace,it=N.format,at=N.type;return N.isCompressedTexture===!0||N.isVideoTexture===!0||G!==vr&&G!==ar&&(Me.getTransfer(G)===Ie?(it!==Gi||at!==Is)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",G)),M}function Wt(N){return typeof HTMLImageElement<"u"&&N instanceof HTMLImageElement?(c.width=N.naturalWidth||N.width,c.height=N.naturalHeight||N.height):typeof VideoFrame<"u"&&N instanceof VideoFrame?(c.width=N.displayWidth,c.height=N.displayHeight):(c.width=N.width,c.height=N.height),c}this.allocateTextureUnit=H,this.resetTextureUnits=b,this.setTexture2D=Z,this.setTexture2DArray=tt,this.setTexture3D=q,this.setTextureCube=nt,this.rebindTextures=zt,this.setupRenderTarget=de,this.updateRenderTargetMipmap=we,this.updateMultisampleRenderTarget=ei,this.setupDepthRenderbuffer=Xt,this.setupFrameBufferTexture=lt,this.useMultisampledRTT=ge}function BN(r,t){function e(n,i=ar){let s;const o=Me.getTransfer(i);if(n===Is)return r.UNSIGNED_BYTE;if(n===Zm)return r.UNSIGNED_SHORT_4_4_4_4;if(n===Qm)return r.UNSIGNED_SHORT_5_5_5_1;if(n===ky)return r.UNSIGNED_INT_5_9_9_9_REV;if(n===zy)return r.BYTE;if(n===Gy)return r.SHORT;if(n===ic)return r.UNSIGNED_SHORT;if(n===Km)return r.INT;if(n===eo)return r.UNSIGNED_INT;if(n===Ki)return r.FLOAT;if(n===mc)return r.HALF_FLOAT;if(n===Vy)return r.ALPHA;if(n===Hy)return r.RGB;if(n===Gi)return r.RGBA;if(n===$y)return r.LUMINANCE;if(n===Wy)return r.LUMINANCE_ALPHA;if(n===Aa)return r.DEPTH_COMPONENT;if(n===za)return r.DEPTH_STENCIL;if(n===Jm)return r.RED;if(n===tg)return r.RED_INTEGER;if(n===qy)return r.RG;if(n===eg)return r.RG_INTEGER;if(n===ng)return r.RGBA_INTEGER;if(n===Qh||n===Jh||n===tu||n===eu)if(o===Ie)if(s=t.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(n===Qh)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Jh)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===tu)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===eu)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=t.get("WEBGL_compressed_texture_s3tc"),s!==null){if(n===Qh)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Jh)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===tu)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===eu)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===Ap||n===wp||n===Np||n===Rp)if(s=t.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(n===Ap)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===wp)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Np)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===Rp)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===Cp||n===Pp||n===Fp)if(s=t.get("WEBGL_compressed_texture_etc"),s!==null){if(n===Cp||n===Pp)return o===Ie?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(n===Fp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===Ip||n===Dp||n===Lp||n===Up||n===Bp||n===Op||n===zp||n===Gp||n===kp||n===Vp||n===Hp||n===$p||n===Wp||n===qp)if(s=t.get("WEBGL_compressed_texture_astc"),s!==null){if(n===Ip)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===Dp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===Lp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Up)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Bp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Op)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===zp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Gp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===kp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===Vp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Hp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===$p)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Wp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===qp)return o===Ie?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===nu||n===Xp||n===Yp)if(s=t.get("EXT_texture_compression_bptc"),s!==null){if(n===nu)return o===Ie?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Xp)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Yp)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===Xy||n===jp||n===Kp||n===Zp)if(s=t.get("EXT_texture_compression_rgtc"),s!==null){if(n===nu)return s.COMPRESSED_RED_RGTC1_EXT;if(n===jp)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Kp)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Zp)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===Oa?r.UNSIGNED_INT_24_8:r[n]!==void 0?r[n]:null}return{convert:e}}class ON extends Si{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class Hl extends Wn{constructor(){super(),this.isGroup=!0,this.type="Group"}}const zN={type:"move"};class Zd{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Hl,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Hl,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new U,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new U),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Hl,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new U,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new U),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,n){let i=null,s=null,o=null;const a=this._targetRay,l=this._grip,c=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(c&&t.hand){o=!0;for(const x of t.hand.values()){const m=e.getJointPose(x,n),g=this._getHandJoint(c,x);m!==null&&(g.matrix.fromArray(m.transform.matrix),g.matrix.decompose(g.position,g.rotation,g.scale),g.matrixWorldNeedsUpdate=!0,g.jointRadius=m.radius),g.visible=m!==null}const h=c.joints["index-finger-tip"],u=c.joints["thumb-tip"],d=h.position.distanceTo(u.position),f=.02,p=.005;c.inputState.pinching&&d>f+p?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!c.inputState.pinching&&d<=f-p&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,n),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));a!==null&&(i=e.getPose(t.targetRaySpace,n),i===null&&s!==null&&(i=s),i!==null&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(zN)))}return a!==null&&(a.visible=i!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=o!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const n=new Hl;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}const GN=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,kN=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class VN{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(this.texture===null){const i=new qi,s=t.properties.get(i);s.__webglTexture=e.texture,(e.depthNear!=n.depthNear||e.depthFar!=n.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=i}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,n=new _r({vertexShader:GN,fragmentShader:kN,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new Rn(new _o(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class HN extends mo{constructor(t,e){super();const n=this;let i=null,s=1,o=null,a="local-floor",l=1,c=null,h=null,u=null,d=null,f=null,p=null;const x=new VN,m=e.getContextAttributes();let g=null,y=null;const _=[],T=[],w=new Jt;let A=null;const v=new Si;v.layers.enable(1),v.viewport=new Je;const R=new Si;R.layers.enable(2),R.viewport=new Je;const W=[v,R],S=new ON;S.layers.enable(1),S.layers.enable(2);let b=null,H=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(J){let lt=_[J];return lt===void 0&&(lt=new Zd,_[J]=lt),lt.getTargetRaySpace()},this.getControllerGrip=function(J){let lt=_[J];return lt===void 0&&(lt=new Zd,_[J]=lt),lt.getGripSpace()},this.getHand=function(J){let lt=_[J];return lt===void 0&&(lt=new Zd,_[J]=lt),lt.getHandSpace()};function z(J){const lt=T.indexOf(J.inputSource);if(lt===-1)return;const Rt=_[lt];Rt!==void 0&&(Rt.update(J.inputSource,J.frame,c||o),Rt.dispatchEvent({type:J.type,data:J.inputSource}))}function Z(){i.removeEventListener("select",z),i.removeEventListener("selectstart",z),i.removeEventListener("selectend",z),i.removeEventListener("squeeze",z),i.removeEventListener("squeezestart",z),i.removeEventListener("squeezeend",z),i.removeEventListener("end",Z),i.removeEventListener("inputsourceschange",tt);for(let J=0;J<_.length;J++){const lt=T[J];lt!==null&&(T[J]=null,_[J].disconnect(lt))}b=null,H=null,x.reset(),t.setRenderTarget(g),f=null,d=null,u=null,i=null,y=null,ce.stop(),n.isPresenting=!1,t.setPixelRatio(A),t.setSize(w.width,w.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(J){s=J,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(J){a=J,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||o},this.setReferenceSpace=function(J){c=J},this.getBaseLayer=function(){return d!==null?d:f},this.getBinding=function(){return u},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=async function(J){if(i=J,i!==null){if(g=t.getRenderTarget(),i.addEventListener("select",z),i.addEventListener("selectstart",z),i.addEventListener("selectend",z),i.addEventListener("squeeze",z),i.addEventListener("squeezestart",z),i.addEventListener("squeezeend",z),i.addEventListener("end",Z),i.addEventListener("inputsourceschange",tt),m.xrCompatible!==!0&&await e.makeXRCompatible(),A=t.getPixelRatio(),t.getSize(w),i.renderState.layers===void 0){const lt={antialias:m.antialias,alpha:!0,depth:m.depth,stencil:m.stencil,framebufferScaleFactor:s};f=new XRWebGLLayer(i,e,lt),i.updateRenderState({baseLayer:f}),t.setPixelRatio(1),t.setSize(f.framebufferWidth,f.framebufferHeight,!1),y=new no(f.framebufferWidth,f.framebufferHeight,{format:Gi,type:Is,colorSpace:t.outputColorSpace,stencilBuffer:m.stencil})}else{let lt=null,Rt=null,bt=null;m.depth&&(bt=m.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,lt=m.stencil?za:Aa,Rt=m.stencil?Oa:eo);const Xt={colorFormat:e.RGBA8,depthFormat:bt,scaleFactor:s};u=new XRWebGLBinding(i,e),d=u.createProjectionLayer(Xt),i.updateRenderState({layers:[d]}),t.setPixelRatio(1),t.setSize(d.textureWidth,d.textureHeight,!1),y=new no(d.textureWidth,d.textureHeight,{format:Gi,type:Is,depthTexture:new pS(d.textureWidth,d.textureHeight,Rt,void 0,void 0,void 0,void 0,void 0,void 0,lt),stencilBuffer:m.stencil,colorSpace:t.outputColorSpace,samples:m.antialias?4:0,resolveDepthBuffer:d.ignoreDepthValues===!1})}y.isXRRenderTarget=!0,this.setFoveation(l),c=null,o=await i.requestReferenceSpace(a),ce.setContext(i),ce.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode},this.getDepthTexture=function(){return x.getDepthTexture()};function tt(J){for(let lt=0;lt<J.removed.length;lt++){const Rt=J.removed[lt],bt=T.indexOf(Rt);bt>=0&&(T[bt]=null,_[bt].disconnect(Rt))}for(let lt=0;lt<J.added.length;lt++){const Rt=J.added[lt];let bt=T.indexOf(Rt);if(bt===-1){for(let zt=0;zt<_.length;zt++)if(zt>=T.length){T.push(Rt),bt=zt;break}else if(T[zt]===null){T[zt]=Rt,bt=zt;break}if(bt===-1)break}const Xt=_[bt];Xt&&Xt.connect(Rt)}}const q=new U,nt=new U;function $(J,lt,Rt){q.setFromMatrixPosition(lt.matrixWorld),nt.setFromMatrixPosition(Rt.matrixWorld);const bt=q.distanceTo(nt),Xt=lt.projectionMatrix.elements,zt=Rt.projectionMatrix.elements,de=Xt[14]/(Xt[10]-1),we=Xt[14]/(Xt[10]+1),fe=(Xt[9]+1)/Xt[5],P=(Xt[9]-1)/Xt[5],ei=(Xt[8]-1)/Xt[0],he=(zt[8]+1)/zt[0],ge=de*ei,kt=de*he,Pe=bt/(-ei+he),Wt=Pe*-ei;if(lt.matrixWorld.decompose(J.position,J.quaternion,J.scale),J.translateX(Wt),J.translateZ(Pe),J.matrixWorld.compose(J.position,J.quaternion,J.scale),J.matrixWorldInverse.copy(J.matrixWorld).invert(),Xt[10]===-1)J.projectionMatrix.copy(lt.projectionMatrix),J.projectionMatrixInverse.copy(lt.projectionMatrixInverse);else{const N=de+Pe,M=we+Pe,G=ge-Wt,it=kt+(bt-Wt),at=fe*we/M*N,et=P*we/M*N;J.projectionMatrix.makePerspective(G,it,at,et,N,M),J.projectionMatrixInverse.copy(J.projectionMatrix).invert()}}function ct(J,lt){lt===null?J.matrixWorld.copy(J.matrix):J.matrixWorld.multiplyMatrices(lt.matrixWorld,J.matrix),J.matrixWorldInverse.copy(J.matrixWorld).invert()}this.updateCamera=function(J){if(i===null)return;let lt=J.near,Rt=J.far;x.texture!==null&&(x.depthNear>0&&(lt=x.depthNear),x.depthFar>0&&(Rt=x.depthFar)),S.near=R.near=v.near=lt,S.far=R.far=v.far=Rt,(b!==S.near||H!==S.far)&&(i.updateRenderState({depthNear:S.near,depthFar:S.far}),b=S.near,H=S.far);const bt=J.parent,Xt=S.cameras;ct(S,bt);for(let zt=0;zt<Xt.length;zt++)ct(Xt[zt],bt);Xt.length===2?$(S,v,R):S.projectionMatrix.copy(v.projectionMatrix),ut(J,S,bt)};function ut(J,lt,Rt){Rt===null?J.matrix.copy(lt.matrixWorld):(J.matrix.copy(Rt.matrixWorld),J.matrix.invert(),J.matrix.multiply(lt.matrixWorld)),J.matrix.decompose(J.position,J.quaternion,J.scale),J.updateMatrixWorld(!0),J.projectionMatrix.copy(lt.projectionMatrix),J.projectionMatrixInverse.copy(lt.projectionMatrixInverse),J.isPerspectiveCamera&&(J.fov=sc*2*Math.atan(1/J.projectionMatrix.elements[5]),J.zoom=1)}this.getCamera=function(){return S},this.getFoveation=function(){if(!(d===null&&f===null))return l},this.setFoveation=function(J){l=J,d!==null&&(d.fixedFoveation=J),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=J)},this.hasDepthSensing=function(){return x.texture!==null},this.getDepthSensingMesh=function(){return x.getMesh(S)};let mt=null;function ne(J,lt){if(h=lt.getViewerPose(c||o),p=lt,h!==null){const Rt=h.views;f!==null&&(t.setRenderTargetFramebuffer(y,f.framebuffer),t.setRenderTarget(y));let bt=!1;Rt.length!==S.cameras.length&&(S.cameras.length=0,bt=!0);for(let zt=0;zt<Rt.length;zt++){const de=Rt[zt];let we=null;if(f!==null)we=f.getViewport(de);else{const P=u.getViewSubImage(d,de);we=P.viewport,zt===0&&(t.setRenderTargetTextures(y,P.colorTexture,d.ignoreDepthValues?void 0:P.depthStencilTexture),t.setRenderTarget(y))}let fe=W[zt];fe===void 0&&(fe=new Si,fe.layers.enable(zt),fe.viewport=new Je,W[zt]=fe),fe.matrix.fromArray(de.transform.matrix),fe.matrix.decompose(fe.position,fe.quaternion,fe.scale),fe.projectionMatrix.fromArray(de.projectionMatrix),fe.projectionMatrixInverse.copy(fe.projectionMatrix).invert(),fe.viewport.set(we.x,we.y,we.width,we.height),zt===0&&(S.matrix.copy(fe.matrix),S.matrix.decompose(S.position,S.quaternion,S.scale)),bt===!0&&S.cameras.push(fe)}const Xt=i.enabledFeatures;if(Xt&&Xt.includes("depth-sensing")){const zt=u.getDepthInformation(Rt[0]);zt&&zt.isValid&&zt.texture&&x.init(t,zt,i.renderState)}}for(let Rt=0;Rt<_.length;Rt++){const bt=T[Rt],Xt=_[Rt];bt!==null&&Xt!==void 0&&Xt.update(bt,lt,c||o)}mt&&mt(J,lt),lt.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:lt}),p=null}const ce=new dS;ce.setAnimationLoop(ne),this.setAnimationLoop=function(J){mt=J},this.dispose=function(){}}}const Ir=new xr,$N=new Ue;function WN(r,t){function e(m,g){m.matrixAutoUpdate===!0&&m.updateMatrix(),g.value.copy(m.matrix)}function n(m,g){g.color.getRGB(m.fogColor.value,cS(r)),g.isFog?(m.fogNear.value=g.near,m.fogFar.value=g.far):g.isFogExp2&&(m.fogDensity.value=g.density)}function i(m,g,y,_,T){g.isMeshBasicMaterial||g.isMeshLambertMaterial?s(m,g):g.isMeshToonMaterial?(s(m,g),u(m,g)):g.isMeshPhongMaterial?(s(m,g),h(m,g)):g.isMeshStandardMaterial?(s(m,g),d(m,g),g.isMeshPhysicalMaterial&&f(m,g,T)):g.isMeshMatcapMaterial?(s(m,g),p(m,g)):g.isMeshDepthMaterial?s(m,g):g.isMeshDistanceMaterial?(s(m,g),x(m,g)):g.isMeshNormalMaterial?s(m,g):g.isLineBasicMaterial?(o(m,g),g.isLineDashedMaterial&&a(m,g)):g.isPointsMaterial?l(m,g,y,_):g.isSpriteMaterial?c(m,g):g.isShadowMaterial?(m.color.value.copy(g.color),m.opacity.value=g.opacity):g.isShaderMaterial&&(g.uniformsNeedUpdate=!1)}function s(m,g){m.opacity.value=g.opacity,g.color&&m.diffuse.value.copy(g.color),g.emissive&&m.emissive.value.copy(g.emissive).multiplyScalar(g.emissiveIntensity),g.map&&(m.map.value=g.map,e(g.map,m.mapTransform)),g.alphaMap&&(m.alphaMap.value=g.alphaMap,e(g.alphaMap,m.alphaMapTransform)),g.bumpMap&&(m.bumpMap.value=g.bumpMap,e(g.bumpMap,m.bumpMapTransform),m.bumpScale.value=g.bumpScale,g.side===Zn&&(m.bumpScale.value*=-1)),g.normalMap&&(m.normalMap.value=g.normalMap,e(g.normalMap,m.normalMapTransform),m.normalScale.value.copy(g.normalScale),g.side===Zn&&m.normalScale.value.negate()),g.displacementMap&&(m.displacementMap.value=g.displacementMap,e(g.displacementMap,m.displacementMapTransform),m.displacementScale.value=g.displacementScale,m.displacementBias.value=g.displacementBias),g.emissiveMap&&(m.emissiveMap.value=g.emissiveMap,e(g.emissiveMap,m.emissiveMapTransform)),g.specularMap&&(m.specularMap.value=g.specularMap,e(g.specularMap,m.specularMapTransform)),g.alphaTest>0&&(m.alphaTest.value=g.alphaTest);const y=t.get(g),_=y.envMap,T=y.envMapRotation;_&&(m.envMap.value=_,Ir.copy(T),Ir.x*=-1,Ir.y*=-1,Ir.z*=-1,_.isCubeTexture&&_.isRenderTargetTexture===!1&&(Ir.y*=-1,Ir.z*=-1),m.envMapRotation.value.setFromMatrix4($N.makeRotationFromEuler(Ir)),m.flipEnvMap.value=_.isCubeTexture&&_.isRenderTargetTexture===!1?-1:1,m.reflectivity.value=g.reflectivity,m.ior.value=g.ior,m.refractionRatio.value=g.refractionRatio),g.lightMap&&(m.lightMap.value=g.lightMap,m.lightMapIntensity.value=g.lightMapIntensity,e(g.lightMap,m.lightMapTransform)),g.aoMap&&(m.aoMap.value=g.aoMap,m.aoMapIntensity.value=g.aoMapIntensity,e(g.aoMap,m.aoMapTransform))}function o(m,g){m.diffuse.value.copy(g.color),m.opacity.value=g.opacity,g.map&&(m.map.value=g.map,e(g.map,m.mapTransform))}function a(m,g){m.dashSize.value=g.dashSize,m.totalSize.value=g.dashSize+g.gapSize,m.scale.value=g.scale}function l(m,g,y,_){m.diffuse.value.copy(g.color),m.opacity.value=g.opacity,m.size.value=g.size*y,m.scale.value=_*.5,g.map&&(m.map.value=g.map,e(g.map,m.uvTransform)),g.alphaMap&&(m.alphaMap.value=g.alphaMap,e(g.alphaMap,m.alphaMapTransform)),g.alphaTest>0&&(m.alphaTest.value=g.alphaTest)}function c(m,g){m.diffuse.value.copy(g.color),m.opacity.value=g.opacity,m.rotation.value=g.rotation,g.map&&(m.map.value=g.map,e(g.map,m.mapTransform)),g.alphaMap&&(m.alphaMap.value=g.alphaMap,e(g.alphaMap,m.alphaMapTransform)),g.alphaTest>0&&(m.alphaTest.value=g.alphaTest)}function h(m,g){m.specular.value.copy(g.specular),m.shininess.value=Math.max(g.shininess,1e-4)}function u(m,g){g.gradientMap&&(m.gradientMap.value=g.gradientMap)}function d(m,g){m.metalness.value=g.metalness,g.metalnessMap&&(m.metalnessMap.value=g.metalnessMap,e(g.metalnessMap,m.metalnessMapTransform)),m.roughness.value=g.roughness,g.roughnessMap&&(m.roughnessMap.value=g.roughnessMap,e(g.roughnessMap,m.roughnessMapTransform)),g.envMap&&(m.envMapIntensity.value=g.envMapIntensity)}function f(m,g,y){m.ior.value=g.ior,g.sheen>0&&(m.sheenColor.value.copy(g.sheenColor).multiplyScalar(g.sheen),m.sheenRoughness.value=g.sheenRoughness,g.sheenColorMap&&(m.sheenColorMap.value=g.sheenColorMap,e(g.sheenColorMap,m.sheenColorMapTransform)),g.sheenRoughnessMap&&(m.sheenRoughnessMap.value=g.sheenRoughnessMap,e(g.sheenRoughnessMap,m.sheenRoughnessMapTransform))),g.clearcoat>0&&(m.clearcoat.value=g.clearcoat,m.clearcoatRoughness.value=g.clearcoatRoughness,g.clearcoatMap&&(m.clearcoatMap.value=g.clearcoatMap,e(g.clearcoatMap,m.clearcoatMapTransform)),g.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=g.clearcoatRoughnessMap,e(g.clearcoatRoughnessMap,m.clearcoatRoughnessMapTransform)),g.clearcoatNormalMap&&(m.clearcoatNormalMap.value=g.clearcoatNormalMap,e(g.clearcoatNormalMap,m.clearcoatNormalMapTransform),m.clearcoatNormalScale.value.copy(g.clearcoatNormalScale),g.side===Zn&&m.clearcoatNormalScale.value.negate())),g.dispersion>0&&(m.dispersion.value=g.dispersion),g.iridescence>0&&(m.iridescence.value=g.iridescence,m.iridescenceIOR.value=g.iridescenceIOR,m.iridescenceThicknessMinimum.value=g.iridescenceThicknessRange[0],m.iridescenceThicknessMaximum.value=g.iridescenceThicknessRange[1],g.iridescenceMap&&(m.iridescenceMap.value=g.iridescenceMap,e(g.iridescenceMap,m.iridescenceMapTransform)),g.iridescenceThicknessMap&&(m.iridescenceThicknessMap.value=g.iridescenceThicknessMap,e(g.iridescenceThicknessMap,m.iridescenceThicknessMapTransform))),g.transmission>0&&(m.transmission.value=g.transmission,m.transmissionSamplerMap.value=y.texture,m.transmissionSamplerSize.value.set(y.width,y.height),g.transmissionMap&&(m.transmissionMap.value=g.transmissionMap,e(g.transmissionMap,m.transmissionMapTransform)),m.thickness.value=g.thickness,g.thicknessMap&&(m.thicknessMap.value=g.thicknessMap,e(g.thicknessMap,m.thicknessMapTransform)),m.attenuationDistance.value=g.attenuationDistance,m.attenuationColor.value.copy(g.attenuationColor)),g.anisotropy>0&&(m.anisotropyVector.value.set(g.anisotropy*Math.cos(g.anisotropyRotation),g.anisotropy*Math.sin(g.anisotropyRotation)),g.anisotropyMap&&(m.anisotropyMap.value=g.anisotropyMap,e(g.anisotropyMap,m.anisotropyMapTransform))),m.specularIntensity.value=g.specularIntensity,m.specularColor.value.copy(g.specularColor),g.specularColorMap&&(m.specularColorMap.value=g.specularColorMap,e(g.specularColorMap,m.specularColorMapTransform)),g.specularIntensityMap&&(m.specularIntensityMap.value=g.specularIntensityMap,e(g.specularIntensityMap,m.specularIntensityMapTransform))}function p(m,g){g.matcap&&(m.matcap.value=g.matcap)}function x(m,g){const y=t.get(g).light;m.referencePosition.value.setFromMatrixPosition(y.matrixWorld),m.nearDistance.value=y.shadow.camera.near,m.farDistance.value=y.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function qN(r,t,e,n){let i={},s={},o=[];const a=r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);function l(y,_){const T=_.program;n.uniformBlockBinding(y,T)}function c(y,_){let T=i[y.id];T===void 0&&(p(y),T=h(y),i[y.id]=T,y.addEventListener("dispose",m));const w=_.program;n.updateUBOMapping(y,w);const A=t.render.frame;s[y.id]!==A&&(d(y),s[y.id]=A)}function h(y){const _=u();y.__bindingPointIndex=_;const T=r.createBuffer(),w=y.__size,A=y.usage;return r.bindBuffer(r.UNIFORM_BUFFER,T),r.bufferData(r.UNIFORM_BUFFER,w,A),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,_,T),T}function u(){for(let y=0;y<a;y++)if(o.indexOf(y)===-1)return o.push(y),y;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function d(y){const _=i[y.id],T=y.uniforms,w=y.__cache;r.bindBuffer(r.UNIFORM_BUFFER,_);for(let A=0,v=T.length;A<v;A++){const R=Array.isArray(T[A])?T[A]:[T[A]];for(let W=0,S=R.length;W<S;W++){const b=R[W];if(f(b,A,W,w)===!0){const H=b.__offset,z=Array.isArray(b.value)?b.value:[b.value];let Z=0;for(let tt=0;tt<z.length;tt++){const q=z[tt],nt=x(q);typeof q=="number"||typeof q=="boolean"?(b.__data[0]=q,r.bufferSubData(r.UNIFORM_BUFFER,H+Z,b.__data)):q.isMatrix3?(b.__data[0]=q.elements[0],b.__data[1]=q.elements[1],b.__data[2]=q.elements[2],b.__data[3]=0,b.__data[4]=q.elements[3],b.__data[5]=q.elements[4],b.__data[6]=q.elements[5],b.__data[7]=0,b.__data[8]=q.elements[6],b.__data[9]=q.elements[7],b.__data[10]=q.elements[8],b.__data[11]=0):(q.toArray(b.__data,Z),Z+=nt.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,H,b.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function f(y,_,T,w){const A=y.value,v=_+"_"+T;if(w[v]===void 0)return typeof A=="number"||typeof A=="boolean"?w[v]=A:w[v]=A.clone(),!0;{const R=w[v];if(typeof A=="number"||typeof A=="boolean"){if(R!==A)return w[v]=A,!0}else if(R.equals(A)===!1)return R.copy(A),!0}return!1}function p(y){const _=y.uniforms;let T=0;const w=16;for(let v=0,R=_.length;v<R;v++){const W=Array.isArray(_[v])?_[v]:[_[v]];for(let S=0,b=W.length;S<b;S++){const H=W[S],z=Array.isArray(H.value)?H.value:[H.value];for(let Z=0,tt=z.length;Z<tt;Z++){const q=z[Z],nt=x(q),$=T%w,ct=$%nt.boundary,ut=$+ct;T+=ct,ut!==0&&w-ut<nt.storage&&(T+=w-ut),H.__data=new Float32Array(nt.storage/Float32Array.BYTES_PER_ELEMENT),H.__offset=T,T+=nt.storage}}}const A=T%w;return A>0&&(T+=w-A),y.__size=T,y.__cache={},this}function x(y){const _={boundary:0,storage:0};return typeof y=="number"||typeof y=="boolean"?(_.boundary=4,_.storage=4):y.isVector2?(_.boundary=8,_.storage=8):y.isVector3||y.isColor?(_.boundary=16,_.storage=12):y.isVector4?(_.boundary=16,_.storage=16):y.isMatrix3?(_.boundary=48,_.storage=48):y.isMatrix4?(_.boundary=64,_.storage=64):y.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",y),_}function m(y){const _=y.target;_.removeEventListener("dispose",m);const T=o.indexOf(_.__bindingPointIndex);o.splice(T,1),r.deleteBuffer(i[_.id]),delete i[_.id],delete s[_.id]}function g(){for(const y in i)r.deleteBuffer(i[y]);o=[],i={},s={}}return{bind:l,update:c,dispose:g}}class XN{constructor(t={}){const{canvas:e=Db(),context:n=null,depth:i=!0,stencil:s=!1,alpha:o=!1,antialias:a=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:u=!1}=t;this.isWebGLRenderer=!0;let d;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");d=n.getContextAttributes().alpha}else d=o;const f=new Uint32Array(4),p=new Int32Array(4);let x=null,m=null;const g=[],y=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Xi,this.toneMapping=fr,this.toneMappingExposure=1;const _=this;let T=!1,w=0,A=0,v=null,R=-1,W=null;const S=new Je,b=new Je;let H=null;const z=new ae(0);let Z=0,tt=e.width,q=e.height,nt=1,$=null,ct=null;const ut=new Je(0,0,tt,q),mt=new Je(0,0,tt,q);let ne=!1;const ce=new ag;let J=!1,lt=!1;const Rt=new Ue,bt=new Ue,Xt=new U,zt=new Je,de={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let we=!1;function fe(){return v===null?nt:1}let P=n;function ei(E,D){return e.getContext(E,D)}try{const E={alpha:!0,depth:i,stencil:s,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${Ym}`),e.addEventListener("webglcontextlost",ot,!1),e.addEventListener("webglcontextrestored",yt,!1),e.addEventListener("webglcontextcreationerror",vt,!1),P===null){const D="webgl2";if(P=ei(D,E),P===null)throw ei(D)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(E){throw console.error("THREE.WebGLRenderer: "+E.message),E}let he,ge,kt,Pe,Wt,N,M,G,it,at,et,Ft,_t,Et,xe,dt,At,Vt,Ht,wt,ue,Yt,Ce,F;function Mt(){he=new QA(P),he.init(),Yt=new BN(P,he),ge=new qA(P,he,t,Yt),kt=new DN(P),ge.reverseDepthBuffer&&kt.buffers.depth.setReversed(!0),Pe=new ew(P),Wt=new yN,N=new UN(P,he,kt,Wt,ge,Yt,Pe),M=new YA(_),G=new ZA(_),it=new lE(P),Ce=new $A(P,it),at=new JA(P,it,Pe,Ce),et=new iw(P,at,it,Pe),Ht=new nw(P,ge,N),dt=new XA(Wt),Ft=new _N(_,M,G,he,ge,Ce,dt),_t=new WN(_,Wt),Et=new TN,xe=new wN(he),Vt=new HA(_,M,G,kt,et,d,l),At=new FN(_,et,ge),F=new qN(P,Pe,ge,kt),wt=new WA(P,he,Pe),ue=new tw(P,he,Pe),Pe.programs=Ft.programs,_.capabilities=ge,_.extensions=he,_.properties=Wt,_.renderLists=Et,_.shadowMap=At,_.state=kt,_.info=Pe}Mt();const Y=new HN(_,P);this.xr=Y,this.getContext=function(){return P},this.getContextAttributes=function(){return P.getContextAttributes()},this.forceContextLoss=function(){const E=he.get("WEBGL_lose_context");E&&E.loseContext()},this.forceContextRestore=function(){const E=he.get("WEBGL_lose_context");E&&E.restoreContext()},this.getPixelRatio=function(){return nt},this.setPixelRatio=function(E){E!==void 0&&(nt=E,this.setSize(tt,q,!1))},this.getSize=function(E){return E.set(tt,q)},this.setSize=function(E,D,k=!0){if(Y.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}tt=E,q=D,e.width=Math.floor(E*nt),e.height=Math.floor(D*nt),k===!0&&(e.style.width=E+"px",e.style.height=D+"px"),this.setViewport(0,0,E,D)},this.getDrawingBufferSize=function(E){return E.set(tt*nt,q*nt).floor()},this.setDrawingBufferSize=function(E,D,k){tt=E,q=D,nt=k,e.width=Math.floor(E*k),e.height=Math.floor(D*k),this.setViewport(0,0,E,D)},this.getCurrentViewport=function(E){return E.copy(S)},this.getViewport=function(E){return E.copy(ut)},this.setViewport=function(E,D,k,V){E.isVector4?ut.set(E.x,E.y,E.z,E.w):ut.set(E,D,k,V),kt.viewport(S.copy(ut).multiplyScalar(nt).round())},this.getScissor=function(E){return E.copy(mt)},this.setScissor=function(E,D,k,V){E.isVector4?mt.set(E.x,E.y,E.z,E.w):mt.set(E,D,k,V),kt.scissor(b.copy(mt).multiplyScalar(nt).round())},this.getScissorTest=function(){return ne},this.setScissorTest=function(E){kt.setScissorTest(ne=E)},this.setOpaqueSort=function(E){$=E},this.setTransparentSort=function(E){ct=E},this.getClearColor=function(E){return E.copy(Vt.getClearColor())},this.setClearColor=function(){Vt.setClearColor.apply(Vt,arguments)},this.getClearAlpha=function(){return Vt.getClearAlpha()},this.setClearAlpha=function(){Vt.setClearAlpha.apply(Vt,arguments)},this.clear=function(E=!0,D=!0,k=!0){let V=0;if(E){let L=!1;if(v!==null){const ft=v.texture.format;L=ft===ng||ft===eg||ft===tg}if(L){const ft=v.texture.type,St=ft===Is||ft===eo||ft===ic||ft===Oa||ft===Zm||ft===Qm,Nt=Vt.getClearColor(),Ct=Vt.getClearAlpha(),Ot=Nt.r,Gt=Nt.g,It=Nt.b;St?(f[0]=Ot,f[1]=Gt,f[2]=It,f[3]=Ct,P.clearBufferuiv(P.COLOR,0,f)):(p[0]=Ot,p[1]=Gt,p[2]=It,p[3]=Ct,P.clearBufferiv(P.COLOR,0,p))}else V|=P.COLOR_BUFFER_BIT}D&&(V|=P.DEPTH_BUFFER_BIT,P.clearDepth(this.capabilities.reverseDepthBuffer?0:1)),k&&(V|=P.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),P.clear(V)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",ot,!1),e.removeEventListener("webglcontextrestored",yt,!1),e.removeEventListener("webglcontextcreationerror",vt,!1),Et.dispose(),xe.dispose(),Wt.dispose(),M.dispose(),G.dispose(),et.dispose(),Ce.dispose(),F.dispose(),Ft.dispose(),Y.dispose(),Y.removeEventListener("sessionstart",gx),Y.removeEventListener("sessionend",xx),wr.stop()};function ot(E){E.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),T=!0}function yt(){console.log("THREE.WebGLRenderer: Context Restored."),T=!1;const E=Pe.autoReset,D=At.enabled,k=At.autoUpdate,V=At.needsUpdate,L=At.type;Mt(),Pe.autoReset=E,At.enabled=D,At.autoUpdate=k,At.needsUpdate=V,At.type=L}function vt(E){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",E.statusMessage)}function pe(E){const D=E.target;D.removeEventListener("dispose",pe),We(D)}function We(E){qn(E),Wt.remove(E)}function qn(E){const D=Wt.get(E).programs;D!==void 0&&(D.forEach(function(k){Ft.releaseProgram(k)}),E.isShaderMaterial&&Ft.releaseShaderCache(E))}this.renderBufferDirect=function(E,D,k,V,L,ft){D===null&&(D=de);const St=L.isMesh&&L.matrixWorld.determinant()<0,Nt=Av(E,D,k,V,L);kt.setMaterial(V,St);let Ct=k.index,Ot=1;if(V.wireframe===!0){if(Ct=at.getWireframeAttribute(k),Ct===void 0)return;Ot=2}const Gt=k.drawRange,It=k.attributes.position;let be=Gt.start*Ot,Fe=(Gt.start+Gt.count)*Ot;ft!==null&&(be=Math.max(be,ft.start*Ot),Fe=Math.min(Fe,(ft.start+ft.count)*Ot)),Ct!==null?(be=Math.max(be,0),Fe=Math.min(Fe,Ct.count)):It!=null&&(be=Math.max(be,0),Fe=Math.min(Fe,It.count));const Oe=Fe-be;if(Oe<0||Oe===1/0)return;Ce.setup(L,V,Nt,k,Ct);let ni,Se=wt;if(Ct!==null&&(ni=it.get(Ct),Se=ue,Se.setIndex(ni)),L.isMesh)V.wireframe===!0?(kt.setLineWidth(V.wireframeLinewidth*fe()),Se.setMode(P.LINES)):Se.setMode(P.TRIANGLES);else if(L.isLine){let Dt=V.linewidth;Dt===void 0&&(Dt=1),kt.setLineWidth(Dt*fe()),L.isLineSegments?Se.setMode(P.LINES):L.isLineLoop?Se.setMode(P.LINE_LOOP):Se.setMode(P.LINE_STRIP)}else L.isPoints?Se.setMode(P.POINTS):L.isSprite&&Se.setMode(P.TRIANGLES);if(L.isBatchedMesh)if(L._multiDrawInstances!==null)Se.renderMultiDrawInstances(L._multiDrawStarts,L._multiDrawCounts,L._multiDrawCount,L._multiDrawInstances);else if(he.get("WEBGL_multi_draw"))Se.renderMultiDraw(L._multiDrawStarts,L._multiDrawCounts,L._multiDrawCount);else{const Dt=L._multiDrawStarts,fn=L._multiDrawCounts,Te=L._multiDrawCount,Ai=Ct?it.get(Ct).bytesPerElement:1,vo=Wt.get(V).currentProgram.getUniforms();for(let ii=0;ii<Te;ii++)vo.setValue(P,"_gl_DrawID",ii),Se.render(Dt[ii]/Ai,fn[ii])}else if(L.isInstancedMesh)Se.renderInstances(be,Oe,L.count);else if(k.isInstancedBufferGeometry){const Dt=k._maxInstanceCount!==void 0?k._maxInstanceCount:1/0,fn=Math.min(k.instanceCount,Dt);Se.renderInstances(be,Oe,fn)}else Se.render(be,Oe)};function ye(E,D,k){E.transparent===!0&&E.side===Ui&&E.forceSinglePass===!1?(E.side=Zn,E.needsUpdate=!0,Gc(E,D,k),E.side=gr,E.needsUpdate=!0,Gc(E,D,k),E.side=Ui):Gc(E,D,k)}this.compile=function(E,D,k=null){k===null&&(k=E),m=xe.get(k),m.init(D),y.push(m),k.traverseVisible(function(L){L.isLight&&L.layers.test(D.layers)&&(m.pushLight(L),L.castShadow&&m.pushShadow(L))}),E!==k&&E.traverseVisible(function(L){L.isLight&&L.layers.test(D.layers)&&(m.pushLight(L),L.castShadow&&m.pushShadow(L))}),m.setupLights();const V=new Set;return E.traverse(function(L){if(!(L.isMesh||L.isPoints||L.isLine||L.isSprite))return;const ft=L.material;if(ft)if(Array.isArray(ft))for(let St=0;St<ft.length;St++){const Nt=ft[St];ye(Nt,k,L),V.add(Nt)}else ye(ft,k,L),V.add(ft)}),y.pop(),m=null,V},this.compileAsync=function(E,D,k=null){const V=this.compile(E,D,k);return new Promise(L=>{function ft(){if(V.forEach(function(St){Wt.get(St).currentProgram.isReady()&&V.delete(St)}),V.size===0){L(E);return}setTimeout(ft,10)}he.get("KHR_parallel_shader_compile")!==null?ft():setTimeout(ft,10)})};let Xn=null;function rs(E){Xn&&Xn(E)}function gx(){wr.stop()}function xx(){wr.start()}const wr=new dS;wr.setAnimationLoop(rs),typeof self<"u"&&wr.setContext(self),this.setAnimationLoop=function(E){Xn=E,Y.setAnimationLoop(E),E===null?wr.stop():wr.start()},Y.addEventListener("sessionstart",gx),Y.addEventListener("sessionend",xx),this.render=function(E,D){if(D!==void 0&&D.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(T===!0)return;if(E.matrixWorldAutoUpdate===!0&&E.updateMatrixWorld(),D.parent===null&&D.matrixWorldAutoUpdate===!0&&D.updateMatrixWorld(),Y.enabled===!0&&Y.isPresenting===!0&&(Y.cameraAutoUpdate===!0&&Y.updateCamera(D),D=Y.getCamera()),E.isScene===!0&&E.onBeforeRender(_,E,D,v),m=xe.get(E,y.length),m.init(D),y.push(m),bt.multiplyMatrices(D.projectionMatrix,D.matrixWorldInverse),ce.setFromProjectionMatrix(bt),lt=this.localClippingEnabled,J=dt.init(this.clippingPlanes,lt),x=Et.get(E,g.length),x.init(),g.push(x),Y.enabled===!0&&Y.isPresenting===!0){const ft=_.xr.getDepthSensingMesh();ft!==null&&yd(ft,D,-1/0,_.sortObjects)}yd(E,D,0,_.sortObjects),x.finish(),_.sortObjects===!0&&x.sort($,ct),we=Y.enabled===!1||Y.isPresenting===!1||Y.hasDepthSensing()===!1,we&&Vt.addToRenderList(x,E),this.info.render.frame++,J===!0&&dt.beginShadows();const k=m.state.shadowsArray;At.render(k,E,D),J===!0&&dt.endShadows(),this.info.autoReset===!0&&this.info.reset();const V=x.opaque,L=x.transmissive;if(m.setupLights(),D.isArrayCamera){const ft=D.cameras;if(L.length>0)for(let St=0,Nt=ft.length;St<Nt;St++){const Ct=ft[St];yx(V,L,E,Ct)}we&&Vt.render(E);for(let St=0,Nt=ft.length;St<Nt;St++){const Ct=ft[St];_x(x,E,Ct,Ct.viewport)}}else L.length>0&&yx(V,L,E,D),we&&Vt.render(E),_x(x,E,D);v!==null&&(N.updateMultisampleRenderTarget(v),N.updateRenderTargetMipmap(v)),E.isScene===!0&&E.onAfterRender(_,E,D),Ce.resetDefaultState(),R=-1,W=null,y.pop(),y.length>0?(m=y[y.length-1],J===!0&&dt.setGlobalState(_.clippingPlanes,m.state.camera)):m=null,g.pop(),g.length>0?x=g[g.length-1]:x=null};function yd(E,D,k,V){if(E.visible===!1)return;if(E.layers.test(D.layers)){if(E.isGroup)k=E.renderOrder;else if(E.isLOD)E.autoUpdate===!0&&E.update(D);else if(E.isLight)m.pushLight(E),E.castShadow&&m.pushShadow(E);else if(E.isSprite){if(!E.frustumCulled||ce.intersectsSprite(E)){V&&zt.setFromMatrixPosition(E.matrixWorld).applyMatrix4(bt);const St=et.update(E),Nt=E.material;Nt.visible&&x.push(E,St,Nt,k,zt.z,null)}}else if((E.isMesh||E.isLine||E.isPoints)&&(!E.frustumCulled||ce.intersectsObject(E))){const St=et.update(E),Nt=E.material;if(V&&(E.boundingSphere!==void 0?(E.boundingSphere===null&&E.computeBoundingSphere(),zt.copy(E.boundingSphere.center)):(St.boundingSphere===null&&St.computeBoundingSphere(),zt.copy(St.boundingSphere.center)),zt.applyMatrix4(E.matrixWorld).applyMatrix4(bt)),Array.isArray(Nt)){const Ct=St.groups;for(let Ot=0,Gt=Ct.length;Ot<Gt;Ot++){const It=Ct[Ot],be=Nt[It.materialIndex];be&&be.visible&&x.push(E,St,be,k,zt.z,It)}}else Nt.visible&&x.push(E,St,Nt,k,zt.z,null)}}const ft=E.children;for(let St=0,Nt=ft.length;St<Nt;St++)yd(ft[St],D,k,V)}function _x(E,D,k,V){const L=E.opaque,ft=E.transmissive,St=E.transparent;m.setupLightsView(k),J===!0&&dt.setGlobalState(_.clippingPlanes,k),V&&kt.viewport(S.copy(V)),L.length>0&&zc(L,D,k),ft.length>0&&zc(ft,D,k),St.length>0&&zc(St,D,k),kt.buffers.depth.setTest(!0),kt.buffers.depth.setMask(!0),kt.buffers.color.setMask(!0),kt.setPolygonOffset(!1)}function yx(E,D,k,V){if((k.isScene===!0?k.overrideMaterial:null)!==null)return;m.state.transmissionRenderTarget[V.id]===void 0&&(m.state.transmissionRenderTarget[V.id]=new no(1,1,{generateMipmaps:!0,type:he.has("EXT_color_buffer_half_float")||he.has("EXT_color_buffer_float")?mc:Is,minFilter:Kr,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:Me.workingColorSpace}));const ft=m.state.transmissionRenderTarget[V.id],St=V.viewport||S;ft.setSize(St.z,St.w);const Nt=_.getRenderTarget();_.setRenderTarget(ft),_.getClearColor(z),Z=_.getClearAlpha(),Z<1&&_.setClearColor(16777215,.5),_.clear(),we&&Vt.render(k);const Ct=_.toneMapping;_.toneMapping=fr;const Ot=V.viewport;if(V.viewport!==void 0&&(V.viewport=void 0),m.setupLightsView(V),J===!0&&dt.setGlobalState(_.clippingPlanes,V),zc(E,k,V),N.updateMultisampleRenderTarget(ft),N.updateRenderTargetMipmap(ft),he.has("WEBGL_multisampled_render_to_texture")===!1){let Gt=!1;for(let It=0,be=D.length;It<be;It++){const Fe=D[It],Oe=Fe.object,ni=Fe.geometry,Se=Fe.material,Dt=Fe.group;if(Se.side===Ui&&Oe.layers.test(V.layers)){const fn=Se.side;Se.side=Zn,Se.needsUpdate=!0,Sx(Oe,k,V,ni,Se,Dt),Se.side=fn,Se.needsUpdate=!0,Gt=!0}}Gt===!0&&(N.updateMultisampleRenderTarget(ft),N.updateRenderTargetMipmap(ft))}_.setRenderTarget(Nt),_.setClearColor(z,Z),Ot!==void 0&&(V.viewport=Ot),_.toneMapping=Ct}function zc(E,D,k){const V=D.isScene===!0?D.overrideMaterial:null;for(let L=0,ft=E.length;L<ft;L++){const St=E[L],Nt=St.object,Ct=St.geometry,Ot=V===null?St.material:V,Gt=St.group;Nt.layers.test(k.layers)&&Sx(Nt,D,k,Ct,Ot,Gt)}}function Sx(E,D,k,V,L,ft){E.onBeforeRender(_,D,k,V,L,ft),E.modelViewMatrix.multiplyMatrices(k.matrixWorldInverse,E.matrixWorld),E.normalMatrix.getNormalMatrix(E.modelViewMatrix),L.onBeforeRender(_,D,k,V,E,ft),L.transparent===!0&&L.side===Ui&&L.forceSinglePass===!1?(L.side=Zn,L.needsUpdate=!0,_.renderBufferDirect(k,D,V,L,E,ft),L.side=gr,L.needsUpdate=!0,_.renderBufferDirect(k,D,V,L,E,ft),L.side=Ui):_.renderBufferDirect(k,D,V,L,E,ft),E.onAfterRender(_,D,k,V,L,ft)}function Gc(E,D,k){D.isScene!==!0&&(D=de);const V=Wt.get(E),L=m.state.lights,ft=m.state.shadowsArray,St=L.state.version,Nt=Ft.getParameters(E,L.state,ft,D,k),Ct=Ft.getProgramCacheKey(Nt);let Ot=V.programs;V.environment=E.isMeshStandardMaterial?D.environment:null,V.fog=D.fog,V.envMap=(E.isMeshStandardMaterial?G:M).get(E.envMap||V.environment),V.envMapRotation=V.environment!==null&&E.envMap===null?D.environmentRotation:E.envMapRotation,Ot===void 0&&(E.addEventListener("dispose",pe),Ot=new Map,V.programs=Ot);let Gt=Ot.get(Ct);if(Gt!==void 0){if(V.currentProgram===Gt&&V.lightsStateVersion===St)return Mx(E,Nt),Gt}else Nt.uniforms=Ft.getUniforms(E),E.onBeforeCompile(Nt,_),Gt=Ft.acquireProgram(Nt,Ct),Ot.set(Ct,Gt),V.uniforms=Nt.uniforms;const It=V.uniforms;return(!E.isShaderMaterial&&!E.isRawShaderMaterial||E.clipping===!0)&&(It.clippingPlanes=dt.uniform),Mx(E,Nt),V.needsLights=Nv(E),V.lightsStateVersion=St,V.needsLights&&(It.ambientLightColor.value=L.state.ambient,It.lightProbe.value=L.state.probe,It.directionalLights.value=L.state.directional,It.directionalLightShadows.value=L.state.directionalShadow,It.spotLights.value=L.state.spot,It.spotLightShadows.value=L.state.spotShadow,It.rectAreaLights.value=L.state.rectArea,It.ltc_1.value=L.state.rectAreaLTC1,It.ltc_2.value=L.state.rectAreaLTC2,It.pointLights.value=L.state.point,It.pointLightShadows.value=L.state.pointShadow,It.hemisphereLights.value=L.state.hemi,It.directionalShadowMap.value=L.state.directionalShadowMap,It.directionalShadowMatrix.value=L.state.directionalShadowMatrix,It.spotShadowMap.value=L.state.spotShadowMap,It.spotLightMatrix.value=L.state.spotLightMatrix,It.spotLightMap.value=L.state.spotLightMap,It.pointShadowMap.value=L.state.pointShadowMap,It.pointShadowMatrix.value=L.state.pointShadowMatrix),V.currentProgram=Gt,V.uniformsList=null,Gt}function Tx(E){if(E.uniformsList===null){const D=E.currentProgram.getUniforms();E.uniformsList=ou.seqWithValue(D.seq,E.uniforms)}return E.uniformsList}function Mx(E,D){const k=Wt.get(E);k.outputColorSpace=D.outputColorSpace,k.batching=D.batching,k.batchingColor=D.batchingColor,k.instancing=D.instancing,k.instancingColor=D.instancingColor,k.instancingMorph=D.instancingMorph,k.skinning=D.skinning,k.morphTargets=D.morphTargets,k.morphNormals=D.morphNormals,k.morphColors=D.morphColors,k.morphTargetsCount=D.morphTargetsCount,k.numClippingPlanes=D.numClippingPlanes,k.numIntersection=D.numClipIntersection,k.vertexAlphas=D.vertexAlphas,k.vertexTangents=D.vertexTangents,k.toneMapping=D.toneMapping}function Av(E,D,k,V,L){D.isScene!==!0&&(D=de),N.resetTextureUnits();const ft=D.fog,St=V.isMeshStandardMaterial?D.environment:null,Nt=v===null?_.outputColorSpace:v.isXRRenderTarget===!0?v.texture.colorSpace:vr,Ct=(V.isMeshStandardMaterial?G:M).get(V.envMap||St),Ot=V.vertexColors===!0&&!!k.attributes.color&&k.attributes.color.itemSize===4,Gt=!!k.attributes.tangent&&(!!V.normalMap||V.anisotropy>0),It=!!k.morphAttributes.position,be=!!k.morphAttributes.normal,Fe=!!k.morphAttributes.color;let Oe=fr;V.toneMapped&&(v===null||v.isXRRenderTarget===!0)&&(Oe=_.toneMapping);const ni=k.morphAttributes.position||k.morphAttributes.normal||k.morphAttributes.color,Se=ni!==void 0?ni.length:0,Dt=Wt.get(V),fn=m.state.lights;if(J===!0&&(lt===!0||E!==W)){const gi=E===W&&V.id===R;dt.setState(V,E,gi)}let Te=!1;V.version===Dt.__version?(Dt.needsLights&&Dt.lightsStateVersion!==fn.state.version||Dt.outputColorSpace!==Nt||L.isBatchedMesh&&Dt.batching===!1||!L.isBatchedMesh&&Dt.batching===!0||L.isBatchedMesh&&Dt.batchingColor===!0&&L.colorTexture===null||L.isBatchedMesh&&Dt.batchingColor===!1&&L.colorTexture!==null||L.isInstancedMesh&&Dt.instancing===!1||!L.isInstancedMesh&&Dt.instancing===!0||L.isSkinnedMesh&&Dt.skinning===!1||!L.isSkinnedMesh&&Dt.skinning===!0||L.isInstancedMesh&&Dt.instancingColor===!0&&L.instanceColor===null||L.isInstancedMesh&&Dt.instancingColor===!1&&L.instanceColor!==null||L.isInstancedMesh&&Dt.instancingMorph===!0&&L.morphTexture===null||L.isInstancedMesh&&Dt.instancingMorph===!1&&L.morphTexture!==null||Dt.envMap!==Ct||V.fog===!0&&Dt.fog!==ft||Dt.numClippingPlanes!==void 0&&(Dt.numClippingPlanes!==dt.numPlanes||Dt.numIntersection!==dt.numIntersection)||Dt.vertexAlphas!==Ot||Dt.vertexTangents!==Gt||Dt.morphTargets!==It||Dt.morphNormals!==be||Dt.morphColors!==Fe||Dt.toneMapping!==Oe||Dt.morphTargetsCount!==Se)&&(Te=!0):(Te=!0,Dt.__version=V.version);let Ai=Dt.currentProgram;Te===!0&&(Ai=Gc(V,D,L));let vo=!1,ii=!1,Sd=!1;const ke=Ai.getUniforms(),ks=Dt.uniforms;if(kt.useProgram(Ai.program)&&(vo=!0,ii=!0,Sd=!0),V.id!==R&&(R=V.id,ii=!0),vo||W!==E){ge.reverseDepthBuffer?(Rt.copy(E.projectionMatrix),Ub(Rt),Bb(Rt),ke.setValue(P,"projectionMatrix",Rt)):ke.setValue(P,"projectionMatrix",E.projectionMatrix),ke.setValue(P,"viewMatrix",E.matrixWorldInverse);const gi=ke.map.cameraPosition;gi!==void 0&&gi.setValue(P,Xt.setFromMatrixPosition(E.matrixWorld)),ge.logarithmicDepthBuffer&&ke.setValue(P,"logDepthBufFC",2/(Math.log(E.far+1)/Math.LN2)),(V.isMeshPhongMaterial||V.isMeshToonMaterial||V.isMeshLambertMaterial||V.isMeshBasicMaterial||V.isMeshStandardMaterial||V.isShaderMaterial)&&ke.setValue(P,"isOrthographic",E.isOrthographicCamera===!0),W!==E&&(W=E,ii=!0,Sd=!0)}if(L.isSkinnedMesh){ke.setOptional(P,L,"bindMatrix"),ke.setOptional(P,L,"bindMatrixInverse");const gi=L.skeleton;gi&&(gi.boneTexture===null&&gi.computeBoneTexture(),ke.setValue(P,"boneTexture",gi.boneTexture,N))}L.isBatchedMesh&&(ke.setOptional(P,L,"batchingTexture"),ke.setValue(P,"batchingTexture",L._matricesTexture,N),ke.setOptional(P,L,"batchingIdTexture"),ke.setValue(P,"batchingIdTexture",L._indirectTexture,N),ke.setOptional(P,L,"batchingColorTexture"),L._colorsTexture!==null&&ke.setValue(P,"batchingColorTexture",L._colorsTexture,N));const Td=k.morphAttributes;if((Td.position!==void 0||Td.normal!==void 0||Td.color!==void 0)&&Ht.update(L,k,Ai),(ii||Dt.receiveShadow!==L.receiveShadow)&&(Dt.receiveShadow=L.receiveShadow,ke.setValue(P,"receiveShadow",L.receiveShadow)),V.isMeshGouraudMaterial&&V.envMap!==null&&(ks.envMap.value=Ct,ks.flipEnvMap.value=Ct.isCubeTexture&&Ct.isRenderTargetTexture===!1?-1:1),V.isMeshStandardMaterial&&V.envMap===null&&D.environment!==null&&(ks.envMapIntensity.value=D.environmentIntensity),ii&&(ke.setValue(P,"toneMappingExposure",_.toneMappingExposure),Dt.needsLights&&wv(ks,Sd),ft&&V.fog===!0&&_t.refreshFogUniforms(ks,ft),_t.refreshMaterialUniforms(ks,V,nt,q,m.state.transmissionRenderTarget[E.id]),ou.upload(P,Tx(Dt),ks,N)),V.isShaderMaterial&&V.uniformsNeedUpdate===!0&&(ou.upload(P,Tx(Dt),ks,N),V.uniformsNeedUpdate=!1),V.isSpriteMaterial&&ke.setValue(P,"center",L.center),ke.setValue(P,"modelViewMatrix",L.modelViewMatrix),ke.setValue(P,"normalMatrix",L.normalMatrix),ke.setValue(P,"modelMatrix",L.matrixWorld),V.isShaderMaterial||V.isRawShaderMaterial){const gi=V.uniformsGroups;for(let Md=0,Rv=gi.length;Md<Rv;Md++){const vx=gi[Md];F.update(vx,Ai),F.bind(vx,Ai)}}return Ai}function wv(E,D){E.ambientLightColor.needsUpdate=D,E.lightProbe.needsUpdate=D,E.directionalLights.needsUpdate=D,E.directionalLightShadows.needsUpdate=D,E.pointLights.needsUpdate=D,E.pointLightShadows.needsUpdate=D,E.spotLights.needsUpdate=D,E.spotLightShadows.needsUpdate=D,E.rectAreaLights.needsUpdate=D,E.hemisphereLights.needsUpdate=D}function Nv(E){return E.isMeshLambertMaterial||E.isMeshToonMaterial||E.isMeshPhongMaterial||E.isMeshStandardMaterial||E.isShadowMaterial||E.isShaderMaterial&&E.lights===!0}this.getActiveCubeFace=function(){return w},this.getActiveMipmapLevel=function(){return A},this.getRenderTarget=function(){return v},this.setRenderTargetTextures=function(E,D,k){Wt.get(E.texture).__webglTexture=D,Wt.get(E.depthTexture).__webglTexture=k;const V=Wt.get(E);V.__hasExternalTextures=!0,V.__autoAllocateDepthBuffer=k===void 0,V.__autoAllocateDepthBuffer||he.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),V.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(E,D){const k=Wt.get(E);k.__webglFramebuffer=D,k.__useDefaultFramebuffer=D===void 0},this.setRenderTarget=function(E,D=0,k=0){v=E,w=D,A=k;let V=!0,L=null,ft=!1,St=!1;if(E){const Ct=Wt.get(E);if(Ct.__useDefaultFramebuffer!==void 0)kt.bindFramebuffer(P.FRAMEBUFFER,null),V=!1;else if(Ct.__webglFramebuffer===void 0)N.setupRenderTarget(E);else if(Ct.__hasExternalTextures)N.rebindTextures(E,Wt.get(E.texture).__webglTexture,Wt.get(E.depthTexture).__webglTexture);else if(E.depthBuffer){const It=E.depthTexture;if(Ct.__boundDepthTexture!==It){if(It!==null&&Wt.has(It)&&(E.width!==It.image.width||E.height!==It.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");N.setupDepthRenderbuffer(E)}}const Ot=E.texture;(Ot.isData3DTexture||Ot.isDataArrayTexture||Ot.isCompressedArrayTexture)&&(St=!0);const Gt=Wt.get(E).__webglFramebuffer;E.isWebGLCubeRenderTarget?(Array.isArray(Gt[D])?L=Gt[D][k]:L=Gt[D],ft=!0):E.samples>0&&N.useMultisampledRTT(E)===!1?L=Wt.get(E).__webglMultisampledFramebuffer:Array.isArray(Gt)?L=Gt[k]:L=Gt,S.copy(E.viewport),b.copy(E.scissor),H=E.scissorTest}else S.copy(ut).multiplyScalar(nt).floor(),b.copy(mt).multiplyScalar(nt).floor(),H=ne;if(kt.bindFramebuffer(P.FRAMEBUFFER,L)&&V&&kt.drawBuffers(E,L),kt.viewport(S),kt.scissor(b),kt.setScissorTest(H),ft){const Ct=Wt.get(E.texture);P.framebufferTexture2D(P.FRAMEBUFFER,P.COLOR_ATTACHMENT0,P.TEXTURE_CUBE_MAP_POSITIVE_X+D,Ct.__webglTexture,k)}else if(St){const Ct=Wt.get(E.texture),Ot=D||0;P.framebufferTextureLayer(P.FRAMEBUFFER,P.COLOR_ATTACHMENT0,Ct.__webglTexture,k||0,Ot)}R=-1},this.readRenderTargetPixels=function(E,D,k,V,L,ft,St){if(!(E&&E.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Nt=Wt.get(E).__webglFramebuffer;if(E.isWebGLCubeRenderTarget&&St!==void 0&&(Nt=Nt[St]),Nt){kt.bindFramebuffer(P.FRAMEBUFFER,Nt);try{const Ct=E.texture,Ot=Ct.format,Gt=Ct.type;if(!ge.textureFormatReadable(Ot)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!ge.textureTypeReadable(Gt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}D>=0&&D<=E.width-V&&k>=0&&k<=E.height-L&&P.readPixels(D,k,V,L,Yt.convert(Ot),Yt.convert(Gt),ft)}finally{const Ct=v!==null?Wt.get(v).__webglFramebuffer:null;kt.bindFramebuffer(P.FRAMEBUFFER,Ct)}}},this.readRenderTargetPixelsAsync=async function(E,D,k,V,L,ft,St){if(!(E&&E.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let Nt=Wt.get(E).__webglFramebuffer;if(E.isWebGLCubeRenderTarget&&St!==void 0&&(Nt=Nt[St]),Nt){const Ct=E.texture,Ot=Ct.format,Gt=Ct.type;if(!ge.textureFormatReadable(Ot))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!ge.textureTypeReadable(Gt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(D>=0&&D<=E.width-V&&k>=0&&k<=E.height-L){kt.bindFramebuffer(P.FRAMEBUFFER,Nt);const It=P.createBuffer();P.bindBuffer(P.PIXEL_PACK_BUFFER,It),P.bufferData(P.PIXEL_PACK_BUFFER,ft.byteLength,P.STREAM_READ),P.readPixels(D,k,V,L,Yt.convert(Ot),Yt.convert(Gt),0);const be=v!==null?Wt.get(v).__webglFramebuffer:null;kt.bindFramebuffer(P.FRAMEBUFFER,be);const Fe=P.fenceSync(P.SYNC_GPU_COMMANDS_COMPLETE,0);return P.flush(),await Lb(P,Fe,4),P.bindBuffer(P.PIXEL_PACK_BUFFER,It),P.getBufferSubData(P.PIXEL_PACK_BUFFER,0,ft),P.deleteBuffer(It),P.deleteSync(Fe),ft}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(E,D=null,k=0){E.isTexture!==!0&&(iu("WebGLRenderer: copyFramebufferToTexture function signature has changed."),D=arguments[0]||null,E=arguments[1]);const V=Math.pow(2,-k),L=Math.floor(E.image.width*V),ft=Math.floor(E.image.height*V),St=D!==null?D.x:0,Nt=D!==null?D.y:0;N.setTexture2D(E,0),P.copyTexSubImage2D(P.TEXTURE_2D,k,0,0,St,Nt,L,ft),kt.unbindTexture()},this.copyTextureToTexture=function(E,D,k=null,V=null,L=0){E.isTexture!==!0&&(iu("WebGLRenderer: copyTextureToTexture function signature has changed."),V=arguments[0]||null,E=arguments[1],D=arguments[2],L=arguments[3]||0,k=null);let ft,St,Nt,Ct,Ot,Gt;k!==null?(ft=k.max.x-k.min.x,St=k.max.y-k.min.y,Nt=k.min.x,Ct=k.min.y):(ft=E.image.width,St=E.image.height,Nt=0,Ct=0),V!==null?(Ot=V.x,Gt=V.y):(Ot=0,Gt=0);const It=Yt.convert(D.format),be=Yt.convert(D.type);N.setTexture2D(D,0),P.pixelStorei(P.UNPACK_FLIP_Y_WEBGL,D.flipY),P.pixelStorei(P.UNPACK_PREMULTIPLY_ALPHA_WEBGL,D.premultiplyAlpha),P.pixelStorei(P.UNPACK_ALIGNMENT,D.unpackAlignment);const Fe=P.getParameter(P.UNPACK_ROW_LENGTH),Oe=P.getParameter(P.UNPACK_IMAGE_HEIGHT),ni=P.getParameter(P.UNPACK_SKIP_PIXELS),Se=P.getParameter(P.UNPACK_SKIP_ROWS),Dt=P.getParameter(P.UNPACK_SKIP_IMAGES),fn=E.isCompressedTexture?E.mipmaps[L]:E.image;P.pixelStorei(P.UNPACK_ROW_LENGTH,fn.width),P.pixelStorei(P.UNPACK_IMAGE_HEIGHT,fn.height),P.pixelStorei(P.UNPACK_SKIP_PIXELS,Nt),P.pixelStorei(P.UNPACK_SKIP_ROWS,Ct),E.isDataTexture?P.texSubImage2D(P.TEXTURE_2D,L,Ot,Gt,ft,St,It,be,fn.data):E.isCompressedTexture?P.compressedTexSubImage2D(P.TEXTURE_2D,L,Ot,Gt,fn.width,fn.height,It,fn.data):P.texSubImage2D(P.TEXTURE_2D,L,Ot,Gt,ft,St,It,be,fn),P.pixelStorei(P.UNPACK_ROW_LENGTH,Fe),P.pixelStorei(P.UNPACK_IMAGE_HEIGHT,Oe),P.pixelStorei(P.UNPACK_SKIP_PIXELS,ni),P.pixelStorei(P.UNPACK_SKIP_ROWS,Se),P.pixelStorei(P.UNPACK_SKIP_IMAGES,Dt),L===0&&D.generateMipmaps&&P.generateMipmap(P.TEXTURE_2D),kt.unbindTexture()},this.copyTextureToTexture3D=function(E,D,k=null,V=null,L=0){E.isTexture!==!0&&(iu("WebGLRenderer: copyTextureToTexture3D function signature has changed."),k=arguments[0]||null,V=arguments[1]||null,E=arguments[2],D=arguments[3],L=arguments[4]||0);let ft,St,Nt,Ct,Ot,Gt,It,be,Fe;const Oe=E.isCompressedTexture?E.mipmaps[L]:E.image;k!==null?(ft=k.max.x-k.min.x,St=k.max.y-k.min.y,Nt=k.max.z-k.min.z,Ct=k.min.x,Ot=k.min.y,Gt=k.min.z):(ft=Oe.width,St=Oe.height,Nt=Oe.depth,Ct=0,Ot=0,Gt=0),V!==null?(It=V.x,be=V.y,Fe=V.z):(It=0,be=0,Fe=0);const ni=Yt.convert(D.format),Se=Yt.convert(D.type);let Dt;if(D.isData3DTexture)N.setTexture3D(D,0),Dt=P.TEXTURE_3D;else if(D.isDataArrayTexture||D.isCompressedArrayTexture)N.setTexture2DArray(D,0),Dt=P.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}P.pixelStorei(P.UNPACK_FLIP_Y_WEBGL,D.flipY),P.pixelStorei(P.UNPACK_PREMULTIPLY_ALPHA_WEBGL,D.premultiplyAlpha),P.pixelStorei(P.UNPACK_ALIGNMENT,D.unpackAlignment);const fn=P.getParameter(P.UNPACK_ROW_LENGTH),Te=P.getParameter(P.UNPACK_IMAGE_HEIGHT),Ai=P.getParameter(P.UNPACK_SKIP_PIXELS),vo=P.getParameter(P.UNPACK_SKIP_ROWS),ii=P.getParameter(P.UNPACK_SKIP_IMAGES);P.pixelStorei(P.UNPACK_ROW_LENGTH,Oe.width),P.pixelStorei(P.UNPACK_IMAGE_HEIGHT,Oe.height),P.pixelStorei(P.UNPACK_SKIP_PIXELS,Ct),P.pixelStorei(P.UNPACK_SKIP_ROWS,Ot),P.pixelStorei(P.UNPACK_SKIP_IMAGES,Gt),E.isDataTexture||E.isData3DTexture?P.texSubImage3D(Dt,L,It,be,Fe,ft,St,Nt,ni,Se,Oe.data):D.isCompressedArrayTexture?P.compressedTexSubImage3D(Dt,L,It,be,Fe,ft,St,Nt,ni,Oe.data):P.texSubImage3D(Dt,L,It,be,Fe,ft,St,Nt,ni,Se,Oe),P.pixelStorei(P.UNPACK_ROW_LENGTH,fn),P.pixelStorei(P.UNPACK_IMAGE_HEIGHT,Te),P.pixelStorei(P.UNPACK_SKIP_PIXELS,Ai),P.pixelStorei(P.UNPACK_SKIP_ROWS,vo),P.pixelStorei(P.UNPACK_SKIP_IMAGES,ii),L===0&&D.generateMipmaps&&P.generateMipmap(Dt),kt.unbindTexture()},this.initRenderTarget=function(E){Wt.get(E).__webglFramebuffer===void 0&&N.setupRenderTarget(E)},this.initTexture=function(E){E.isCubeTexture?N.setTextureCube(E,0):E.isData3DTexture?N.setTexture3D(E,0):E.isDataArrayTexture||E.isCompressedArrayTexture?N.setTexture2DArray(E,0):N.setTexture2D(E,0),kt.unbindTexture()},this.resetState=function(){w=0,A=0,v=null,kt.reset(),Ce.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return As}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=t===sg?"display-p3":"srgb",e.unpackColorSpace=Me.workingColorSpace===Xu?"display-p3":"srgb"}}let YN=class extends Wn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new xr,this.environmentIntensity=1,this.environmentRotation=new xr,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}},jN=class extends qi{constructor(t=null,e=1,n=1,i,s,o,a,l,c=jn,h=jn,u,d){super(null,o,a,l,c,h,i,s,u,d),this.isDataTexture=!0,this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},_0=class extends $i{constructor(t,e,n,i=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}};const Oo=new Ue,y0=new Ue,lh=[],S0=new go,KN=new Ue,gl=new Rn,xl=new Qa;class yS extends Rn{constructor(t,e,n){super(t,e),this.isInstancedMesh=!0,this.instanceMatrix=new _0(new Float32Array(n*16),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let i=0;i<n;i++)this.setMatrixAt(i,KN)}computeBoundingBox(){const t=this.geometry,e=this.count;this.boundingBox===null&&(this.boundingBox=new go),t.boundingBox===null&&t.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<e;n++)this.getMatrixAt(n,Oo),S0.copy(t.boundingBox).applyMatrix4(Oo),this.boundingBox.union(S0)}computeBoundingSphere(){const t=this.geometry,e=this.count;this.boundingSphere===null&&(this.boundingSphere=new Qa),t.boundingSphere===null&&t.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<e;n++)this.getMatrixAt(n,Oo),xl.copy(t.boundingSphere).applyMatrix4(Oo),this.boundingSphere.union(xl)}copy(t,e){return super.copy(t,e),this.instanceMatrix.copy(t.instanceMatrix),t.morphTexture!==null&&(this.morphTexture=t.morphTexture.clone()),t.instanceColor!==null&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,t.boundingBox!==null&&(this.boundingBox=t.boundingBox.clone()),t.boundingSphere!==null&&(this.boundingSphere=t.boundingSphere.clone()),this}getColorAt(t,e){e.fromArray(this.instanceColor.array,t*3)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,t*16)}getMorphAt(t,e){const n=e.morphTargetInfluences,i=this.morphTexture.source.data.data,s=n.length+1,o=t*s+1;for(let a=0;a<n.length;a++)n[a]=i[o+a]}raycast(t,e){const n=this.matrixWorld,i=this.count;if(gl.geometry=this.geometry,gl.material=this.material,gl.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),xl.copy(this.boundingSphere),xl.applyMatrix4(n),t.ray.intersectsSphere(xl)!==!1))for(let s=0;s<i;s++){this.getMatrixAt(s,Oo),y0.multiplyMatrices(n,Oo),gl.matrixWorld=y0,gl.raycast(t,lh);for(let o=0,a=lh.length;o<a;o++){const l=lh[o];l.instanceId=s,l.object=this,e.push(l)}lh.length=0}}setColorAt(t,e){this.instanceColor===null&&(this.instanceColor=new _0(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),e.toArray(this.instanceColor.array,t*3)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,t*16)}setMorphAt(t,e){const n=e.morphTargetInfluences,i=n.length+1;this.morphTexture===null&&(this.morphTexture=new jN(new Float32Array(i*this.count),i,this.count,Jm,Ki));const s=this.morphTexture.source.data.data;let o=0;for(let c=0;c<n.length;c++)o+=n[c];const a=this.geometry.morphTargetsRelative?1:1-o,l=i*t;s[l]=a,s.set(n,l+1)}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null),this}}class cg extends xo{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new ae(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const Tu=new U,Mu=new U,T0=new Ue,_l=new og,ch=new Qa,Qd=new U,M0=new U;class tm extends Wn{constructor(t=new Wi,e=new cg){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position,n=[0];for(let i=1,s=e.count;i<s;i++)Tu.fromBufferAttribute(e,i-1),Mu.fromBufferAttribute(e,i),n[i]=n[i-1],n[i]+=Tu.distanceTo(Mu);t.setAttribute("lineDistance",new Cn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,s=t.params.Line.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),ch.copy(n.boundingSphere),ch.applyMatrix4(i),ch.radius+=s,t.ray.intersectsSphere(ch)===!1)return;T0.copy(i).invert(),_l.copy(t.ray).applyMatrix4(T0);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,c=this.isLineSegments?2:1,h=n.index,d=n.attributes.position;if(h!==null){const f=Math.max(0,o.start),p=Math.min(h.count,o.start+o.count);for(let x=f,m=p-1;x<m;x+=c){const g=h.getX(x),y=h.getX(x+1),_=hh(this,t,_l,l,g,y);_&&e.push(_)}if(this.isLineLoop){const x=h.getX(p-1),m=h.getX(f),g=hh(this,t,_l,l,x,m);g&&e.push(g)}}else{const f=Math.max(0,o.start),p=Math.min(d.count,o.start+o.count);for(let x=f,m=p-1;x<m;x+=c){const g=hh(this,t,_l,l,x,x+1);g&&e.push(g)}if(this.isLineLoop){const x=hh(this,t,_l,l,p-1,f);x&&e.push(x)}}}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}}function hh(r,t,e,n,i,s){const o=r.geometry.attributes.position;if(Tu.fromBufferAttribute(o,i),Mu.fromBufferAttribute(o,s),e.distanceSqToSegment(Tu,Mu,Qd,M0)>n)return;Qd.applyMatrix4(r.matrixWorld);const l=t.ray.origin.distanceTo(Qd);if(!(l<t.near||l>t.far))return{distance:l,point:M0.clone().applyMatrix4(r.matrixWorld),index:i,face:null,faceIndex:null,barycoord:null,object:r}}let ZN=class SS extends Wi{constructor(t=1,e=32,n=16,i=0,s=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:s,thetaStart:o,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new U,d=new U,f=[],p=[],x=[],m=[];for(let g=0;g<=n;g++){const y=[],_=g/n;let T=0;g===0&&o===0?T=.5/e:g===n&&l===Math.PI&&(T=-.5/e);for(let w=0;w<=e;w++){const A=w/e;u.x=-t*Math.cos(i+A*s)*Math.sin(o+_*a),u.y=t*Math.cos(o+_*a),u.z=t*Math.sin(i+A*s)*Math.sin(o+_*a),p.push(u.x,u.y,u.z),d.copy(u).normalize(),x.push(d.x,d.y,d.z),m.push(A+T,1-_),y.push(c++)}h.push(y)}for(let g=0;g<n;g++)for(let y=0;y<e;y++){const _=h[g][y+1],T=h[g][y],w=h[g+1][y],A=h[g+1][y+1];(g!==0||o>0)&&f.push(_,T,A),(g!==n-1||l<Math.PI)&&f.push(T,w,A)}this.setIndex(f),this.setAttribute("position",new Cn(p,3)),this.setAttribute("normal",new Cn(x,3)),this.setAttribute("uv",new Cn(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new SS(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}};class hg extends Wi{constructor(t=1,e=.4,n=12,i=48,s=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:s},n=Math.floor(n),i=Math.floor(i);const o=[],a=[],l=[],c=[],h=new U,u=new U,d=new U;for(let f=0;f<=n;f++)for(let p=0;p<=i;p++){const x=p/i*s,m=f/n*Math.PI*2;u.x=(t+e*Math.cos(m))*Math.cos(x),u.y=(t+e*Math.cos(m))*Math.sin(x),u.z=e*Math.sin(m),a.push(u.x,u.y,u.z),h.x=t*Math.cos(x),h.y=t*Math.sin(x),d.subVectors(u,h).normalize(),l.push(d.x,d.y,d.z),c.push(p/i),c.push(f/n)}for(let f=1;f<=n;f++)for(let p=1;p<=i;p++){const x=(i+1)*f+p-1,m=(i+1)*(f-1)+p-1,g=(i+1)*(f-1)+p,y=(i+1)*f+p;o.push(x,m,y),o.push(m,g,y)}this.setIndex(o),this.setAttribute("position",new Cn(a,3)),this.setAttribute("normal",new Cn(l,3)),this.setAttribute("uv",new Cn(c,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new hg(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class QN extends xo{constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new ae(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ae(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ig,this.normalScale=new Jt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new xr,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class v0 extends xo{constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new ae(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ae(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ig,this.normalScale=new Jt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}let TS=class extends Wn{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new ae(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}};const Jd=new Ue,b0=new U,E0=new U;let JN=class{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Jt(512,512),this.map=null,this.mapPass=null,this.matrix=new Ue,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new ag,this._frameExtents=new Jt(1,1),this._viewportCount=1,this._viewports=[new Je(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;b0.setFromMatrixPosition(t.matrixWorld),e.position.copy(b0),E0.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(E0),e.updateMatrixWorld(),Jd.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Jd),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(Jd)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}},tR=class extends JN{constructor(){super(new fS(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}},eR=class extends TS{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Wn.DEFAULT_UP),this.updateMatrix(),this.target=new Wn,this.shadow=new tR}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}},nR=class extends TS{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}};class A0{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(An(e/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}const w0=new U,uh=new U,N0=new U;class iR extends Wn{constructor(t,e,n){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="DirectionalLightHelper",e===void 0&&(e=1);let i=new Wi;i.setAttribute("position",new Cn([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const s=new cg({fog:!1,toneMapped:!1});this.lightPlane=new tm(i,s),this.add(this.lightPlane),i=new Wi,i.setAttribute("position",new Cn([0,0,0,0,0,1],3)),this.targetLine=new tm(i,s),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),w0.setFromMatrixPosition(this.light.matrixWorld),uh.setFromMatrixPosition(this.light.target.matrixWorld),N0.subVectors(uh,w0),this.lightPlane.lookAt(uh),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(uh),this.targetLine.scale.z=N0.length()}}class sR extends mo{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Ym}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Ym);function _c(){return new YN}const yc=()=>{const r=new Si(75,2,.1,1e3);return r.position.z=2,r};function ju(r){const t=new XN({antialias:!0,canvas:r,alpha:!0});return t.shadowMap.enabled=!0,t.shadowMap.type=jm,t.setSize(r.clientWidth,r.clientHeight,!1),t.setPixelRatio(window.devicePixelRatio),t}const R0={type:"change"},ug={type:"start"},MS={type:"end"},dh=new og,C0=new sr,rR=Math.cos(70*Ib.DEG2RAD),sn=new U,Yn=2*Math.PI,Ne={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},tf=1e-6;class oR extends sR{constructor(t,e=null){super(t,e),this.state=Ne.NONE,this.enabled=!0,this.target=new U,this.cursor=new U,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:ba.ROTATE,MIDDLE:ba.DOLLY,RIGHT:ba.PAN},this.touches={ONE:pa.ROTATE,TWO:pa.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new U,this._lastQuaternion=new io,this._lastTargetPosition=new U,this._quat=new io().setFromUnitVectors(t.up,new U(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new A0,this._sphericalDelta=new A0,this._scale=1,this._panOffset=new U,this._rotateStart=new Jt,this._rotateEnd=new Jt,this._rotateDelta=new Jt,this._panStart=new Jt,this._panEnd=new Jt,this._panDelta=new Jt,this._dollyStart=new Jt,this._dollyEnd=new Jt,this._dollyDelta=new Jt,this._dollyDirection=new U,this._mouse=new Jt,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=lR.bind(this),this._onPointerDown=aR.bind(this),this._onPointerUp=cR.bind(this),this._onContextMenu=gR.bind(this),this._onMouseWheel=dR.bind(this),this._onKeyDown=fR.bind(this),this._onTouchStart=pR.bind(this),this._onTouchMove=mR.bind(this),this._onMouseDown=hR.bind(this),this._onMouseMove=uR.bind(this),this._interceptControlDown=xR.bind(this),this._interceptControlUp=_R.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(R0),this.update(),this.state=Ne.NONE}update(t=null){const e=this.object.position;sn.copy(e).sub(this.target),sn.applyQuaternion(this._quat),this._spherical.setFromVector3(sn),this.autoRotate&&this.state===Ne.NONE&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,i=this.maxAzimuthAngle;isFinite(n)&&isFinite(i)&&(n<-Math.PI?n+=Yn:n>Math.PI&&(n-=Yn),i<-Math.PI?i+=Yn:i>Math.PI&&(i-=Yn),n<=i?this._spherical.theta=Math.max(n,Math.min(i,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+i)/2?Math.max(n,this._spherical.theta):Math.min(i,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let s=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const o=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),s=o!=this._spherical.radius}if(sn.setFromSpherical(this._spherical),sn.applyQuaternion(this._quatInverse),e.copy(this.target).add(sn),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let o=null;if(this.object.isPerspectiveCamera){const a=sn.length();o=this._clampDistance(a*this._scale);const l=a-o;this.object.position.addScaledVector(this._dollyDirection,l),this.object.updateMatrixWorld(),s=!!l}else if(this.object.isOrthographicCamera){const a=new U(this._mouse.x,this._mouse.y,0);a.unproject(this.object);const l=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),s=l!==this.object.zoom;const c=new U(this._mouse.x,this._mouse.y,0);c.unproject(this.object),this.object.position.sub(c).add(a),this.object.updateMatrixWorld(),o=sn.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;o!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(o).add(this.object.position):(dh.origin.copy(this.object.position),dh.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(dh.direction))<rR?this.object.lookAt(this.target):(C0.setFromNormalAndCoplanarPoint(this.object.up,this.target),dh.intersectPlane(C0,this.target))))}else if(this.object.isOrthographicCamera){const o=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),o!==this.object.zoom&&(this.object.updateProjectionMatrix(),s=!0)}return this._scale=1,this._performCursorZoom=!1,s||this._lastPosition.distanceToSquared(this.object.position)>tf||8*(1-this._lastQuaternion.dot(this.object.quaternion))>tf||this._lastTargetPosition.distanceToSquared(this.target)>tf?(this.dispatchEvent(R0),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(t){return t!==null?Yn/60*this.autoRotateSpeed*t:Yn/60/60*this.autoRotateSpeed}_getZoomScale(t){const e=Math.abs(t*.01);return Math.pow(.95,this.zoomSpeed*e)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,e){sn.setFromMatrixColumn(e,0),sn.multiplyScalar(-t),this._panOffset.add(sn)}_panUp(t,e){this.screenSpacePanning===!0?sn.setFromMatrixColumn(e,1):(sn.setFromMatrixColumn(e,0),sn.crossVectors(this.object.up,sn)),sn.multiplyScalar(t),this._panOffset.add(sn)}_pan(t,e){const n=this.domElement;if(this.object.isPerspectiveCamera){const i=this.object.position;sn.copy(i).sub(this.target);let s=sn.length();s*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*s/n.clientHeight,this.object.matrix),this._panUp(2*e*s/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(e*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,e){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),i=t-n.left,s=e-n.top,o=n.width,a=n.height;this._mouse.x=i/o*2-1,this._mouse.y=-(s/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(Yn*this._rotateDelta.x/e.clientHeight),this._rotateUp(Yn*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let e=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateUp(Yn*this.rotateSpeed/this.domElement.clientHeight):this._pan(0,this.keyPanSpeed),e=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateUp(-Yn*this.rotateSpeed/this.domElement.clientHeight):this._pan(0,-this.keyPanSpeed),e=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateLeft(Yn*this.rotateSpeed/this.domElement.clientHeight):this._pan(this.keyPanSpeed,0),e=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateLeft(-Yn*this.rotateSpeed/this.domElement.clientHeight):this._pan(-this.keyPanSpeed,0),e=!0;break}e&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(this._pointers.length===1)this._rotateStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._rotateStart.set(n,i)}}_handleTouchStartPan(t){if(this._pointers.length===1)this._panStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._panStart.set(n,i)}}_handleTouchStartDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,i=t.pageY-e.y,s=Math.sqrt(n*n+i*i);this._dollyStart.set(0,s)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(this._pointers.length==1)this._rotateEnd.set(t.pageX,t.pageY);else{const n=this._getSecondPointerPosition(t),i=.5*(t.pageX+n.x),s=.5*(t.pageY+n.y);this._rotateEnd.set(i,s)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(Yn*this._rotateDelta.x/e.clientHeight),this._rotateUp(Yn*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(this._pointers.length===1)this._panEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._panEnd.set(n,i)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,i=t.pageY-e.y,s=Math.sqrt(n*n+i*i);this._dollyEnd.set(0,s),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const o=(t.pageX+e.x)*.5,a=(t.pageY+e.y)*.5;this._updateZoomParameters(o,a)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId){this._pointers.splice(e,1);return}}_isTrackingPointer(t){for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return!0;return!1}_trackPointer(t){let e=this._pointerPositions[t.pointerId];e===void 0&&(e=new Jt,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[e]}_customWheelEvent(t){const e=t.deltaMode,n={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return t.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function aR(r){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(r.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(r)&&(this._addPointer(r),r.pointerType==="touch"?this._onTouchStart(r):this._onMouseDown(r)))}function lR(r){this.enabled!==!1&&(r.pointerType==="touch"?this._onTouchMove(r):this._onMouseMove(r))}function cR(r){switch(this._removePointer(r),this._pointers.length){case 0:this.domElement.releasePointerCapture(r.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(MS),this.state=Ne.NONE;break;case 1:const t=this._pointers[0],e=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:e.x,pageY:e.y});break}}function hR(r){let t;switch(r.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case ba.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(r),this.state=Ne.DOLLY;break;case ba.ROTATE:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=Ne.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=Ne.ROTATE}break;case ba.PAN:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=Ne.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=Ne.PAN}break;default:this.state=Ne.NONE}this.state!==Ne.NONE&&this.dispatchEvent(ug)}function uR(r){switch(this.state){case Ne.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(r);break;case Ne.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(r);break;case Ne.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(r);break}}function dR(r){this.enabled===!1||this.enableZoom===!1||this.state!==Ne.NONE||(r.preventDefault(),this.dispatchEvent(ug),this._handleMouseWheel(this._customWheelEvent(r)),this.dispatchEvent(MS))}function fR(r){this.enabled===!1||this.enablePan===!1||this._handleKeyDown(r)}function pR(r){switch(this._trackPointer(r),this._pointers.length){case 1:switch(this.touches.ONE){case pa.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(r),this.state=Ne.TOUCH_ROTATE;break;case pa.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(r),this.state=Ne.TOUCH_PAN;break;default:this.state=Ne.NONE}break;case 2:switch(this.touches.TWO){case pa.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(r),this.state=Ne.TOUCH_DOLLY_PAN;break;case pa.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(r),this.state=Ne.TOUCH_DOLLY_ROTATE;break;default:this.state=Ne.NONE}break;default:this.state=Ne.NONE}this.state!==Ne.NONE&&this.dispatchEvent(ug)}function mR(r){switch(this._trackPointer(r),this.state){case Ne.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(r),this.update();break;case Ne.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(r),this.update();break;case Ne.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(r),this.update();break;case Ne.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(r),this.update();break;default:this.state=Ne.NONE}}function gR(r){this.enabled!==!1&&r.preventDefault()}function xR(r){r.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function _R(r){r.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function Ku(r,t){const e=new oR(r,t.domElement);return e.enableDamping=!0,e.enablePan=!1,e}function vS(){return new nR(16777215,1)}function bS(){const r=new eR(16777215,2);return r.castShadow=!0,r.shadow.mapSize.set(1024,1024),r.shadow.camera.far=15,r.shadow.normalBias=.05,r.position.set(0,5,0),r}function Sc(r,t){const e=r.domElement,n=e.clientWidth,i=e.clientHeight;(e.width!==n||e.height!==i)&&(r.setSize(n,i,!1),t.aspect=e.clientWidth/e.clientHeight,t.updateProjectionMatrix())}function Tc({title:r,description:t}){const e=document.querySelector("section"),n=document.createElement("article"),i=document.createElement("canvas"),s=document.createElement("h2"),o=document.createElement("p");return s.innerHTML=r,o.innerText=t,n.append(s,i,o),e.appendChild(n),i}function yR(r){const t=new Hl,e=new cg({color:16711680}),n=r.attributes.position.array,i=r.attributes.normal.array,s=.3;for(let o=0;o<n.length;o+=3){const a=n[o],l=n[o+1],c=n[o+2],h=new U(a,l,c),u=i[o],d=i[o+1],f=i[o+2],p=new U(a+u*s,l+d*s,c+f*s),x=new Wi().setFromPoints([h,p]),m=new tm(x,e);t.add(m)}return t}function SR(){const t=Tc({title:"Crear instancias de un objeto",description:"Sit enim deserunt ex ut minim et. Ut esse cillum esse labore adipisicing amet pariatur ad. Incididunt dolor nisi sit fugiat fugiat ex proident velit qui aute aliquip culpa consequat. Commodo dolor Lorem veniam consectetur. Proident et cupidatat veniam tempor."}),e=_c(),n=yc(),i=ju(t),s=Ku(n,i),o=bS(),a=vS();s.enableZoom=!1,n.position.set(1,2,1),s.target.set(0,1,0),e.add(o),e.add(a),e.add(new iR(o));const l=new xc(.5,.5,.5),c=new QN({color:65280,wireframe:!1}),h=new Rn(new _o(20,20),new gc({color:8750469,side:Ui})).rotateX(Math.PI/180*-90),u=2,d=1,f=u*u,p=new yS(l,c,f);e.add(p);const x=1,m=new Wn;let g=0;for(let _=0;_<u;_++)for(let T=0;T<u;T++){const w=(_-u/2)*d,A=(T-u/2)*d;m.position.set(w,x,A),m.updateMatrix(),p.setMatrixAt(g,m.matrix),g++}e.add(h);function y(){Sc(i,n),requestAnimationFrame(y),i.render(e,n),s.update()}y()}function TR(){const t=Tc({title:"Vectores normales",description:"Sit enim deserunt ex ut minim et. Ut esse cillum esse labore adipisicing amet pariatur ad. Incididunt dolor nisi sit fugiat fugiat ex proident velit qui aute aliquip culpa consequat. Commodo dolor Lorem veniam consectetur. Proident et cupidatat veniam tempor."}),e=_c(),n=yc(),i=ju(t),s=Ku(n,i),o=vS(),a=bS();s.enableZoom=!1,e.add(o),e.add(a),n.position.set(-4.4,4.71,3.89).multiplyScalar(.4),s.enableZoom=!1;const l=new ZN(1,32,32),c=new v0({color:16578836,wireframe:!1}),h=new Rn(l,c);e.add(h);const u=yR(l);e.add(u);const d=new Rn(new _o(20,20),new v0({color:8750469,side:Ui})).rotateX(Math.PI/180*-90);d.position.y=-2,d.receiveShadow=!0,e.add(d);function f(){Sc(i,n),requestAnimationFrame(f),i.render(e,n),s.update()}f()}/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const ES="169",MR=1,em=0,AS=300,vR=301,bR=302,P0=1e3,fh=1001,F0=1002,vu=1003,wS=1006,NS=1008,ER=1009,AR=1013,RS=1014,wR=1015,NR=1016,RR=1020,CR=1023,ef=1026,I0=1027,D0=0,PR=1,bu="",_s="srgb",Zu="srgb-linear",FR="display-p3",CS="display-p3-linear",nm="linear",L0="srgb",U0="rec709",B0="p3",Eu=35044,$l=2e3,im=2001;let Qu=class{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const i=this._listeners[t];if(i!==void 0){const s=i.indexOf(e);s!==-1&&i.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,t);t.target=null}}};const Sn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let O0=1234567;const PS=Math.PI/180,FS=180/Math.PI;function Zr(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Sn[r&255]+Sn[r>>8&255]+Sn[r>>16&255]+Sn[r>>24&255]+"-"+Sn[t&255]+Sn[t>>8&255]+"-"+Sn[t>>16&15|64]+Sn[t>>24&255]+"-"+Sn[e&63|128]+Sn[e>>8&255]+"-"+Sn[e>>16&255]+Sn[e>>24&255]+Sn[n&255]+Sn[n>>8&255]+Sn[n>>16&255]+Sn[n>>24&255]).toLowerCase()}function Gn(r,t,e){return Math.max(t,Math.min(e,r))}function dg(r,t){return(r%t+t)%t}function IR(r,t,e,n,i){return n+(r-t)*(i-n)/(e-t)}function DR(r,t,e){return r!==t?(e-r)/(t-r):0}function Kl(r,t,e){return(1-e)*r+e*t}function LR(r,t,e,n){return Kl(r,t,1-Math.exp(-e*n))}function UR(r,t=1){return t-Math.abs(dg(r,t*2)-t)}function BR(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function OR(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function zR(r,t){return r+Math.floor(Math.random()*(t-r+1))}function GR(r,t){return r+Math.random()*(t-r)}function kR(r){return r*(.5-Math.random())}function VR(r){r!==void 0&&(O0=r);let t=O0+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function HR(r){return r*PS}function $R(r){return r*FS}function WR(r){return(r&r-1)===0&&r!==0}function qR(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function XR(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function YR(r,t,e,n,i){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+n)/2),h=o((t+n)/2),u=s((t-n)/2),d=o((t-n)/2),f=s((n-t)/2),p=o((n-t)/2);switch(i){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*p,l*f,a*c);break;case"YXY":r.set(l*f,a*h,l*p,a*c);break;case"ZYZ":r.set(l*p,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function Oi(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function Ee(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const IS={DEG2RAD:PS,RAD2DEG:FS,generateUUID:Zr,clamp:Gn,euclideanModulo:dg,mapLinear:IR,inverseLerp:DR,lerp:Kl,damp:LR,pingpong:UR,smoothstep:BR,smootherstep:OR,randInt:zR,randFloat:GR,randFloatSpread:kR,seededRandom:VR,degToRad:HR,radToDeg:$R,isPowerOfTwo:WR,ceilPowerOfTwo:qR,floorPowerOfTwo:XR,setQuaternionFromProperEuler:YR,normalize:Ee,denormalize:Oi};let Zi=class DS{constructor(t=0,e=0){DS.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Gn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*n-o*i+t.x,this.y=s*i+o*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},br=class LS{constructor(t,e,n,i,s,o,a,l,c){LS.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c)}set(t,e,n,i,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=i,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=n,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],f=n[5],p=n[8],x=i[0],m=i[3],g=i[6],y=i[1],_=i[4],T=i[7],w=i[2],A=i[5],v=i[8];return s[0]=o*x+a*y+l*w,s[3]=o*m+a*_+l*A,s[6]=o*g+a*T+l*v,s[1]=c*x+h*y+u*w,s[4]=c*m+h*_+u*A,s[7]=c*g+h*T+u*v,s[2]=d*x+f*y+p*w,s[5]=d*m+f*_+p*A,s[8]=d*g+f*T+p*v,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-n*s*h+n*a*l+i*s*c-i*o*l}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,p=e*u+n*d+i*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/p;return t[0]=u*x,t[1]=(i*c-h*n)*x,t[2]=(a*n-i*o)*x,t[3]=d*x,t[4]=(h*e-i*l)*x,t[5]=(i*s-a*e)*x,t[6]=f*x,t[7]=(n*l-c*e)*x,t[8]=(o*e-n*s)*x,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*o+c*a)+o+t,-i*c,i*l,-i*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(nf.makeScale(t,e)),this}rotate(t){return this.premultiply(nf.makeRotation(-t)),this}translate(t,e){return this.premultiply(nf.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}};const nf=new br;function z0(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}const G0=new br().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),k0=new br().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),yl={[Zu]:{transfer:nm,primaries:U0,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r,fromReference:r=>r},[_s]:{transfer:L0,primaries:U0,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r.convertSRGBToLinear(),fromReference:r=>r.convertLinearToSRGB()},[CS]:{transfer:nm,primaries:B0,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.applyMatrix3(k0),fromReference:r=>r.applyMatrix3(G0)},[FR]:{transfer:L0,primaries:B0,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.convertSRGBToLinear().applyMatrix3(k0),fromReference:r=>r.applyMatrix3(G0).convertLinearToSRGB()}},jR=new Set([Zu,CS]),ui={enabled:!0,_workingColorSpace:Zu,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(r){if(!jR.has(r))throw new Error(`Unsupported working color space, "${r}".`);this._workingColorSpace=r},convert:function(r,t,e){if(this.enabled===!1||t===e||!t||!e)return r;const n=yl[t].toReference,i=yl[e].fromReference;return i(n(r))},fromWorkingColorSpace:function(r,t){return this.convert(r,this._workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this._workingColorSpace)},getPrimaries:function(r){return yl[r].primaries},getTransfer:function(r){return r===bu?nm:yl[r].transfer},getLuminanceCoefficients:function(r,t=this._workingColorSpace){return r.fromArray(yl[t].luminanceCoefficients)}};function Na(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function sf(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let zo,KR=class{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{zo===void 0&&(zo=z0("canvas")),zo.width=t.width,zo.height=t.height;const n=zo.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=zo}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=z0("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),s=i.data;for(let o=0;o<s.length;o++)s[o]=Na(s[o]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(Na(e[n]/255)*255):e[n]=Na(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}},ZR=0,US=class{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:ZR++}),this.uuid=Zr(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?s.push(rf(i[o].image)):s.push(rf(i[o]))}else s=rf(i);n.url=s}return e||(t.images[this.uuid]=n),n}};function rf(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?KR.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let QR=0,tl=class au extends Qu{constructor(t=au.DEFAULT_IMAGE,e=au.DEFAULT_MAPPING,n=fh,i=fh,s=wS,o=NS,a=CR,l=ER,c=au.DEFAULT_ANISOTROPY,h=bu){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:QR++}),this.uuid=Zr(),this.name="",this.source=new US(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new Zi(0,0),this.repeat=new Zi(1,1),this.center=new Zi(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new br,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==AS)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case P0:t.x=t.x-Math.floor(t.x);break;case fh:t.x=t.x<0?0:1;break;case F0:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case P0:t.y=t.y-Math.floor(t.y);break;case fh:t.y=t.y<0?0:1;break;case F0:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}};tl.DEFAULT_IMAGE=null;tl.DEFAULT_MAPPING=AS;tl.DEFAULT_ANISOTROPY=1;let yr=class BS{constructor(t=0,e=0,n=0,i=1){BS.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*e+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*e+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*e+o[7]*n+o[11]*i+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,s;const l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],p=l[9],x=l[2],m=l[6],g=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-x)<.01&&Math.abs(p-m)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+x)<.1&&Math.abs(p+m)<.1&&Math.abs(c+f+g-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const _=(c+1)/2,T=(f+1)/2,w=(g+1)/2,A=(h+d)/4,v=(u+x)/4,R=(p+m)/4;return _>T&&_>w?_<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(_),i=A/n,s=v/n):T>w?T<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(T),n=A/i,s=R/i):w<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(w),n=v/s,i=R/s),this.set(n,i,s,e),this}let y=Math.sqrt((m-p)*(m-p)+(u-x)*(u-x)+(d-h)*(d-h));return Math.abs(y)<.001&&(y=1),this.x=(m-p)/y,this.y=(u-x)/y,this.z=(d-h)/y,this.w=Math.acos((c+f+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}},OS=class extends Qu{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new yr(0,0,t,e),this.scissorTest=!1,this.viewport=new yr(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:wS,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const s=new tl(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let n=0,i=t.textures.length;n<i;n++)this.textures[n]=t.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new US(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}},Mc=class{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,s,o,a){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[o+0],f=s[o+1],p=s[o+2],x=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=x;return}if(u!==x||l!==d||c!==f||h!==p){let m=1-a;const g=l*d+c*f+h*p+u*x,y=g>=0?1:-1,_=1-g*g;if(_>Number.EPSILON){const w=Math.sqrt(_),A=Math.atan2(w,g*y);m=Math.sin(m*A)/w,a=Math.sin(a*A)/w}const T=a*y;if(l=l*m+d*T,c=c*m+f*T,h=h*m+p*T,u=u*m+x*T,m===1-a){const w=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=w,c*=w,h*=w,u*=w}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,n,i,s,o){const a=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[o],d=s[o+1],f=s[o+2],p=s[o+3];return t[e]=a*p+h*u+l*f-c*d,t[e+1]=l*p+h*d+c*u-a*f,t[e+2]=c*p+h*f+a*d-l*u,t[e+3]=h*p-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(n/2),h=a(i/2),u=a(s/2),d=l(n/2),f=l(i/2),p=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"YXZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"ZXY":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"ZYX":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"YZX":this._x=d*h*u+c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u-d*f*p;break;case"XZY":this._x=d*h*u-c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=n+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-i)*f}else if(n>a&&n>u){const f=2*Math.sqrt(1+n-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(i+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-n-u);this._w=(s-c)/f,this._x=(i+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-n-a);this._w=(o-i)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Gn(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=n*h+o*a+i*c-s*l,this._y=i*h+o*l+s*a-n*c,this._z=s*h+o*c+n*l-i*a,this._w=o*h-n*a-i*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*t._w+n*t._x+i*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*n+e*this._x,this._y=f*i+e*this._y,this._z=f*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},me=class zS{constructor(t=0,e=0,n=0){zS.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(V0.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(V0.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*i,this.y=s[1]*e+s[4]*n+s[7]*i,this.z=s[2]*e+s[5]*n+s[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=t.elements,o=1/(s[3]*e+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*e+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*e+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=2*(o*i-a*n),h=2*(a*e-s*i),u=2*(s*n-o*e);return this.x=e+l*c+o*u-a*h,this.y=n+l*h+a*c-s*u,this.z=i+l*u+s*h-o*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i,this.y=s[1]*e+s[5]*n+s[9]*i,this.z=s[2]*e+s[6]*n+s[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=i*l-s*a,this.y=s*o-n*l,this.z=n*a-i*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return of.copy(this).projectOnVector(t),this.sub(of)}reflect(t){return this.sub(of.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Gn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const of=new me,V0=new Mc;let pr=class sm{constructor(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){sm.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m)}set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=s,g[5]=o,g[9]=a,g[13]=l,g[2]=c,g[6]=h,g[10]=u,g[14]=d,g[3]=f,g[7]=p,g[11]=x,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new sm().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Go.setFromMatrixColumn(t,0).length(),s=1/Go.setFromMatrixColumn(t,1).length(),o=1/Go.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*o,e[9]=n[9]*o,e[10]=n[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,s=t.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+p*c,e[5]=d-x*c,e[9]=-a*l,e[2]=x-d*c,e[6]=p+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d+x*a,e[4]=p*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=x+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d-x*a,e[4]=-o*u,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=x-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=p*c-f,e[8]=d*c+x,e[1]=l*u,e[5]=x*c+d,e[9]=f*c-p,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=x-d*u,e[8]=p*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+p,e[10]=d-x*u}else if(t.order==="XZY"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+x,e[5]=o*h,e[9]=f*u-p,e[2]=p*u-f,e[6]=a*h,e[10]=x*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(JR,t,tC)}lookAt(t,e,n){const i=this.elements;return oi.subVectors(t,e),oi.lengthSq()===0&&(oi.z=1),oi.normalize(),Ys.crossVectors(n,oi),Ys.lengthSq()===0&&(Math.abs(n.z)===1?oi.x+=1e-4:oi.z+=1e-4,oi.normalize(),Ys.crossVectors(n,oi)),Ys.normalize(),ph.crossVectors(oi,Ys),i[0]=Ys.x,i[4]=ph.x,i[8]=oi.x,i[1]=Ys.y,i[5]=ph.y,i[9]=oi.y,i[2]=Ys.z,i[6]=ph.z,i[10]=oi.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],f=n[13],p=n[2],x=n[6],m=n[10],g=n[14],y=n[3],_=n[7],T=n[11],w=n[15],A=i[0],v=i[4],R=i[8],W=i[12],S=i[1],b=i[5],H=i[9],z=i[13],Z=i[2],tt=i[6],q=i[10],nt=i[14],$=i[3],ct=i[7],ut=i[11],mt=i[15];return s[0]=o*A+a*S+l*Z+c*$,s[4]=o*v+a*b+l*tt+c*ct,s[8]=o*R+a*H+l*q+c*ut,s[12]=o*W+a*z+l*nt+c*mt,s[1]=h*A+u*S+d*Z+f*$,s[5]=h*v+u*b+d*tt+f*ct,s[9]=h*R+u*H+d*q+f*ut,s[13]=h*W+u*z+d*nt+f*mt,s[2]=p*A+x*S+m*Z+g*$,s[6]=p*v+x*b+m*tt+g*ct,s[10]=p*R+x*H+m*q+g*ut,s[14]=p*W+x*z+m*nt+g*mt,s[3]=y*A+_*S+T*Z+w*$,s[7]=y*v+_*b+T*tt+w*ct,s[11]=y*R+_*H+T*q+w*ut,s[15]=y*W+_*z+T*nt+w*mt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],p=t[3],x=t[7],m=t[11],g=t[15];return p*(+s*l*u-i*c*u-s*a*d+n*c*d+i*a*f-n*l*f)+x*(+e*l*f-e*c*d+s*o*d-i*o*f+i*c*h-s*l*h)+m*(+e*c*u-e*a*f-s*o*u+n*o*f+s*a*h-n*c*h)+g*(-i*a*h-e*l*u+e*a*d+i*o*u-n*o*d+n*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],p=t[12],x=t[13],m=t[14],g=t[15],y=u*m*c-x*d*c+x*l*f-a*m*f-u*l*g+a*d*g,_=p*d*c-h*m*c-p*l*f+o*m*f+h*l*g-o*d*g,T=h*x*c-p*u*c+p*a*f-o*x*f-h*a*g+o*u*g,w=p*u*l-h*x*l-p*a*d+o*x*d+h*a*m-o*u*m,A=e*y+n*_+i*T+s*w;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const v=1/A;return t[0]=y*v,t[1]=(x*d*s-u*m*s-x*i*f+n*m*f+u*i*g-n*d*g)*v,t[2]=(a*m*s-x*l*s+x*i*c-n*m*c-a*i*g+n*l*g)*v,t[3]=(u*l*s-a*d*s-u*i*c+n*d*c+a*i*f-n*l*f)*v,t[4]=_*v,t[5]=(h*m*s-p*d*s+p*i*f-e*m*f-h*i*g+e*d*g)*v,t[6]=(p*l*s-o*m*s-p*i*c+e*m*c+o*i*g-e*l*g)*v,t[7]=(o*d*s-h*l*s+h*i*c-e*d*c-o*i*f+e*l*f)*v,t[8]=T*v,t[9]=(p*u*s-h*x*s-p*n*f+e*x*f+h*n*g-e*u*g)*v,t[10]=(o*x*s-p*a*s+p*n*c-e*x*c-o*n*g+e*a*g)*v,t[11]=(h*a*s-o*u*s-h*n*c+e*u*c+o*n*f-e*a*f)*v,t[12]=w*v,t[13]=(h*x*i-p*u*i+p*n*d-e*x*d-h*n*m+e*u*m)*v,t[14]=(p*a*i-o*x*i-p*n*l+e*x*l+o*n*m-e*a*m)*v,t[15]=(o*u*i-h*a*i+h*n*l-e*u*l-o*n*d+e*a*d)*v,this}scale(t){const e=this.elements,n=t.x,i=t.y,s=t.z;return e[0]*=n,e[4]*=i,e[8]*=s,e[1]*=n,e[5]*=i,e[9]*=s,e[2]*=n,e[6]*=i,e[10]*=s,e[3]*=n,e[7]*=i,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),s=1-n,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+n,c*a-i*l,c*l+i*a,0,c*a+i*l,h*a+n,h*l-i*o,0,c*l-i*a,h*l+i*o,s*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,s,o){return this.set(1,n,s,0,t,1,o,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,p=s*u,x=o*h,m=o*u,g=a*u,y=l*c,_=l*h,T=l*u,w=n.x,A=n.y,v=n.z;return i[0]=(1-(x+g))*w,i[1]=(f+T)*w,i[2]=(p-_)*w,i[3]=0,i[4]=(f-T)*A,i[5]=(1-(d+g))*A,i[6]=(m+y)*A,i[7]=0,i[8]=(p+_)*v,i[9]=(m-y)*v,i[10]=(1-(d+x))*v,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let s=Go.set(i[0],i[1],i[2]).length();const o=Go.set(i[4],i[5],i[6]).length(),a=Go.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),t.x=i[12],t.y=i[13],t.z=i[14],Ci.copy(this);const c=1/s,h=1/o,u=1/a;return Ci.elements[0]*=c,Ci.elements[1]*=c,Ci.elements[2]*=c,Ci.elements[4]*=h,Ci.elements[5]*=h,Ci.elements[6]*=h,Ci.elements[8]*=u,Ci.elements[9]*=u,Ci.elements[10]*=u,e.setFromRotationMatrix(Ci),n.x=s,n.y=o,n.z=a,this}makePerspective(t,e,n,i,s,o,a=$l){const l=this.elements,c=2*s/(e-t),h=2*s/(n-i),u=(e+t)/(e-t),d=(n+i)/(n-i);let f,p;if(a===$l)f=-(o+s)/(o-s),p=-2*o*s/(o-s);else if(a===im)f=-o/(o-s),p=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,i,s,o,a=$l){const l=this.elements,c=1/(e-t),h=1/(n-i),u=1/(o-s),d=(e+t)*c,f=(n+i)*h;let p,x;if(a===$l)p=(o+s)*u,x=-2*u;else if(a===im)p=s*u,x=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=x,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}};const Go=new me,Ci=new pr,JR=new me(0,0,0),tC=new me(1,1,1),Ys=new me,ph=new me,oi=new me,H0=new pr,$0=new Mc;let GS=class kS{constructor(t=0,e=0,n=0,i=kS.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,s=i[0],o=i[4],a=i[8],l=i[1],c=i[5],h=i[9],u=i[2],d=i[6],f=i[10];switch(e){case"XYZ":this._y=Math.asin(Gn(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Gn(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(Gn(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-Gn(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(Gn(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-Gn(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return H0.makeRotationFromQuaternion(t),this.setFromRotationMatrix(H0,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return $0.setFromEuler(this),this.setFromQuaternion($0,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}};GS.DEFAULT_ORDER="XYZ";let eC=class{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}},nC=0;const W0=new me,ko=new Mc,us=new pr,mh=new me,Sl=new me,iC=new me,sC=new Mc,q0=new me(1,0,0),X0=new me(0,1,0),Y0=new me(0,0,1),j0={type:"added"},rC={type:"removed"},Vo={type:"childadded",child:null},af={type:"childremoved",child:null};let fg=class lu extends Qu{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:nC++}),this.uuid=Zr(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=lu.DEFAULT_UP.clone();const t=new me,e=new GS,n=new Mc,i=new me(1,1,1);function s(){n.setFromEuler(e,!1)}function o(){e.setFromQuaternion(n,void 0,!1)}e._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new pr},normalMatrix:{value:new br}}),this.matrix=new pr,this.matrixWorld=new pr,this.matrixAutoUpdate=lu.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=lu.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new eC,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return ko.setFromAxisAngle(t,e),this.quaternion.multiply(ko),this}rotateOnWorldAxis(t,e){return ko.setFromAxisAngle(t,e),this.quaternion.premultiply(ko),this}rotateX(t){return this.rotateOnAxis(q0,t)}rotateY(t){return this.rotateOnAxis(X0,t)}rotateZ(t){return this.rotateOnAxis(Y0,t)}translateOnAxis(t,e){return W0.copy(t).applyQuaternion(this.quaternion),this.position.add(W0.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(q0,t)}translateY(t){return this.translateOnAxis(X0,t)}translateZ(t){return this.translateOnAxis(Y0,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(us.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?mh.copy(t):mh.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Sl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?us.lookAt(Sl,mh,this.up):us.lookAt(mh,Sl,this.up),this.quaternion.setFromRotationMatrix(us),i&&(us.extractRotation(i.matrixWorld),ko.setFromRotationMatrix(us),this.quaternion.premultiply(ko.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(j0),Vo.child=t,this.dispatchEvent(Vo),Vo.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(rC),af.child=t,this.dispatchEvent(af),af.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),us.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),us.multiply(t.parent.matrixWorld)),t.applyMatrix4(us),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(j0),Vo.child=t,this.dispatchEvent(Vo),Vo.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Sl,t,iC),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Sl,sC,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));i.material=a}else i.material=s(t.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];i.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(n.geometries=a),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f),p.length>0&&(n.nodes=p)}return n.object=i,n;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}};fg.DEFAULT_UP=new me(0,1,0);fg.DEFAULT_MATRIX_AUTO_UPDATE=!0;fg.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const VS={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},js={h:0,s:0,l:0},gh={h:0,s:0,l:0};function lf(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}let pg=class{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=_s){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,ui.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=ui.workingColorSpace){return this.r=t,this.g=e,this.b=n,ui.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=ui.workingColorSpace){if(t=dg(t,1),e=Gn(e,0,1),n=Gn(n,0,1),e===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+e):n+e-n*e,o=2*n-s;this.r=lf(o,s,t+1/3),this.g=lf(o,s,t),this.b=lf(o,s,t-1/3)}return ui.toWorkingColorSpace(this,i),this}setStyle(t,e=_s){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=i[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=_s){const n=VS[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Na(t.r),this.g=Na(t.g),this.b=Na(t.b),this}copyLinearToSRGB(t){return this.r=sf(t.r),this.g=sf(t.g),this.b=sf(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=_s){return ui.fromWorkingColorSpace(Tn.copy(this),t),Math.round(Gn(Tn.r*255,0,255))*65536+Math.round(Gn(Tn.g*255,0,255))*256+Math.round(Gn(Tn.b*255,0,255))}getHexString(t=_s){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=ui.workingColorSpace){ui.fromWorkingColorSpace(Tn.copy(this),e);const n=Tn.r,i=Tn.g,s=Tn.b,o=Math.max(n,i,s),a=Math.min(n,i,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=ui.workingColorSpace){return ui.fromWorkingColorSpace(Tn.copy(this),e),t.r=Tn.r,t.g=Tn.g,t.b=Tn.b,t}getStyle(t=_s){ui.fromWorkingColorSpace(Tn.copy(this),t);const e=Tn.r,n=Tn.g,i=Tn.b;return t!==_s?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){return this.getHSL(js),this.setHSL(js.h+t,js.s+e,js.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(js),t.getHSL(gh);const n=Kl(js.h,gh.h,e),i=Kl(js.s,gh.s,e),s=Kl(js.l,gh.l,e);return this.setHSL(n,i,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,s=t.elements;return this.r=s[0]*e+s[3]*n+s[6]*i,this.g=s[1]*e+s[4]*n+s[7]*i,this.b=s[2]*e+s[5]*n+s[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};const Tn=new pg;pg.NAMES=VS;const Xe=new me,xh=new Zi;let HS=class{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=Eu,this.updateRanges=[],this.gpuType=wR,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)xh.fromBufferAttribute(this,e),xh.applyMatrix3(t),this.setXY(e,xh.x,xh.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)Xe.fromBufferAttribute(this,e),Xe.applyMatrix3(t),this.setXYZ(e,Xe.x,Xe.y,Xe.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)Xe.fromBufferAttribute(this,e),Xe.applyMatrix4(t),this.setXYZ(e,Xe.x,Xe.y,Xe.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Xe.fromBufferAttribute(this,e),Xe.applyNormalMatrix(t),this.setXYZ(e,Xe.x,Xe.y,Xe.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Xe.fromBufferAttribute(this,e),Xe.transformDirection(t),this.setXYZ(e,Xe.x,Xe.y,Xe.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=Oi(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Ee(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Oi(e,this.array)),e}setX(t,e){return this.normalized&&(e=Ee(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Oi(e,this.array)),e}setY(t,e){return this.normalized&&(e=Ee(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Oi(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Ee(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Oi(e,this.array)),e}setW(t,e){return this.normalized&&(e=Ee(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=Ee(e,this.array),n=Ee(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=Ee(e,this.array),n=Ee(n,this.array),i=Ee(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=Ee(e,this.array),n=Ee(n,this.array),i=Ee(i,this.array),s=Ee(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Eu&&(t.usage=this.usage),t}},oC=class{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=Eu,this.updateRanges=[],this.version=0,this.uuid=Zr()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,s=this.stride;i<s;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Zr()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Zr()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}};const Dn=new me;let aC=class $S{constructor(t,e,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)Dn.fromBufferAttribute(this,e),Dn.applyMatrix4(t),this.setXYZ(e,Dn.x,Dn.y,Dn.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Dn.fromBufferAttribute(this,e),Dn.applyNormalMatrix(t),this.setXYZ(e,Dn.x,Dn.y,Dn.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Dn.fromBufferAttribute(this,e),Dn.transformDirection(t),this.setXYZ(e,Dn.x,Dn.y,Dn.z);return this}getComponent(t,e){let n=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(n=Oi(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Ee(n,this.array)),this.data.array[t*this.data.stride+this.offset+e]=n,this}setX(t,e){return this.normalized&&(e=Ee(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=Ee(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=Ee(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=Ee(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=Oi(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=Oi(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=Oi(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=Oi(e,this.array)),e}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=Ee(e,this.array),n=Ee(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=Ee(e,this.array),n=Ee(n,this.array),i=Ee(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=Ee(e,this.array),n=Ee(n,this.array),i=Ee(i,this.array),s=Ee(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[i+s])}return new HS(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new $S(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}},lC=class extends HS{constructor(t,e,n,i=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}};const cf=new me,cC=new me,hC=new br;let uC=class{constructor(t=new me(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=cf.subVectors(n,e).cross(cC.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(cf),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:e.copy(t.start).addScaledVector(n,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||hC.getNormalMatrix(t),i=this.coplanarPoint(cf).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}},dC=class extends tl{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=vu,this.minFilter=vu,this.generateMipmaps=!1,this.needsUpdate=!0}},WS=class extends tl{constructor(t,e,n,i,s,o,a,l,c,h=ef){if(h!==ef&&h!==I0)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===ef&&(n=RS),n===void 0&&h===I0&&(n=RR),super(null,i,s,o,a,l,h,n,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:vu,this.minFilter=l!==void 0?l:vu,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}};function rm(r,t=0){let e=3735928559^t,n=1103547991^t;if(r instanceof Array)for(let i=0,s;i<r.length;i++)s=r[i],e=Math.imul(e^s,2654435761),n=Math.imul(n^s,1597334677);else for(let i=0,s;i<r.length;i++)s=r.charCodeAt(i),e=Math.imul(e^s,2654435761),n=Math.imul(n^s,1597334677);return e=Math.imul(e^e>>>16,2246822507),e^=Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(e^e>>>13,3266489909),4294967296*(2097151&n)+(e>>>0)}const fC=(...r)=>rm(r);function pC(r,t=!1){const e=[];r.isNode===!0&&(e.push(r.id),r=r.getSelf());for(const{property:n,childNode:i}of om(r))e.push(e,rm(n.slice(0,-4)),i.getCacheKey(t));return rm(e)}function*om(r,t=!1){for(const e in r){if(e.startsWith("_")===!0)continue;const n=r[e];if(Array.isArray(n)===!0)for(let i=0;i<n.length;i++){const s=n[i];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:i,childNode:s})}else if(n&&n.isNode===!0)yield{property:e,childNode:n};else if(typeof n=="object")for(const i in n){const s=n[i];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:i,childNode:s})}}}function hr(r){if(r==null)return null;const t=typeof r;return r.isNode===!0?"node":t==="number"?"float":t==="boolean"?"bool":t==="string"?"string":t==="function"?"shader":r.isVector2===!0?"vec2":r.isVector3===!0?"vec3":r.isVector4===!0?"vec4":r.isMatrix3===!0?"mat3":r.isMatrix4===!0?"mat4":r.isColor===!0?"color":r instanceof ArrayBuffer?"ArrayBuffer":null}function qS(r,...t){const e=r?r.slice(-4):void 0;return t.length===1&&(e==="vec2"?t=[t[0],t[0]]:e==="vec3"?t=[t[0],t[0],t[0]]:e==="vec4"&&(t=[t[0],t[0],t[0],t[0]])),r==="color"?new pg(...t):e==="vec2"?new Zi(...t):e==="vec3"?new me(...t):e==="vec4"?new yr(...t):e==="mat3"?new br(...t):e==="mat4"?new pr(...t):r==="bool"?t[0]||!1:r==="float"||r==="int"||r==="uint"?t[0]||0:r==="string"?t[0]||"":r==="ArrayBuffer"?gC(t[0]):null}function mC(r){let t="";const e=new Uint8Array(r);for(let n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return btoa(t)}function gC(r){return Uint8Array.from(atob(r),t=>t.charCodeAt(0)).buffer}const K0={VERTEX:"vertex",FRAGMENT:"fragment"},Ze={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},vc=["x","y","z","w"];let xC=0,le=class extends Qu{static get type(){return"Node"}constructor(t=null){super(),this.nodeType=t,this.updateType=Ze.NONE,this.updateBeforeType=Ze.NONE,this.updateAfterType=Ze.NONE,this.uuid=IS.generateUUID(),this.version=0,this._cacheKey=null,this._cacheKeyVersion=0,this.global=!1,this.isNode=!0,Object.defineProperty(this,"id",{value:xC++})}set needsUpdate(t){t===!0&&this.version++}get type(){return this.constructor.type}onUpdate(t,e){return this.updateType=e,this.update=t.bind(this.getSelf()),this}onFrameUpdate(t){return this.onUpdate(t,Ze.FRAME)}onRenderUpdate(t){return this.onUpdate(t,Ze.RENDER)}onObjectUpdate(t){return this.onUpdate(t,Ze.OBJECT)}onReference(t){return this.updateReference=t.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:t}of om(this))yield t}dispose(){this.dispatchEvent({type:"dispose"})}traverse(t){t(this);for(const e of this.getChildren())e.traverse(t)}getCacheKey(t=!1){return t=t||this.version!==this._cacheKeyVersion,(t===!0||this._cacheKey===null)&&(this._cacheKey=pC(this,t),this._cacheKeyVersion=this.version),this._cacheKey}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(t){const e=this.getNodeType(t);return t.getElementType(e)}getNodeType(t){const e=t.getNodeProperties(this);return e.outputNode?e.outputNode.getNodeType(t):this.nodeType}getShared(t){const e=this.getHash(t);return t.getNodeFromHash(e)||this}setup(t){const e=t.getNodeProperties(this);let n=0;for(const i of this.getChildren())e["node"+n++]=i;return null}analyze(t){if(t.increaseUsage(this)===1){const n=t.getNodeProperties(this);for(const i of Object.values(n))i&&i.isNode===!0&&i.build(t)}}generate(t,e){const{outputNode:n}=t.getNodeProperties(this);if(n&&n.isNode===!0)return n.build(t,e)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(t,e=null){const n=this.getShared(t);if(this!==n)return n.build(t,e);t.addNode(this),t.addChain(this);let i=null;const s=t.getBuildStage();if(s==="setup"){this.updateReference(t);const o=t.getNodeProperties(this);if(o.initialized!==!0){const a=t.stack.nodes.length;o.initialized=!0,o.outputNode=this.setup(t),o.outputNode!==null&&t.stack.nodes.length;for(const l of Object.values(o))l&&l.isNode===!0&&l.build(t)}}else if(s==="analyze")this.analyze(t);else if(s==="generate")if(this.generate.length===1){const a=this.getNodeType(t),l=t.getDataFromNode(this);i=l.snippet,i===void 0?(i=this.generate(t)||"",l.snippet=i):l.flowCodes!==void 0&&t.context.nodeBlock!==void 0&&t.addFlowCodeHierarchy(this,t.context.nodeBlock),i=t.format(i,a,e)}else i=this.generate(t,e)||"";return t.removeChain(this),i}getSerializeChildren(){return om(this)}serialize(t){const e=this.getSerializeChildren(),n={};for(const{property:i,index:s,childNode:o}of e)s!==void 0?(n[i]===void 0&&(n[i]=Number.isInteger(s)?[]:{}),n[i][s]=o.toJSON(t.meta).uuid):n[i]=o.toJSON(t.meta).uuid;Object.keys(n).length>0&&(t.inputNodes=n)}deserialize(t){if(t.inputNodes!==void 0){const e=t.meta.nodes;for(const n in t.inputNodes)if(Array.isArray(t.inputNodes[n])){const i=[];for(const s of t.inputNodes[n])i.push(e[s]);this[n]=i}else if(typeof t.inputNodes[n]=="object"){const i={};for(const s in t.inputNodes[n]){const o=t.inputNodes[n][s];i[s]=e[o]}this[n]=i}else{const i=t.inputNodes[n];this[n]=e[i]}}}toJSON(t){const{uuid:e,type:n}=this,i=t===void 0||typeof t=="string";i&&(t={textures:{},images:{},nodes:{}});let s=t.nodes[e];s===void 0&&(s={uuid:e,type:n,meta:t,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},i!==!0&&(t.nodes[s.uuid]=s),this.serialize(s),delete s.meta);function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}if(i){const a=o(t.textures),l=o(t.images),c=o(t.nodes);a.length>0&&(s.textures=a),l.length>0&&(s.images=l),c.length>0&&(s.nodes=c)}return s}},bc=class extends le{static get type(){return"ArrayElementNode"}constructor(t,e){super(),this.node=t,this.indexNode=e,this.isArrayElementNode=!0}getNodeType(t){return this.node.getElementType(t)}generate(t){const e=this.node.build(t),n=this.indexNode.build(t,"uint");return`${e}[ ${n} ]`}},XS=class extends le{static get type(){return"ConvertNode"}constructor(t,e){super(),this.node=t,this.convertTo=e}getNodeType(t){const e=this.node.getNodeType(t);let n=null;for(const i of this.convertTo.split("|"))(n===null||t.getTypeLength(e)===t.getTypeLength(i))&&(n=i);return n}serialize(t){super.serialize(t),t.convertTo=this.convertTo}deserialize(t){super.deserialize(t),this.convertTo=t.convertTo}generate(t,e){const n=this.node,i=this.getNodeType(t),s=n.build(t,i);return t.format(s,i,e)}},Jn=class extends le{static get type(){return"TempNode"}constructor(t){super(t),this.isTempNode=!0}hasDependencies(t){return t.getDataFromNode(this).usageCount>1}build(t,e){if(t.getBuildStage()==="generate"){const i=t.getVectorType(this.getNodeType(t,e)),s=t.getDataFromNode(this);if(s.propertyName!==void 0)return t.format(s.propertyName,i,e);if(i!=="void"&&e!=="void"&&this.hasDependencies(t)){const o=super.build(t,i),a=t.getVarFromNode(this,null,i),l=t.getPropertyName(a);return t.addLineFlowCode(`${l} = ${o}`,this),s.snippet=o,s.propertyName=l,t.format(s.propertyName,i,e)}}return super.build(t,e)}},_C=class extends Jn{static get type(){return"JoinNode"}constructor(t=[],e=null){super(e),this.nodes=t}getNodeType(t){return this.nodeType!==null?t.getVectorType(this.nodeType):t.getTypeFromLength(this.nodes.reduce((e,n)=>e+t.getTypeLength(n.getNodeType(t)),0))}generate(t,e){const n=this.getNodeType(t),i=this.nodes,s=t.getComponentType(n),o=[];for(const l of i){let c=l.build(t);const h=t.getComponentType(l.getNodeType(t));h!==s&&(c=t.format(c,h,s)),o.push(c)}const a=`${t.getType(n)}( ${o.join(", ")} )`;return t.format(a,n,e)}};const yC=vc.join("");let Z0=class extends le{static get type(){return"SplitNode"}constructor(t,e="x"){super(),this.node=t,this.components=e,this.isSplitNode=!0}getVectorLength(){let t=this.components.length;for(const e of this.components)t=Math.max(vc.indexOf(e)+1,t);return t}getComponentType(t){return t.getComponentType(this.node.getNodeType(t))}getNodeType(t){return t.getTypeFromLength(this.components.length,this.getComponentType(t))}generate(t,e){const n=this.node,i=t.getTypeLength(n.getNodeType(t));let s=null;if(i>1){let o=null;this.getVectorLength()>=i&&(o=t.getTypeFromLength(this.getVectorLength(),this.getComponentType(t)));const l=n.build(t,o);this.components.length===i&&this.components===yC.slice(0,this.components.length)?s=t.format(l,o,e):s=t.format(`${l}.${this.components}`,this.getNodeType(t),e)}else s=n.build(t,e);return s}serialize(t){super.serialize(t),t.components=this.components}deserialize(t){super.deserialize(t),this.components=t.components}},SC=class extends Jn{static get type(){return"SetNode"}constructor(t,e,n){super(),this.sourceNode=t,this.components=e,this.targetNode=n}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{sourceNode:e,components:n,targetNode:i}=this,s=this.getNodeType(t),o=t.getTypeFromLength(n.length,i.getNodeType(t)),a=i.build(t,o),l=e.build(t,s),c=t.getTypeLength(s),h=[];for(let u=0;u<c;u++){const d=vc[u];d===n[0]?(h.push(a),u+=n.length-1):h.push(l+"."+d)}return`${t.getType(s)}( ${h.join(", ")} )`}},TC=class extends Jn{static get type(){return"FlipNode"}constructor(t,e){super(),this.sourceNode=t,this.components=e}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{components:e,sourceNode:n}=this,i=this.getNodeType(t),s=n.build(t),o=t.getVarFromNode(this),a=t.getPropertyName(o);t.addLineFlowCode(a+" = "+s,this);const l=t.getTypeLength(i),c=[];let h=0;for(let u=0;u<l;u++){const d=vc[u];d===e[h]?(c.push("1.0 - "+(a+"."+d)),h++):c.push(a+"."+d)}return`${t.getType(i)}( ${c.join(", ")} )`}},mg=class extends le{static get type(){return"InputNode"}constructor(t,e=null){super(e),this.isInputNode=!0,this.value=t,this.precision=null}getNodeType(){return this.nodeType===null?hr(this.value):this.nodeType}getInputType(t){return this.getNodeType(t)}setPrecision(t){return this.precision=t,this}serialize(t){super.serialize(t),t.value=this.value,this.value&&this.value.toArray&&(t.value=this.value.toArray()),t.valueType=hr(this.value),t.nodeType=this.nodeType,t.valueType==="ArrayBuffer"&&(t.value=mC(t.value)),t.precision=this.precision}deserialize(t){super.deserialize(t),this.nodeType=t.nodeType,this.value=Array.isArray(t.value)?qS(t.valueType,...t.value):t.value,this.precision=t.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(t.value))}generate(){console.warn("Abstract function.")}},Os=class extends mg{static get type(){return"ConstNode"}constructor(t,e=null){super(t,e),this.isConstNode=!0}generateConst(t){return t.generateConst(this.getNodeType(t),this.value)}generate(t,e){const n=this.getNodeType(t);return t.format(this.generateConst(t),n,e)}},YS=null;const ga=new Map;function j(r,t){if(ga.has(r)){console.warn(`Redefinition of method chaining ${r}`);return}if(typeof t!="function")throw new Error(`Node element ${r} is not a function`);ga.set(r,t)}const jS=r=>r.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),Q0=r=>jS(r).split("").sort().join(""),KS={setup(r,t){const e=t.shift();return r(ed(e),...t)},get(r,t,e){if(typeof t=="string"&&r[t]===void 0){if(r.isStackNode!==!0&&t==="assign")return(...n)=>(YS.assign(e,...n),e);if(ga.has(t)){const n=ga.get(t);return r.isStackNode?(...i)=>e.add(n(...i)):(...i)=>n(e,...i)}else{if(t==="self")return r;if(t.endsWith("Assign")&&ga.has(t.slice(0,t.length-6))){const n=ga.get(t.slice(0,t.length-6));return r.isStackNode?(...i)=>e.assign(i[0],n(...i)):(...i)=>e.assign(n(e,...i))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0)return t=jS(t),pt(new Z0(e,t));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=Q0(t.slice(3).toLowerCase()),n=>pt(new SC(r,t,n));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=Q0(t.slice(4).toLowerCase()),()=>pt(new TC(pt(r),t));if(t==="width"||t==="height"||t==="depth")return t==="width"?t="x":t==="height"?t="y":t==="depth"&&(t="z"),pt(new Z0(r,t));if(/^\d+$/.test(t)===!0)return pt(new bc(e,new Os(Number(t),"uint")))}}}return Reflect.get(r,t,e)},set(r,t,e,n){return typeof t=="string"&&r[t]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0||t==="width"||t==="height"||t==="depth"||/^\d+$/.test(t)===!0)?(n[t].assign(e),!0):Reflect.set(r,t,e,n)}},hf=new WeakMap,J0=new WeakMap,MC=function(r,t=null){const e=hr(r);if(e==="node"){let n=hf.get(r);return n===void 0&&(n=new Proxy(r,KS),hf.set(r,n),hf.set(n,n)),n}else{if(t===null&&(e==="float"||e==="boolean")||e&&e!=="shader"&&e!=="string")return pt(am(r,t));if(e==="shader")return tn(r)}return r},vC=function(r,t=null){for(const e in r)r[e]=pt(r[e],t);return r},bC=function(r,t=null){const e=r.length;for(let n=0;n<e;n++)r[n]=pt(r[n],t);return r},EC=function(r,t=null,e=null,n=null){const i=s=>pt(n!==null?Object.assign(s,n):s);return t===null?(...s)=>i(new r(...Ra(s))):e!==null?(e=pt(e),(...s)=>i(new r(t,...Ra(s),e))):(...s)=>i(new r(t,...Ra(s)))},AC=function(r,...t){return pt(new r(...Ra(t)))};let wC=class extends le{constructor(t,e){super(),this.shaderNode=t,this.inputNodes=e}getNodeType(t){return this.shaderNode.nodeType||this.getOutputNode(t).getNodeType(t)}call(t){const{shaderNode:e,inputNodes:n}=this,i=t.getNodeProperties(e);if(i.onceOutput)return i.onceOutput;let s=null;if(e.layout){let o=J0.get(t.constructor);o===void 0&&(o=new WeakMap,J0.set(t.constructor,o));let a=o.get(e);a===void 0&&(a=pt(t.buildFunctionNode(e)),o.set(e,a)),t.currentFunctionNode!==null&&t.currentFunctionNode.includes.push(a),s=pt(a.call(n))}else{const o=e.jsFunc,a=n!==null?o(n,t):o(t);s=pt(a)}return e.once&&(i.onceOutput=s),s}getOutputNode(t){const e=t.getNodeProperties(this);return e.outputNode===null&&(e.outputNode=this.setupOutput(t)),e.outputNode}setup(t){return this.getOutputNode(t)}setupOutput(t){return t.addStack(),t.stack.outputNode=this.call(t),t.removeStack()}generate(t,e){return this.getOutputNode(t).build(t,e)}},NC=class extends le{constructor(t,e){super(e),this.jsFunc=t,this.layout=null,this.global=!0,this.once=!1}setLayout(t){return this.layout=t,this}call(t=null){return ed(t),pt(new wC(this,t))}setup(){return this.call()}};const RC=[!1,!0],CC=[0,1,2,3],PC=[-1,-2],ZS=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],gg=new Map;for(const r of RC)gg.set(r,new Os(r));const xg=new Map;for(const r of CC)xg.set(r,new Os(r,"uint"));const _g=new Map([...xg].map(r=>new Os(r.value,"int")));for(const r of PC)_g.set(r,new Os(r,"int"));const Ju=new Map([..._g].map(r=>new Os(r.value)));for(const r of ZS)Ju.set(r,new Os(r));for(const r of ZS)Ju.set(-r,new Os(-r));const td={bool:gg,uint:xg,ints:_g,float:Ju},t_=new Map([...gg,...Ju]),am=(r,t)=>t_.has(r)?t_.get(r):r.isNode===!0?r:new Os(r,t),FC=r=>{try{return r.getNodeType()}catch{return}},en=function(r,t=null){return(...e)=>{if((e.length===0||!["bool","float","int","uint"].includes(r)&&e.every(i=>typeof i!="object"))&&(e=[qS(r,...e)]),e.length===1&&t!==null&&t.has(e[0]))return pt(t.get(e[0]));if(e.length===1){const i=am(e[0],r);return FC(i)===r?pt(i):pt(new XS(i,r))}const n=e.map(i=>am(i));return pt(new _C(n,r))}},IC=r=>r!=null?r.nodeType||r.convertTo||(typeof r=="string"?r:null):null;function DC(r,t){return new Proxy(new NC(r,t),KS)}const pt=(r,t=null)=>MC(r,t),ed=(r,t=null)=>new vC(r,t),Ra=(r,t=null)=>new bC(r,t),rt=(...r)=>new EC(...r),Lt=(...r)=>new AC(...r),tn=(r,t)=>{const e=new DC(r,t),n=(...i)=>{let s;return ed(i),i[0]&&i[0].isNode?s=[...i]:s=i[0],e.call(s)};return n.shaderNode=e,n.setLayout=i=>(e.setLayout(i),n),n.once=()=>(e.once=!0,n),n};j("toGlobal",r=>(r.global=!0,r));const yg=(...r)=>YS.If(...r);function LC(r){return r}j("append",LC);const lm=new en("color"),re=new en("float",td.float),ka=new en("int",td.ints),UC=new en("uint",td.uint),BC=new en("bool",td.bool),Zt=new en("vec2"),OC=new en("ivec2"),zC=new en("uvec2"),GC=new en("bvec2"),se=new en("vec3"),kC=new en("ivec3"),VC=new en("uvec3"),HC=new en("bvec3"),so=new en("vec4"),$C=new en("ivec4"),WC=new en("uvec4"),qC=new en("bvec4"),QS=new en("mat2"),nd=new en("mat3"),XC=new en("mat4");j("toColor",lm);j("toFloat",re);j("toInt",ka);j("toUint",UC);j("toBool",BC);j("toVec2",Zt);j("toIVec2",OC);j("toUVec2",zC);j("toBVec2",GC);j("toVec3",se);j("toIVec3",kC);j("toUVec3",VC);j("toBVec3",HC);j("toVec4",so);j("toIVec4",$C);j("toUVec4",WC);j("toBVec4",qC);j("toMat2",QS);j("toMat3",nd);j("toMat4",XC);const YC=rt(bc),jC=(r,t)=>pt(new XS(pt(r),t));j("element",YC);j("convert",jC);let JS=class extends le{static get type(){return"UniformGroupNode"}constructor(t,e=!1,n=1){super("string"),this.name=t,this.version=0,this.shared=e,this.order=n,this.isUniformGroup=!0}set needsUpdate(t){t===!0&&this.version++}serialize(t){super.serialize(t),t.name=this.name,t.version=this.version,t.shared=this.shared}deserialize(t){super.deserialize(t),this.name=t.name,this.version=t.version,this.shared=t.shared}};const KC=r=>new JS(r),ZC=(r,t=0)=>new JS(r,!0,t),ro=ZC("render"),QC=KC("object");let el=class extends mg{static get type(){return"UniformNode"}constructor(t,e=null){super(t,e),this.isUniformNode=!0,this.name="",this.groupNode=QC}label(t){return this.name=t,this}setGroup(t){return this.groupNode=t,this}getGroup(){return this.groupNode}getUniformHash(t){return this.getHash(t)}onUpdate(t,e){const n=this.getSelf();return t=t.bind(n),super.onUpdate(i=>{const s=t(i,n);s!==void 0&&(this.value=s)},e)}generate(t,e){const n=this.getNodeType(t),i=this.getUniformHash(t);let s=t.getNodeFromHash(i);s===void 0&&(t.setHashNode(this,i),s=this);const o=s.getInputType(t),a=t.getUniformFromNode(s,o,t.shaderStage,this.name||t.context.label),l=t.getPropertyName(a);return t.context.label!==void 0&&delete t.context.label,t.format(l,n,e)}};const Pn=(r,t)=>{const e=IC(t||r),n=r&&r.isNode===!0?r.node&&r.node.value||r.value:r;return pt(new el(n,e))};let tT=class extends le{static get type(){return"PropertyNode"}constructor(t,e=null,n=!1){super(t),this.name=e,this.varying=n,this.isPropertyNode=!0}getHash(t){return this.name||super.getHash(t)}isGlobal(){return!0}generate(t){let e;return this.varying===!0?(e=t.getVaryingFromNode(this,this.name),e.needsInterpolation=!0):e=t.getVarFromNode(this,this.name),t.getPropertyName(e)}};const ha=(r,t)=>pt(new tT(r,t)),e_=Lt(tT,"vec4","DiffuseColor");let JC=class extends Jn{static get type(){return"AssignNode"}constructor(t,e){super(),this.targetNode=t,this.sourceNode=e}hasDependencies(){return!1}getNodeType(t,e){return e!=="void"?this.targetNode.getNodeType(t):"void"}needsSplitAssign(t){const{targetNode:e}=this;if(t.isAvailable("swizzleAssign")===!1&&e.isSplitNode&&e.components.length>1){const n=t.getTypeLength(e.node.getNodeType(t));return vc.join("").slice(0,n)!==e.components}return!1}generate(t,e){const{targetNode:n,sourceNode:i}=this,s=this.needsSplitAssign(t),o=n.getNodeType(t),a=n.context({assign:!0}).build(t),l=i.build(t,o),c=i.getNodeType(t),h=t.getDataFromNode(this);let u;if(h.initialized===!0)e!=="void"&&(u=a);else if(s){const d=t.getVarFromNode(this,null,o),f=t.getPropertyName(d);t.addLineFlowCode(`${f} = ${l}`,this);const p=n.node.context({assign:!0}).build(t);for(let x=0;x<n.components.length;x++){const m=n.components[x];t.addLineFlowCode(`${p}.${m} = ${f}[ ${x} ]`,this)}e!=="void"&&(u=a)}else u=`${a} = ${l}`,(e==="void"||c==="void")&&(t.addLineFlowCode(u,this),e!=="void"&&(u=a));return h.initialized=!0,t.format(u,o,e)}};const t2=rt(JC);j("assign",t2);let e2=class extends Jn{static get type(){return"FunctionCallNode"}constructor(t=null,e={}){super(),this.functionNode=t,this.parameters=e}setParameters(t){return this.parameters=t,this}getParameters(){return this.parameters}getNodeType(t){return this.functionNode.getNodeType(t)}generate(t){const e=[],n=this.functionNode,i=n.getInputs(t),s=this.parameters;if(Array.isArray(s))for(let a=0;a<s.length;a++){const l=i[a],c=s[a];e.push(c.build(t,l.type))}else for(const a of i){const l=s[a.name];if(l!==void 0)e.push(l.build(t,a.type));else throw new Error(`FunctionCallNode: Input '${a.name}' not found in FunctionNode.`)}return`${n.build(t,"property")}( ${e.join(", ")} )`}};const n2=(r,...t)=>(t=t.length>1||t[0]&&t[0].isNode===!0?Ra(t):ed(t[0]),pt(new e2(pt(r),t)));j("call",n2);let $e=class cm extends Jn{static get type(){return"OperatorNode"}constructor(t,e,n,...i){if(super(),i.length>0){let s=new cm(t,e,n);for(let o=0;o<i.length-1;o++)s=new cm(t,s,i[o]);e=s,n=i[i.length-1]}this.op=t,this.aNode=e,this.bNode=n}getNodeType(t,e){const n=this.op,i=this.aNode,s=this.bNode,o=i.getNodeType(t),a=typeof s<"u"?s.getNodeType(t):null;if(o==="void"||a==="void")return"void";if(n==="%")return o;if(n==="~"||n==="&"||n==="|"||n==="^"||n===">>"||n==="<<")return t.getIntegerType(o);if(n==="!"||n==="=="||n==="&&"||n==="||"||n==="^^")return"bool";if(n==="<"||n===">"||n==="<="||n===">="){const l=e?t.getTypeLength(e):Math.max(t.getTypeLength(o),t.getTypeLength(a));return l>1?`bvec${l}`:"bool"}else return o==="float"&&t.isMatrix(a)?a:t.isMatrix(o)&&t.isVector(a)?t.getVectorFromMatrix(o):t.isVector(o)&&t.isMatrix(a)?t.getVectorFromMatrix(a):t.getTypeLength(a)>t.getTypeLength(o)?a:o}generate(t,e){const n=this.op,i=this.aNode,s=this.bNode,o=this.getNodeType(t,e);let a=null,l=null;o!=="void"?(a=i.getNodeType(t),l=typeof s<"u"?s.getNodeType(t):null,n==="<"||n===">"||n==="<="||n===">="||n==="=="?t.isVector(a)?l=a:a!==l&&(a=l="float"):n===">>"||n==="<<"?(a=o,l=t.changeComponentType(l,"uint")):t.isMatrix(a)&&t.isVector(l)?l=t.getVectorFromMatrix(a):t.isVector(a)&&t.isMatrix(l)?a=t.getVectorFromMatrix(l):a=l=o):a=l=o;const c=i.build(t,a),h=typeof s<"u"?s.build(t,l):null,u=t.getTypeLength(e),d=t.getFunctionOperator(n);if(e!=="void")return n==="<"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} < ${h} )`,o,e):n==="<="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} <= ${h} )`,o,e):n===">"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} > ${h} )`,o,e):n===">="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} >= ${h} )`,o,e):n==="!"||n==="~"?t.format(`(${n}${c})`,a,e):d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`( ${c} ${n} ${h} )`,o,e);if(a!=="void")return d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`${c} ${n} ${h}`,o,e)}serialize(t){super.serialize(t),t.op=this.op}deserialize(t){super.deserialize(t),this.op=t.op}};const oo=rt($e,"+"),Au=rt($e,"-"),id=rt($e,"*"),eT=rt($e,"/"),nT=rt($e,"%"),i2=rt($e,"=="),s2=rt($e,"!="),r2=rt($e,"<"),o2=rt($e,">"),a2=rt($e,"<="),l2=rt($e,">="),c2=rt($e,"&&"),h2=rt($e,"||"),u2=rt($e,"!"),d2=rt($e,"^^"),f2=rt($e,"&"),p2=rt($e,"~"),m2=rt($e,"|"),g2=rt($e,"^"),x2=rt($e,"<<"),_2=rt($e,">>");j("add",oo);j("sub",Au);j("mul",id);j("div",eT);j("modInt",nT);j("equal",i2);j("notEqual",s2);j("lessThan",r2);j("greaterThan",o2);j("lessThanEqual",a2);j("greaterThanEqual",l2);j("and",c2);j("or",h2);j("not",u2);j("xor",d2);j("bitAnd",f2);j("bitNot",p2);j("bitOr",m2);j("bitXor",g2);j("shiftLeft",x2);j("shiftRight",_2);const y2=(...r)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),nT(...r));j("remainder",y2);let O=class Ve extends Jn{static get type(){return"MathNode"}constructor(t,e,n=null,i=null){super(),this.method=t,this.aNode=e,this.bNode=n,this.cNode=i}getInputType(t){const e=this.aNode.getNodeType(t),n=this.bNode?this.bNode.getNodeType(t):null,i=this.cNode?this.cNode.getNodeType(t):null,s=t.isMatrix(e)?0:t.getTypeLength(e),o=t.isMatrix(n)?0:t.getTypeLength(n),a=t.isMatrix(i)?0:t.getTypeLength(i);return s>o&&s>a?e:o>a?n:a>s?i:e}getNodeType(t){const e=this.method;return e===Ve.LENGTH||e===Ve.DISTANCE||e===Ve.DOT?"float":e===Ve.CROSS?"vec3":e===Ve.ALL?"bool":e===Ve.EQUALS?t.changeComponentType(this.aNode.getNodeType(t),"bool"):e===Ve.MOD?this.aNode.getNodeType(t):this.getInputType(t)}generate(t,e){const n=this.method,i=this.getNodeType(t),s=this.getInputType(t),o=this.aNode,a=this.bNode,l=this.cNode,c=t.renderer.isWebGLRenderer===!0;if(n===Ve.TRANSFORM_DIRECTION){let h=o,u=a;t.isMatrix(h.getNodeType(t))?u=so(se(u),0):h=so(se(h),0);const d=id(h,u).xyz;return iT(d).build(t,e)}else{if(n===Ve.NEGATE)return t.format("( - "+o.build(t,s)+" )",i,e);if(n===Ve.ONE_MINUS)return Au(1,o).build(t,e);if(n===Ve.RECIPROCAL)return eT(1,o).build(t,e);if(n===Ve.DIFFERENCE)return vg(Au(o,a)).build(t,e);{const h=[];return n===Ve.CROSS||n===Ve.MOD?h.push(o.build(t,i),a.build(t,i)):c&&n===Ve.STEP?h.push(o.build(t,t.getTypeLength(o.getNodeType(t))===1?"float":s),a.build(t,s)):c&&(n===Ve.MIN||n===Ve.MAX)||n===Ve.MOD?h.push(o.build(t,s),a.build(t,t.getTypeLength(a.getNodeType(t))===1?"float":s)):n===Ve.REFRACT?h.push(o.build(t,s),a.build(t,s),l.build(t,"float")):n===Ve.MIX?h.push(o.build(t,s),a.build(t,s),l.build(t,t.getTypeLength(l.getNodeType(t))===1?"float":s)):(h.push(o.build(t,s)),a!==null&&h.push(a.build(t,s)),l!==null&&h.push(l.build(t,s))),t.format(`${t.getMethod(n,i)}( ${h.join(", ")} )`,i,e)}}}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}};O.ALL="all";O.ANY="any";O.EQUALS="equals";O.RADIANS="radians";O.DEGREES="degrees";O.EXP="exp";O.EXP2="exp2";O.LOG="log";O.LOG2="log2";O.SQRT="sqrt";O.INVERSE_SQRT="inversesqrt";O.FLOOR="floor";O.CEIL="ceil";O.NORMALIZE="normalize";O.FRACT="fract";O.SIN="sin";O.COS="cos";O.TAN="tan";O.ASIN="asin";O.ACOS="acos";O.ATAN="atan";O.ABS="abs";O.SIGN="sign";O.LENGTH="length";O.NEGATE="negate";O.ONE_MINUS="oneMinus";O.DFDX="dFdx";O.DFDY="dFdy";O.ROUND="round";O.RECIPROCAL="reciprocal";O.TRUNC="trunc";O.FWIDTH="fwidth";O.BITCAST="bitcast";O.TRANSPOSE="transpose";O.ATAN2="atan2";O.MIN="min";O.MAX="max";O.MOD="mod";O.STEP="step";O.REFLECT="reflect";O.DISTANCE="distance";O.DIFFERENCE="difference";O.DOT="dot";O.CROSS="cross";O.POW="pow";O.TRANSFORM_DIRECTION="transformDirection";O.MIX="mix";O.CLAMP="clamp";O.REFRACT="refract";O.SMOOTHSTEP="smoothstep";O.FACEFORWARD="faceforward";const S2=re(Math.PI),T2=re(Math.PI*2),M2=rt(O,O.ALL),v2=rt(O,O.ANY),b2=rt(O,O.EQUALS),E2=rt(O,O.RADIANS),A2=rt(O,O.DEGREES),w2=rt(O,O.EXP),N2=rt(O,O.EXP2),R2=rt(O,O.LOG),C2=rt(O,O.LOG2),Sg=rt(O,O.SQRT),P2=rt(O,O.INVERSE_SQRT),F2=rt(O,O.FLOOR),I2=rt(O,O.CEIL),iT=rt(O,O.NORMALIZE),Tg=rt(O,O.FRACT),Mg=rt(O,O.SIN),sT=rt(O,O.COS),D2=rt(O,O.TAN),L2=rt(O,O.ASIN),U2=rt(O,O.ACOS),B2=rt(O,O.ATAN),vg=rt(O,O.ABS),rT=rt(O,O.SIGN),O2=rt(O,O.LENGTH),z2=rt(O,O.NEGATE),G2=rt(O,O.ONE_MINUS),k2=rt(O,O.DFDX),V2=rt(O,O.DFDY),H2=rt(O,O.ROUND),$2=rt(O,O.RECIPROCAL),W2=rt(O,O.TRUNC),q2=rt(O,O.FWIDTH);O.BITCAST;const X2=rt(O,O.TRANSPOSE),Y2=rt(O,O.ATAN2),j2=rt(O,O.MIN),hm=rt(O,O.MAX),oT=rt(O,O.MOD),aT=rt(O,O.STEP),K2=rt(O,O.REFLECT),Z2=rt(O,O.DISTANCE),Q2=rt(O,O.DIFFERENCE),bg=rt(O,O.DOT),J2=rt(O,O.CROSS),lT=rt(O,O.POW),tP=rt(O,O.POW,2),eP=rt(O,O.POW,3),nP=rt(O,O.POW,4),iP=rt(O,O.TRANSFORM_DIRECTION),sP=r=>id(rT(r),lT(vg(r),1/3)),rP=r=>bg(r,r),ys=rt(O,O.MIX),wu=(r,t=0,e=1)=>pt(new O(O.CLAMP,pt(r),pt(t),pt(e))),oP=r=>wu(r),aP=rt(O,O.REFRACT),um=rt(O,O.SMOOTHSTEP),lP=rt(O,O.FACEFORWARD),cP=tn(([r])=>{const n=43758.5453,i=bg(r.xy,Zt(12.9898,78.233)),s=oT(i,S2);return Tg(Mg(s).mul(n))}),hP=(r,t,e)=>ys(t,e,r),uP=(r,t,e)=>um(t,e,r);j("all",M2);j("any",v2);j("equals",b2);j("radians",E2);j("degrees",A2);j("exp",w2);j("exp2",N2);j("log",R2);j("log2",C2);j("sqrt",Sg);j("inverseSqrt",P2);j("floor",F2);j("ceil",I2);j("normalize",iT);j("fract",Tg);j("sin",Mg);j("cos",sT);j("tan",D2);j("asin",L2);j("acos",U2);j("atan",B2);j("abs",vg);j("sign",rT);j("length",O2);j("lengthSq",rP);j("negate",z2);j("oneMinus",G2);j("dFdx",k2);j("dFdy",V2);j("round",H2);j("reciprocal",$2);j("trunc",W2);j("fwidth",q2);j("atan2",Y2);j("min",j2);j("max",hm);j("mod",oT);j("step",aT);j("reflect",K2);j("distance",Z2);j("dot",bg);j("cross",J2);j("pow",lT);j("pow2",tP);j("pow3",eP);j("pow4",nP);j("transformDirection",iP);j("mix",hP);j("clamp",wu);j("refract",aP);j("smoothstep",uP);j("faceForward",lP);j("difference",Q2);j("saturate",oP);j("cbrt",sP);j("transpose",X2);j("rand",cP);let dP=class extends le{static get type(){return"ConditionalNode"}constructor(t,e,n=null){super(),this.condNode=t,this.ifNode=e,this.elseNode=n}getNodeType(t){const e=this.ifNode.getNodeType(t);if(this.elseNode!==null){const n=this.elseNode.getNodeType(t);if(t.getTypeLength(n)>t.getTypeLength(e))return n}return e}setup(t){const e=this.condNode.cache(),n=this.ifNode.cache(),i=this.elseNode?this.elseNode.cache():null,s=t.context.nodeBlock;t.getDataFromNode(n).parentNodeBlock=s,i!==null&&(t.getDataFromNode(i).parentNodeBlock=s);const o=t.getNodeProperties(this);o.condNode=e,o.ifNode=n.context({nodeBlock:n}),o.elseNode=i?i.context({nodeBlock:i}):null}generate(t,e){const n=this.getNodeType(t),i=t.getDataFromNode(this);if(i.nodeProperty!==void 0)return i.nodeProperty;const{condNode:s,ifNode:o,elseNode:a}=t.getNodeProperties(this),l=e!=="void",c=l?ha(n).build(t):"";i.nodeProperty=c;const h=s.build(t,"bool");t.addFlowCode(`
${t.tab}if ( ${h} ) {

`).addFlowTab();let u=o.build(t,n);if(u&&(l?u=c+" = "+u+";":u="return "+u+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+u+`

`+t.tab+"}"),a!==null){t.addFlowCode(` else {

`).addFlowTab();let d=a.build(t,n);d&&(l?d=c+" = "+d+";":d="return "+d+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+d+`

`+t.tab+`}

`)}else t.addFlowCode(`

`);return t.format(c,n,e)}};const Eg=rt(dP);j("select",Eg);const fP=(...r)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),Eg(...r));j("cond",fP);let pP=class extends le{static get type(){return"ContextNode"}constructor(t,e={}){super(),this.isContextNode=!0,this.node=t,this.value=e}getScope(){return this.node.getScope()}getNodeType(t){return this.node.getNodeType(t)}analyze(t){this.node.build(t)}setup(t){const e=t.getContext();t.setContext({...t.context,...this.value});const n=this.node.build(t);return t.setContext(e),n}generate(t,e){const n=t.getContext();t.setContext({...t.context,...this.value});const i=this.node.build(t,e);return t.setContext(n),i}};const cT=rt(pP),mP=(r,t)=>cT(r,{label:t});j("context",cT);j("label",mP);let gP=class extends le{static get type(){return"VarNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.global=!0,this.isVarNode=!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}generate(t){const{node:e,name:n}=this,i=t.getVarFromNode(this,n,t.getVectorType(this.getNodeType(t))),s=t.getPropertyName(i),o=e.build(t,i.type);return t.addLineFlowCode(`${s} = ${o}`,this),s}};const hT=rt(gP);j("temp",hT);j("toVar",(...r)=>hT(...r).append());let xP=class extends le{static get type(){return"VaryingNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.isVaryingNode=!0}isGlobal(){return!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}setupVarying(t){const e=t.getNodeProperties(this);let n=e.varying;if(n===void 0){const i=this.name,s=this.getNodeType(t);e.varying=n=t.getVaryingFromNode(this,i,s),e.node=this.node}return n.needsInterpolation||(n.needsInterpolation=t.shaderStage==="fragment"),n}setup(t){this.setupVarying(t)}analyze(t){return this.setupVarying(t),this.node.analyze(t)}generate(t){const e=t.getNodeProperties(this),n=this.setupVarying(t);if(e.propertyName===void 0){const i=this.getNodeType(t),s=t.getPropertyName(n,K0.VERTEX);t.flowNodeFromShaderStage(K0.VERTEX,this.node,i,s),e.propertyName=s}return t.getPropertyName(n)}};const nl=rt(xP);j("varying",nl);const Ec="WorkingColorSpace",Ag="OutputColorSpace";function n_(r){let t=null;return r===Zu?t="Linear":r===_s&&(t="sRGB"),t}function _P(r,t){return n_(r)+"To"+n_(t)}let sd=class extends Jn{static get type(){return"ColorSpaceNode"}constructor(t,e,n){super("vec4"),this.colorNode=t,this.source=e,this.target=n}getColorSpace(t,e){return e===Ec?ui.workingColorSpace:e===Ag?t.context.outputColorSpace||t.renderer.outputColorSpace:e}setup(t){const{renderer:e}=t,{colorNode:n}=this,i=this.getColorSpace(t,this.source),s=this.getColorSpace(t,this.target);if(i===s)return n;const o=_P(i,s);let a=null;const l=e.nodes.library.getColorSpaceFunction(o);return l!==null?a=so(l(n.rgb),n.a):(console.error("ColorSpaceNode: Unsupported Color Space configuration.",o),a=n),a}};const yP=r=>pt(new sd(pt(r),Ec,Ag)),SP=r=>pt(new sd(pt(r),Ag,Ec)),TP=(r,t)=>pt(new sd(pt(r),Ec,t)),uT=(r,t)=>pt(new sd(pt(r),t,Ec));j("toOutputColorSpace",yP);j("toWorkingColorSpace",SP);j("workingToColorSpace",TP);j("colorSpaceToWorking",uT);let MP=class extends bc{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),n=this.referenceNode.getNodeType(),i=this.getNodeType();return t.format(e,n,i)}},vP=class extends le{static get type(){return"ReferenceBaseNode"}constructor(t,e,n=null,i=null){super(),this.property=t,this.uniformType=e,this.object=n,this.count=i,this.properties=t.split("."),this.reference=n,this.node=null,this.group=null,this.updateType=Ze.OBJECT}setGroup(t){return this.group=t,this}element(t){return pt(new MP(this,pt(t)))}setNodeType(t){const e=Pn(null,t).getSelf();this.group!==null&&e.setGroup(this.group),this.node=e}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let n=t[e[0]];for(let i=1;i<e.length;i++)n=n[e[i]];return n}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}},bP=class extends vP{static get type(){return"RendererReferenceNode"}constructor(t,e,n=null){super(t,e,n),this.renderer=n,this.setGroup(ro)}updateReference(t){return this.reference=this.renderer!==null?this.renderer:t.renderer,this.reference}};const EP=(r,t,e)=>pt(new bP(r,t,e));let AP=class extends Jn{static get type(){return"ToneMappingNode"}constructor(t,e=NP,n=null){super("vec3"),this.toneMapping=t,this.exposureNode=e,this.colorNode=n}getCacheKey(){return fC(super.getCacheKey(),this.toneMapping)}setup(t){const e=this.colorNode||t.context.color,n=this.toneMapping;if(n===em)return e;let i=null;const s=t.renderer.nodes.library.getToneMappingFunction(n);return s!==null?i=so(s(e.rgb,this.exposureNode),e.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",n),i=e),i}};const wP=(r,t,e)=>pt(new AP(r,pt(t),pt(e))),NP=EP("toneMappingExposure","float");j("toneMapping",(r,t,e)=>wP(t,e,r));let RP=class extends mg{static get type(){return"BufferAttributeNode"}constructor(t,e=null,n=0,i=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferStride=n,this.bufferOffset=i,this.usage=Eu,this.instanced=!1,this.attribute=null,this.global=!0,t&&t.isBufferAttribute===!0&&(this.attribute=t,this.usage=t.usage,this.instanced=t.isInstancedBufferAttribute)}getHash(t){if(this.bufferStride===0&&this.bufferOffset===0){let e=t.globalCache.getData(this.value);return e===void 0&&(e={node:this},t.globalCache.setData(this.value,e)),e.node.uuid}return this.uuid}getNodeType(t){return this.bufferType===null&&(this.bufferType=t.getTypeFromAttribute(this.attribute)),this.bufferType}setup(t){if(this.attribute!==null)return;const e=this.getNodeType(t),n=this.value,i=t.getTypeLength(e),s=this.bufferStride||i,o=this.bufferOffset,a=n.isInterleavedBuffer===!0?n:new oC(n,s),l=new aC(a,i,o);a.setUsage(this.usage),this.attribute=l,this.attribute.isInstancedBufferAttribute=this.instanced}generate(t){const e=this.getNodeType(t),n=t.getBufferAttributeFromNode(this,e),i=t.getPropertyName(n);let s=null;return t.shaderStage==="vertex"||t.shaderStage==="compute"?(this.name=i,s=i):s=nl(this).build(t,e),s}getInputType(){return"bufferAttribute"}setUsage(t){return this.usage=t,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=t),this}setInstanced(t){return this.instanced=t,this}};const dT=(r,t,e,n)=>pt(new RP(r,t,e,n)),CP=(r,t,e,n)=>dT(r,t,e,n).setInstanced(!0);j("toAttribute",r=>dT(r.value));let PP=class extends le{static get type(){return"ComputeNode"}constructor(t,e,n=[64]){super("void"),this.isComputeNode=!0,this.computeNode=t,this.count=e,this.workgroupSize=n,this.dispatchCount=0,this.version=1,this.updateBeforeType=Ze.OBJECT,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}updateDispatchCount(){const{count:t,workgroupSize:e}=this;let n=e[0];for(let i=1;i<e.length;i++)n*=e[i];this.dispatchCount=Math.ceil(t/n)}onInit(){}updateBefore({renderer:t}){t.compute(this)}generate(t){const{shaderStage:e}=t;if(e==="compute"){const n=this.computeNode.build(t,"void");n!==""&&t.addLineFlowCode(n,this)}}};const FP=(r,t,e)=>pt(new PP(pt(r),t,e));j("compute",FP);let IP=class extends le{static get type(){return"CacheNode"}constructor(t,e=!0){super(),this.node=t,this.parent=e,this.isCacheNode=!0}getNodeType(t){return this.node.getNodeType(t)}build(t,...e){const n=t.getCache(),i=t.getCacheFromNode(this,this.parent);t.setCache(i);const s=this.node.build(t,...e);return t.setCache(n),s}};const DP=(r,...t)=>pt(new IP(pt(r),...t));j("cache",DP);let LP=class extends le{static get type(){return"BypassNode"}constructor(t,e){super(),this.isBypassNode=!0,this.outputNode=t,this.callNode=e}getNodeType(t){return this.outputNode.getNodeType(t)}generate(t){const e=this.callNode.build(t,"void");return e!==""&&t.addLineFlowCode(e,this),this.outputNode.build(t)}};const UP=rt(LP);j("bypass",UP);let fT=class extends le{static get type(){return"RemapNode"}constructor(t,e,n,i=re(0),s=re(1)){super(),this.node=t,this.inLowNode=e,this.inHighNode=n,this.outLowNode=i,this.outHighNode=s,this.doClamp=!0}setup(){const{node:t,inLowNode:e,inHighNode:n,outLowNode:i,outHighNode:s,doClamp:o}=this;let a=t.sub(e).div(n.sub(e));return o===!0&&(a=a.clamp()),a.mul(s.sub(i)).add(i)}};const BP=rt(fT,null,null,{doClamp:!1}),OP=rt(fT);j("remap",BP);j("remapClamp",OP);let zP=class extends le{static get type(){return"ExpressionNode"}constructor(t="",e="void"){super(e),this.snippet=t}generate(t,e){const n=this.getNodeType(t),i=this.snippet;if(n==="void")t.addLineFlowCode(i,this);else return t.format(`( ${i} )`,n,e)}};const Nu=rt(zP),GP=r=>(r?Eg(r,Nu("discard")):Nu("discard")).append();j("discard",GP);let kP=class extends Jn{static get type(){return"RenderOutputNode"}constructor(t,e,n){super("vec4"),this.colorNode=t,this.toneMapping=e,this.outputColorSpace=n,this.isRenderOutput=!0}setup({context:t}){let e=this.colorNode||t.color;const n=(this.toneMapping!==null?this.toneMapping:t.toneMapping)||em,i=(this.outputColorSpace!==null?this.outputColorSpace:t.outputColorSpace)||bu;return n!==em&&(e=e.toneMapping(n)),i!==bu&&i!==ui.workingColorSpace&&(e=e.workingToColorSpace(i)),e}};const VP=(r,t=null,e=null)=>pt(new kP(pt(r),t,e));j("renderOutput",VP);let HP=class extends le{static get type(){return"AttributeNode"}constructor(t,e=null){super(e),this.global=!0,this._attributeName=t}getHash(t){return this.getAttributeName(t)}getNodeType(t){let e=this.nodeType;if(e===null){const n=this.getAttributeName(t);if(t.hasGeometryAttribute(n)){const i=t.geometry.getAttribute(n);e=t.getTypeFromAttribute(i)}else e="float"}return e}setAttributeName(t){return this._attributeName=t,this}getAttributeName(){return this._attributeName}generate(t){const e=this.getAttributeName(t),n=this.getNodeType(t);if(t.hasGeometryAttribute(e)===!0){const s=t.geometry.getAttribute(e),o=t.getTypeFromAttribute(s),a=t.getAttribute(e,o);return t.shaderStage==="vertex"?t.format(a.name,o,n):nl(this).build(t,n)}else return console.warn(`AttributeNode: Vertex attribute "${e}" not found on geometry.`),t.generateConst(n)}serialize(t){super.serialize(t),t.global=this.global,t._attributeName=this._attributeName}deserialize(t){super.deserialize(t),this.global=t.global,this._attributeName=t._attributeName}};const Ac=(r,t)=>pt(new HP(r,t)),wc=r=>Ac("uv"+(r>0?r:""),"vec2");let $P=class extends le{static get type(){return"TextureSizeNode"}constructor(t,e=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=t,this.levelNode=e}generate(t,e){const n=this.textureNode.build(t,"property"),i=this.levelNode===null?"0":this.levelNode.build(t,"int");return t.format(`${t.getMethod("textureDimensions")}( ${n}, ${i} )`,this.getNodeType(t),e)}};const i_=rt($P);let WP=class extends el{static get type(){return"MaxMipLevelNode"}constructor(t){super(0),this._textureNode=t,this.updateType=Ze.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const t=this.texture,e=t.images,n=e&&e.length>0?e[0]&&e[0].image||e[0]:t.image;if(n&&n.width!==void 0){const{width:i,height:s}=n;this.value=Math.log2(Math.max(i,s))}}};const qP=rt(WP);let rd=class extends el{static get type(){return"TextureNode"}constructor(t,e=null,n=null,i=null){super(t),this.isTextureNode=!0,this.uvNode=e,this.levelNode=n,this.biasNode=i,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=Ze.NONE,this.referenceNode=null,this._value=t,this._matrixUniform=null,this.setUpdateMatrix(e===null)}set value(t){this.referenceNode?this.referenceNode.value=t:this._value=t}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===RS?"uvec4":this.value.type===AR?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return wc(this.value.channel)}updateReference(){return this.value}getTransformedUV(t){return this._matrixUniform===null&&(this._matrixUniform=Pn(this.value.matrix)),this._matrixUniform.mul(se(t,1)).xy}setUpdateMatrix(t){return this.updateMatrix=t,this.updateType=t?Ze.FRAME:Ze.NONE,this}setupUV(t,e){const n=this.value;return t.isFlipY()&&(n.isRenderTargetTexture===!0||n.isFramebufferTexture===!0||n.isDepthTexture===!0)&&(this.sampler?e=e.flipY():e=e.setY(ka(i_(this,this.levelNode).y).sub(e.y).sub(1))),e}setup(t){const e=t.getNodeProperties(this);e.referenceNode=this.referenceNode;let n=this.uvNode;(n===null||t.context.forceUVContext===!0)&&t.context.getUV&&(n=t.context.getUV(this)),n||(n=this.getDefaultUV()),this.updateMatrix===!0&&(n=this.getTransformedUV(n)),n=this.setupUV(t,n);let i=this.levelNode;i===null&&t.context.getTextureLevel&&(i=t.context.getTextureLevel(this)),e.uvNode=n,e.levelNode=i,e.biasNode=this.biasNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e.depthNode=this.depthNode}generateUV(t,e){return e.build(t,this.sampler===!0?"vec2":"ivec2")}generateSnippet(t,e,n,i,s,o,a,l){const c=this.value;let h;return i?h=t.generateTextureLevel(c,e,n,i,o):s?h=t.generateTextureBias(c,e,n,s,o):l?h=t.generateTextureGrad(c,e,n,l,o):a?h=t.generateTextureCompare(c,e,n,a,o):this.sampler===!1?h=t.generateTextureLoad(c,e,n,o):h=t.generateTexture(c,e,n,o),h}generate(t,e){const n=t.getNodeProperties(this),i=this.value;if(!i||i.isTexture!==!0)throw new Error("TextureNode: Need a three.js texture.");const s=super.generate(t,"property");if(e==="sampler")return s+"_sampler";if(t.isReference(e))return s;{const o=t.getDataFromNode(this);let a=o.propertyName;if(a===void 0){const{uvNode:h,levelNode:u,biasNode:d,compareNode:f,depthNode:p,gradNode:x}=n,m=this.generateUV(t,h),g=u?u.build(t,"float"):null,y=d?d.build(t,"float"):null,_=p?p.build(t,"int"):null,T=f?f.build(t,"float"):null,w=x?[x[0].build(t,"vec2"),x[1].build(t,"vec2")]:null,A=t.getVarFromNode(this);a=t.getPropertyName(A);const v=this.generateSnippet(t,s,m,g,y,_,T,w);t.addLineFlowCode(`${a} = ${v}`,this),o.snippet=v,o.propertyName=a}let l=a;const c=this.getNodeType(t);return t.needsToWorkingColorSpace(i)&&(l=uT(Nu(l,c),i.colorSpace).setup(t).build(t,c)),t.format(l,c,e)}}setSampler(t){return this.sampler=t,this}getSampler(){return this.sampler}uv(t){const e=this.clone();return e.uvNode=pt(t),e.referenceNode=this.getSelf(),pt(e)}blur(t){const e=this.clone();return e.biasNode=pt(t).mul(qP(e)),e.referenceNode=this.getSelf(),pt(e)}level(t){const e=this.clone();return e.levelNode=pt(t),e.referenceNode=this.getSelf(),pt(e)}size(t){return i_(this,t)}bias(t){const e=this.clone();return e.biasNode=pt(t),e.referenceNode=this.getSelf(),pt(e)}compare(t){const e=this.clone();return e.compareNode=pt(t),e.referenceNode=this.getSelf(),pt(e)}grad(t,e){const n=this.clone();return n.gradNode=[pt(t),pt(e)],n.referenceNode=this.getSelf(),pt(n)}depth(t){const e=this.clone();return e.depthNode=pt(t),e.referenceNode=this.getSelf(),pt(e)}serialize(t){super.serialize(t),t.value=this.value.toJSON(t.meta).uuid,t.sampler=this.sampler,t.updateMatrix=this.updateMatrix,t.updateType=this.updateType}deserialize(t){super.deserialize(t),this.value=t.meta.textures[t.value],this.sampler=t.sampler,this.updateMatrix=t.updateMatrix,this.updateType=t.updateType}update(){const t=this.value,e=this._matrixUniform;e!==null&&(e.value=t.matrix),t.matrixAutoUpdate===!0&&t.updateMatrix()}clone(){const t=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return t.sampler=this.sampler,t}};const Nc=rt(rd),Tl=Pn("float").label("cameraNear").setGroup(ro).onRenderUpdate(({camera:r})=>r.near),Ml=Pn("float").label("cameraFar").setGroup(ro).onRenderUpdate(({camera:r})=>r.far),od=Pn("mat4").label("cameraViewMatrix").setGroup(ro).onRenderUpdate(({camera:r})=>r.matrixWorldInverse);let In=class bn extends le{static get type(){return"Object3DNode"}constructor(t,e=null){super(),this.scope=t,this.object3d=e,this.updateType=Ze.OBJECT,this._uniformNode=new el(null)}getNodeType(){const t=this.scope;if(t===bn.WORLD_MATRIX)return"mat4";if(t===bn.POSITION||t===bn.VIEW_POSITION||t===bn.DIRECTION||t===bn.SCALE)return"vec3"}update(t){const e=this.object3d,n=this._uniformNode,i=this.scope;if(i===bn.WORLD_MATRIX)n.value=e.matrixWorld;else if(i===bn.POSITION)n.value=n.value||new me,n.value.setFromMatrixPosition(e.matrixWorld);else if(i===bn.SCALE)n.value=n.value||new me,n.value.setFromMatrixScale(e.matrixWorld);else if(i===bn.DIRECTION)n.value=n.value||new me,e.getWorldDirection(n.value);else if(i===bn.VIEW_POSITION){const s=t.camera;n.value=n.value||new me,n.value.setFromMatrixPosition(e.matrixWorld),n.value.applyMatrix4(s.matrixWorldInverse)}}generate(t){const e=this.scope;return e===bn.WORLD_MATRIX?this._uniformNode.nodeType="mat4":(e===bn.POSITION||e===bn.VIEW_POSITION||e===bn.DIRECTION||e===bn.SCALE)&&(this._uniformNode.nodeType="vec3"),this._uniformNode.build(t)}serialize(t){super.serialize(t),t.scope=this.scope}deserialize(t){super.deserialize(t),this.scope=t.scope}};In.WORLD_MATRIX="worldMatrix";In.POSITION="position";In.SCALE="scale";In.VIEW_POSITION="viewPosition";In.DIRECTION="direction";In.DIRECTION;In.WORLD_MATRIX;In.POSITION;In.SCALE;In.VIEW_POSITION;let Ji=class extends In{static get type(){return"ModelNode"}constructor(t){super(t)}update(t){this.object3d=t.object,super.update(t)}};Ji.DIRECTION;const XP=Lt(Ji,Ji.WORLD_MATRIX);Ji.POSITION;Ji.SCALE;Ji.VIEW_POSITION;const YP=Pn(new br).onObjectUpdate(({object:r},t)=>t.value.getNormalMatrix(r.matrixWorld)),pT=od.mul(XP).toVar("modelViewMatrix"),jP=Ac("position","vec3"),KP=jP.varying("positionLocal"),Ti=pT.mul(KP).xyz.varying("v_positionView"),mT=Ti.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");let ZP=class extends le{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(t){const{renderer:e,material:n}=t;return e.coordinateSystem===$l&&n.side===MR?"false":t.getFrontFacing()}};const QP=Lt(ZP),wg=re(QP).mul(2).sub(1),JP=Ac("normal","vec3"),tF=tn(r=>r.geometry.hasAttribute("normal")===!1?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),se(0,1,0)):JP,"vec3").once()().toVar("normalLocal"),eF=Ti.dFdx().cross(Ti.dFdy()).normalize().toVar("normalFlat"),Va=tn(r=>{let t;return r.material.flatShading===!0?t=eF:t=nl(xT(tF),"v_normalView").normalize(),t},"vec3").once()().toVar("normalView"),gT=tn(r=>r.context.setupNormal(),"vec3").once()().mul(wg).toVar("transformedNormalView"),xT=tn(([r],t)=>{const e=t.renderer.nodes.modelNormalViewMatrix;if(e!==null)return e.transformDirection(r);const n=YP.mul(r);return od.transformDirection(n)}),nF=Pn(0).onReference(({material:r})=>r).onRenderUpdate(({material:r})=>r.refractionRatio),iF=mT.negate().reflect(gT),sF=mT.negate().refract(gT,nF),rF=iF.transformDirection(od).toVar("reflectVector"),oF=sF.transformDirection(od).toVar("reflectVector");let aF=class extends rd{static get type(){return"CubeTextureNode"}constructor(t,e=null,n=null,i=null){super(t,e,n,i),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const t=this.value;return t.mapping===vR?rF:t.mapping===bR?oF:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',t.mapping),se(0,0,0))}setUpdateMatrix(){}setupUV(t,e){const n=this.value;return t.renderer.coordinateSystem===im||!n.isRenderTargetTexture?se(e.x.negate(),e.yz):e}generateUV(t,e){return e.build(t,"vec3")}};const lF=rt(aF);let _T=class extends el{static get type(){return"BufferNode"}constructor(t,e,n=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferCount=n}getElementType(t){return this.getNodeType(t)}getInputType(){return"buffer"}};const yT=(r,t,e)=>pt(new _T(r,t,e));let cF=class extends bc{static get type(){return"UniformArrayElementNode"}constructor(t,e){super(t,e),this.isArrayBufferElementNode=!0}generate(t){const e=super.generate(t),n=this.getNodeType();return t.format(e,"vec4",n)}},hF=class extends _T{static get type(){return"UniformArrayNode"}constructor(t,e=null){super(null,"vec4"),this.array=t,this.elementType=e,this._elementType=null,this._elementLength=0,this.updateType=Ze.RENDER,this.isArrayBufferNode=!0}getElementType(){return this.elementType||this._elementType}getElementLength(){return this._elementLength}update(){const{array:t,value:e}=this,n=this.getElementLength(),i=this.getElementType();if(n===1)for(let s=0;s<t.length;s++){const o=s*4;e[o]=t[s]}else if(i==="color")for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.r,e[o+1]=a.g,e[o+2]=a.b||0}else for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.x,e[o+1]=a.y,e[o+2]=a.z||0,e[o+3]=a.w||0}}setup(t){const e=this.array.length;this._elementType=this.elementType===null?hr(this.array[0]):this.elementType,this._elementLength=t.getTypeLength(this._elementType);let n=Float32Array;return this._elementType.charAt(0)==="i"?n=Int32Array:this._elementType.charAt(0)==="u"&&(n=Uint32Array),this.value=new n(e*4),this.bufferCount=e,this.bufferType=t.changeComponentType("vec4",t.getComponentType(this._elementType)),super.setup(t)}element(t){return pt(new cF(this,pt(t)))}};const dm=(r,t)=>pt(new hF(r,t));let uF=class extends bc{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),n=this.referenceNode.getNodeType(),i=this.getNodeType();return t.format(e,n,i)}},ST=class extends le{static get type(){return"ReferenceNode"}constructor(t,e,n=null,i=null){super(),this.property=t,this.uniformType=e,this.object=n,this.count=i,this.properties=t.split("."),this.reference=n,this.node=null,this.group=null,this.name=null,this.updateType=Ze.OBJECT}element(t){return pt(new uF(this,pt(t)))}setGroup(t){return this.group=t,this}label(t){return this.name=t,this}setNodeType(t){let e=null;this.count!==null?e=yT(null,t,this.count):Array.isArray(this.getValueFromReference())?e=dm(null,t):t==="texture"?e=Nc(null):t==="cubeTexture"?e=lF(null):e=Pn(null,t),this.group!==null&&e.setGroup(this.group),this.name!==null&&e.label(this.name),this.node=e.getSelf()}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let n=t[e[0]];for(let i=1;i<e.length;i++)n=n[e[i]];return n}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}};const ao=(r,t,e)=>pt(new ST(r,t,e));let dF=class extends ST{static get type(){return"MaterialReferenceNode"}constructor(t,e,n=null){super(t,e,n),this.material=n,this.isMaterialReferenceNode=!0}updateReference(t){return this.reference=this.material!==null?this.material:t.material,this.reference}};const fF=(r,t,e)=>pt(new dF(r,t,e)),TT=tn(r=>(r.geometry.hasAttribute("tangent")===!1&&r.geometry.computeTangents(),Ac("tangent","vec4")))(),pF=TT.xyz.toVar("tangentLocal"),MT=pT.mul(so(pF,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),mF=r=>r.mul(TT.w).xyz,gF=nl(mF(Va.cross(MT)),"v_bitangentView").normalize().toVar("bitangentView"),xF=nd(MT,gF,Va),_F=tn(r=>{const{eye_pos:t,surf_norm:e,mapN:n,uv:i}=r,s=t.dFdx(),o=t.dFdy(),a=i.dFdx(),l=i.dFdy(),c=e,h=o.cross(c),u=c.cross(s),d=h.mul(a.x).add(u.mul(l.x)),f=h.mul(a.y).add(u.mul(l.y)),p=d.dot(d).max(f.dot(f)),x=wg.mul(p.inverseSqrt());return oo(d.mul(n.x,x),f.mul(n.y,x),c.mul(n.z)).normalize()});let yF=class extends Jn{static get type(){return"NormalMapNode"}constructor(t,e=null){super("vec3"),this.node=t,this.scaleNode=e,this.normalMapType=D0}setup(t){const{normalMapType:e,scaleNode:n}=this;let i=this.node.mul(2).sub(1);n!==null&&(i=se(i.xy.mul(n),i.z));let s=null;return e===PR?s=xT(i):e===D0&&(t.hasGeometryAttribute("tangent")===!0?s=xF.mul(i).normalize():s=_F({eye_pos:Ti,surf_norm:Va,mapN:i,uv:wc()})),s}};const s_=rt(yF),SF=tn(({textureNode:r,bumpScale:t})=>{const e=i=>r.cache().context({getUV:s=>i(s.uvNode||wc()),forceUVContext:!0}),n=re(e(i=>i));return Zt(re(e(i=>i.add(i.dFdx()))).sub(n),re(e(i=>i.add(i.dFdy()))).sub(n)).mul(t)}),TF=tn(r=>{const{surf_pos:t,surf_norm:e,dHdxy:n}=r,i=t.dFdx().normalize(),s=t.dFdy().normalize(),o=e,a=s.cross(o),l=o.cross(i),c=i.dot(a).mul(wg),h=c.sign().mul(n.x.mul(a).add(n.y.mul(l)));return c.abs().mul(e).sub(h).normalize()});let MF=class extends Jn{static get type(){return"BumpMapNode"}constructor(t,e=null){super("vec3"),this.textureNode=t,this.scaleNode=e}setup(){const t=this.scaleNode!==null?this.scaleNode:1,e=SF({textureNode:this.textureNode,bumpScale:t});return TF({surf_pos:Ti,surf_norm:Va,dHdxy:e})}};const vF=rt(MF),r_=new Map;let st=class ze extends le{static get type(){return"MaterialNode"}constructor(t){super(),this.scope=t}getCache(t,e){let n=r_.get(t);return n===void 0&&(n=fF(t,e),r_.set(t,n)),n}getFloat(t){return this.getCache(t,"float")}getColor(t){return this.getCache(t,"color")}getTexture(t){return this.getCache(t==="map"?"map":t+"Map","texture")}setup(t){const e=t.context.material,n=this.scope;let i=null;if(n===ze.COLOR){const s=e.color!==void 0?this.getColor(n):se();e.map&&e.map.isTexture===!0?i=s.mul(this.getTexture("map")):i=s}else if(n===ze.OPACITY){const s=this.getFloat(n);e.alphaMap&&e.alphaMap.isTexture===!0?i=s.mul(this.getTexture("alpha")):i=s}else if(n===ze.SPECULAR_STRENGTH)e.specularMap&&e.specularMap.isTexture===!0?i=this.getTexture("specular").r:i=re(1);else if(n===ze.SPECULAR_INTENSITY){const s=this.getFloat(n);e.specularMap?i=s.mul(this.getTexture(n).a):i=s}else if(n===ze.SPECULAR_COLOR){const s=this.getColor(n);e.specularColorMap&&e.specularColorMap.isTexture===!0?i=s.mul(this.getTexture(n).rgb):i=s}else if(n===ze.ROUGHNESS){const s=this.getFloat(n);e.roughnessMap&&e.roughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).g):i=s}else if(n===ze.METALNESS){const s=this.getFloat(n);e.metalnessMap&&e.metalnessMap.isTexture===!0?i=s.mul(this.getTexture(n).b):i=s}else if(n===ze.EMISSIVE){const s=this.getFloat("emissiveIntensity"),o=this.getColor(n).mul(s);e.emissiveMap&&e.emissiveMap.isTexture===!0?i=o.mul(this.getTexture(n)):i=o}else if(n===ze.NORMAL)e.normalMap?(i=s_(this.getTexture("normal"),this.getCache("normalScale","vec2")),i.normalMapType=e.normalMapType):e.bumpMap?i=vF(this.getTexture("bump").r,this.getFloat("bumpScale")):i=Va;else if(n===ze.CLEARCOAT){const s=this.getFloat(n);e.clearcoatMap&&e.clearcoatMap.isTexture===!0?i=s.mul(this.getTexture(n).r):i=s}else if(n===ze.CLEARCOAT_ROUGHNESS){const s=this.getFloat(n);e.clearcoatRoughnessMap&&e.clearcoatRoughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).r):i=s}else if(n===ze.CLEARCOAT_NORMAL)e.clearcoatNormalMap?i=s_(this.getTexture(n),this.getCache(n+"Scale","vec2")):i=Va;else if(n===ze.SHEEN){const s=this.getColor("sheenColor").mul(this.getFloat("sheen"));e.sheenColorMap&&e.sheenColorMap.isTexture===!0?i=s.mul(this.getTexture("sheenColor").rgb):i=s}else if(n===ze.SHEEN_ROUGHNESS){const s=this.getFloat(n);e.sheenRoughnessMap&&e.sheenRoughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).a):i=s,i=i.clamp(.07,1)}else if(n===ze.ANISOTROPY)if(e.anisotropyMap&&e.anisotropyMap.isTexture===!0){const s=this.getTexture(n);i=QS(vl.x,vl.y,vl.y.negate(),vl.x).mul(s.rg.mul(2).sub(Zt(1)).normalize().mul(s.b))}else i=vl;else if(n===ze.IRIDESCENCE_THICKNESS){const s=ao("1","float",e.iridescenceThicknessRange);if(e.iridescenceThicknessMap){const o=ao("0","float",e.iridescenceThicknessRange);i=s.sub(o).mul(this.getTexture(n).g).add(o)}else i=s}else if(n===ze.TRANSMISSION){const s=this.getFloat(n);e.transmissionMap?i=s.mul(this.getTexture(n).r):i=s}else if(n===ze.THICKNESS){const s=this.getFloat(n);e.thicknessMap?i=s.mul(this.getTexture(n).g):i=s}else if(n===ze.IOR)i=this.getFloat(n);else if(n===ze.LIGHT_MAP)i=this.getTexture(n).rgb.mul(this.getFloat("lightMapIntensity"));else if(n===ze.AO_MAP)i=this.getTexture(n).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const s=this.getNodeType(t);i=this.getCache(n,s)}return i}};st.ALPHA_TEST="alphaTest";st.COLOR="color";st.OPACITY="opacity";st.SHININESS="shininess";st.SPECULAR="specular";st.SPECULAR_STRENGTH="specularStrength";st.SPECULAR_INTENSITY="specularIntensity";st.SPECULAR_COLOR="specularColor";st.REFLECTIVITY="reflectivity";st.ROUGHNESS="roughness";st.METALNESS="metalness";st.NORMAL="normal";st.CLEARCOAT="clearcoat";st.CLEARCOAT_ROUGHNESS="clearcoatRoughness";st.CLEARCOAT_NORMAL="clearcoatNormal";st.EMISSIVE="emissive";st.ROTATION="rotation";st.SHEEN="sheen";st.SHEEN_ROUGHNESS="sheenRoughness";st.ANISOTROPY="anisotropy";st.IRIDESCENCE="iridescence";st.IRIDESCENCE_IOR="iridescenceIOR";st.IRIDESCENCE_THICKNESS="iridescenceThickness";st.IOR="ior";st.TRANSMISSION="transmission";st.THICKNESS="thickness";st.ATTENUATION_DISTANCE="attenuationDistance";st.ATTENUATION_COLOR="attenuationColor";st.LINE_SCALE="scale";st.LINE_DASH_SIZE="dashSize";st.LINE_GAP_SIZE="gapSize";st.LINE_WIDTH="linewidth";st.LINE_DASH_OFFSET="dashOffset";st.POINT_WIDTH="pointWidth";st.DISPERSION="dispersion";st.LIGHT_MAP="light";st.AO_MAP="ao";st.ALPHA_TEST;st.COLOR;st.SHININESS;st.EMISSIVE;st.OPACITY;st.SPECULAR;st.SPECULAR_INTENSITY;st.SPECULAR_COLOR;st.SPECULAR_STRENGTH;st.REFLECTIVITY;st.ROUGHNESS;st.METALNESS;st.CLEARCOAT;st.CLEARCOAT_ROUGHNESS;st.ROTATION;st.SHEEN;st.SHEEN_ROUGHNESS;st.ANISOTROPY;st.IRIDESCENCE;st.IRIDESCENCE_IOR;st.IRIDESCENCE_THICKNESS;st.TRANSMISSION;st.THICKNESS;st.IOR;st.ATTENUATION_DISTANCE;st.ATTENUATION_COLOR;st.LINE_SCALE;st.LINE_DASH_SIZE;st.LINE_GAP_SIZE;st.LINE_WIDTH;st.LINE_DASH_OFFSET;st.POINT_WIDTH;st.DISPERSION;st.LIGHT_MAP;st.AO_MAP;const vl=Pn(new Zi).onReference(function(r){return r.material}).onRenderUpdate(function({material:r}){this.value.set(r.anisotropy*Math.cos(r.anisotropyRotation),r.anisotropy*Math.sin(r.anisotropyRotation))});let dn=class Hr extends le{static get type(){return"IndexNode"}constructor(t){super("uint"),this.scope=t,this.isInstanceIndexNode=!0}generate(t){const e=this.getNodeType(t),n=this.scope;let i;if(n===Hr.VERTEX)i=t.getVertexIndex();else if(n===Hr.INSTANCE)i=t.getInstanceIndex();else if(n===Hr.DRAW)i=t.getDrawIndex();else if(n===Hr.INVOCATION_LOCAL)i=t.getInvocationLocalIndex();else if(n===Hr.INVOCATION_SUBGROUP)i=t.getInvocationSubgroupIndex();else if(n===Hr.SUBGROUP)i=t.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+n);let s;return t.shaderStage==="vertex"||t.shaderStage==="compute"?s=i:s=nl(this).build(t,e),s}};dn.VERTEX="vertex";dn.INSTANCE="instance";dn.SUBGROUP="subgroup";dn.INVOCATION_LOCAL="invocationLocal";dn.INVOCATION_SUBGROUP="invocationSubgroup";dn.DRAW="draw";dn.VERTEX;const bF=Lt(dn,dn.INSTANCE);dn.SUBGROUP;dn.INVOCATION_SUBGROUP;dn.INVOCATION_LOCAL;dn.DRAW;let EF=class extends le{static get type(){return"LoopNode"}constructor(t=[]){super(),this.params=t}getVarName(t){return String.fromCharCode(105+t)}getProperties(t){const e=t.getNodeProperties(this);if(e.stackNode!==void 0)return e;const n={};for(let s=0,o=this.params.length-1;s<o;s++){const a=this.params[s],l=a.isNode!==!0&&a.name||this.getVarName(s),c=a.isNode!==!0&&a.type||"int";n[l]=Nu(l,c)}const i=t.addStack();return e.returnsNode=this.params[this.params.length-1](n,i,t),e.stackNode=i,t.removeStack(),e}getNodeType(t){const{returnsNode:e}=this.getProperties(t);return e?e.getNodeType(t):"void"}setup(t){this.getProperties(t)}generate(t){const e=this.getProperties(t),n=this.params,i=e.stackNode;for(let a=0,l=n.length-1;a<l;a++){const c=n[a];let h=null,u=null,d=null,f=null,p=null,x=null;c.isNode?(f="int",d=this.getVarName(a),h="0",u=c.build(t,f),p="<"):(f=c.type||"int",d=c.name||this.getVarName(a),h=c.start,u=c.end,p=c.condition,x=c.update,typeof h=="number"?h=h.toString():h&&h.isNode&&(h=h.build(t,f)),typeof u=="number"?u=u.toString():u&&u.isNode&&(u=u.build(t,f)),h!==void 0&&u===void 0?(h=h+" - 1",u="0",p=">="):u!==void 0&&h===void 0&&(h="0",p="<"),p===void 0&&(Number(h)>Number(u)?p=">=":p="<"));const m={start:h,end:u,condition:p},g=m.start,y=m.end;let _="",T="",w="";x||(f==="int"||f==="uint"?p.includes("<")?x="++":x="--":p.includes("<")?x="+= 1.":x="-= 1."),_+=t.getVar(f,d)+" = "+g,T+=d+" "+p+" "+y,w+=d+" "+x;const A=`for ( ${_}; ${T}; ${w} )`;t.addFlowCode((a===0?`
`:"")+t.tab+A+` {

`).addFlowTab()}const s=i.build(t,"void"),o=e.returnsNode?e.returnsNode.build(t):"";t.removeFlowTab().addFlowCode(`
`+t.tab+s);for(let a=0,l=this.params.length-1;a<l;a++)t.addFlowCode((a===0?"":t.tab)+`}

`).removeFlowTab();return t.addFlowTab(),o}};const xa=(...r)=>pt(new EF(Ra(r,"int"))).append();let bl,El,bi=class ir extends le{static get type(){return"ScreenNode"}constructor(t){super(),this.scope=t,this.isViewportNode=!0}getNodeType(){return this.scope===ir.VIEWPORT?"vec4":"vec2"}getUpdateType(){let t=Ze.NONE;return(this.scope===ir.SIZE||this.scope===ir.VIEWPORT)&&(t=Ze.RENDER),this.updateType=t,t}update({renderer:t}){const e=t.getRenderTarget();this.scope===ir.VIEWPORT?e!==null?El.copy(e.viewport):(t.getViewport(El),El.multiplyScalar(t.getPixelRatio())):e!==null?(bl.width=e.width,bl.height=e.height):t.getDrawingBufferSize(bl)}setup(){const t=this.scope;let e=null;return t===ir.SIZE?e=Pn(bl||(bl=new Zi)):t===ir.VIEWPORT?e=Pn(El||(El=new yr)):e=Zt(ad.div(o_)),e}generate(t){if(this.scope===ir.COORDINATE){let e=t.getFragCoord();if(t.isFlipY()){const n=t.getNodeProperties(o_).outputNode.build(t);e=`${t.getType("vec2")}( ${e}.x, ${n}.y - ${e}.y )`}return e}return super.generate(t)}};bi.COORDINATE="coordinate";bi.VIEWPORT="viewport";bi.SIZE="size";bi.UV="uv";const Ng=Lt(bi,bi.UV),o_=Lt(bi,bi.SIZE),ad=Lt(bi,bi.COORDINATE),vT=Lt(bi,bi.VIEWPORT);vT.zw;vT.xy;const Al=new Zi;let AF=class extends rd{static get type(){return"ViewportTextureNode"}constructor(t=Ng,e=null,n=null){n===null&&(n=new dC,n.minFilter=NS),super(n,t,e),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=Ze.FRAME}updateBefore(t){const e=t.renderer;e.getDrawingBufferSize(Al);const n=this.value;(n.image.width!==Al.width||n.image.height!==Al.height)&&(n.image.width=Al.width,n.image.height=Al.height,n.needsUpdate=!0);const i=n.generateMipmaps;n.generateMipmaps=this.generateMipmaps,e.copyFramebufferToTexture(n),n.generateMipmaps=i}clone(){const t=new this.constructor(this.uvNode,this.levelNode,this.value);return t.generateMipmaps=this.generateMipmaps,t}},uf=null,wF=class extends AF{static get type(){return"ViewportDepthTextureNode"}constructor(t=Ng,e=null){uf===null&&(uf=new WS),super(t,e,uf)}};const NF=rt(wF);let Ds=class Wl extends le{static get type(){return"ViewportDepthNode"}constructor(t,e=null){super("float"),this.scope=t,this.valueNode=e,this.isViewportDepthNode=!0}generate(t){const{scope:e}=this;return e===Wl.DEPTH_BASE?t.getFragDepth():super.generate(t)}setup({camera:t}){const{scope:e}=this,n=this.valueNode;let i=null;if(e===Wl.DEPTH_BASE)n!==null&&(i=ET().assign(n));else if(e===Wl.DEPTH)t.isPerspectiveCamera?i=RF(Ti.z,Tl,Ml):i=cu(Ti.z,Tl,Ml);else if(e===Wl.LINEAR_DEPTH)if(n!==null)if(t.isPerspectiveCamera){const s=bT(n,Tl,Ml);i=cu(s,Tl,Ml)}else i=n;else i=cu(Ti.z,Tl,Ml);return i}};Ds.DEPTH_BASE="depthBase";Ds.DEPTH="depth";Ds.LINEAR_DEPTH="linearDepth";const cu=(r,t,e)=>r.add(t).div(t.sub(e)),RF=(r,t,e)=>t.add(r).mul(e).div(e.sub(t).mul(r)),bT=(r,t,e)=>t.mul(e).div(e.sub(t).mul(r).sub(e)),ET=rt(Ds,Ds.DEPTH_BASE),CF=Lt(Ds,Ds.DEPTH),PF=rt(Ds,Ds.LINEAR_DEPTH);NF();CF.assign=r=>ET(r);let AT=class fm extends le{static get type(){return"ClippingNode"}constructor(t=fm.DEFAULT){super(),this.scope=t}setup(t){super.setup(t);const e=t.clippingContext,{localClipIntersection:n,localClippingCount:i,globalClippingCount:s}=e,o=s+i,a=n?o-i:o;return this.scope===fm.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(e.planes,o,a):this.setupDefault(e.planes,o,a)}setupAlphaToCoverage(t,e,n){return tn(()=>{const i=dm(t),s=ha("float","distanceToPlane"),o=ha("float","distanceToGradient"),a=ha("float","clipOpacity");a.assign(1);let l;if(xa(n,({i:c})=>{l=i.element(c),s.assign(Ti.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),a.mulAssign(um(o.negate(),o,s)),a.equal(0).discard()}),n<e){const c=ha("float","unionclipOpacity");c.assign(1),xa({start:n,end:e},({i:h})=>{l=i.element(h),s.assign(Ti.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),c.mulAssign(um(o.negate(),o,s).oneMinus())}),a.mulAssign(c.oneMinus())}e_.a.mulAssign(a),e_.a.equal(0).discard()})()}setupDefault(t,e,n){return tn(()=>{const i=dm(t);let s;if(xa(n,({i:o})=>{s=i.element(o),Ti.dot(s.xyz).greaterThan(s.w).discard()}),n<e){const o=ha("bool","clipped");o.assign(!0),xa({start:n,end:e},({i:a})=>{s=i.element(a),o.assign(Ti.dot(s.xyz).greaterThan(s.w).and(o))}),o.discard()}})()}};AT.ALPHA_TO_COVERAGE="alphaToCoverage";AT.DEFAULT="default";se(.04);re(1);const FF=tn(([r,t])=>{const e=r.toVar();e.assign(id(2,e).sub(1));const n=se(e,1).toVar();return yg(t.equal(0),()=>{n.assign(n.zyx)}).ElseIf(t.equal(1),()=>{n.assign(n.xzy),n.xz.mulAssign(-1)}).ElseIf(t.equal(2),()=>{n.x.mulAssign(-1)}).ElseIf(t.equal(3),()=>{n.assign(n.zyx),n.xz.mulAssign(-1)}).ElseIf(t.equal(4),()=>{n.assign(n.xzy),n.xy.mulAssign(-1)}).ElseIf(t.equal(5),()=>{n.z.mulAssign(-1)}),n}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]});tn(({texture:r,uv:t})=>{const n=se().toVar();return yg(t.x.lessThan(1e-4),()=>{n.assign(se(1,0,0))}).ElseIf(t.y.lessThan(1e-4),()=>{n.assign(se(0,1,0))}).ElseIf(t.z.lessThan(1e-4),()=>{n.assign(se(0,0,1))}).ElseIf(t.x.greaterThan(1-1e-4),()=>{n.assign(se(-1,0,0))}).ElseIf(t.y.greaterThan(1-1e-4),()=>{n.assign(se(0,-1,0))}).ElseIf(t.z.greaterThan(1-1e-4),()=>{n.assign(se(0,0,-1))}).Else(()=>{const s=r.uv(t.add(se(-.01,0,0))).r.sub(r.uv(t.add(se(.01,0,0))).r),o=r.uv(t.add(se(0,-.01,0))).r.sub(r.uv(t.add(se(0,.01,0))).r),a=r.uv(t.add(se(0,0,-.01))).r.sub(r.uv(t.add(se(0,0,.01))).r);n.assign(se(s,o,a))}),n.normalize()});let On=class extends le{static get type(){return"CodeNode"}constructor(t="",e=[],n=""){super("code"),this.isCodeNode=!0,this.code=t,this.language=n,this.includes=e}isGlobal(){return!0}setIncludes(t){return this.includes=t,this}getIncludes(){return this.includes}generate(t){const e=this.getIncludes(t);for(const i of e)i.build(t);const n=t.getCodeFromNode(this,this.getNodeType(t));return n.code=this.code,n.code}serialize(t){super.serialize(t),t.code=this.code,t.language=this.language}deserialize(t){super.deserialize(t),this.code=t.code,this.language=t.language}};const df=FF(wc(),Ac("faceIndex")).normalize();se(df.x,df.y.negate(),df.z);let Ha=class ql extends el{static get type(){return"TimerNode"}constructor(t=ql.LOCAL,e=1,n=0){super(n),this.scope=t,this.scale=e,this.updateType=Ze.FRAME}update(t){const e=this.scope,n=this.scale;e===ql.LOCAL?this.value+=t.deltaTime*n:e===ql.DELTA?this.value=t.deltaTime*n:e===ql.FRAME?this.value=t.frameId:this.value=t.time*n}serialize(t){super.serialize(t),t.scope=this.scope,t.scale=this.scale}deserialize(t){super.deserialize(t),this.scope=t.scope,this.scale=t.scale}};Ha.LOCAL="local";Ha.GLOBAL="global";Ha.DELTA="delta";Ha.FRAME="frame";const wT=(r,t=0)=>pt(new Ha(Ha.LOCAL,r,t));let Ei=class ua extends le{static get type(){return"OscNode"}constructor(t=ua.SINE,e=wT()){super(),this.method=t,this.timeNode=e}getNodeType(t){return this.timeNode.getNodeType(t)}setup(){const t=this.method,e=pt(this.timeNode);let n=null;return t===ua.SINE?n=e.add(.75).mul(Math.PI*2).sin().mul(.5).add(.5):t===ua.SQUARE?n=e.fract().round():t===ua.TRIANGLE?n=e.add(.5).fract().mul(2).sub(1).abs():t===ua.SAWTOOTH&&(n=e.fract()),n}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}};Ei.SINE="sine";Ei.SQUARE="square";Ei.TRIANGLE="triangle";Ei.SAWTOOTH="sawtooth";Ei.SINE;Ei.SQUARE;Ei.TRIANGLE;Ei.SAWTOOTH;new uC;new me;new me;new me;new pr;new me(0,0,-1);new yr;new me;new me;new yr;new Zi;new OS;Ng.flipX();let $a=class hu extends le{static get type(){return"SceneNode"}constructor(t=hu.BACKGROUND_BLURRINESS,e=null){super(),this.scope=t,this.scene=e}setup(t){const e=this.scope,n=this.scene!==null?this.scene:t.scene;let i;return e===hu.BACKGROUND_BLURRINESS?i=ao("backgroundBlurriness","float",n):e===hu.BACKGROUND_INTENSITY?i=ao("backgroundIntensity","float",n):console.error("THREE.SceneNode: Unknown scope:",e),i}};$a.BACKGROUND_BLURRINESS="backgroundBlurriness";$a.BACKGROUND_INTENSITY="backgroundIntensity";$a.BACKGROUND_BLURRINESS;$a.BACKGROUND_INTENSITY;const IF=new Zi;let DF=class extends rd{static get type(){return"PassTextureNode"}constructor(t,e){super(e),this.passNode=t,this.setUpdateMatrix(!1)}setup(t){return t.object.isQuadMesh&&this.passNode.build(t),super.setup(t)}clone(){return new this.constructor(this.passNode,this.value)}},a_=class extends DF{static get type(){return"PassMultipleTextureNode"}constructor(t,e,n=!1){super(t,null),this.textureName=e,this.previousTexture=n}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(t){return this.updateTexture(),super.setup(t)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}},NT=class RT extends Jn{static get type(){return"PassNode"}constructor(t,e,n,i={}){super("vec4"),this.scope=t,this.scene=e,this.camera=n,this.options=i,this._pixelRatio=1,this._width=1,this._height=1;const s=new WS;s.isRenderTargetTexture=!0,s.name="depth";const o=new OS(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:NR,...i});o.texture.name="output",o.depthTexture=s,this.renderTarget=o,this.updateBeforeType=Ze.FRAME,this._textures={output:o.texture,depth:s},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=Pn(0),this._cameraFar=Pn(0),this._mrt=null,this.isPassNode=!0}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(t){let e=this._textures[t];return e===void 0&&(e=this.renderTarget.texture.clone(),e.isRenderTargetTexture=!0,e.name=t,this._textures[t]=e,this.renderTarget.textures.push(e)),e}getPreviousTexture(t){let e=this._previousTextures[t];return e===void 0&&(e=this.getTexture(t).clone(),e.isRenderTargetTexture=!0,this._previousTextures[t]=e),e}toggleTexture(t){const e=this._previousTextures[t];if(e!==void 0){const n=this._textures[t],i=this.renderTarget.textures.indexOf(n);this.renderTarget.textures[i]=e,this._textures[t]=e,this._previousTextures[t]=n,this._textureNodes[t].updateTexture(),this._previousTextureNodes[t].updateTexture()}}getTextureNode(t="output"){let e=this._textureNodes[t];return e===void 0&&(this._textureNodes[t]=e=pt(new a_(this,t)),this._textureNodes[t].updateTexture()),e}getPreviousTextureNode(t="output"){let e=this._previousTextureNodes[t];return e===void 0&&(this._textureNodes[t]===void 0&&this.getTextureNode(t),this._previousTextureNodes[t]=e=pt(new a_(this,t,!0)),this._previousTextureNodes[t].updateTexture()),e}getViewZNode(t="depth"){let e=this._viewZNodes[t];if(e===void 0){const n=this._cameraNear,i=this._cameraFar;this._viewZNodes[t]=e=bT(this.getTextureNode(t),n,i)}return e}getLinearDepthNode(t="depth"){let e=this._linearDepthNodes[t];if(e===void 0){const n=this._cameraNear,i=this._cameraFar,s=this.getViewZNode(t);this._linearDepthNodes[t]=e=cu(s,n,i)}return e}setup({renderer:t}){return this.renderTarget.samples=this.options.samples===void 0?t.samples:this.options.samples,t.backend.isWebGLBackend===!0&&(this.renderTarget.samples=0),this.renderTarget.depthTexture.isMultisampleRenderTargetTexture=this.renderTarget.samples>1,this.scope===RT.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(t){const{renderer:e}=t,{scene:n,camera:i}=this;this._pixelRatio=e.getPixelRatio();const s=e.getSize(IF);this.setSize(s.width,s.height);const o=e.getRenderTarget(),a=e.getMRT();this._cameraNear.value=i.near,this._cameraFar.value=i.far;for(const l in this._previousTextures)this.toggleTexture(l);e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),e.render(n,i),e.setRenderTarget(o),e.setMRT(a)}setSize(t,e){this._width=t,this._height=e;const n=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget.setSize(n,i)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}};NT.COLOR="color";NT.DEPTH="depth";let Dr=null,Lr=null;class LF extends le{static get type(){return"RangeNode"}constructor(t=re(),e=re()){super(),this.minNode=t,this.maxNode=e}getVectorLength(t){const e=t.getTypeLength(hr(this.minNode.value)),n=t.getTypeLength(hr(this.maxNode.value));return e>n?e:n}getNodeType(t){return t.object.count>1?t.getTypeFromLength(this.getVectorLength(t)):"float"}setup(t){const e=t.object;let n=null;if(e.count>1){const i=this.minNode.value,s=this.maxNode.value,o=t.getTypeLength(hr(i)),a=t.getTypeLength(hr(s));Dr=Dr||new yr,Lr=Lr||new yr,Dr.setScalar(0),Lr.setScalar(0),o===1?Dr.setScalar(i):i.isColor?Dr.set(i.r,i.g,i.b):Dr.set(i.x,i.y,i.z||0,i.w||0),a===1?Lr.setScalar(s):s.isColor?Lr.set(s.r,s.g,s.b):Lr.set(s.x,s.y,s.z||0,s.w||0);const l=4,c=l*e.count,h=new Float32Array(c);for(let d=0;d<c;d++){const f=d%l,p=Dr.getComponent(f),x=Lr.getComponent(f);h[d]=IS.lerp(p,x,Math.random())}const u=this.getNodeType(t);if(e.count<=4096)n=yT(h,"vec4",e.count).element(bF).convert(u);else{const d=new lC(h,4);t.geometry.setAttribute("__range"+this.id,d),n=CP(d).convert(u)}}else n=re(0);return n}}const _h=rt(LF);tn(({depthTexture:r,shadowCoord:t})=>Nc(r,t.xy).compare(t.z));tn(({depthTexture:r,shadowCoord:t,shadow:e})=>{const n=(x,m)=>Nc(r,x).compare(m),i=ao("mapSize","vec2",e).setGroup(ro),s=ao("radius","float",e).setGroup(ro),o=Zt(1).div(i),a=o.x.negate().mul(s),l=o.y.negate().mul(s),c=o.x.mul(s),h=o.y.mul(s),u=a.div(2),d=l.div(2),f=c.div(2),p=h.div(2);return oo(n(t.xy.add(Zt(a,l)),t.z),n(t.xy.add(Zt(0,l)),t.z),n(t.xy.add(Zt(c,l)),t.z),n(t.xy.add(Zt(u,d)),t.z),n(t.xy.add(Zt(0,d)),t.z),n(t.xy.add(Zt(f,d)),t.z),n(t.xy.add(Zt(a,0)),t.z),n(t.xy.add(Zt(u,0)),t.z),n(t.xy,t.z),n(t.xy.add(Zt(f,0)),t.z),n(t.xy.add(Zt(c,0)),t.z),n(t.xy.add(Zt(u,p)),t.z),n(t.xy.add(Zt(0,p)),t.z),n(t.xy.add(Zt(f,p)),t.z),n(t.xy.add(Zt(a,h)),t.z),n(t.xy.add(Zt(0,h)),t.z),n(t.xy.add(Zt(c,h)),t.z)).mul(1/17)});tn(({depthTexture:r,shadowCoord:t,shadow:e})=>{const n=(h,u)=>Nc(r,h).compare(u),i=ao("mapSize","vec2",e).setGroup(ro),s=Zt(1).div(i),o=s.x,a=s.y,l=t.xy,c=Tg(l.mul(i).add(.5));return l.subAssign(c.mul(s)),oo(n(l,t.z),n(l.add(Zt(o,0)),t.z),n(l.add(Zt(0,a)),t.z),n(l.add(s),t.z),ys(n(l.add(Zt(o.negate(),0)),t.z),n(l.add(Zt(o.mul(2),0)),t.z),c.x),ys(n(l.add(Zt(o.negate(),a)),t.z),n(l.add(Zt(o.mul(2),a)),t.z),c.x),ys(n(l.add(Zt(0,a.negate())),t.z),n(l.add(Zt(0,a.mul(2))),t.z),c.y),ys(n(l.add(Zt(o,a.negate())),t.z),n(l.add(Zt(o,a.mul(2))),t.z),c.y),ys(ys(n(l.add(Zt(o.negate(),a.negate())),t.z),n(l.add(Zt(o.mul(2),a.negate())),t.z),c.x),ys(n(l.add(Zt(o.negate(),a.mul(2))),t.z),n(l.add(Zt(o.mul(2),a.mul(2))),t.z),c.x),c.y)).mul(1/9)});tn(({depthTexture:r,shadowCoord:t})=>{const e=re(1).toVar(),n=Nc(r).uv(t.xy).rg,i=aT(t.z,n.x);return yg(i.notEqual(re(1)),()=>{const s=t.z.sub(n.x),o=hm(0,n.y.mul(n.y));let a=o.div(o.add(s.mul(s)));a=wu(Au(a,.3).div(.95-.3)),e.assign(wu(hm(i,a)))}),e});tn(({samples:r,radius:t,size:e,shadowPass:n})=>{const i=re(0).toVar(),s=re(0).toVar(),o=r.lessThanEqual(re(1)).select(re(0),re(2).div(r.sub(1))),a=r.lessThanEqual(re(1)).select(re(0),re(-1));xa({start:ka(0),end:ka(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(re(c).mul(o)),u=n.uv(oo(ad.xy,Zt(0,h).mul(t)).div(e)).x;i.addAssign(u),s.addAssign(u.mul(u))}),i.divAssign(r),s.divAssign(r);const l=Sg(s.sub(i.mul(i)));return Zt(i,l)});tn(({samples:r,radius:t,size:e,shadowPass:n})=>{const i=re(0).toVar(),s=re(0).toVar(),o=r.lessThanEqual(re(1)).select(re(0),re(2).div(r.sub(1))),a=r.lessThanEqual(re(1)).select(re(0),re(-1));xa({start:ka(0),end:ka(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(re(c).mul(o)),u=n.uv(oo(ad.xy,Zt(h,0).mul(t)).div(e));i.addAssign(u.x),s.addAssign(oo(u.y.mul(u.y),u.x.mul(u.x)))}),i.divAssign(r),s.divAssign(r);const l=Sg(s.sub(i.mul(i)));return Zt(i,l)});se(1.6605,-.1246,-.0182),se(-.5876,1.1329,-.1006),se(-.0728,-.0083,1.1187);se(.6274,.0691,.0164),se(.3293,.9195,.088),se(.0433,.0113,.8956);let UF=class extends le{constructor(t){super(),this.scope=t}generate(t){const{scope:e}=this,{renderer:n}=t;n.backend.isWebGLBackend===!0?t.addFlowCode(`	// ${e}Barrier 
`):t.addLineFlowCode(`${e}Barrier()`,this)}};rt(UF);let is=class extends Jn{static get type(){return"AtomicFunctionNode"}constructor(t,e,n,i=null){super("uint"),this.method=t,this.pointerNode=e,this.valueNode=n,this.storeNode=i}getInputType(t){return this.pointerNode.getNodeType(t)}getNodeType(t){return this.getInputType(t)}generate(t){const e=this.method,n=this.getNodeType(t),i=this.getInputType(t),s=this.pointerNode,o=this.valueNode,a=[];a.push(`&${s.build(t,i)}`),a.push(o.build(t,i));const l=`${t.getMethod(e,n)}( ${a.join(", ")} )`;if(this.storeNode!==null){const c=this.storeNode.build(t,i);t.addLineFlowCode(`${c} = ${l}`,this)}else t.addLineFlowCode(l,this)}};is.ATOMIC_LOAD="atomicLoad";is.ATOMIC_STORE="atomicStore";is.ATOMIC_ADD="atomicAdd";is.ATOMIC_SUB="atomicSub";is.ATOMIC_MAX="atomicMax";is.ATOMIC_MIN="atomicMin";is.ATOMIC_AND="atomicAnd";is.ATOMIC_OR="atomicOr";is.ATOMIC_XOR="atomicXor";rt(is);const Ho=self.GPUShaderStage;Ho&&Ho.VERTEX,Ho&&Ho.FRAGMENT,Ho&&Ho.COMPUTE;const Ur={tsl_xor:new On("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new On("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new On("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new On("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new On("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new On("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new On("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new On("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new On("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping:new On(`
fn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {

	let uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );

	return ( ( uvScaled % dimension ) + dimension ) % dimension;

}
`),biquadraticTexture:new On(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, level : i32 ) -> vec4f {

	let iRes = vec2i( textureDimensions( map, level ) );
	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2i( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2i( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2i( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2i( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)},yh={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};/Windows/g.test(navigator.userAgent)&&(Ur.pow_float=new On("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),Ur.pow_vec2=new On("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[Ur.pow_float]),Ur.pow_vec3=new On("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[Ur.pow_float]),Ur.pow_vec4=new On("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[Ur.pow_float]),yh.pow_float="tsl_pow_float",yh.pow_vec2="tsl_pow_vec2",yh.pow_vec3="tsl_pow_vec3",yh.pow_vec4="tsl_pow_vec4");typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:ES}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=ES);const CT="169",BF=0,OF=1,zF=2,GF=1,Sh=3,rc=0,zs=1,Ru=2,Wa=0,mr=1,Cu=2,Pu=3,Fu=4,PT=5,lr=100,FT=101,IT=102,kF=103,VF=104,DT=200,LT=201,UT=202,BT=203,Iu=204,Du=205,OT=206,zT=207,GT=208,kT=209,VT=210,HT=0,$T=1,WT=2,Lu=3,qT=4,XT=5,YT=6,jT=7,HF=0,Ca=0,$F=1,WF=2,qF=3,XF=4,YF=6,jF=7,KT=300,lo=301,qa=302,Rc=303,Cc=304,pm=306,Uu=1e3,_a=1001,Bu=1002,xn=1003,mm=1004,Pa=1005,Qn=1006,gm=1007,Ns=1008,ws=1009,Zl=1010,Ql=1011,ya=1012,kn=1013,gn=1014,fi=1015,Rs=1016,KF=1017,ZF=1018,Pc=1020,ZT=35902,QF=1021,Rg=1022,il=1023,JF=1024,tI=1025,Qr=1026,Xa=1027,Cg=1028,Pg=1029,oc=1030,Fg=1031,eI=1032,Ig=1033,ff=33776,uu=33777,du=33778,fu=33779,l_=35840,c_=35841,h_=35842,u_=35843,d_=36196,xm=37492,_m=37496,ym=37808,Sm=37809,Tm=37810,Mm=37811,vm=37812,bm=37813,Em=37814,Am=37815,wm=37816,Nm=37817,Rm=37818,Cm=37819,Pm=37820,Fm=37821,pf=36492,nI=36283,f_=36284,p_=36285,m_=36286,g_=0,iI=1,co="",Bt="srgb",Mi="srgb-linear",sI="display-p3",QT="display-p3-linear",Im="linear",x_="srgb",__="rec709",y_="p3",rI=0,$r=7680,oI=7681,aI=7682,lI=7683,cI=34055,hI=34056,uI=5386,dI=512,fI=513,pI=514,mI=515,gI=516,xI=517,_I=518,Dm=519,JT=512,Dg=513,tM=514,eM=515,nM=516,iM=517,sM=518,rM=519,Ou=35044,Sa=35048,ki=2e3,ho=2001;class sl{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const i=this._listeners[t];if(i!==void 0){const s=i.indexOf(e);s!==-1&&i.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,t);t.target=null}}}const Mn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let S_=1234567;const Jl=Math.PI/180,ac=180/Math.PI;function Cs(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Mn[r&255]+Mn[r>>8&255]+Mn[r>>16&255]+Mn[r>>24&255]+"-"+Mn[t&255]+Mn[t>>8&255]+"-"+Mn[t>>16&15|64]+Mn[t>>24&255]+"-"+Mn[e&63|128]+Mn[e>>8&255]+"-"+Mn[e>>16&255]+Mn[e>>24&255]+Mn[n&255]+Mn[n>>8&255]+Mn[n>>16&255]+Mn[n>>24&255]).toLowerCase()}function wn(r,t,e){return Math.max(t,Math.min(e,r))}function Lg(r,t){return(r%t+t)%t}function yI(r,t,e,n,i){return n+(r-t)*(i-n)/(e-t)}function SI(r,t,e){return r!==t?(e-r)/(t-r):0}function tc(r,t,e){return(1-e)*r+e*t}function TI(r,t,e,n){return tc(r,t,1-Math.exp(-e*n))}function MI(r,t=1){return t-Math.abs(Lg(r,t*2)-t)}function vI(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function bI(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function EI(r,t){return r+Math.floor(Math.random()*(t-r+1))}function AI(r,t){return r+Math.random()*(t-r)}function wI(r){return r*(.5-Math.random())}function NI(r){r!==void 0&&(S_=r);let t=S_+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function RI(r){return r*Jl}function CI(r){return r*ac}function PI(r){return(r&r-1)===0&&r!==0}function FI(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function II(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function DI(r,t,e,n,i){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+n)/2),h=o((t+n)/2),u=s((t-n)/2),d=o((t-n)/2),f=s((n-t)/2),p=o((n-t)/2);switch(i){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*p,l*f,a*c);break;case"YXY":r.set(l*f,a*h,l*p,a*c);break;case"ZYZ":r.set(l*p,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function Vn(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function jt(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const LI={DEG2RAD:Jl,RAD2DEG:ac,generateUUID:Cs,clamp:wn,euclideanModulo:Lg,mapLinear:yI,inverseLerp:SI,lerp:tc,damp:TI,pingpong:MI,smoothstep:vI,smootherstep:bI,randInt:EI,randFloat:AI,randFloatSpread:wI,seededRandom:NI,degToRad:RI,radToDeg:CI,isPowerOfTwo:PI,ceilPowerOfTwo:FI,floorPowerOfTwo:II,setQuaternionFromProperEuler:DI,normalize:jt,denormalize:Vn};class Re{constructor(t=0,e=0){Re.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(wn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*n-o*i+t.x,this.y=s*i+o*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class mi{constructor(t,e,n,i,s,o,a,l,c){mi.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c)}set(t,e,n,i,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=i,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=n,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],f=n[5],p=n[8],x=i[0],m=i[3],g=i[6],y=i[1],_=i[4],T=i[7],w=i[2],A=i[5],v=i[8];return s[0]=o*x+a*y+l*w,s[3]=o*m+a*_+l*A,s[6]=o*g+a*T+l*v,s[1]=c*x+h*y+u*w,s[4]=c*m+h*_+u*A,s[7]=c*g+h*T+u*v,s[2]=d*x+f*y+p*w,s[5]=d*m+f*_+p*A,s[8]=d*g+f*T+p*v,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-n*s*h+n*a*l+i*s*c-i*o*l}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,p=e*u+n*d+i*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/p;return t[0]=u*x,t[1]=(i*c-h*n)*x,t[2]=(a*n-i*o)*x,t[3]=d*x,t[4]=(h*e-i*l)*x,t[5]=(i*s-a*e)*x,t[6]=f*x,t[7]=(n*l-c*e)*x,t[8]=(o*e-n*s)*x,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*o+c*a)+o+t,-i*c,i*l,-i*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(mf.makeScale(t,e)),this}rotate(t){return this.premultiply(mf.makeRotation(-t)),this}translate(t,e){return this.premultiply(mf.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const mf=new mi;function UI(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function Lm(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function BI(){const r=Lm("canvas");return r.style.display="block",r}const T_={};function OI(r){r in T_||(T_[r]=!0,console.warn(r))}const M_=new mi().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),v_=new mi().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),wl={[Mi]:{transfer:Im,primaries:__,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r,fromReference:r=>r},[Bt]:{transfer:x_,primaries:__,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r.convertSRGBToLinear(),fromReference:r=>r.convertLinearToSRGB()},[QT]:{transfer:Im,primaries:y_,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.applyMatrix3(v_),fromReference:r=>r.applyMatrix3(M_)},[sI]:{transfer:x_,primaries:y_,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.convertSRGBToLinear().applyMatrix3(v_),fromReference:r=>r.applyMatrix3(M_).convertLinearToSRGB()}},zI=new Set([Mi,QT]),di={enabled:!0,_workingColorSpace:Mi,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(r){if(!zI.has(r))throw new Error(`Unsupported working color space, "${r}".`);this._workingColorSpace=r},convert:function(r,t,e){if(this.enabled===!1||t===e||!t||!e)return r;const n=wl[t].toReference,i=wl[e].fromReference;return i(n(r))},fromWorkingColorSpace:function(r,t){return this.convert(r,this._workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this._workingColorSpace)},getPrimaries:function(r){return wl[r].primaries},getTransfer:function(r){return r===co?Im:wl[r].transfer},getLuminanceCoefficients:function(r,t=this._workingColorSpace){return r.fromArray(wl[t].luminanceCoefficients)}};function Fa(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function gf(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let $o;class GI{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{$o===void 0&&($o=Lm("canvas")),$o.width=t.width,$o.height=t.height;const n=$o.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=$o}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=Lm("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),s=i.data;for(let o=0;o<s.length;o++)s[o]=Fa(s[o]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(Fa(e[n]/255)*255):e[n]=Fa(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let kI=0;class oM{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:kI++}),this.uuid=Cs(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?s.push(xf(i[o].image)):s.push(xf(i[o]))}else s=xf(i);n.url=s}return e||(t.images[this.uuid]=n),n}}function xf(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?GI.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let VI=0;class $n extends sl{constructor(t=$n.DEFAULT_IMAGE,e=$n.DEFAULT_MAPPING,n=_a,i=_a,s=Qn,o=Ns,a=il,l=ws,c=$n.DEFAULT_ANISOTROPY,h=co){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:VI++}),this.uuid=Cs(),this.name="",this.source=new oM(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new Re(0,0),this.repeat=new Re(1,1),this.center=new Re(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new mi,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==KT)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Uu:t.x=t.x-Math.floor(t.x);break;case _a:t.x=t.x<0?0:1;break;case Bu:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case Uu:t.y=t.y-Math.floor(t.y);break;case _a:t.y=t.y<0?0:1;break;case Bu:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}$n.DEFAULT_IMAGE=null;$n.DEFAULT_MAPPING=KT;$n.DEFAULT_ANISOTROPY=1;class ve{constructor(t=0,e=0,n=0,i=1){ve.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*e+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*e+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*e+o[7]*n+o[11]*i+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,s;const l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],p=l[9],x=l[2],m=l[6],g=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-x)<.01&&Math.abs(p-m)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+x)<.1&&Math.abs(p+m)<.1&&Math.abs(c+f+g-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const _=(c+1)/2,T=(f+1)/2,w=(g+1)/2,A=(h+d)/4,v=(u+x)/4,R=(p+m)/4;return _>T&&_>w?_<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(_),i=A/n,s=v/n):T>w?T<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(T),n=A/i,s=R/i):w<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(w),n=v/s,i=R/s),this.set(n,i,s,e),this}let y=Math.sqrt((m-p)*(m-p)+(u-x)*(u-x)+(d-h)*(d-h));return Math.abs(y)<.001&&(y=1),this.x=(m-p)/y,this.y=(u-x)/y,this.z=(d-h)/y,this.w=Math.acos((c+f+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class rl extends sl{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new ve(0,0,t,e),this.scissorTest=!1,this.viewport=new ve(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Qn,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const s=new $n(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let n=0,i=t.textures.length;n<i;n++)this.textures[n]=t.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new oM(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class HI extends rl{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class $I extends $n{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=xn,this.minFilter=xn,this.wrapR=_a,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Fc{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,s,o,a){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[o+0],f=s[o+1],p=s[o+2],x=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=x;return}if(u!==x||l!==d||c!==f||h!==p){let m=1-a;const g=l*d+c*f+h*p+u*x,y=g>=0?1:-1,_=1-g*g;if(_>Number.EPSILON){const w=Math.sqrt(_),A=Math.atan2(w,g*y);m=Math.sin(m*A)/w,a=Math.sin(a*A)/w}const T=a*y;if(l=l*m+d*T,c=c*m+f*T,h=h*m+p*T,u=u*m+x*T,m===1-a){const w=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=w,c*=w,h*=w,u*=w}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,n,i,s,o){const a=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[o],d=s[o+1],f=s[o+2],p=s[o+3];return t[e]=a*p+h*u+l*f-c*d,t[e+1]=l*p+h*d+c*u-a*f,t[e+2]=c*p+h*f+a*d-l*u,t[e+3]=h*p-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(n/2),h=a(i/2),u=a(s/2),d=l(n/2),f=l(i/2),p=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"YXZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"ZXY":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"ZYX":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"YZX":this._x=d*h*u+c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u-d*f*p;break;case"XZY":this._x=d*h*u-c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=n+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-i)*f}else if(n>a&&n>u){const f=2*Math.sqrt(1+n-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(i+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-n-u);this._w=(s-c)/f,this._x=(i+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-n-a);this._w=(o-i)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(wn(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=n*h+o*a+i*c-s*l,this._y=i*h+o*l+s*a-n*c,this._z=s*h+o*c+n*l-i*a,this._w=o*h-n*a-i*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*t._w+n*t._x+i*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*n+e*this._x,this._y=f*i+e*this._y,this._z=f*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class B{constructor(t=0,e=0,n=0){B.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(b_.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(b_.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*i,this.y=s[1]*e+s[4]*n+s[7]*i,this.z=s[2]*e+s[5]*n+s[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=t.elements,o=1/(s[3]*e+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*e+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*e+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=2*(o*i-a*n),h=2*(a*e-s*i),u=2*(s*n-o*e);return this.x=e+l*c+o*u-a*h,this.y=n+l*h+a*c-s*u,this.z=i+l*u+s*h-o*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i,this.y=s[1]*e+s[5]*n+s[9]*i,this.z=s[2]*e+s[6]*n+s[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=i*l-s*a,this.y=s*o-n*l,this.z=n*a-i*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return _f.copy(this).projectOnVector(t),this.sub(_f)}reflect(t){return this.sub(_f.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(wn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const _f=new B,b_=new Fc;class Ic{constructor(t=new B(1/0,1/0,1/0),e=new B(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(Pi.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(Pi.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Pi.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const s=n.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let o=0,a=s.count;o<a;o++)t.isMesh===!0?t.getVertexPosition(o,Pi):Pi.fromBufferAttribute(s,o),Pi.applyMatrix4(t.matrixWorld),this.expandByPoint(Pi);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),Th.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),Th.copy(n.boundingBox)),Th.applyMatrix4(t.matrixWorld),this.union(Th)}const i=t.children;for(let s=0,o=i.length;s<o;s++)this.expandByObject(i[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Pi),Pi.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Nl),Mh.subVectors(this.max,Nl),Wo.subVectors(t.a,Nl),qo.subVectors(t.b,Nl),Xo.subVectors(t.c,Nl),Ks.subVectors(qo,Wo),Zs.subVectors(Xo,qo),Br.subVectors(Wo,Xo);let e=[0,-Ks.z,Ks.y,0,-Zs.z,Zs.y,0,-Br.z,Br.y,Ks.z,0,-Ks.x,Zs.z,0,-Zs.x,Br.z,0,-Br.x,-Ks.y,Ks.x,0,-Zs.y,Zs.x,0,-Br.y,Br.x,0];return!yf(e,Wo,qo,Xo,Mh)||(e=[1,0,0,0,1,0,0,0,1],!yf(e,Wo,qo,Xo,Mh))?!1:(vh.crossVectors(Ks,Zs),e=[vh.x,vh.y,vh.z],yf(e,Wo,qo,Xo,Mh))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Pi).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Pi).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(ds[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),ds[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),ds[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),ds[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),ds[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),ds[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),ds[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),ds[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(ds),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const ds=[new B,new B,new B,new B,new B,new B,new B,new B],Pi=new B,Th=new Ic,Wo=new B,qo=new B,Xo=new B,Ks=new B,Zs=new B,Br=new B,Nl=new B,Mh=new B,vh=new B,Or=new B;function yf(r,t,e,n,i){for(let s=0,o=r.length-3;s<=o;s+=3){Or.fromArray(r,s);const a=i.x*Math.abs(Or.x)+i.y*Math.abs(Or.y)+i.z*Math.abs(Or.z),l=t.dot(Or),c=e.dot(Or),h=n.dot(Or);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const WI=new Ic,Rl=new B,Sf=new B;class Ug{constructor(t=new B,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):WI.setFromPoints(t).getCenter(n);let i=0;for(let s=0,o=t.length;s<o;s++)i=Math.max(i,n.distanceToSquared(t[s]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Rl.subVectors(t,this.center);const e=Rl.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),i=(n-this.radius)*.5;this.center.addScaledVector(Rl,i/n),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(Sf.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Rl.copy(t.center).add(Sf)),this.expandByPoint(Rl.copy(t.center).sub(Sf))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const fs=new B,Tf=new B,bh=new B,Qs=new B,Mf=new B,Eh=new B,vf=new B;class qI{constructor(t=new B,e=new B(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,fs)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=fs.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(fs.copy(this.origin).addScaledVector(this.direction,e),fs.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){Tf.copy(t).add(e).multiplyScalar(.5),bh.copy(e).sub(t).normalize(),Qs.copy(this.origin).sub(Tf);const s=t.distanceTo(e)*.5,o=-this.direction.dot(bh),a=Qs.dot(this.direction),l=-Qs.dot(bh),c=Qs.lengthSq(),h=Math.abs(1-o*o);let u,d,f,p;if(h>0)if(u=o*l-a,d=o*a-l,p=s*h,u>=0)if(d>=-p)if(d<=p){const x=1/h;u*=x,d*=x,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-p?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c):d<=p?(u=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,u),i&&i.copy(Tf).addScaledVector(bh,d),f}intersectSphere(t,e){fs.subVectors(t.center,this.origin);const n=fs.dot(this.direction),i=fs.dot(fs)-n*n,s=t.radius*t.radius;if(i>s)return null;const o=Math.sqrt(s-i),a=n-o,l=n+o;return l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(n=(t.min.x-d.x)*c,i=(t.max.x-d.x)*c):(n=(t.max.x-d.x)*c,i=(t.min.x-d.x)*c),h>=0?(s=(t.min.y-d.y)*h,o=(t.max.y-d.y)*h):(s=(t.max.y-d.y)*h,o=(t.min.y-d.y)*h),n>o||s>i||((s>n||isNaN(n))&&(n=s),(o<i||isNaN(i))&&(i=o),u>=0?(a=(t.min.z-d.z)*u,l=(t.max.z-d.z)*u):(a=(t.max.z-d.z)*u,l=(t.min.z-d.z)*u),n>l||a>i)||((a>n||n!==n)&&(n=a),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,fs)!==null}intersectTriangle(t,e,n,i,s){Mf.subVectors(e,t),Eh.subVectors(n,t),vf.crossVectors(Mf,Eh);let o=this.direction.dot(vf),a;if(o>0){if(i)return null;a=1}else if(o<0)a=-1,o=-o;else return null;Qs.subVectors(this.origin,t);const l=a*this.direction.dot(Eh.crossVectors(Qs,Eh));if(l<0)return null;const c=a*this.direction.dot(Mf.cross(Qs));if(c<0||l+c>o)return null;const h=-a*Qs.dot(vf);return h<0?null:this.at(h/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Be{constructor(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){Be.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m)}set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=s,g[5]=o,g[9]=a,g[13]=l,g[2]=c,g[6]=h,g[10]=u,g[14]=d,g[3]=f,g[7]=p,g[11]=x,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Be().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Yo.setFromMatrixColumn(t,0).length(),s=1/Yo.setFromMatrixColumn(t,1).length(),o=1/Yo.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*o,e[9]=n[9]*o,e[10]=n[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,s=t.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+p*c,e[5]=d-x*c,e[9]=-a*l,e[2]=x-d*c,e[6]=p+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d+x*a,e[4]=p*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=x+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d-x*a,e[4]=-o*u,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=x-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=p*c-f,e[8]=d*c+x,e[1]=l*u,e[5]=x*c+d,e[9]=f*c-p,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=x-d*u,e[8]=p*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+p,e[10]=d-x*u}else if(t.order==="XZY"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+x,e[5]=o*h,e[9]=f*u-p,e[2]=p*u-f,e[6]=a*h,e[10]=x*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(XI,t,YI)}lookAt(t,e,n){const i=this.elements;return ai.subVectors(t,e),ai.lengthSq()===0&&(ai.z=1),ai.normalize(),Js.crossVectors(n,ai),Js.lengthSq()===0&&(Math.abs(n.z)===1?ai.x+=1e-4:ai.z+=1e-4,ai.normalize(),Js.crossVectors(n,ai)),Js.normalize(),Ah.crossVectors(ai,Js),i[0]=Js.x,i[4]=Ah.x,i[8]=ai.x,i[1]=Js.y,i[5]=Ah.y,i[9]=ai.y,i[2]=Js.z,i[6]=Ah.z,i[10]=ai.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],f=n[13],p=n[2],x=n[6],m=n[10],g=n[14],y=n[3],_=n[7],T=n[11],w=n[15],A=i[0],v=i[4],R=i[8],W=i[12],S=i[1],b=i[5],H=i[9],z=i[13],Z=i[2],tt=i[6],q=i[10],nt=i[14],$=i[3],ct=i[7],ut=i[11],mt=i[15];return s[0]=o*A+a*S+l*Z+c*$,s[4]=o*v+a*b+l*tt+c*ct,s[8]=o*R+a*H+l*q+c*ut,s[12]=o*W+a*z+l*nt+c*mt,s[1]=h*A+u*S+d*Z+f*$,s[5]=h*v+u*b+d*tt+f*ct,s[9]=h*R+u*H+d*q+f*ut,s[13]=h*W+u*z+d*nt+f*mt,s[2]=p*A+x*S+m*Z+g*$,s[6]=p*v+x*b+m*tt+g*ct,s[10]=p*R+x*H+m*q+g*ut,s[14]=p*W+x*z+m*nt+g*mt,s[3]=y*A+_*S+T*Z+w*$,s[7]=y*v+_*b+T*tt+w*ct,s[11]=y*R+_*H+T*q+w*ut,s[15]=y*W+_*z+T*nt+w*mt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],p=t[3],x=t[7],m=t[11],g=t[15];return p*(+s*l*u-i*c*u-s*a*d+n*c*d+i*a*f-n*l*f)+x*(+e*l*f-e*c*d+s*o*d-i*o*f+i*c*h-s*l*h)+m*(+e*c*u-e*a*f-s*o*u+n*o*f+s*a*h-n*c*h)+g*(-i*a*h-e*l*u+e*a*d+i*o*u-n*o*d+n*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],p=t[12],x=t[13],m=t[14],g=t[15],y=u*m*c-x*d*c+x*l*f-a*m*f-u*l*g+a*d*g,_=p*d*c-h*m*c-p*l*f+o*m*f+h*l*g-o*d*g,T=h*x*c-p*u*c+p*a*f-o*x*f-h*a*g+o*u*g,w=p*u*l-h*x*l-p*a*d+o*x*d+h*a*m-o*u*m,A=e*y+n*_+i*T+s*w;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const v=1/A;return t[0]=y*v,t[1]=(x*d*s-u*m*s-x*i*f+n*m*f+u*i*g-n*d*g)*v,t[2]=(a*m*s-x*l*s+x*i*c-n*m*c-a*i*g+n*l*g)*v,t[3]=(u*l*s-a*d*s-u*i*c+n*d*c+a*i*f-n*l*f)*v,t[4]=_*v,t[5]=(h*m*s-p*d*s+p*i*f-e*m*f-h*i*g+e*d*g)*v,t[6]=(p*l*s-o*m*s-p*i*c+e*m*c+o*i*g-e*l*g)*v,t[7]=(o*d*s-h*l*s+h*i*c-e*d*c-o*i*f+e*l*f)*v,t[8]=T*v,t[9]=(p*u*s-h*x*s-p*n*f+e*x*f+h*n*g-e*u*g)*v,t[10]=(o*x*s-p*a*s+p*n*c-e*x*c-o*n*g+e*a*g)*v,t[11]=(h*a*s-o*u*s-h*n*c+e*u*c+o*n*f-e*a*f)*v,t[12]=w*v,t[13]=(h*x*i-p*u*i+p*n*d-e*x*d-h*n*m+e*u*m)*v,t[14]=(p*a*i-o*x*i-p*n*l+e*x*l+o*n*m-e*a*m)*v,t[15]=(o*u*i-h*a*i+h*n*l-e*u*l-o*n*d+e*a*d)*v,this}scale(t){const e=this.elements,n=t.x,i=t.y,s=t.z;return e[0]*=n,e[4]*=i,e[8]*=s,e[1]*=n,e[5]*=i,e[9]*=s,e[2]*=n,e[6]*=i,e[10]*=s,e[3]*=n,e[7]*=i,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),s=1-n,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+n,c*a-i*l,c*l+i*a,0,c*a+i*l,h*a+n,h*l-i*o,0,c*l-i*a,h*l+i*o,s*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,s,o){return this.set(1,n,s,0,t,1,o,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,p=s*u,x=o*h,m=o*u,g=a*u,y=l*c,_=l*h,T=l*u,w=n.x,A=n.y,v=n.z;return i[0]=(1-(x+g))*w,i[1]=(f+T)*w,i[2]=(p-_)*w,i[3]=0,i[4]=(f-T)*A,i[5]=(1-(d+g))*A,i[6]=(m+y)*A,i[7]=0,i[8]=(p+_)*v,i[9]=(m-y)*v,i[10]=(1-(d+x))*v,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let s=Yo.set(i[0],i[1],i[2]).length();const o=Yo.set(i[4],i[5],i[6]).length(),a=Yo.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),t.x=i[12],t.y=i[13],t.z=i[14],Fi.copy(this);const c=1/s,h=1/o,u=1/a;return Fi.elements[0]*=c,Fi.elements[1]*=c,Fi.elements[2]*=c,Fi.elements[4]*=h,Fi.elements[5]*=h,Fi.elements[6]*=h,Fi.elements[8]*=u,Fi.elements[9]*=u,Fi.elements[10]*=u,e.setFromRotationMatrix(Fi),n.x=s,n.y=o,n.z=a,this}makePerspective(t,e,n,i,s,o,a=ki){const l=this.elements,c=2*s/(e-t),h=2*s/(n-i),u=(e+t)/(e-t),d=(n+i)/(n-i);let f,p;if(a===ki)f=-(o+s)/(o-s),p=-2*o*s/(o-s);else if(a===ho)f=-o/(o-s),p=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,i,s,o,a=ki){const l=this.elements,c=1/(e-t),h=1/(n-i),u=1/(o-s),d=(e+t)*c,f=(n+i)*h;let p,x;if(a===ki)p=(o+s)*u,x=-2*u;else if(a===ho)p=s*u,x=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=x,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const Yo=new B,Fi=new Be,XI=new B(0,0,0),YI=new B(1,1,1),Js=new B,Ah=new B,ai=new B,E_=new Be,A_=new Fc;class uo{constructor(t=0,e=0,n=0,i=uo.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,s=i[0],o=i[4],a=i[8],l=i[1],c=i[5],h=i[9],u=i[2],d=i[6],f=i[10];switch(e){case"XYZ":this._y=Math.asin(wn(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-wn(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(wn(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-wn(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(wn(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-wn(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return E_.makeRotationFromQuaternion(t),this.setFromRotationMatrix(E_,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return A_.setFromEuler(this),this.setFromQuaternion(A_,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}uo.DEFAULT_ORDER="XYZ";class jI{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let KI=0;const w_=new B,jo=new Fc,ps=new Be,wh=new B,Cl=new B,ZI=new B,QI=new Fc,N_=new B(1,0,0),R_=new B(0,1,0),C_=new B(0,0,1),P_={type:"added"},JI={type:"removed"},Ko={type:"childadded",child:null},bf={type:"childremoved",child:null};class un extends sl{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:KI++}),this.uuid=Cs(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=un.DEFAULT_UP.clone();const t=new B,e=new uo,n=new Fc,i=new B(1,1,1);function s(){n.setFromEuler(e,!1)}function o(){e.setFromQuaternion(n,void 0,!1)}e._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Be},normalMatrix:{value:new mi}}),this.matrix=new Be,this.matrixWorld=new Be,this.matrixAutoUpdate=un.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=un.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new jI,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return jo.setFromAxisAngle(t,e),this.quaternion.multiply(jo),this}rotateOnWorldAxis(t,e){return jo.setFromAxisAngle(t,e),this.quaternion.premultiply(jo),this}rotateX(t){return this.rotateOnAxis(N_,t)}rotateY(t){return this.rotateOnAxis(R_,t)}rotateZ(t){return this.rotateOnAxis(C_,t)}translateOnAxis(t,e){return w_.copy(t).applyQuaternion(this.quaternion),this.position.add(w_.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(N_,t)}translateY(t){return this.translateOnAxis(R_,t)}translateZ(t){return this.translateOnAxis(C_,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(ps.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?wh.copy(t):wh.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Cl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ps.lookAt(Cl,wh,this.up):ps.lookAt(wh,Cl,this.up),this.quaternion.setFromRotationMatrix(ps),i&&(ps.extractRotation(i.matrixWorld),jo.setFromRotationMatrix(ps),this.quaternion.premultiply(jo.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(P_),Ko.child=t,this.dispatchEvent(Ko),Ko.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(JI),bf.child=t,this.dispatchEvent(bf),bf.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),ps.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),ps.multiply(t.parent.matrixWorld)),t.applyMatrix4(ps),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(P_),Ko.child=t,this.dispatchEvent(Ko),Ko.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Cl,t,ZI),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Cl,QI,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));i.material=a}else i.material=s(t.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];i.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(n.geometries=a),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f),p.length>0&&(n.nodes=p)}return n.object=i,n;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}}un.DEFAULT_UP=new B(0,1,0);un.DEFAULT_MATRIX_AUTO_UPDATE=!0;un.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Ii=new B,ms=new B,Ef=new B,gs=new B,Zo=new B,Qo=new B,F_=new B,Af=new B,wf=new B,Nf=new B,Rf=new ve,Cf=new ve,Pf=new ve;class zi{constructor(t=new B,e=new B,n=new B){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Ii.subVectors(t,e),i.cross(Ii);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(t,e,n,i,s){Ii.subVectors(i,e),ms.subVectors(n,e),Ef.subVectors(t,e);const o=Ii.dot(Ii),a=Ii.dot(ms),l=Ii.dot(Ef),c=ms.dot(ms),h=ms.dot(Ef),u=o*c-a*a;if(u===0)return s.set(0,0,0),null;const d=1/u,f=(c*l-a*h)*d,p=(o*h-a*l)*d;return s.set(1-f-p,p,f)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,gs)===null?!1:gs.x>=0&&gs.y>=0&&gs.x+gs.y<=1}static getInterpolation(t,e,n,i,s,o,a,l){return this.getBarycoord(t,e,n,i,gs)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,gs.x),l.addScaledVector(o,gs.y),l.addScaledVector(a,gs.z),l)}static getInterpolatedAttribute(t,e,n,i,s,o){return Rf.setScalar(0),Cf.setScalar(0),Pf.setScalar(0),Rf.fromBufferAttribute(t,e),Cf.fromBufferAttribute(t,n),Pf.fromBufferAttribute(t,i),o.setScalar(0),o.addScaledVector(Rf,s.x),o.addScaledVector(Cf,s.y),o.addScaledVector(Pf,s.z),o}static isFrontFacing(t,e,n,i){return Ii.subVectors(n,e),ms.subVectors(t,e),Ii.cross(ms).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ii.subVectors(this.c,this.b),ms.subVectors(this.a,this.b),Ii.cross(ms).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return zi.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return zi.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,s){return zi.getInterpolation(t,this.a,this.b,this.c,e,n,i,s)}containsPoint(t){return zi.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return zi.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,s=this.c;let o,a;Zo.subVectors(i,n),Qo.subVectors(s,n),Af.subVectors(t,n);const l=Zo.dot(Af),c=Qo.dot(Af);if(l<=0&&c<=0)return e.copy(n);wf.subVectors(t,i);const h=Zo.dot(wf),u=Qo.dot(wf);if(h>=0&&u<=h)return e.copy(i);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),e.copy(n).addScaledVector(Zo,o);Nf.subVectors(t,s);const f=Zo.dot(Nf),p=Qo.dot(Nf);if(p>=0&&f<=p)return e.copy(s);const x=f*c-l*p;if(x<=0&&c>=0&&p<=0)return a=c/(c-p),e.copy(n).addScaledVector(Qo,a);const m=h*p-f*u;if(m<=0&&u-h>=0&&f-p>=0)return F_.subVectors(s,i),a=(u-h)/(u-h+(f-p)),e.copy(i).addScaledVector(F_,a);const g=1/(m+x+d);return o=x*g,a=d*g,e.copy(n).addScaledVector(Zo,o).addScaledVector(Qo,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const aM={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},tr={h:0,s:0,l:0},Nh={h:0,s:0,l:0};function Ff(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}class ti{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Bt){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,di.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=di.workingColorSpace){return this.r=t,this.g=e,this.b=n,di.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=di.workingColorSpace){if(t=Lg(t,1),e=wn(e,0,1),n=wn(n,0,1),e===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+e):n+e-n*e,o=2*n-s;this.r=Ff(o,s,t+1/3),this.g=Ff(o,s,t),this.b=Ff(o,s,t-1/3)}return di.toWorkingColorSpace(this,i),this}setStyle(t,e=Bt){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=i[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Bt){const n=aM[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Fa(t.r),this.g=Fa(t.g),this.b=Fa(t.b),this}copyLinearToSRGB(t){return this.r=gf(t.r),this.g=gf(t.g),this.b=gf(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Bt){return di.fromWorkingColorSpace(vn.copy(this),t),Math.round(wn(vn.r*255,0,255))*65536+Math.round(wn(vn.g*255,0,255))*256+Math.round(wn(vn.b*255,0,255))}getHexString(t=Bt){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=di.workingColorSpace){di.fromWorkingColorSpace(vn.copy(this),e);const n=vn.r,i=vn.g,s=vn.b,o=Math.max(n,i,s),a=Math.min(n,i,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=di.workingColorSpace){return di.fromWorkingColorSpace(vn.copy(this),e),t.r=vn.r,t.g=vn.g,t.b=vn.b,t}getStyle(t=Bt){di.fromWorkingColorSpace(vn.copy(this),t);const e=vn.r,n=vn.g,i=vn.b;return t!==Bt?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){return this.getHSL(tr),this.setHSL(tr.h+t,tr.s+e,tr.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(tr),t.getHSL(Nh);const n=tc(tr.h,Nh.h,e),i=tc(tr.s,Nh.s,e),s=tc(tr.l,Nh.l,e);return this.setHSL(n,i,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,s=t.elements;return this.r=s[0]*e+s[3]*n+s[6]*i,this.g=s[1]*e+s[4]*n+s[7]*i,this.b=s[2]*e+s[5]*n+s[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const vn=new ti;ti.NAMES=aM;let tD=0;class lc extends sl{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:tD++}),this.uuid=Cs(),this.name="",this.type="Material",this.blending=mr,this.side=rc,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Iu,this.blendDst=Du,this.blendEquation=lr,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new ti(0,0,0),this.blendAlpha=0,this.depthFunc=Lu,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Dm,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=$r,this.stencilZFail=$r,this.stencilZPass=$r,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==mr&&(n.blending=this.blending),this.side!==rc&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==Iu&&(n.blendSrc=this.blendSrc),this.blendDst!==Du&&(n.blendDst=this.blendDst),this.blendEquation!==lr&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==Lu&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Dm&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==$r&&(n.stencilFail=this.stencilFail),this.stencilZFail!==$r&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==$r&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(e){const s=i(t.textures),o=i(t.images);s.length>0&&(n.textures=s),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const i=e.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=e[s].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class lM extends lc{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new ti(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new uo,this.combine=HF,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const Es=eD();function eD(){const r=new ArrayBuffer(4),t=new Float32Array(r),e=new Uint32Array(r),n=new Uint32Array(512),i=new Uint32Array(512);for(let l=0;l<256;++l){const c=l-127;c<-27?(n[l]=0,n[l|256]=32768,i[l]=24,i[l|256]=24):c<-14?(n[l]=1024>>-c-14,n[l|256]=1024>>-c-14|32768,i[l]=-c-1,i[l|256]=-c-1):c<=15?(n[l]=c+15<<10,n[l|256]=c+15<<10|32768,i[l]=13,i[l|256]=13):c<128?(n[l]=31744,n[l|256]=64512,i[l]=24,i[l|256]=24):(n[l]=31744,n[l|256]=64512,i[l]=13,i[l|256]=13)}const s=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64);for(let l=1;l<1024;++l){let c=l<<13,h=0;for(;!(c&8388608);)c<<=1,h-=8388608;c&=-8388609,h+=947912704,s[l]=c|h}for(let l=1024;l<2048;++l)s[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)o[l]=l<<23;o[31]=1199570944,o[32]=2147483648;for(let l=33;l<63;++l)o[l]=2147483648+(l-32<<23);o[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(a[l]=1024);return{floatView:t,uint32View:e,baseTable:n,shiftTable:i,mantissaTable:s,exponentTable:o,offsetTable:a}}function li(r){Math.abs(r)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),r=wn(r,-65504,65504),Es.floatView[0]=r;const t=Es.uint32View[0],e=t>>23&511;return Es.baseTable[e]+((t&8388607)>>Es.shiftTable[e])}function Rh(r){const t=r>>10;return Es.uint32View[0]=Es.mantissaTable[Es.offsetTable[t]+(r&1023)]+Es.exponentTable[t],Es.floatView[0]}const Ye=new B,Ch=new Re;class vi{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=Ou,this.updateRanges=[],this.gpuType=fi,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)Ch.fromBufferAttribute(this,e),Ch.applyMatrix3(t),this.setXY(e,Ch.x,Ch.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)Ye.fromBufferAttribute(this,e),Ye.applyMatrix3(t),this.setXYZ(e,Ye.x,Ye.y,Ye.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)Ye.fromBufferAttribute(this,e),Ye.applyMatrix4(t),this.setXYZ(e,Ye.x,Ye.y,Ye.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Ye.fromBufferAttribute(this,e),Ye.applyNormalMatrix(t),this.setXYZ(e,Ye.x,Ye.y,Ye.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Ye.fromBufferAttribute(this,e),Ye.transformDirection(t),this.setXYZ(e,Ye.x,Ye.y,Ye.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=Vn(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=jt(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Vn(e,this.array)),e}setX(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Vn(e,this.array)),e}setY(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Vn(e,this.array)),e}setZ(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Vn(e,this.array)),e}setW(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array),s=jt(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Ou&&(t.usage=this.usage),t}}class cM extends vi{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class hM extends vi{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class uM extends vi{constructor(t,e,n){super(new Uint16Array(t),e,n),this.isFloat16BufferAttribute=!0}getX(t){let e=Rh(this.array[t*this.itemSize]);return this.normalized&&(e=Vn(e,this.array)),e}setX(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize]=li(e),this}getY(t){let e=Rh(this.array[t*this.itemSize+1]);return this.normalized&&(e=Vn(e,this.array)),e}setY(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+1]=li(e),this}getZ(t){let e=Rh(this.array[t*this.itemSize+2]);return this.normalized&&(e=Vn(e,this.array)),e}setZ(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+2]=li(e),this}getW(t){let e=Rh(this.array[t*this.itemSize+3]);return this.normalized&&(e=Vn(e,this.array)),e}setW(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+3]=li(e),this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array)),this.array[t+0]=li(e),this.array[t+1]=li(n),this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array)),this.array[t+0]=li(e),this.array[t+1]=li(n),this.array[t+2]=li(i),this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array),s=jt(s,this.array)),this.array[t+0]=li(e),this.array[t+1]=li(n),this.array[t+2]=li(i),this.array[t+3]=li(s),this}}class Ps extends vi{constructor(t,e,n){super(new Float32Array(t),e,n)}}let nD=0;const _i=new Be,If=new un,Jo=new B,ci=new Ic,Pl=new Ic,cn=new B;class yo extends sl{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:nD++}),this.uuid=Cs(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(UI(t)?hM:cM)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new mi().getNormalMatrix(t);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(t),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return _i.makeRotationFromQuaternion(t),this.applyMatrix4(_i),this}rotateX(t){return _i.makeRotationX(t),this.applyMatrix4(_i),this}rotateY(t){return _i.makeRotationY(t),this.applyMatrix4(_i),this}rotateZ(t){return _i.makeRotationZ(t),this.applyMatrix4(_i),this}translate(t,e,n){return _i.makeTranslation(t,e,n),this.applyMatrix4(_i),this}scale(t,e,n){return _i.makeScale(t,e,n),this.applyMatrix4(_i),this}lookAt(t){return If.lookAt(t),If.updateMatrix(),this.applyMatrix4(If.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Jo).negate(),this.translate(Jo.x,Jo.y,Jo.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const s=t[n];e.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new Ps(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Ic);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new B(-1/0,-1/0,-1/0),new B(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,i=e.length;n<i;n++){const s=e[n];ci.setFromBufferAttribute(s),this.morphTargetsRelative?(cn.addVectors(this.boundingBox.min,ci.min),this.boundingBox.expandByPoint(cn),cn.addVectors(this.boundingBox.max,ci.max),this.boundingBox.expandByPoint(cn)):(this.boundingBox.expandByPoint(ci.min),this.boundingBox.expandByPoint(ci.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Ug);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new B,1/0);return}if(t){const n=this.boundingSphere.center;if(ci.setFromBufferAttribute(t),e)for(let s=0,o=e.length;s<o;s++){const a=e[s];Pl.setFromBufferAttribute(a),this.morphTargetsRelative?(cn.addVectors(ci.min,Pl.min),ci.expandByPoint(cn),cn.addVectors(ci.max,Pl.max),ci.expandByPoint(cn)):(ci.expandByPoint(Pl.min),ci.expandByPoint(Pl.max))}ci.getCenter(n);let i=0;for(let s=0,o=t.count;s<o;s++)cn.fromBufferAttribute(t,s),i=Math.max(i,n.distanceToSquared(cn));if(e)for(let s=0,o=e.length;s<o;s++){const a=e[s],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)cn.fromBufferAttribute(a,c),l&&(Jo.fromBufferAttribute(t,c),cn.add(Jo)),i=Math.max(i,n.distanceToSquared(cn))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position,i=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new vi(new Float32Array(4*n.count),4));const o=this.getAttribute("tangent"),a=[],l=[];for(let R=0;R<n.count;R++)a[R]=new B,l[R]=new B;const c=new B,h=new B,u=new B,d=new Re,f=new Re,p=new Re,x=new B,m=new B;function g(R,W,S){c.fromBufferAttribute(n,R),h.fromBufferAttribute(n,W),u.fromBufferAttribute(n,S),d.fromBufferAttribute(s,R),f.fromBufferAttribute(s,W),p.fromBufferAttribute(s,S),h.sub(c),u.sub(c),f.sub(d),p.sub(d);const b=1/(f.x*p.y-p.x*f.y);isFinite(b)&&(x.copy(h).multiplyScalar(p.y).addScaledVector(u,-f.y).multiplyScalar(b),m.copy(u).multiplyScalar(f.x).addScaledVector(h,-p.x).multiplyScalar(b),a[R].add(x),a[W].add(x),a[S].add(x),l[R].add(m),l[W].add(m),l[S].add(m))}let y=this.groups;y.length===0&&(y=[{start:0,count:t.count}]);for(let R=0,W=y.length;R<W;++R){const S=y[R],b=S.start,H=S.count;for(let z=b,Z=b+H;z<Z;z+=3)g(t.getX(z+0),t.getX(z+1),t.getX(z+2))}const _=new B,T=new B,w=new B,A=new B;function v(R){w.fromBufferAttribute(i,R),A.copy(w);const W=a[R];_.copy(W),_.sub(w.multiplyScalar(w.dot(W))).normalize(),T.crossVectors(A,W);const b=T.dot(l[R])<0?-1:1;o.setXYZW(R,_.x,_.y,_.z,b)}for(let R=0,W=y.length;R<W;++R){const S=y[R],b=S.start,H=S.count;for(let z=b,Z=b+H;z<Z;z+=3)v(t.getX(z+0)),v(t.getX(z+1)),v(t.getX(z+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new vi(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let d=0,f=n.count;d<f;d++)n.setXYZ(d,0,0,0);const i=new B,s=new B,o=new B,a=new B,l=new B,c=new B,h=new B,u=new B;if(t)for(let d=0,f=t.count;d<f;d+=3){const p=t.getX(d+0),x=t.getX(d+1),m=t.getX(d+2);i.fromBufferAttribute(e,p),s.fromBufferAttribute(e,x),o.fromBufferAttribute(e,m),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),a.fromBufferAttribute(n,p),l.fromBufferAttribute(n,x),c.fromBufferAttribute(n,m),a.add(h),l.add(h),c.add(h),n.setXYZ(p,a.x,a.y,a.z),n.setXYZ(x,l.x,l.y,l.z),n.setXYZ(m,c.x,c.y,c.z)}else for(let d=0,f=e.count;d<f;d+=3)i.fromBufferAttribute(e,d+0),s.fromBufferAttribute(e,d+1),o.fromBufferAttribute(e,d+2),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),n.setXYZ(d+0,h.x,h.y,h.z),n.setXYZ(d+1,h.x,h.y,h.z),n.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)cn.fromBufferAttribute(t,e),cn.normalize(),t.setXYZ(e,cn.x,cn.y,cn.z)}toNonIndexed(){function t(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let f=0,p=0;for(let x=0,m=l.length;x<m;x++){a.isInterleavedBufferAttribute?f=l[x]*a.data.stride+a.offset:f=l[x]*h;for(let g=0;g<h;g++)d[p++]=c[f++]}return new vi(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new yo,n=this.index.array,i=this.attributes;for(const a in i){const l=i[a],c=t(l,n);e.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[],c=s[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],f=t(d,n);l.push(f)}e.morphAttributes[a]=l}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const l in n){const c=n[l];t.data.attributes[l]=c.toJSON(t.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u];h.push(f.toJSON(t.data))}h.length>0&&(i[l]=h,s=!0)}s&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone(e));const i=t.attributes;for(const c in i){const h=i[c];this.setAttribute(c,h.clone(e))}const s=t.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,f=u.length;d<f;d++)h.push(u[d].clone(e));this.morphAttributes[c]=h}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const I_=new Be,zr=new qI,Ph=new Ug,D_=new B,Fh=new B,Ih=new B,Dh=new B,Df=new B,Lh=new B,L_=new B,Uh=new B;class fo extends un{constructor(t=new yo,e=new lM){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,o=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const a=this.morphTargetInfluences;if(s&&a){Lh.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const h=a[l],u=s[l];h!==0&&(Df.fromBufferAttribute(u,t),o?Lh.addScaledVector(Df,h):Lh.addScaledVector(Df.sub(e),h))}e.add(Lh)}return e}raycast(t,e){const n=this.geometry,i=this.material,s=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),Ph.copy(n.boundingSphere),Ph.applyMatrix4(s),zr.copy(t.ray).recast(t.near),!(Ph.containsPoint(zr.origin)===!1&&(zr.intersectSphere(Ph,D_)===null||zr.origin.distanceToSquared(D_)>(t.far-t.near)**2))&&(I_.copy(s).invert(),zr.copy(t.ray).applyMatrix4(I_),!(n.boundingBox!==null&&zr.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,zr)))}_computeIntersections(t,e,n){let i;const s=this.geometry,o=this.material,a=s.index,l=s.attributes.position,c=s.attributes.uv,h=s.attributes.uv1,u=s.attributes.normal,d=s.groups,f=s.drawRange;if(a!==null)if(Array.isArray(o))for(let p=0,x=d.length;p<x;p++){const m=d[p],g=o[m.materialIndex],y=Math.max(m.start,f.start),_=Math.min(a.count,Math.min(m.start+m.count,f.start+f.count));for(let T=y,w=_;T<w;T+=3){const A=a.getX(T),v=a.getX(T+1),R=a.getX(T+2);i=Bh(this,g,t,n,c,h,u,A,v,R),i&&(i.faceIndex=Math.floor(T/3),i.face.materialIndex=m.materialIndex,e.push(i))}}else{const p=Math.max(0,f.start),x=Math.min(a.count,f.start+f.count);for(let m=p,g=x;m<g;m+=3){const y=a.getX(m),_=a.getX(m+1),T=a.getX(m+2);i=Bh(this,o,t,n,c,h,u,y,_,T),i&&(i.faceIndex=Math.floor(m/3),e.push(i))}}else if(l!==void 0)if(Array.isArray(o))for(let p=0,x=d.length;p<x;p++){const m=d[p],g=o[m.materialIndex],y=Math.max(m.start,f.start),_=Math.min(l.count,Math.min(m.start+m.count,f.start+f.count));for(let T=y,w=_;T<w;T+=3){const A=T,v=T+1,R=T+2;i=Bh(this,g,t,n,c,h,u,A,v,R),i&&(i.faceIndex=Math.floor(T/3),i.face.materialIndex=m.materialIndex,e.push(i))}}else{const p=Math.max(0,f.start),x=Math.min(l.count,f.start+f.count);for(let m=p,g=x;m<g;m+=3){const y=m,_=m+1,T=m+2;i=Bh(this,o,t,n,c,h,u,y,_,T),i&&(i.faceIndex=Math.floor(m/3),e.push(i))}}}}function iD(r,t,e,n,i,s,o,a){let l;if(t.side===zs?l=n.intersectTriangle(o,s,i,!0,a):l=n.intersectTriangle(i,s,o,t.side===rc,a),l===null)return null;Uh.copy(a),Uh.applyMatrix4(r.matrixWorld);const c=e.ray.origin.distanceTo(Uh);return c<e.near||c>e.far?null:{distance:c,point:Uh.clone(),object:r}}function Bh(r,t,e,n,i,s,o,a,l,c){r.getVertexPosition(a,Fh),r.getVertexPosition(l,Ih),r.getVertexPosition(c,Dh);const h=iD(r,t,e,n,Fh,Ih,Dh,L_);if(h){const u=new B;zi.getBarycoord(L_,Fh,Ih,Dh,u),i&&(h.uv=zi.getInterpolatedAttribute(i,a,l,c,u,new Re)),s&&(h.uv1=zi.getInterpolatedAttribute(s,a,l,c,u,new Re)),o&&(h.normal=zi.getInterpolatedAttribute(o,a,l,c,u,new B),h.normal.dot(n.direction)>0&&h.normal.multiplyScalar(-1));const d={a,b:l,c,normal:new B,materialIndex:0};zi.getNormal(Fh,Ih,Dh,d.normal),h.face=d,h.barycoord=u}return h}class Dc extends yo{constructor(t=1,e=1,n=1,i=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:s,depthSegments:o};const a=this;i=Math.floor(i),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;p("z","y","x",-1,-1,n,e,t,o,s,0),p("z","y","x",1,-1,n,e,-t,o,s,1),p("x","z","y",1,1,t,n,e,i,o,2),p("x","z","y",1,-1,t,n,-e,i,o,3),p("x","y","z",1,-1,t,e,n,i,s,4),p("x","y","z",-1,-1,t,e,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new Ps(c,3)),this.setAttribute("normal",new Ps(h,3)),this.setAttribute("uv",new Ps(u,2));function p(x,m,g,y,_,T,w,A,v,R,W){const S=T/v,b=w/R,H=T/2,z=w/2,Z=A/2,tt=v+1,q=R+1;let nt=0,$=0;const ct=new B;for(let ut=0;ut<q;ut++){const mt=ut*b-z;for(let ne=0;ne<tt;ne++){const ce=ne*S-H;ct[x]=ce*y,ct[m]=mt*_,ct[g]=Z,c.push(ct.x,ct.y,ct.z),ct[x]=0,ct[m]=0,ct[g]=A>0?1:-1,h.push(ct.x,ct.y,ct.z),u.push(ne/v),u.push(1-ut/R),nt+=1}}for(let ut=0;ut<R;ut++)for(let mt=0;mt<v;mt++){const ne=d+mt+tt*ut,ce=d+mt+tt*(ut+1),J=d+(mt+1)+tt*(ut+1),lt=d+(mt+1)+tt*ut;l.push(ne,ce,lt),l.push(ce,J,lt),$+=6}a.addGroup(f,$,W),f+=$,d+=nt}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Dc(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function dM(r){const t={};for(const e in r){t[e]={};for(const n in r[e]){const i=r[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function sD(r){const t=[];for(let e=0;e<r.length;e++)t.push(r[e].clone());return t}const rD=`
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`,oD=`
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`;class aD extends lc{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=rD,this.fragmentShader=oD,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=dM(t.uniforms),this.uniformsGroups=sD(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const o=this.uniforms[i].value;o&&o.isTexture?e.uniforms[i]={type:"t",value:o.toJSON(t).uuid}:o&&o.isColor?e.uniforms[i]={type:"c",value:o.getHex()}:o&&o.isVector2?e.uniforms[i]={type:"v2",value:o.toArray()}:o&&o.isVector3?e.uniforms[i]={type:"v3",value:o.toArray()}:o&&o.isVector4?e.uniforms[i]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?e.uniforms[i]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?e.uniforms[i]={type:"m4",value:o.toArray()}:e.uniforms[i]={value:o}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class fM extends un{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Be,this.projectionMatrix=new Be,this.projectionMatrixInverse=new Be,this.coordinateSystem=ki}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const er=new B,U_=new Re,B_=new Re;class Ms extends fM{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=ac*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(Jl*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return ac*2*Math.atan(Math.tan(Jl*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){er.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(er.x,er.y).multiplyScalar(-t/er.z),er.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(er.x,er.y).multiplyScalar(-t/er.z)}getViewSize(t,e){return this.getViewBounds(t,U_,B_),e.subVectors(B_,U_)}setViewOffset(t,e,n,i,s,o){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(Jl*.5*this.fov)/this.zoom,n=2*e,i=this.aspect*n,s=-.5*i;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*i/l,e-=o.offsetY*n/c,i*=o.width/l,n*=o.height/c}const a=this.filmOffset;a!==0&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const ta=-90,ea=1;class pM extends un{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Ms(ta,ea,t,e);i.layers=this.layers,this.add(i);const s=new Ms(ta,ea,t,e);s.layers=this.layers,this.add(s);const o=new Ms(ta,ea,t,e);o.layers=this.layers,this.add(o);const a=new Ms(ta,ea,t,e);a.layers=this.layers,this.add(a);const l=new Ms(ta,ea,t,e);l.layers=this.layers,this.add(l);const c=new Ms(ta,ea,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,s,o,a,l]=e;for(const c of e)this.remove(c);if(t===ki)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===ho)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,o,a,l,c,h]=this.children,u=t.getRenderTarget(),d=t.getActiveCubeFace(),f=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const x=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,s),t.setRenderTarget(n,1,i),t.render(e,o),t.setRenderTarget(n,2,i),t.render(e,a),t.setRenderTarget(n,3,i),t.render(e,l),t.setRenderTarget(n,4,i),t.render(e,c),n.texture.generateMipmaps=x,t.setRenderTarget(n,5,i),t.render(e,h),t.setRenderTarget(u,d,f),t.xr.enabled=p,n.texture.needsPMREMUpdate=!0}}class Bg extends $n{constructor(t,e,n,i,s,o,a,l,c,h){t=t!==void 0?t:[],e=e!==void 0?e:lo,super(t,e,n,i,s,o,a,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class lD extends HI{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new Bg(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:Qn}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new Dc(5,5,5),s=new aD({name:"CubemapFromEquirect",uniforms:dM(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:zs,blending:Wa});s.uniforms.tEquirect.value=e;const o=new fo(i,s),a=e.minFilter;return e.minFilter===Ns&&(e.minFilter=Qn),new pM(1,10,this).update(t,o),e.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,i){const s=t.getRenderTarget();for(let o=0;o<6;o++)t.setRenderTarget(this,o),t.clear(e,n,i);t.setRenderTarget(s)}}class mM extends un{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new uo,this.environmentIntensity=1,this.environmentRotation=new uo,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class gM{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=Ou,this.updateRanges=[],this.version=0,this.uuid=Cs()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,s=this.stride;i<s;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Cs()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Cs()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Ln=new B;class Og{constructor(t,e,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)Ln.fromBufferAttribute(this,e),Ln.applyMatrix4(t),this.setXYZ(e,Ln.x,Ln.y,Ln.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Ln.fromBufferAttribute(this,e),Ln.applyNormalMatrix(t),this.setXYZ(e,Ln.x,Ln.y,Ln.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Ln.fromBufferAttribute(this,e),Ln.transformDirection(t),this.setXYZ(e,Ln.x,Ln.y,Ln.z);return this}getComponent(t,e){let n=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(n=Vn(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=jt(n,this.array)),this.data.array[t*this.data.stride+this.offset+e]=n,this}setX(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=Vn(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=Vn(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=Vn(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=Vn(e,this.array)),e}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array),s=jt(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[i+s])}return new vi(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Og(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class cD extends lc{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new ti(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}class hD extends $n{constructor(t=null,e=1,n=1,i,s,o,a,l,c=xn,h=xn,u,d){super(null,o,a,l,c,h,i,s,u,d),this.isDataTexture=!0,this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class uD extends vi{constructor(t,e,n,i=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Lf=new B,dD=new B,fD=new mi;class rr{constructor(t=new B(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Lf.subVectors(n,e).cross(dD.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(Lf),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:e.copy(t.start).addScaledVector(n,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||fD.getNormalMatrix(t),i=this.coplanarPoint(Lf).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Gr=new Ug,Oh=new B;class xM{constructor(t=new rr,e=new rr,n=new rr,i=new rr,s=new rr,o=new rr){this.planes=[t,e,n,i,s,o]}set(t,e,n,i,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(s),a[5].copy(o),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=ki){const n=this.planes,i=t.elements,s=i[0],o=i[1],a=i[2],l=i[3],c=i[4],h=i[5],u=i[6],d=i[7],f=i[8],p=i[9],x=i[10],m=i[11],g=i[12],y=i[13],_=i[14],T=i[15];if(n[0].setComponents(l-s,d-c,m-f,T-g).normalize(),n[1].setComponents(l+s,d+c,m+f,T+g).normalize(),n[2].setComponents(l+o,d+h,m+p,T+y).normalize(),n[3].setComponents(l-o,d-h,m-p,T-y).normalize(),n[4].setComponents(l-a,d-u,m-x,T-_).normalize(),e===ki)n[5].setComponents(l+a,d+u,m+x,T+_).normalize();else if(e===ho)n[5].setComponents(a,u,x,_).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),Gr.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),Gr.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(Gr)}intersectsSprite(t){return Gr.center.set(0,0,0),Gr.radius=.7071067811865476,Gr.applyMatrix4(t.matrixWorld),this.intersectsSphere(Gr)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(Oh.x=i.normal.x>0?t.max.x:t.min.x,Oh.y=i.normal.y>0?t.max.y:t.min.y,Oh.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(Oh)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class pD extends $n{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=xn,this.minFilter=xn,this.generateMipmaps=!1,this.needsUpdate=!0}}class Lc extends $n{constructor(t,e,n,i,s,o,a,l,c,h=Qr){if(h!==Qr&&h!==Xa)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===Qr&&(n=gn),n===void 0&&h===Xa&&(n=Pc),super(null,i,s,o,a,l,h,n,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:xn,this.minFilter=l!==void 0?l:xn,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}class zg extends yo{constructor(t=1,e=32,n=16,i=0,s=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:s,thetaStart:o,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new B,d=new B,f=[],p=[],x=[],m=[];for(let g=0;g<=n;g++){const y=[],_=g/n;let T=0;g===0&&o===0?T=.5/e:g===n&&l===Math.PI&&(T=-.5/e);for(let w=0;w<=e;w++){const A=w/e;u.x=-t*Math.cos(i+A*s)*Math.sin(o+_*a),u.y=t*Math.cos(o+_*a),u.z=t*Math.sin(i+A*s)*Math.sin(o+_*a),p.push(u.x,u.y,u.z),d.copy(u).normalize(),x.push(d.x,d.y,d.z),m.push(A+T,1-_),y.push(c++)}h.push(y)}for(let g=0;g<n;g++)for(let y=0;y<e;y++){const _=h[g][y+1],T=h[g][y],w=h[g+1][y],A=h[g+1][y+1];(g!==0||o>0)&&f.push(_,T,A),(g!==n-1||l<Math.PI)&&f.push(T,w,A)}this.setIndex(f),this.setAttribute("position",new Ps(p,3)),this.setAttribute("normal",new Ps(x,3)),this.setAttribute("uv",new Ps(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new zg(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class So extends un{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new ti(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}}class mD extends So{constructor(t,e,n){super(t,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(un.DEFAULT_UP),this.updateMatrix(),this.groundColor=new ti(e)}copy(t,e){return super.copy(t,e),this.groundColor.copy(t.groundColor),this}}const Uf=new Be,O_=new B,z_=new B;class Gg{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Re(512,512),this.map=null,this.mapPass=null,this.matrix=new Be,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new xM,this._frameExtents=new Re(1,1),this._viewportCount=1,this._viewports=[new ve(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;O_.setFromMatrixPosition(t.matrixWorld),e.position.copy(O_),z_.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(z_),e.updateMatrixWorld(),Uf.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Uf),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(Uf)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class gD extends Gg{constructor(){super(new Ms(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,n=ac*2*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=t.distance||e.far;(n!==e.fov||i!==e.aspect||s!==e.far)&&(e.fov=n,e.aspect=i,e.far=s,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}class _M extends So{constructor(t,e,n=0,i=Math.PI/3,s=0,o=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(un.DEFAULT_UP),this.updateMatrix(),this.target=new un,this.distance=n,this.angle=i,this.penumbra=s,this.decay=o,this.map=null,this.shadow=new gD}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}const G_=new Be,Fl=new B,Bf=new B;class xD extends Gg{constructor(){super(new Ms(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Re(4,2),this._viewportCount=6,this._viewports=[new ve(2,1,1,1),new ve(0,1,1,1),new ve(3,1,1,1),new ve(1,1,1,1),new ve(3,0,1,1),new ve(1,0,1,1)],this._cubeDirections=[new B(1,0,0),new B(-1,0,0),new B(0,0,1),new B(0,0,-1),new B(0,1,0),new B(0,-1,0)],this._cubeUps=[new B(0,1,0),new B(0,1,0),new B(0,1,0),new B(0,1,0),new B(0,0,1),new B(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,s=t.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),Fl.setFromMatrixPosition(t.matrixWorld),n.position.copy(Fl),Bf.copy(n.position),Bf.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(Bf),n.updateMatrixWorld(),i.makeTranslation(-Fl.x,-Fl.y,-Fl.z),G_.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(G_)}}class _D extends So{constructor(t,e,n=0,i=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new xD}get power(){return this.intensity*4*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class kg extends fM{constructor(t=-1,e=1,n=1,i=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-t,o=n+t,a=i+e,l=i-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,o=s+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}class yD extends Gg{constructor(){super(new kg(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class SD extends So{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(un.DEFAULT_UP),this.updateMatrix(),this.target=new un,this.shadow=new yD}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class TD extends So{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class MD extends So{constructor(t,e,n=10,i=10){super(t,e),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}class vD{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new B)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,i=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.282095),e.addScaledVector(o[1],.488603*i),e.addScaledVector(o[2],.488603*s),e.addScaledVector(o[3],.488603*n),e.addScaledVector(o[4],1.092548*(n*i)),e.addScaledVector(o[5],1.092548*(i*s)),e.addScaledVector(o[6],.315392*(3*s*s-1)),e.addScaledVector(o[7],1.092548*(n*s)),e.addScaledVector(o[8],.546274*(n*n-i*i)),e}getIrradianceAt(t,e){const n=t.x,i=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.886227),e.addScaledVector(o[1],2*.511664*i),e.addScaledVector(o[2],2*.511664*s),e.addScaledVector(o[3],2*.511664*n),e.addScaledVector(o[4],2*.429043*n*i),e.addScaledVector(o[5],2*.429043*i*s),e.addScaledVector(o[6],.743125*s*s-.247708),e.addScaledVector(o[7],2*.429043*n*s),e.addScaledVector(o[8],.429043*(n*n-i*i)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+i*3);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+i*3);return t}static getBasisAt(t,e){const n=t.x,i=t.y,s=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*s,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*s,e[6]=.315392*(3*s*s-1),e[7]=1.092548*n*s,e[8]=.546274*(n*n-i*i)}}class bD extends So{constructor(t=new vD,e=1){super(void 0,e),this.isLightProbe=!0,this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}class ED extends gM{constructor(t,e,n=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}const AD=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class wD{constructor(t){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(t),this.hasAnimation=t.object.isSkinnedMesh===!0,this.refreshUniforms=AD,this.renderId=0}firstInitialization(t){return this.renderObjects.has(t)===!1?(this.getRenderObjectData(t),!0):!1}getRenderObjectData(t){let e=this.renderObjects.get(t);return e===void 0&&(e={material:this.getMaterialData(t.material),worldMatrix:t.object.matrixWorld.clone()},t.object.center&&(e.center=t.object.center.clone()),t.object.morphTargetInfluences&&(e.morphTargetInfluences=t.object.morphTargetInfluences.slice()),t.bundle!==null&&(e.version=t.bundle.version),this.renderObjects.set(t,e)),e}containsNode(t){const e=t.material;for(const n in e)if(e[n]&&e[n].isNode)return!0;return t.renderer.nodes.modelViewMatrix!==null||t.renderer.nodes.modelNormalViewMatrix!==null}getMaterialData(t){const e={};for(const n of this.refreshUniforms){const i=t[n];i!=null&&(typeof i=="object"&&i.clone!==void 0?i.isTexture===!0?e[n]={id:i.id,version:i.version}:e[n]=i.clone():e[n]=i)}return e}equals(t){const{object:e,material:n}=t,i=this.getRenderObjectData(t);if(i.worldMatrix.equals(e.matrixWorld)!==!0)return i.worldMatrix.copy(e.matrixWorld),!1;const s=i.material;for(const o in s){const a=s[o],l=n[o];if(a.equals!==void 0){if(a.equals(l)===!1)return a.copy(l),!1}else if(l.isTexture===!0){if(a.id!==l.id||a.version!==l.version)return a.id=l.id,a.version=l.version,!1}else if(a!==l)return s[o]=l,!1}if(i.morphTargetInfluences){let o=!1;for(let a=0;a<i.morphTargetInfluences.length;a++)i.morphTargetInfluences[a]!==e.morphTargetInfluences[a]&&(o=!0);if(o)return!0}return i.center&&i.center.equals(e.center)===!1?(i.center.copy(e.center),!0):(t.bundle!==null&&(i.version=t.bundle.version),!0)}needsRefresh(t,e){if(this.hasNode||this.hasAnimation||this.firstInitialization(t))return!0;const{renderId:n}=e;if(this.renderId!==n)return this.renderId=n,!0;const i=t.object.static===!0,s=t.bundle!==null&&t.bundle.static===!0&&this.getRenderObjectData(t).version===t.bundle.version;return i||s?!1:this.equals(t)!==!0}}function cc(r,t=0){let e=3735928559^t,n=1103547991^t;if(r instanceof Array)for(let i=0,s;i<r.length;i++)s=r[i],e=Math.imul(e^s,2654435761),n=Math.imul(n^s,1597334677);else for(let i=0,s;i<r.length;i++)s=r.charCodeAt(i),e=Math.imul(e^s,2654435761),n=Math.imul(n^s,1597334677);return e=Math.imul(e^e>>>16,2246822507),e^=Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(e^e>>>13,3266489909),4294967296*(2097151&n)+(e>>>0)}const ND=r=>cc(r),yM=r=>cc(r),zu=(...r)=>cc(r);function SM(r,t=!1){const e=[];r.isNode===!0&&(e.push(r.id),r=r.getSelf());for(const{property:n,childNode:i}of Gu(r))e.push(e,cc(n.slice(0,-4)),i.getCacheKey(t));return cc(e)}function*Gu(r,t=!1){for(const e in r){if(e.startsWith("_")===!0)continue;const n=r[e];if(Array.isArray(n)===!0)for(let i=0;i<n.length;i++){const s=n[i];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:i,childNode:s})}else if(n&&n.isNode===!0)yield{property:e,childNode:n};else if(typeof n=="object")for(const i in n){const s=n[i];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:i,childNode:s})}}}function ku(r){if(r==null)return null;const t=typeof r;return r.isNode===!0?"node":t==="number"?"float":t==="boolean"?"bool":t==="string"?"string":t==="function"?"shader":r.isVector2===!0?"vec2":r.isVector3===!0?"vec3":r.isVector4===!0?"vec4":r.isMatrix3===!0?"mat3":r.isMatrix4===!0?"mat4":r.isColor===!0?"color":r instanceof ArrayBuffer?"ArrayBuffer":null}function TM(r,...t){const e=r?r.slice(-4):void 0;return t.length===1&&(e==="vec2"?t=[t[0],t[0]]:e==="vec3"?t=[t[0],t[0],t[0]]:e==="vec4"&&(t=[t[0],t[0],t[0],t[0]])),r==="color"?new ti(...t):e==="vec2"?new Re(...t):e==="vec3"?new B(...t):e==="vec4"?new ve(...t):e==="mat3"?new mi(...t):e==="mat4"?new Be(...t):r==="bool"?t[0]||!1:r==="float"||r==="int"||r==="uint"?t[0]||0:r==="string"?t[0]||"":r==="ArrayBuffer"?CD(t[0]):null}function RD(r){let t="";const e=new Uint8Array(r);for(let n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return btoa(t)}function CD(r){return Uint8Array.from(atob(r),t=>t.charCodeAt(0)).buffer}const k_={VERTEX:"vertex",FRAGMENT:"fragment"},te={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},PD=["fragment","vertex"],V_=["setup","analyze","generate"],H_=[...PD,"compute"],ol=["x","y","z","w"];let FD=0;class Kt extends sl{static get type(){return"Node"}constructor(t=null){super(),this.nodeType=t,this.updateType=te.NONE,this.updateBeforeType=te.NONE,this.updateAfterType=te.NONE,this.uuid=LI.generateUUID(),this.version=0,this._cacheKey=null,this._cacheKeyVersion=0,this.global=!1,this.isNode=!0,Object.defineProperty(this,"id",{value:FD++})}set needsUpdate(t){t===!0&&this.version++}get type(){return this.constructor.type}onUpdate(t,e){return this.updateType=e,this.update=t.bind(this.getSelf()),this}onFrameUpdate(t){return this.onUpdate(t,te.FRAME)}onRenderUpdate(t){return this.onUpdate(t,te.RENDER)}onObjectUpdate(t){return this.onUpdate(t,te.OBJECT)}onReference(t){return this.updateReference=t.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:t}of Gu(this))yield t}dispose(){this.dispatchEvent({type:"dispose"})}traverse(t){t(this);for(const e of this.getChildren())e.traverse(t)}getCacheKey(t=!1){return t=t||this.version!==this._cacheKeyVersion,(t===!0||this._cacheKey===null)&&(this._cacheKey=SM(this,t),this._cacheKeyVersion=this.version),this._cacheKey}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(t){const e=this.getNodeType(t);return t.getElementType(e)}getNodeType(t){const e=t.getNodeProperties(this);return e.outputNode?e.outputNode.getNodeType(t):this.nodeType}getShared(t){const e=this.getHash(t);return t.getNodeFromHash(e)||this}setup(t){const e=t.getNodeProperties(this);let n=0;for(const i of this.getChildren())e["node"+n++]=i;return null}analyze(t){if(t.increaseUsage(this)===1){const n=t.getNodeProperties(this);for(const i of Object.values(n))i&&i.isNode===!0&&i.build(t)}}generate(t,e){const{outputNode:n}=t.getNodeProperties(this);if(n&&n.isNode===!0)return n.build(t,e)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(t,e=null){const n=this.getShared(t);if(this!==n)return n.build(t,e);t.addNode(this),t.addChain(this);let i=null;const s=t.getBuildStage();if(s==="setup"){this.updateReference(t);const o=t.getNodeProperties(this);if(o.initialized!==!0){const a=t.stack.nodes.length;o.initialized=!0,o.outputNode=this.setup(t),o.outputNode!==null&&t.stack.nodes.length;for(const l of Object.values(o))l&&l.isNode===!0&&l.build(t)}}else if(s==="analyze")this.analyze(t);else if(s==="generate")if(this.generate.length===1){const a=this.getNodeType(t),l=t.getDataFromNode(this);i=l.snippet,i===void 0?(i=this.generate(t)||"",l.snippet=i):l.flowCodes!==void 0&&t.context.nodeBlock!==void 0&&t.addFlowCodeHierarchy(this,t.context.nodeBlock),i=t.format(i,a,e)}else i=this.generate(t,e)||"";return t.removeChain(this),i}getSerializeChildren(){return Gu(this)}serialize(t){const e=this.getSerializeChildren(),n={};for(const{property:i,index:s,childNode:o}of e)s!==void 0?(n[i]===void 0&&(n[i]=Number.isInteger(s)?[]:{}),n[i][s]=o.toJSON(t.meta).uuid):n[i]=o.toJSON(t.meta).uuid;Object.keys(n).length>0&&(t.inputNodes=n)}deserialize(t){if(t.inputNodes!==void 0){const e=t.meta.nodes;for(const n in t.inputNodes)if(Array.isArray(t.inputNodes[n])){const i=[];for(const s of t.inputNodes[n])i.push(e[s]);this[n]=i}else if(typeof t.inputNodes[n]=="object"){const i={};for(const s in t.inputNodes[n]){const o=t.inputNodes[n][s];i[s]=e[o]}this[n]=i}else{const i=t.inputNodes[n];this[n]=e[i]}}}toJSON(t){const{uuid:e,type:n}=this,i=t===void 0||typeof t=="string";i&&(t={textures:{},images:{},nodes:{}});let s=t.nodes[e];s===void 0&&(s={uuid:e,type:n,meta:t,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},i!==!0&&(t.nodes[s.uuid]=s),this.serialize(s),delete s.meta);function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}if(i){const a=o(t.textures),l=o(t.images),c=o(t.nodes);a.length>0&&(s.textures=a),l.length>0&&(s.images=l),c.length>0&&(s.nodes=c)}return s}}class Uc extends Kt{static get type(){return"ArrayElementNode"}constructor(t,e){super(),this.node=t,this.indexNode=e,this.isArrayElementNode=!0}getNodeType(t){return this.node.getElementType(t)}generate(t){const e=this.node.build(t),n=this.indexNode.build(t,"uint");return`${e}[ ${n} ]`}}class MM extends Kt{static get type(){return"ConvertNode"}constructor(t,e){super(),this.node=t,this.convertTo=e}getNodeType(t){const e=this.node.getNodeType(t);let n=null;for(const i of this.convertTo.split("|"))(n===null||t.getTypeLength(e)===t.getTypeLength(i))&&(n=i);return n}serialize(t){super.serialize(t),t.convertTo=this.convertTo}deserialize(t){super.deserialize(t),this.convertTo=t.convertTo}generate(t,e){const n=this.node,i=this.getNodeType(t),s=n.build(t,i);return t.format(s,i,e)}}class an extends Kt{static get type(){return"TempNode"}constructor(t){super(t),this.isTempNode=!0}hasDependencies(t){return t.getDataFromNode(this).usageCount>1}build(t,e){if(t.getBuildStage()==="generate"){const i=t.getVectorType(this.getNodeType(t,e)),s=t.getDataFromNode(this);if(s.propertyName!==void 0)return t.format(s.propertyName,i,e);if(i!=="void"&&e!=="void"&&this.hasDependencies(t)){const o=super.build(t,i),a=t.getVarFromNode(this,null,i),l=t.getPropertyName(a);return t.addLineFlowCode(`${l} = ${o}`,this),s.snippet=o,s.propertyName=l,t.format(s.propertyName,i,e)}}return super.build(t,e)}}class ID extends an{static get type(){return"JoinNode"}constructor(t=[],e=null){super(e),this.nodes=t}getNodeType(t){return this.nodeType!==null?t.getVectorType(this.nodeType):t.getTypeFromLength(this.nodes.reduce((e,n)=>e+t.getTypeLength(n.getNodeType(t)),0))}generate(t,e){const n=this.getNodeType(t),i=this.nodes,s=t.getComponentType(n),o=[];for(const l of i){let c=l.build(t);const h=t.getComponentType(l.getNodeType(t));h!==s&&(c=t.format(c,h,s)),o.push(c)}const a=`${t.getType(n)}( ${o.join(", ")} )`;return t.format(a,n,e)}}const DD=ol.join("");class $_ extends Kt{static get type(){return"SplitNode"}constructor(t,e="x"){super(),this.node=t,this.components=e,this.isSplitNode=!0}getVectorLength(){let t=this.components.length;for(const e of this.components)t=Math.max(ol.indexOf(e)+1,t);return t}getComponentType(t){return t.getComponentType(this.node.getNodeType(t))}getNodeType(t){return t.getTypeFromLength(this.components.length,this.getComponentType(t))}generate(t,e){const n=this.node,i=t.getTypeLength(n.getNodeType(t));let s=null;if(i>1){let o=null;this.getVectorLength()>=i&&(o=t.getTypeFromLength(this.getVectorLength(),this.getComponentType(t)));const l=n.build(t,o);this.components.length===i&&this.components===DD.slice(0,this.components.length)?s=t.format(l,o,e):s=t.format(`${l}.${this.components}`,this.getNodeType(t),e)}else s=n.build(t,e);return s}serialize(t){super.serialize(t),t.components=this.components}deserialize(t){super.deserialize(t),this.components=t.components}}class LD extends an{static get type(){return"SetNode"}constructor(t,e,n){super(),this.sourceNode=t,this.components=e,this.targetNode=n}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{sourceNode:e,components:n,targetNode:i}=this,s=this.getNodeType(t),o=t.getTypeFromLength(n.length,i.getNodeType(t)),a=i.build(t,o),l=e.build(t,s),c=t.getTypeLength(s),h=[];for(let u=0;u<c;u++){const d=ol[u];d===n[0]?(h.push(a),u+=n.length-1):h.push(l+"."+d)}return`${t.getType(s)}( ${h.join(", ")} )`}}class UD extends an{static get type(){return"FlipNode"}constructor(t,e){super(),this.sourceNode=t,this.components=e}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{components:e,sourceNode:n}=this,i=this.getNodeType(t),s=n.build(t),o=t.getVarFromNode(this),a=t.getPropertyName(o);t.addLineFlowCode(a+" = "+s,this);const l=t.getTypeLength(i),c=[];let h=0;for(let u=0;u<l;u++){const d=ol[u];d===e[h]?(c.push("1.0 - "+(a+"."+d)),h++):c.push(a+"."+d)}return`${t.getType(i)}( ${c.join(", ")} )`}}class Vg extends Kt{static get type(){return"InputNode"}constructor(t,e=null){super(e),this.isInputNode=!0,this.value=t,this.precision=null}getNodeType(){return this.nodeType===null?ku(this.value):this.nodeType}getInputType(t){return this.getNodeType(t)}setPrecision(t){return this.precision=t,this}serialize(t){super.serialize(t),t.value=this.value,this.value&&this.value.toArray&&(t.value=this.value.toArray()),t.valueType=ku(this.value),t.nodeType=this.nodeType,t.valueType==="ArrayBuffer"&&(t.value=RD(t.value)),t.precision=this.precision}deserialize(t){super.deserialize(t),this.nodeType=t.nodeType,this.value=Array.isArray(t.value)?TM(t.valueType,...t.value):t.value,this.precision=t.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(t.value))}generate(){console.warn("Abstract function.")}}class Gs extends Vg{static get type(){return"ConstNode"}constructor(t,e=null){super(t,e),this.isConstNode=!0}generateConst(t){return t.generateConst(this.getNodeType(t),this.value)}generate(t,e){const n=this.getNodeType(t);return t.format(this.generateConst(t),n,e)}}let Ya=null;const Ta=new Map;function K(r,t){if(Ta.has(r)){console.warn(`Redefinition of method chaining ${r}`);return}if(typeof t!="function")throw new Error(`Node element ${r} is not a function`);Ta.set(r,t)}const vM=r=>r.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),W_=r=>vM(r).split("").sort().join(""),bM={setup(r,t){const e=t.shift();return r(hd(e),...t)},get(r,t,e){if(typeof t=="string"&&r[t]===void 0){if(r.isStackNode!==!0&&t==="assign")return(...n)=>(Ya.assign(e,...n),e);if(Ta.has(t)){const n=Ta.get(t);return r.isStackNode?(...i)=>e.add(n(...i)):(...i)=>n(e,...i)}else{if(t==="self")return r;if(t.endsWith("Assign")&&Ta.has(t.slice(0,t.length-6))){const n=Ta.get(t.slice(0,t.length-6));return r.isStackNode?(...i)=>e.assign(i[0],n(...i)):(...i)=>e.assign(n(e,...i))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0)return t=vM(t),ht(new $_(e,t));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=W_(t.slice(3).toLowerCase()),n=>ht(new LD(r,t,n));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=W_(t.slice(4).toLowerCase()),()=>ht(new UD(ht(r),t));if(t==="width"||t==="height"||t==="depth")return t==="width"?t="x":t==="height"?t="y":t==="depth"&&(t="z"),ht(new $_(r,t));if(/^\d+$/.test(t)===!0)return ht(new Uc(e,new Gs(Number(t),"uint")))}}}return Reflect.get(r,t,e)},set(r,t,e,n){return typeof t=="string"&&r[t]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0||t==="width"||t==="height"||t==="depth"||/^\d+$/.test(t)===!0)?(n[t].assign(e),!0):Reflect.set(r,t,e,n)}},Of=new WeakMap,q_=new WeakMap,BD=function(r,t=null){const e=ku(r);if(e==="node"){let n=Of.get(r);return n===void 0&&(n=new Proxy(r,bM),Of.set(r,n),Of.set(n,n)),n}else{if(t===null&&(e==="float"||e==="boolean")||e&&e!=="shader"&&e!=="string")return ht(Um(r,t));if(e==="shader")return qt(r)}return r},OD=function(r,t=null){for(const e in r)r[e]=ht(r[e],t);return r},zD=function(r,t=null){const e=r.length;for(let n=0;n<e;n++)r[n]=ht(r[n],t);return r},GD=function(r,t=null,e=null,n=null){const i=s=>ht(n!==null?Object.assign(s,n):s);return t===null?(...s)=>i(new r(...Ia(s))):e!==null?(e=ht(e),(...s)=>i(new r(t,...Ia(s),e))):(...s)=>i(new r(t,...Ia(s)))},kD=function(r,...t){return ht(new r(...Ia(t)))};class VD extends Kt{constructor(t,e){super(),this.shaderNode=t,this.inputNodes=e}getNodeType(t){return this.shaderNode.nodeType||this.getOutputNode(t).getNodeType(t)}call(t){const{shaderNode:e,inputNodes:n}=this,i=t.getNodeProperties(e);if(i.onceOutput)return i.onceOutput;let s=null;if(e.layout){let o=q_.get(t.constructor);o===void 0&&(o=new WeakMap,q_.set(t.constructor,o));let a=o.get(e);a===void 0&&(a=ht(t.buildFunctionNode(e)),o.set(e,a)),t.currentFunctionNode!==null&&t.currentFunctionNode.includes.push(a),s=ht(a.call(n))}else{const o=e.jsFunc,a=n!==null?o(n,t):o(t);s=ht(a)}return e.once&&(i.onceOutput=s),s}getOutputNode(t){const e=t.getNodeProperties(this);return e.outputNode===null&&(e.outputNode=this.setupOutput(t)),e.outputNode}setup(t){return this.getOutputNode(t)}setupOutput(t){return t.addStack(),t.stack.outputNode=this.call(t),t.removeStack()}generate(t,e){return this.getOutputNode(t).build(t,e)}}class HD extends Kt{constructor(t,e){super(e),this.jsFunc=t,this.layout=null,this.global=!0,this.once=!1}setLayout(t){return this.layout=t,this}call(t=null){return hd(t),ht(new VD(this,t))}setup(){return this.call()}}const $D=[!1,!0],WD=[0,1,2,3],qD=[-1,-2],EM=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],Hg=new Map;for(const r of $D)Hg.set(r,new Gs(r));const $g=new Map;for(const r of WD)$g.set(r,new Gs(r,"uint"));const Wg=new Map([...$g].map(r=>new Gs(r.value,"int")));for(const r of qD)Wg.set(r,new Gs(r,"int"));const ld=new Map([...Wg].map(r=>new Gs(r.value)));for(const r of EM)ld.set(r,new Gs(r));for(const r of EM)ld.set(-r,new Gs(-r));const cd={bool:Hg,uint:$g,ints:Wg,float:ld},X_=new Map([...Hg,...ld]),Um=(r,t)=>X_.has(r)?X_.get(r):r.isNode===!0?r:new Gs(r,t),XD=r=>{try{return r.getNodeType()}catch{return}},nn=function(r,t=null){return(...e)=>{if((e.length===0||!["bool","float","int","uint"].includes(r)&&e.every(i=>typeof i!="object"))&&(e=[TM(r,...e)]),e.length===1&&t!==null&&t.has(e[0]))return ht(t.get(e[0]));if(e.length===1){const i=Um(e[0],r);return XD(i)===r?ht(i):ht(new MM(i,r))}const n=e.map(i=>Um(i));return ht(new ID(n,r))}},YD=r=>r!=null?r.nodeType||r.convertTo||(typeof r=="string"?r:null):null;function pu(r,t){return new Proxy(new HD(r,t),bM)}const ht=(r,t=null)=>BD(r,t),hd=(r,t=null)=>new OD(r,t),Ia=(r,t=null)=>new zD(r,t),Q=(...r)=>new GD(...r),Pt=(...r)=>new kD(...r),qt=(r,t)=>{const e=new pu(r,t),n=(...i)=>{let s;return hd(i),i[0]&&i[0].isNode?s=[...i]:s=i[0],e.call(s)};return n.shaderNode=e,n.setLayout=i=>(e.setLayout(i),n),n.once=()=>(e.once=!0,n),n};K("toGlobal",r=>(r.global=!0,r));const Vu=r=>{Ya=r},AM=()=>Ya,pi=(...r)=>Ya.If(...r);function jD(r){return Ya&&Ya.add(r),r}K("append",jD);const KD=new nn("color"),Tt=new nn("float",cd.float),Qe=new nn("int",cd.ints),ZD=new nn("uint",cd.uint),QD=new nn("bool",cd.bool),Ut=new nn("vec2"),vs=new nn("ivec2"),JD=new nn("uvec2"),tL=new nn("bvec2"),gt=new nn("vec3"),eL=new nn("ivec3"),nL=new nn("uvec3"),iL=new nn("bvec3"),Ae=new nn("vec4"),sL=new nn("ivec4"),rL=new nn("uvec4"),oL=new nn("bvec4"),qg=new nn("mat2"),ts=new nn("mat3"),Da=new nn("mat4");K("toColor",KD);K("toFloat",Tt);K("toInt",Qe);K("toUint",ZD);K("toBool",QD);K("toVec2",Ut);K("toIVec2",vs);K("toUVec2",JD);K("toBVec2",tL);K("toVec3",gt);K("toIVec3",eL);K("toUVec3",nL);K("toBVec3",iL);K("toVec4",Ae);K("toIVec4",sL);K("toUVec4",rL);K("toBVec4",oL);K("toMat2",qg);K("toMat3",ts);K("toMat4",Da);const aL=Q(Uc),lL=(r,t)=>ht(new MM(ht(r),t));K("element",aL);K("convert",lL);class wM extends Kt{static get type(){return"UniformGroupNode"}constructor(t,e=!1,n=1){super("string"),this.name=t,this.version=0,this.shared=e,this.order=n,this.isUniformGroup=!0}set needsUpdate(t){t===!0&&this.version++}serialize(t){super.serialize(t),t.name=this.name,t.version=this.version,t.shared=this.shared}deserialize(t){super.deserialize(t),this.name=t.name,this.version=t.version,this.shared=t.shared}}const cL=r=>new wM(r),NM=(r,t=0)=>new wM(r,!0,t),hL=NM("frame"),oe=NM("render"),RM=cL("object");class al extends Vg{static get type(){return"UniformNode"}constructor(t,e=null){super(t,e),this.isUniformNode=!0,this.name="",this.groupNode=RM}label(t){return this.name=t,this}setGroup(t){return this.groupNode=t,this}getGroup(){return this.groupNode}getUniformHash(t){return this.getHash(t)}onUpdate(t,e){const n=this.getSelf();return t=t.bind(n),super.onUpdate(i=>{const s=t(i,n);s!==void 0&&(this.value=s)},e)}generate(t,e){const n=this.getNodeType(t),i=this.getUniformHash(t);let s=t.getNodeFromHash(i);s===void 0&&(t.setHashNode(this,i),s=this);const o=s.getInputType(t),a=t.getUniformFromNode(s,o,t.shaderStage,this.name||t.context.label),l=t.getPropertyName(a);return t.context.label!==void 0&&delete t.context.label,t.format(l,n,e)}}const ee=(r,t)=>{const e=YD(t||r),n=r&&r.isNode===!0?r.node&&r.node.value||r.value:r;return ht(new al(n,e))};class ll extends Kt{static get type(){return"PropertyNode"}constructor(t,e=null,n=!1){super(t),this.name=e,this.varying=n,this.isPropertyNode=!0}getHash(t){return this.name||super.getHash(t)}isGlobal(){return!0}generate(t){let e;return this.varying===!0?(e=t.getVaryingFromNode(this,this.name),e.needsInterpolation=!0):e=t.getVarFromNode(this,this.name),t.getPropertyName(e)}}const da=(r,t)=>ht(new ll(r,t)),Hu=(r,t)=>ht(new ll(r,t,!0)),Ss=Pt(ll,"vec4","DiffuseColor"),Y_=Pt(ll,"vec3","EmissiveColor"),uL=Pt(ll,"vec4","Output");class dL extends an{static get type(){return"AssignNode"}constructor(t,e){super(),this.targetNode=t,this.sourceNode=e}hasDependencies(){return!1}getNodeType(t,e){return e!=="void"?this.targetNode.getNodeType(t):"void"}needsSplitAssign(t){const{targetNode:e}=this;if(t.isAvailable("swizzleAssign")===!1&&e.isSplitNode&&e.components.length>1){const n=t.getTypeLength(e.node.getNodeType(t));return ol.join("").slice(0,n)!==e.components}return!1}generate(t,e){const{targetNode:n,sourceNode:i}=this,s=this.needsSplitAssign(t),o=n.getNodeType(t),a=n.context({assign:!0}).build(t),l=i.build(t,o),c=i.getNodeType(t),h=t.getDataFromNode(this);let u;if(h.initialized===!0)e!=="void"&&(u=a);else if(s){const d=t.getVarFromNode(this,null,o),f=t.getPropertyName(d);t.addLineFlowCode(`${f} = ${l}`,this);const p=n.node.context({assign:!0}).build(t);for(let x=0;x<n.components.length;x++){const m=n.components[x];t.addLineFlowCode(`${p}.${m} = ${f}[ ${x} ]`,this)}e!=="void"&&(u=a)}else u=`${a} = ${l}`,(e==="void"||c==="void")&&(t.addLineFlowCode(u,this),e!=="void"&&(u=a));return h.initialized=!0,t.format(u,o,e)}}const fL=Q(dL);K("assign",fL);class pL extends an{static get type(){return"FunctionCallNode"}constructor(t=null,e={}){super(),this.functionNode=t,this.parameters=e}setParameters(t){return this.parameters=t,this}getParameters(){return this.parameters}getNodeType(t){return this.functionNode.getNodeType(t)}generate(t){const e=[],n=this.functionNode,i=n.getInputs(t),s=this.parameters;if(Array.isArray(s))for(let a=0;a<s.length;a++){const l=i[a],c=s[a];e.push(c.build(t,l.type))}else for(const a of i){const l=s[a.name];if(l!==void 0)e.push(l.build(t,a.type));else throw new Error(`FunctionCallNode: Input '${a.name}' not found in FunctionNode.`)}return`${n.build(t,"property")}( ${e.join(", ")} )`}}const mL=(r,...t)=>(t=t.length>1||t[0]&&t[0].isNode===!0?Ia(t):hd(t[0]),ht(new pL(ht(r),t)));K("call",mL);class Le extends an{static get type(){return"OperatorNode"}constructor(t,e,n,...i){if(super(),i.length>0){let s=new Le(t,e,n);for(let o=0;o<i.length-1;o++)s=new Le(t,s,i[o]);e=s,n=i[i.length-1]}this.op=t,this.aNode=e,this.bNode=n}getNodeType(t,e){const n=this.op,i=this.aNode,s=this.bNode,o=i.getNodeType(t),a=typeof s<"u"?s.getNodeType(t):null;if(o==="void"||a==="void")return"void";if(n==="%")return o;if(n==="~"||n==="&"||n==="|"||n==="^"||n===">>"||n==="<<")return t.getIntegerType(o);if(n==="!"||n==="=="||n==="&&"||n==="||"||n==="^^")return"bool";if(n==="<"||n===">"||n==="<="||n===">="){const l=e?t.getTypeLength(e):Math.max(t.getTypeLength(o),t.getTypeLength(a));return l>1?`bvec${l}`:"bool"}else return o==="float"&&t.isMatrix(a)?a:t.isMatrix(o)&&t.isVector(a)?t.getVectorFromMatrix(o):t.isVector(o)&&t.isMatrix(a)?t.getVectorFromMatrix(a):t.getTypeLength(a)>t.getTypeLength(o)?a:o}generate(t,e){const n=this.op,i=this.aNode,s=this.bNode,o=this.getNodeType(t,e);let a=null,l=null;o!=="void"?(a=i.getNodeType(t),l=typeof s<"u"?s.getNodeType(t):null,n==="<"||n===">"||n==="<="||n===">="||n==="=="?t.isVector(a)?l=a:a!==l&&(a=l="float"):n===">>"||n==="<<"?(a=o,l=t.changeComponentType(l,"uint")):t.isMatrix(a)&&t.isVector(l)?l=t.getVectorFromMatrix(a):t.isVector(a)&&t.isMatrix(l)?a=t.getVectorFromMatrix(l):a=l=o):a=l=o;const c=i.build(t,a),h=typeof s<"u"?s.build(t,l):null,u=t.getTypeLength(e),d=t.getFunctionOperator(n);if(e!=="void")return n==="<"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} < ${h} )`,o,e):n==="<="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} <= ${h} )`,o,e):n===">"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} > ${h} )`,o,e):n===">="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} >= ${h} )`,o,e):n==="!"||n==="~"?t.format(`(${n}${c})`,a,e):d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`( ${c} ${n} ${h} )`,o,e);if(a!=="void")return d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`${c} ${n} ${h}`,o,e)}serialize(t){super.serialize(t),t.op=this.op}deserialize(t){super.deserialize(t),this.op=t.op}}const Ls=Q(Le,"+"),Jr=Q(Le,"-"),Nn=Q(Le,"*"),Xg=Q(Le,"/"),CM=Q(Le,"%"),gL=Q(Le,"=="),xL=Q(Le,"!="),_L=Q(Le,"<"),yL=Q(Le,">"),SL=Q(Le,"<="),TL=Q(Le,">="),ML=Q(Le,"&&"),vL=Q(Le,"||"),bL=Q(Le,"!"),EL=Q(Le,"^^"),AL=Q(Le,"&"),wL=Q(Le,"~"),NL=Q(Le,"|"),RL=Q(Le,"^"),CL=Q(Le,"<<"),PL=Q(Le,">>");K("add",Ls);K("sub",Jr);K("mul",Nn);K("div",Xg);K("modInt",CM);K("equal",gL);K("notEqual",xL);K("lessThan",_L);K("greaterThan",yL);K("lessThanEqual",SL);K("greaterThanEqual",TL);K("and",ML);K("or",vL);K("not",bL);K("xor",EL);K("bitAnd",AL);K("bitNot",wL);K("bitOr",NL);K("bitXor",RL);K("shiftLeft",CL);K("shiftRight",PL);const FL=(...r)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),CM(...r));K("remainder",FL);class I extends an{static get type(){return"MathNode"}constructor(t,e,n=null,i=null){super(),this.method=t,this.aNode=e,this.bNode=n,this.cNode=i}getInputType(t){const e=this.aNode.getNodeType(t),n=this.bNode?this.bNode.getNodeType(t):null,i=this.cNode?this.cNode.getNodeType(t):null,s=t.isMatrix(e)?0:t.getTypeLength(e),o=t.isMatrix(n)?0:t.getTypeLength(n),a=t.isMatrix(i)?0:t.getTypeLength(i);return s>o&&s>a?e:o>a?n:a>s?i:e}getNodeType(t){const e=this.method;return e===I.LENGTH||e===I.DISTANCE||e===I.DOT?"float":e===I.CROSS?"vec3":e===I.ALL?"bool":e===I.EQUALS?t.changeComponentType(this.aNode.getNodeType(t),"bool"):e===I.MOD?this.aNode.getNodeType(t):this.getInputType(t)}generate(t,e){const n=this.method,i=this.getNodeType(t),s=this.getInputType(t),o=this.aNode,a=this.bNode,l=this.cNode,c=t.renderer.isWebGLRenderer===!0;if(n===I.TRANSFORM_DIRECTION){let h=o,u=a;t.isMatrix(h.getNodeType(t))?u=Ae(gt(u),0):h=Ae(gt(h),0);const d=Nn(h,u).xyz;return Kg(d).build(t,e)}else{if(n===I.NEGATE)return t.format("( - "+o.build(t,s)+" )",i,e);if(n===I.ONE_MINUS)return Jr(1,o).build(t,e);if(n===I.RECIPROCAL)return Xg(1,o).build(t,e);if(n===I.DIFFERENCE)return ji(Jr(o,a)).build(t,e);{const h=[];return n===I.CROSS||n===I.MOD?h.push(o.build(t,i),a.build(t,i)):c&&n===I.STEP?h.push(o.build(t,t.getTypeLength(o.getNodeType(t))===1?"float":s),a.build(t,s)):c&&(n===I.MIN||n===I.MAX)||n===I.MOD?h.push(o.build(t,s),a.build(t,t.getTypeLength(a.getNodeType(t))===1?"float":s)):n===I.REFRACT?h.push(o.build(t,s),a.build(t,s),l.build(t,"float")):n===I.MIX?h.push(o.build(t,s),a.build(t,s),l.build(t,t.getTypeLength(l.getNodeType(t))===1?"float":s)):(h.push(o.build(t,s)),a!==null&&h.push(a.build(t,s)),l!==null&&h.push(l.build(t,s))),t.format(`${t.getMethod(n,i)}( ${h.join(", ")} )`,i,e)}}}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}}I.ALL="all";I.ANY="any";I.EQUALS="equals";I.RADIANS="radians";I.DEGREES="degrees";I.EXP="exp";I.EXP2="exp2";I.LOG="log";I.LOG2="log2";I.SQRT="sqrt";I.INVERSE_SQRT="inversesqrt";I.FLOOR="floor";I.CEIL="ceil";I.NORMALIZE="normalize";I.FRACT="fract";I.SIN="sin";I.COS="cos";I.TAN="tan";I.ASIN="asin";I.ACOS="acos";I.ATAN="atan";I.ABS="abs";I.SIGN="sign";I.LENGTH="length";I.NEGATE="negate";I.ONE_MINUS="oneMinus";I.DFDX="dFdx";I.DFDY="dFdy";I.ROUND="round";I.RECIPROCAL="reciprocal";I.TRUNC="trunc";I.FWIDTH="fwidth";I.BITCAST="bitcast";I.TRANSPOSE="transpose";I.ATAN2="atan2";I.MIN="min";I.MAX="max";I.MOD="mod";I.STEP="step";I.REFLECT="reflect";I.DISTANCE="distance";I.DIFFERENCE="difference";I.DOT="dot";I.CROSS="cross";I.POW="pow";I.TRANSFORM_DIRECTION="transformDirection";I.MIX="mix";I.CLAMP="clamp";I.REFRACT="refract";I.SMOOTHSTEP="smoothstep";I.FACEFORWARD="faceforward";const IL=Tt(Math.PI),PM=Q(I,I.ALL),DL=Q(I,I.ANY),LL=Q(I,I.EQUALS),UL=Q(I,I.RADIANS),BL=Q(I,I.DEGREES),OL=Q(I,I.EXP),Bm=Q(I,I.EXP2),zL=Q(I,I.LOG),Yg=Q(I,I.LOG2),jg=Q(I,I.SQRT),GL=Q(I,I.INVERSE_SQRT),FM=Q(I,I.FLOOR),kL=Q(I,I.CEIL),Kg=Q(I,I.NORMALIZE),ud=Q(I,I.FRACT),bs=Q(I,I.SIN),or=Q(I,I.COS),VL=Q(I,I.TAN),HL=Q(I,I.ASIN),$L=Q(I,I.ACOS),WL=Q(I,I.ATAN),ji=Q(I,I.ABS),IM=Q(I,I.SIGN),qL=Q(I,I.LENGTH),XL=Q(I,I.NEGATE),YL=Q(I,I.ONE_MINUS),jL=Q(I,I.DFDX),KL=Q(I,I.DFDY),ZL=Q(I,I.ROUND),QL=Q(I,I.RECIPROCAL),JL=Q(I,I.TRUNC),tU=Q(I,I.FWIDTH);I.BITCAST;const eU=Q(I,I.TRANSPOSE),nU=Q(I,I.ATAN2),Om=Q(I,I.MIN),Us=Q(I,I.MAX),DM=Q(I,I.MOD),LM=Q(I,I.STEP),iU=Q(I,I.REFLECT),sU=Q(I,I.DISTANCE),rU=Q(I,I.DIFFERENCE),Zg=Q(I,I.DOT),UM=Q(I,I.CROSS),Qg=Q(I,I.POW),oU=Q(I,I.POW,2),aU=Q(I,I.POW,3),lU=Q(I,I.POW,4),cU=Q(I,I.TRANSFORM_DIRECTION),hU=r=>Nn(IM(r),Qg(ji(r),1/3)),uU=r=>Zg(r,r),zn=Q(I,I.MIX),po=(r,t=0,e=1)=>ht(new I(I.CLAMP,ht(r),ht(t),ht(e))),dU=r=>po(r),fU=Q(I,I.REFRACT),hc=Q(I,I.SMOOTHSTEP),pU=Q(I,I.FACEFORWARD),mU=qt(([r])=>{const n=43758.5453,i=Zg(r.xy,Ut(12.9898,78.233)),s=DM(i,IL);return ud(bs(s).mul(n))}),gU=(r,t,e)=>zn(t,e,r),xU=(r,t,e)=>hc(t,e,r);K("all",PM);K("any",DL);K("equals",LL);K("radians",UL);K("degrees",BL);K("exp",OL);K("exp2",Bm);K("log",zL);K("log2",Yg);K("sqrt",jg);K("inverseSqrt",GL);K("floor",FM);K("ceil",kL);K("normalize",Kg);K("fract",ud);K("sin",bs);K("cos",or);K("tan",VL);K("asin",HL);K("acos",$L);K("atan",WL);K("abs",ji);K("sign",IM);K("length",qL);K("lengthSq",uU);K("negate",XL);K("oneMinus",YL);K("dFdx",jL);K("dFdy",KL);K("round",ZL);K("reciprocal",QL);K("trunc",JL);K("fwidth",tU);K("atan2",nU);K("min",Om);K("max",Us);K("mod",DM);K("step",LM);K("reflect",iU);K("distance",sU);K("dot",Zg);K("cross",UM);K("pow",Qg);K("pow2",oU);K("pow3",aU);K("pow4",lU);K("transformDirection",cU);K("mix",gU);K("clamp",po);K("refract",fU);K("smoothstep",xU);K("faceForward",pU);K("difference",rU);K("saturate",dU);K("cbrt",hU);K("transpose",eU);K("rand",mU);class _U extends Kt{static get type(){return"ConditionalNode"}constructor(t,e,n=null){super(),this.condNode=t,this.ifNode=e,this.elseNode=n}getNodeType(t){const e=this.ifNode.getNodeType(t);if(this.elseNode!==null){const n=this.elseNode.getNodeType(t);if(t.getTypeLength(n)>t.getTypeLength(e))return n}return e}setup(t){const e=this.condNode.cache(),n=this.ifNode.cache(),i=this.elseNode?this.elseNode.cache():null,s=t.context.nodeBlock;t.getDataFromNode(n).parentNodeBlock=s,i!==null&&(t.getDataFromNode(i).parentNodeBlock=s);const o=t.getNodeProperties(this);o.condNode=e,o.ifNode=n.context({nodeBlock:n}),o.elseNode=i?i.context({nodeBlock:i}):null}generate(t,e){const n=this.getNodeType(t),i=t.getDataFromNode(this);if(i.nodeProperty!==void 0)return i.nodeProperty;const{condNode:s,ifNode:o,elseNode:a}=t.getNodeProperties(this),l=e!=="void",c=l?da(n).build(t):"";i.nodeProperty=c;const h=s.build(t,"bool");t.addFlowCode(`
${t.tab}if ( ${h} ) {

`).addFlowTab();let u=o.build(t,n);if(u&&(l?u=c+" = "+u+";":u="return "+u+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+u+`

`+t.tab+"}"),a!==null){t.addFlowCode(` else {

`).addFlowTab();let d=a.build(t,n);d&&(l?d=c+" = "+d+";":d="return "+d+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+d+`

`+t.tab+`}

`)}else t.addFlowCode(`

`);return t.format(c,n,e)}}const Vi=Q(_U);K("select",Vi);const yU=(...r)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),Vi(...r));K("cond",yU);class BM extends Kt{static get type(){return"ContextNode"}constructor(t,e={}){super(),this.isContextNode=!0,this.node=t,this.value=e}getScope(){return this.node.getScope()}getNodeType(t){return this.node.getNodeType(t)}analyze(t){this.node.build(t)}setup(t){const e=t.getContext();t.setContext({...t.context,...this.value});const n=this.node.build(t);return t.setContext(e),n}generate(t,e){const n=t.getContext();t.setContext({...t.context,...this.value});const i=this.node.build(t,e);return t.setContext(n),i}}const Jg=Q(BM),SU=(r,t)=>Jg(r,{label:t});K("context",Jg);K("label",SU);class TU extends Kt{static get type(){return"VarNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.global=!0,this.isVarNode=!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}generate(t){const{node:e,name:n}=this,i=t.getVarFromNode(this,n,t.getVectorType(this.getNodeType(t))),s=t.getPropertyName(i),o=e.build(t,i.type);return t.addLineFlowCode(`${s} = ${o}`,this),s}}const OM=Q(TU);K("temp",OM);K("toVar",(...r)=>OM(...r).append());class MU extends Kt{static get type(){return"VaryingNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.isVaryingNode=!0}isGlobal(){return!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}setupVarying(t){const e=t.getNodeProperties(this);let n=e.varying;if(n===void 0){const i=this.name,s=this.getNodeType(t);e.varying=n=t.getVaryingFromNode(this,i,s),e.node=this.node}return n.needsInterpolation||(n.needsInterpolation=t.shaderStage==="fragment"),n}setup(t){this.setupVarying(t)}analyze(t){return this.setupVarying(t),this.node.analyze(t)}generate(t){const e=t.getNodeProperties(this),n=this.setupVarying(t);if(e.propertyName===void 0){const i=this.getNodeType(t),s=t.getPropertyName(n,k_.VERTEX);t.flowNodeFromShaderStage(k_.VERTEX,this.node,i,s),e.propertyName=s}return t.getPropertyName(n)}}const Er=Q(MU);K("varying",Er);const Bc="WorkingColorSpace",tx="OutputColorSpace";function j_(r){let t=null;return r===Mi?t="Linear":r===Bt&&(t="sRGB"),t}function zm(r,t){return j_(r)+"To"+j_(t)}class dd extends an{static get type(){return"ColorSpaceNode"}constructor(t,e,n){super("vec4"),this.colorNode=t,this.source=e,this.target=n}getColorSpace(t,e){return e===Bc?di.workingColorSpace:e===tx?t.context.outputColorSpace||t.renderer.outputColorSpace:e}setup(t){const{renderer:e}=t,{colorNode:n}=this,i=this.getColorSpace(t,this.source),s=this.getColorSpace(t,this.target);if(i===s)return n;const o=zm(i,s);let a=null;const l=e.nodes.library.getColorSpaceFunction(o);return l!==null?a=Ae(l(n.rgb),n.a):(console.error("ColorSpaceNode: Unsupported Color Space configuration.",o),a=n),a}}const vU=r=>ht(new dd(ht(r),Bc,tx)),bU=r=>ht(new dd(ht(r),tx,Bc)),EU=(r,t)=>ht(new dd(ht(r),Bc,t)),zM=(r,t)=>ht(new dd(ht(r),t,Bc));K("toOutputColorSpace",vU);K("toWorkingColorSpace",bU);K("workingToColorSpace",EU);K("colorSpaceToWorking",zM);let AU=class extends Uc{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),n=this.referenceNode.getNodeType(),i=this.getNodeType();return t.format(e,n,i)}};class GM extends Kt{static get type(){return"ReferenceBaseNode"}constructor(t,e,n=null,i=null){super(),this.property=t,this.uniformType=e,this.object=n,this.count=i,this.properties=t.split("."),this.reference=n,this.node=null,this.group=null,this.updateType=te.OBJECT}setGroup(t){return this.group=t,this}element(t){return ht(new AU(this,ht(t)))}setNodeType(t){const e=ee(null,t).getSelf();this.group!==null&&e.setGroup(this.group),this.node=e}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let n=t[e[0]];for(let i=1;i<e.length;i++)n=n[e[i]];return n}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}}const wU=(r,t,e)=>ht(new GM(r,t,e));class NU extends GM{static get type(){return"RendererReferenceNode"}constructor(t,e,n=null){super(t,e,n),this.renderer=n,this.setGroup(oe)}updateReference(t){return this.reference=this.renderer!==null?this.renderer:t.renderer,this.reference}}const RU=(r,t,e)=>ht(new NU(r,t,e));class CU extends an{static get type(){return"ToneMappingNode"}constructor(t,e=FU,n=null){super("vec3"),this.toneMapping=t,this.exposureNode=e,this.colorNode=n}getCacheKey(){return zu(super.getCacheKey(),this.toneMapping)}setup(t){const e=this.colorNode||t.context.color,n=this.toneMapping;if(n===Ca)return e;let i=null;const s=t.renderer.nodes.library.getToneMappingFunction(n);return s!==null?i=Ae(s(e.rgb,this.exposureNode),e.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",n),i=e),i}}const PU=(r,t,e)=>ht(new CU(r,ht(t),ht(e))),FU=RU("toneMappingExposure","float");K("toneMapping",(r,t,e)=>PU(t,e,r));class IU extends Vg{static get type(){return"BufferAttributeNode"}constructor(t,e=null,n=0,i=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferStride=n,this.bufferOffset=i,this.usage=Ou,this.instanced=!1,this.attribute=null,this.global=!0,t&&t.isBufferAttribute===!0&&(this.attribute=t,this.usage=t.usage,this.instanced=t.isInstancedBufferAttribute)}getHash(t){if(this.bufferStride===0&&this.bufferOffset===0){let e=t.globalCache.getData(this.value);return e===void 0&&(e={node:this},t.globalCache.setData(this.value,e)),e.node.uuid}return this.uuid}getNodeType(t){return this.bufferType===null&&(this.bufferType=t.getTypeFromAttribute(this.attribute)),this.bufferType}setup(t){if(this.attribute!==null)return;const e=this.getNodeType(t),n=this.value,i=t.getTypeLength(e),s=this.bufferStride||i,o=this.bufferOffset,a=n.isInterleavedBuffer===!0?n:new gM(n,s),l=new Og(a,i,o);a.setUsage(this.usage),this.attribute=l,this.attribute.isInstancedBufferAttribute=this.instanced}generate(t){const e=this.getNodeType(t),n=t.getBufferAttributeFromNode(this,e),i=t.getPropertyName(n);let s=null;return t.shaderStage==="vertex"||t.shaderStage==="compute"?(this.name=i,s=i):s=Er(this).build(t,e),s}getInputType(){return"bufferAttribute"}setUsage(t){return this.usage=t,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=t),this}setInstanced(t){return this.instanced=t,this}}const ex=(r,t,e,n)=>ht(new IU(r,t,e,n)),DU=(r,t,e,n)=>ex(r,t,e,n).setUsage(Sa),K_=(r,t,e,n)=>ex(r,t,e,n).setInstanced(!0),Z_=(r,t,e,n)=>DU(r,t,e,n).setInstanced(!0);K("toAttribute",r=>ex(r.value));class LU extends Kt{static get type(){return"ComputeNode"}constructor(t,e,n=[64]){super("void"),this.isComputeNode=!0,this.computeNode=t,this.count=e,this.workgroupSize=n,this.dispatchCount=0,this.version=1,this.updateBeforeType=te.OBJECT,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}updateDispatchCount(){const{count:t,workgroupSize:e}=this;let n=e[0];for(let i=1;i<e.length;i++)n*=e[i];this.dispatchCount=Math.ceil(t/n)}onInit(){}updateBefore({renderer:t}){t.compute(this)}generate(t){const{shaderStage:e}=t;if(e==="compute"){const n=this.computeNode.build(t,"void");n!==""&&t.addLineFlowCode(n,this)}}}const UU=(r,t,e)=>ht(new LU(ht(r),t,e));K("compute",UU);class BU extends Kt{static get type(){return"CacheNode"}constructor(t,e=!0){super(),this.node=t,this.parent=e,this.isCacheNode=!0}getNodeType(t){return this.node.getNodeType(t)}build(t,...e){const n=t.getCache(),i=t.getCacheFromNode(this,this.parent);t.setCache(i);const s=this.node.build(t,...e);return t.setCache(n),s}}const OU=(r,...t)=>ht(new BU(ht(r),...t));K("cache",OU);class zU extends Kt{static get type(){return"BypassNode"}constructor(t,e){super(),this.isBypassNode=!0,this.outputNode=t,this.callNode=e}getNodeType(t){return this.outputNode.getNodeType(t)}generate(t){const e=this.callNode.build(t,"void");return e!==""&&t.addLineFlowCode(e,this),this.outputNode.build(t)}}const GU=Q(zU);K("bypass",GU);class kM extends Kt{static get type(){return"RemapNode"}constructor(t,e,n,i=Tt(0),s=Tt(1)){super(),this.node=t,this.inLowNode=e,this.inHighNode=n,this.outLowNode=i,this.outHighNode=s,this.doClamp=!0}setup(){const{node:t,inLowNode:e,inHighNode:n,outLowNode:i,outHighNode:s,doClamp:o}=this;let a=t.sub(e).div(n.sub(e));return o===!0&&(a=a.clamp()),a.mul(s.sub(i)).add(i)}}const kU=Q(kM,null,null,{doClamp:!1}),VU=Q(kM);K("remap",kU);K("remapClamp",VU);class HU extends Kt{static get type(){return"ExpressionNode"}constructor(t="",e="void"){super(e),this.snippet=t}generate(t,e){const n=this.getNodeType(t),i=this.snippet;if(n==="void")t.addLineFlowCode(i,this);else return t.format(`( ${i} )`,n,e)}}const uc=Q(HU),$U=r=>(r?Vi(r,uc("discard")):uc("discard")).append();K("discard",$U);class WU extends an{static get type(){return"RenderOutputNode"}constructor(t,e,n){super("vec4"),this.colorNode=t,this.toneMapping=e,this.outputColorSpace=n,this.isRenderOutput=!0}setup({context:t}){let e=this.colorNode||t.color;const n=(this.toneMapping!==null?this.toneMapping:t.toneMapping)||Ca,i=(this.outputColorSpace!==null?this.outputColorSpace:t.outputColorSpace)||co;return n!==Ca&&(e=e.toneMapping(n)),i!==co&&i!==di.workingColorSpace&&(e=e.workingToColorSpace(i)),e}}const qU=(r,t=null,e=null)=>ht(new WU(ht(r),t,e));K("renderOutput",qU);class XU extends Kt{static get type(){return"AttributeNode"}constructor(t,e=null){super(e),this.global=!0,this._attributeName=t}getHash(t){return this.getAttributeName(t)}getNodeType(t){let e=this.nodeType;if(e===null){const n=this.getAttributeName(t);if(t.hasGeometryAttribute(n)){const i=t.geometry.getAttribute(n);e=t.getTypeFromAttribute(i)}else e="float"}return e}setAttributeName(t){return this._attributeName=t,this}getAttributeName(){return this._attributeName}generate(t){const e=this.getAttributeName(t),n=this.getNodeType(t);if(t.hasGeometryAttribute(e)===!0){const s=t.geometry.getAttribute(e),o=t.getTypeFromAttribute(s),a=t.getAttribute(e,o);return t.shaderStage==="vertex"?t.format(a.name,o,n):Er(this).build(t,n)}else return console.warn(`AttributeNode: Vertex attribute "${e}" not found on geometry.`),t.generateConst(n)}serialize(t){super.serialize(t),t.global=this.global,t._attributeName=this._attributeName}deserialize(t){super.deserialize(t),this.global=t.global,this._attributeName=t._attributeName}}const Sr=(r,t)=>ht(new XU(r,t)),fd=r=>Sr("uv"+(r>0?r:""),"vec2");class YU extends Kt{static get type(){return"TextureSizeNode"}constructor(t,e=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=t,this.levelNode=e}generate(t,e){const n=this.textureNode.build(t,"property"),i=this.levelNode===null?"0":this.levelNode.build(t,"int");return t.format(`${t.getMethod("textureDimensions")}( ${n}, ${i} )`,this.getNodeType(t),e)}}const ec=Q(YU);class jU extends al{static get type(){return"MaxMipLevelNode"}constructor(t){super(0),this._textureNode=t,this.updateType=te.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const t=this.texture,e=t.images,n=e&&e.length>0?e[0]&&e[0].image||e[0]:t.image;if(n&&n.width!==void 0){const{width:i,height:s}=n;this.value=Math.log2(Math.max(i,s))}}}const KU=Q(jU);class Oc extends al{static get type(){return"TextureNode"}constructor(t,e=null,n=null,i=null){super(t),this.isTextureNode=!0,this.uvNode=e,this.levelNode=n,this.biasNode=i,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=te.NONE,this.referenceNode=null,this._value=t,this._matrixUniform=null,this.setUpdateMatrix(e===null)}set value(t){this.referenceNode?this.referenceNode.value=t:this._value=t}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===gn?"uvec4":this.value.type===kn?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return fd(this.value.channel)}updateReference(){return this.value}getTransformedUV(t){return this._matrixUniform===null&&(this._matrixUniform=ee(this.value.matrix)),this._matrixUniform.mul(gt(t,1)).xy}setUpdateMatrix(t){return this.updateMatrix=t,this.updateType=t?te.FRAME:te.NONE,this}setupUV(t,e){const n=this.value;return t.isFlipY()&&(n.isRenderTargetTexture===!0||n.isFramebufferTexture===!0||n.isDepthTexture===!0)&&(this.sampler?e=e.flipY():e=e.setY(Qe(ec(this,this.levelNode).y).sub(e.y).sub(1))),e}setup(t){const e=t.getNodeProperties(this);e.referenceNode=this.referenceNode;let n=this.uvNode;(n===null||t.context.forceUVContext===!0)&&t.context.getUV&&(n=t.context.getUV(this)),n||(n=this.getDefaultUV()),this.updateMatrix===!0&&(n=this.getTransformedUV(n)),n=this.setupUV(t,n);let i=this.levelNode;i===null&&t.context.getTextureLevel&&(i=t.context.getTextureLevel(this)),e.uvNode=n,e.levelNode=i,e.biasNode=this.biasNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e.depthNode=this.depthNode}generateUV(t,e){return e.build(t,this.sampler===!0?"vec2":"ivec2")}generateSnippet(t,e,n,i,s,o,a,l){const c=this.value;let h;return i?h=t.generateTextureLevel(c,e,n,i,o):s?h=t.generateTextureBias(c,e,n,s,o):l?h=t.generateTextureGrad(c,e,n,l,o):a?h=t.generateTextureCompare(c,e,n,a,o):this.sampler===!1?h=t.generateTextureLoad(c,e,n,o):h=t.generateTexture(c,e,n,o),h}generate(t,e){const n=t.getNodeProperties(this),i=this.value;if(!i||i.isTexture!==!0)throw new Error("TextureNode: Need a three.js texture.");const s=super.generate(t,"property");if(e==="sampler")return s+"_sampler";if(t.isReference(e))return s;{const o=t.getDataFromNode(this);let a=o.propertyName;if(a===void 0){const{uvNode:h,levelNode:u,biasNode:d,compareNode:f,depthNode:p,gradNode:x}=n,m=this.generateUV(t,h),g=u?u.build(t,"float"):null,y=d?d.build(t,"float"):null,_=p?p.build(t,"int"):null,T=f?f.build(t,"float"):null,w=x?[x[0].build(t,"vec2"),x[1].build(t,"vec2")]:null,A=t.getVarFromNode(this);a=t.getPropertyName(A);const v=this.generateSnippet(t,s,m,g,y,_,T,w);t.addLineFlowCode(`${a} = ${v}`,this),o.snippet=v,o.propertyName=a}let l=a;const c=this.getNodeType(t);return t.needsToWorkingColorSpace(i)&&(l=zM(uc(l,c),i.colorSpace).setup(t).build(t,c)),t.format(l,c,e)}}setSampler(t){return this.sampler=t,this}getSampler(){return this.sampler}uv(t){const e=this.clone();return e.uvNode=ht(t),e.referenceNode=this.getSelf(),ht(e)}blur(t){const e=this.clone();return e.biasNode=ht(t).mul(KU(e)),e.referenceNode=this.getSelf(),ht(e)}level(t){const e=this.clone();return e.levelNode=ht(t),e.referenceNode=this.getSelf(),ht(e)}size(t){return ec(this,t)}bias(t){const e=this.clone();return e.biasNode=ht(t),e.referenceNode=this.getSelf(),ht(e)}compare(t){const e=this.clone();return e.compareNode=ht(t),e.referenceNode=this.getSelf(),ht(e)}grad(t,e){const n=this.clone();return n.gradNode=[ht(t),ht(e)],n.referenceNode=this.getSelf(),ht(n)}depth(t){const e=this.clone();return e.depthNode=ht(t),e.referenceNode=this.getSelf(),ht(e)}serialize(t){super.serialize(t),t.value=this.value.toJSON(t.meta).uuid,t.sampler=this.sampler,t.updateMatrix=this.updateMatrix,t.updateType=this.updateType}deserialize(t){super.deserialize(t),this.value=t.meta.textures[t.value],this.sampler=t.sampler,this.updateMatrix=t.updateMatrix,this.updateType=t.updateType}update(){const t=this.value,e=this._matrixUniform;e!==null&&(e.value=t.matrix),t.matrixAutoUpdate===!0&&t.updateMatrix()}clone(){const t=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return t.sampler=this.sampler,t}}const Ge=Q(Oc),Li=(...r)=>Ge(...r).setSampler(!1),Il=ee("float").label("cameraNear").setGroup(oe).onRenderUpdate(({camera:r})=>r.near),Dl=ee("float").label("cameraFar").setGroup(oe).onRenderUpdate(({camera:r})=>r.far),ZU=ee("float").label("cameraLogDepth").setGroup(oe).onRenderUpdate(({camera:r})=>2/(Math.log(r.far+1)/Math.LN2)),VM=ee("mat4").label("cameraProjectionMatrix").setGroup(oe).onRenderUpdate(({camera:r})=>r.projectionMatrix),cl=ee("mat4").label("cameraViewMatrix").setGroup(oe).onRenderUpdate(({camera:r})=>r.matrixWorldInverse);class _e extends Kt{static get type(){return"Object3DNode"}constructor(t,e=null){super(),this.scope=t,this.object3d=e,this.updateType=te.OBJECT,this._uniformNode=new al(null)}getNodeType(){const t=this.scope;if(t===_e.WORLD_MATRIX)return"mat4";if(t===_e.POSITION||t===_e.VIEW_POSITION||t===_e.DIRECTION||t===_e.SCALE)return"vec3"}update(t){const e=this.object3d,n=this._uniformNode,i=this.scope;if(i===_e.WORLD_MATRIX)n.value=e.matrixWorld;else if(i===_e.POSITION)n.value=n.value||new B,n.value.setFromMatrixPosition(e.matrixWorld);else if(i===_e.SCALE)n.value=n.value||new B,n.value.setFromMatrixScale(e.matrixWorld);else if(i===_e.DIRECTION)n.value=n.value||new B,e.getWorldDirection(n.value);else if(i===_e.VIEW_POSITION){const s=t.camera;n.value=n.value||new B,n.value.setFromMatrixPosition(e.matrixWorld),n.value.applyMatrix4(s.matrixWorldInverse)}}generate(t){const e=this.scope;return e===_e.WORLD_MATRIX?this._uniformNode.nodeType="mat4":(e===_e.POSITION||e===_e.VIEW_POSITION||e===_e.DIRECTION||e===_e.SCALE)&&(this._uniformNode.nodeType="vec3"),this._uniformNode.build(t)}serialize(t){super.serialize(t),t.scope=this.scope}deserialize(t){super.deserialize(t),this.scope=t.scope}}_e.WORLD_MATRIX="worldMatrix";_e.POSITION="position";_e.SCALE="scale";_e.VIEW_POSITION="viewPosition";_e.DIRECTION="direction";_e.DIRECTION;_e.WORLD_MATRIX;_e.POSITION;_e.SCALE;_e.VIEW_POSITION;class es extends _e{static get type(){return"ModelNode"}constructor(t){super(t)}update(t){this.object3d=t.object,super.update(t)}}es.DIRECTION;const ja=Pt(es,es.WORLD_MATRIX);es.POSITION;es.SCALE;es.VIEW_POSITION;const QU=ee(new mi).onObjectUpdate(({object:r},t)=>t.value.getNormalMatrix(r.matrixWorld)),pd=cl.mul(ja).toVar("modelViewMatrix"),HM=Sr("position","vec3"),Fn=HM.varying("positionLocal"),Q_=HM.varying("positionPrevious"),JU=ja.mul(Fn).xyz.varying("v_positionWorld"),$M=Fn.transformDirection(ja).varying("v_positionWorldDirection").normalize().toVar("positionWorldDirection"),Hn=pd.mul(Fn).xyz.varying("v_positionView"),WM=Hn.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");class t3 extends Kt{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(t){const{renderer:e,material:n}=t;return e.coordinateSystem===ki&&n.side===zs?"false":t.getFrontFacing()}}const e3=Pt(t3),nx=Tt(e3).mul(2).sub(1),n3=Sr("normal","vec3"),ns=qt(r=>r.geometry.hasAttribute("normal")===!1?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),gt(0,1,0)):n3,"vec3").once()().toVar("normalLocal"),i3=Hn.dFdx().cross(Hn.dFdy()).normalize().toVar("normalFlat"),Tr=qt(r=>{let t;return r.material.flatShading===!0?t=i3:t=Er(XM(ns),"v_normalView").normalize(),t},"vec3").once()().toVar("normalView"),md=Er(Tr.transformDirection(cl),"v_normalWorld").normalize().toVar("normalWorld"),qM=qt(r=>r.context.setupNormal(),"vec3").once()().mul(nx).toVar("transformedNormalView"),s3=qt(([r,t=ja])=>{const e=ts(t),n=r.div(gt(e[0].dot(e[0]),e[1].dot(e[1]),e[2].dot(e[2])));return e.mul(n).xyz}),XM=qt(([r],t)=>{const e=t.renderer.nodes.modelNormalViewMatrix;if(e!==null)return e.transformDirection(r);const n=QU.mul(r);return cl.transformDirection(n)}),r3=ee(0).onReference(({material:r})=>r).onRenderUpdate(({material:r})=>r.refractionRatio),o3=WM.negate().reflect(qM),a3=WM.negate().refract(qM,r3),l3=o3.transformDirection(cl).toVar("reflectVector"),c3=a3.transformDirection(cl).toVar("reflectVector");class h3 extends Oc{static get type(){return"CubeTextureNode"}constructor(t,e=null,n=null,i=null){super(t,e,n,i),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const t=this.value;return t.mapping===lo?l3:t.mapping===qa?c3:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',t.mapping),gt(0,0,0))}setUpdateMatrix(){}setupUV(t,e){const n=this.value;return t.renderer.coordinateSystem===ho||!n.isRenderTargetTexture?gt(e.x.negate(),e.yz):e}generateUV(t,e){return e.build(t,"vec3")}}const dc=Q(h3);class YM extends al{static get type(){return"BufferNode"}constructor(t,e,n=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferCount=n}getElementType(t){return this.getNodeType(t)}getInputType(){return"buffer"}}const ix=(r,t,e)=>ht(new YM(r,t,e));class u3 extends Uc{static get type(){return"UniformArrayElementNode"}constructor(t,e){super(t,e),this.isArrayBufferElementNode=!0}generate(t){const e=super.generate(t),n=this.getNodeType();return t.format(e,"vec4",n)}}class d3 extends YM{static get type(){return"UniformArrayNode"}constructor(t,e=null){super(null,"vec4"),this.array=t,this.elementType=e,this._elementType=null,this._elementLength=0,this.updateType=te.RENDER,this.isArrayBufferNode=!0}getElementType(){return this.elementType||this._elementType}getElementLength(){return this._elementLength}update(){const{array:t,value:e}=this,n=this.getElementLength(),i=this.getElementType();if(n===1)for(let s=0;s<t.length;s++){const o=s*4;e[o]=t[s]}else if(i==="color")for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.r,e[o+1]=a.g,e[o+2]=a.b||0}else for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.x,e[o+1]=a.y,e[o+2]=a.z||0,e[o+3]=a.w||0}}setup(t){const e=this.array.length;this._elementType=this.elementType===null?ku(this.array[0]):this.elementType,this._elementLength=t.getTypeLength(this._elementType);let n=Float32Array;return this._elementType.charAt(0)==="i"?n=Int32Array:this._elementType.charAt(0)==="u"&&(n=Uint32Array),this.value=new n(e*4),this.bufferCount=e,this.bufferType=t.changeComponentType("vec4",t.getComponentType(this._elementType)),super.setup(t)}element(t){return ht(new u3(this,ht(t)))}}const fc=(r,t)=>ht(new d3(r,t));class f3 extends Uc{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),n=this.referenceNode.getNodeType(),i=this.getNodeType();return t.format(e,n,i)}}class sx extends Kt{static get type(){return"ReferenceNode"}constructor(t,e,n=null,i=null){super(),this.property=t,this.uniformType=e,this.object=n,this.count=i,this.properties=t.split("."),this.reference=n,this.node=null,this.group=null,this.name=null,this.updateType=te.OBJECT}element(t){return ht(new f3(this,ht(t)))}setGroup(t){return this.group=t,this}label(t){return this.name=t,this}setNodeType(t){let e=null;this.count!==null?e=ix(null,t,this.count):Array.isArray(this.getValueFromReference())?e=fc(null,t):t==="texture"?e=Ge(null):t==="cubeTexture"?e=dc(null):e=ee(null,t),this.group!==null&&e.setGroup(this.group),this.name!==null&&e.label(this.name),this.node=e.getSelf()}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let n=t[e[0]];for(let i=1;i<e.length;i++)n=n[e[i]];return n}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}}const He=(r,t,e)=>ht(new sx(r,t,e)),J_=(r,t,e,n)=>ht(new sx(r,t,n,e));class p3 extends sx{static get type(){return"MaterialReferenceNode"}constructor(t,e,n=null){super(t,e,n),this.material=n,this.isMaterialReferenceNode=!0}updateReference(t){return this.reference=this.material!==null?this.material:t.material,this.reference}}const fa=(r,t,e)=>ht(new p3(r,t,e)),jM=qt(r=>(r.geometry.hasAttribute("tangent")===!1&&r.geometry.computeTangents(),Sr("tangent","vec4")))(),rx=jM.xyz.toVar("tangentLocal"),KM=pd.mul(Ae(rx,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),m3=r=>r.mul(jM.w).xyz,g3=Er(m3(Tr.cross(KM)),"v_bitangentView").normalize().toVar("bitangentView"),x3=ts(KM,g3,Tr),_3=qt(r=>{const{eye_pos:t,surf_norm:e,mapN:n,uv:i}=r,s=t.dFdx(),o=t.dFdy(),a=i.dFdx(),l=i.dFdy(),c=e,h=o.cross(c),u=c.cross(s),d=h.mul(a.x).add(u.mul(l.x)),f=h.mul(a.y).add(u.mul(l.y)),p=d.dot(d).max(f.dot(f)),x=nx.mul(p.inverseSqrt());return Ls(d.mul(n.x,x),f.mul(n.y,x),c.mul(n.z)).normalize()});class y3 extends an{static get type(){return"NormalMapNode"}constructor(t,e=null){super("vec3"),this.node=t,this.scaleNode=e,this.normalMapType=g_}setup(t){const{normalMapType:e,scaleNode:n}=this;let i=this.node.mul(2).sub(1);n!==null&&(i=gt(i.xy.mul(n),i.z));let s=null;return e===iI?s=XM(i):e===g_&&(t.hasGeometryAttribute("tangent")===!0?s=x3.mul(i).normalize():s=_3({eye_pos:Hn,surf_norm:Tr,mapN:i,uv:fd()})),s}}const ty=Q(y3),S3=qt(({textureNode:r,bumpScale:t})=>{const e=i=>r.cache().context({getUV:s=>i(s.uvNode||fd()),forceUVContext:!0}),n=Tt(e(i=>i));return Ut(Tt(e(i=>i.add(i.dFdx()))).sub(n),Tt(e(i=>i.add(i.dFdy()))).sub(n)).mul(t)}),T3=qt(r=>{const{surf_pos:t,surf_norm:e,dHdxy:n}=r,i=t.dFdx().normalize(),s=t.dFdy().normalize(),o=e,a=s.cross(o),l=o.cross(i),c=i.dot(a).mul(nx),h=c.sign().mul(n.x.mul(a).add(n.y.mul(l)));return c.abs().mul(e).sub(h).normalize()});class M3 extends an{static get type(){return"BumpMapNode"}constructor(t,e=null){super("vec3"),this.textureNode=t,this.scaleNode=e}setup(){const t=this.scaleNode!==null?this.scaleNode:1,e=S3({textureNode:this.textureNode,bumpScale:t});return T3({surf_pos:Hn,surf_norm:Tr,dHdxy:e})}}const v3=Q(M3),ey=new Map;class X extends Kt{static get type(){return"MaterialNode"}constructor(t){super(),this.scope=t}getCache(t,e){let n=ey.get(t);return n===void 0&&(n=fa(t,e),ey.set(t,n)),n}getFloat(t){return this.getCache(t,"float")}getColor(t){return this.getCache(t,"color")}getTexture(t){return this.getCache(t==="map"?"map":t+"Map","texture")}setup(t){const e=t.context.material,n=this.scope;let i=null;if(n===X.COLOR){const s=e.color!==void 0?this.getColor(n):gt();e.map&&e.map.isTexture===!0?i=s.mul(this.getTexture("map")):i=s}else if(n===X.OPACITY){const s=this.getFloat(n);e.alphaMap&&e.alphaMap.isTexture===!0?i=s.mul(this.getTexture("alpha")):i=s}else if(n===X.SPECULAR_STRENGTH)e.specularMap&&e.specularMap.isTexture===!0?i=this.getTexture("specular").r:i=Tt(1);else if(n===X.SPECULAR_INTENSITY){const s=this.getFloat(n);e.specularMap?i=s.mul(this.getTexture(n).a):i=s}else if(n===X.SPECULAR_COLOR){const s=this.getColor(n);e.specularColorMap&&e.specularColorMap.isTexture===!0?i=s.mul(this.getTexture(n).rgb):i=s}else if(n===X.ROUGHNESS){const s=this.getFloat(n);e.roughnessMap&&e.roughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).g):i=s}else if(n===X.METALNESS){const s=this.getFloat(n);e.metalnessMap&&e.metalnessMap.isTexture===!0?i=s.mul(this.getTexture(n).b):i=s}else if(n===X.EMISSIVE){const s=this.getFloat("emissiveIntensity"),o=this.getColor(n).mul(s);e.emissiveMap&&e.emissiveMap.isTexture===!0?i=o.mul(this.getTexture(n)):i=o}else if(n===X.NORMAL)e.normalMap?(i=ty(this.getTexture("normal"),this.getCache("normalScale","vec2")),i.normalMapType=e.normalMapType):e.bumpMap?i=v3(this.getTexture("bump").r,this.getFloat("bumpScale")):i=Tr;else if(n===X.CLEARCOAT){const s=this.getFloat(n);e.clearcoatMap&&e.clearcoatMap.isTexture===!0?i=s.mul(this.getTexture(n).r):i=s}else if(n===X.CLEARCOAT_ROUGHNESS){const s=this.getFloat(n);e.clearcoatRoughnessMap&&e.clearcoatRoughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).r):i=s}else if(n===X.CLEARCOAT_NORMAL)e.clearcoatNormalMap?i=ty(this.getTexture(n),this.getCache(n+"Scale","vec2")):i=Tr;else if(n===X.SHEEN){const s=this.getColor("sheenColor").mul(this.getFloat("sheen"));e.sheenColorMap&&e.sheenColorMap.isTexture===!0?i=s.mul(this.getTexture("sheenColor").rgb):i=s}else if(n===X.SHEEN_ROUGHNESS){const s=this.getFloat(n);e.sheenRoughnessMap&&e.sheenRoughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).a):i=s,i=i.clamp(.07,1)}else if(n===X.ANISOTROPY)if(e.anisotropyMap&&e.anisotropyMap.isTexture===!0){const s=this.getTexture(n);i=qg(Ll.x,Ll.y,Ll.y.negate(),Ll.x).mul(s.rg.mul(2).sub(Ut(1)).normalize().mul(s.b))}else i=Ll;else if(n===X.IRIDESCENCE_THICKNESS){const s=He("1","float",e.iridescenceThicknessRange);if(e.iridescenceThicknessMap){const o=He("0","float",e.iridescenceThicknessRange);i=s.sub(o).mul(this.getTexture(n).g).add(o)}else i=s}else if(n===X.TRANSMISSION){const s=this.getFloat(n);e.transmissionMap?i=s.mul(this.getTexture(n).r):i=s}else if(n===X.THICKNESS){const s=this.getFloat(n);e.thicknessMap?i=s.mul(this.getTexture(n).g):i=s}else if(n===X.IOR)i=this.getFloat(n);else if(n===X.LIGHT_MAP)i=this.getTexture(n).rgb.mul(this.getFloat("lightMapIntensity"));else if(n===X.AO_MAP)i=this.getTexture(n).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const s=this.getNodeType(t);i=this.getCache(n,s)}return i}}X.ALPHA_TEST="alphaTest";X.COLOR="color";X.OPACITY="opacity";X.SHININESS="shininess";X.SPECULAR="specular";X.SPECULAR_STRENGTH="specularStrength";X.SPECULAR_INTENSITY="specularIntensity";X.SPECULAR_COLOR="specularColor";X.REFLECTIVITY="reflectivity";X.ROUGHNESS="roughness";X.METALNESS="metalness";X.NORMAL="normal";X.CLEARCOAT="clearcoat";X.CLEARCOAT_ROUGHNESS="clearcoatRoughness";X.CLEARCOAT_NORMAL="clearcoatNormal";X.EMISSIVE="emissive";X.ROTATION="rotation";X.SHEEN="sheen";X.SHEEN_ROUGHNESS="sheenRoughness";X.ANISOTROPY="anisotropy";X.IRIDESCENCE="iridescence";X.IRIDESCENCE_IOR="iridescenceIOR";X.IRIDESCENCE_THICKNESS="iridescenceThickness";X.IOR="ior";X.TRANSMISSION="transmission";X.THICKNESS="thickness";X.ATTENUATION_DISTANCE="attenuationDistance";X.ATTENUATION_COLOR="attenuationColor";X.LINE_SCALE="scale";X.LINE_DASH_SIZE="dashSize";X.LINE_GAP_SIZE="gapSize";X.LINE_WIDTH="linewidth";X.LINE_DASH_OFFSET="dashOffset";X.POINT_WIDTH="pointWidth";X.DISPERSION="dispersion";X.LIGHT_MAP="light";X.AO_MAP="ao";const b3=Pt(X,X.ALPHA_TEST),E3=Pt(X,X.COLOR);X.SHININESS;const A3=Pt(X,X.EMISSIVE),w3=Pt(X,X.OPACITY);X.SPECULAR;X.SPECULAR_INTENSITY;X.SPECULAR_COLOR;X.SPECULAR_STRENGTH;X.REFLECTIVITY;X.ROUGHNESS;X.METALNESS;const N3=Pt(X,X.NORMAL).context({getUV:null});X.CLEARCOAT;X.CLEARCOAT_ROUGHNESS;const R3=Pt(X,X.ROTATION);X.SHEEN;X.SHEEN_ROUGHNESS;X.ANISOTROPY;X.IRIDESCENCE;X.IRIDESCENCE_IOR;X.IRIDESCENCE_THICKNESS;X.TRANSMISSION;X.THICKNESS;X.IOR;X.ATTENUATION_DISTANCE;X.ATTENUATION_COLOR;X.LINE_SCALE;X.LINE_DASH_SIZE;X.LINE_GAP_SIZE;X.LINE_WIDTH;X.LINE_DASH_OFFSET;X.POINT_WIDTH;X.DISPERSION;const C3=Pt(X,X.LIGHT_MAP),P3=Pt(X,X.AO_MAP),Ll=ee(new Re).onReference(function(r){return r.material}).onRenderUpdate(function({material:r}){this.value.set(r.anisotropy*Math.cos(r.anisotropyRotation),r.anisotropy*Math.sin(r.anisotropyRotation))});class F3 extends an{static get type(){return"ModelViewProjectionNode"}constructor(t=null){super("vec4"),this.positionNode=t}setup(t){if(t.shaderStage==="fragment")return Er(t.context.mvp);const e=this.positionNode||Fn,n=t.renderer.nodes.modelViewMatrix||pd;return VM.mul(n).mul(e)}}const Gm=Q(F3);class De extends Kt{static get type(){return"IndexNode"}constructor(t){super("uint"),this.scope=t,this.isInstanceIndexNode=!0}generate(t){const e=this.getNodeType(t),n=this.scope;let i;if(n===De.VERTEX)i=t.getVertexIndex();else if(n===De.INSTANCE)i=t.getInstanceIndex();else if(n===De.DRAW)i=t.getDrawIndex();else if(n===De.INVOCATION_LOCAL)i=t.getInvocationLocalIndex();else if(n===De.INVOCATION_SUBGROUP)i=t.getInvocationSubgroupIndex();else if(n===De.SUBGROUP)i=t.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+n);let s;return t.shaderStage==="vertex"||t.shaderStage==="compute"?s=i:s=Er(this).build(t,e),s}}De.VERTEX="vertex";De.INSTANCE="instance";De.SUBGROUP="subgroup";De.INVOCATION_LOCAL="invocationLocal";De.INVOCATION_SUBGROUP="invocationSubgroup";De.DRAW="draw";const I3=Pt(De,De.VERTEX),ox=Pt(De,De.INSTANCE);De.SUBGROUP;De.INVOCATION_SUBGROUP;De.INVOCATION_LOCAL;const D3=Pt(De,De.DRAW);class L3 extends Kt{static get type(){return"InstanceNode"}constructor(t){super("void"),this.instanceMesh=t,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=te.FRAME,this.buffer=null,this.bufferColor=null}setup(t){let e=this.instanceMatrixNode,n=this.instanceColorNode;const i=this.instanceMesh;if(e===null){const a=i.instanceMatrix;if(i.count<=1e3)e=ix(a.array,"mat4",Math.max(i.count,1)).element(ox);else{const l=new ED(a.array,16,1);this.buffer=l;const c=a.usage===Sa?Z_:K_,h=[c(l,"vec4",16,0),c(l,"vec4",16,4),c(l,"vec4",16,8),c(l,"vec4",16,12)];e=Da(...h)}this.instanceMatrixNode=e}const s=i.instanceColor;if(s&&n===null){const a=new uD(s.array,3),l=s.usage===Sa?Z_:K_;this.bufferColor=a,n=gt(l(a,"vec3",3,0)),this.instanceColorNode=n}const o=e.mul(Fn).xyz;if(Fn.assign(o),t.hasGeometryAttribute("normal")){const a=s3(ns,e);ns.assign(a)}this.instanceColorNode!==null&&Hu("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMesh.instanceMatrix.usage!==Sa&&this.buffer!=null&&this.instanceMesh.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMesh.instanceMatrix.version),this.instanceMesh.instanceColor&&this.instanceMesh.instanceColor.usage!==Sa&&this.bufferColor!=null&&this.instanceMesh.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceMesh.instanceColor.version)}}const U3=Q(L3);class B3 extends Kt{static get type(){return"BatchNode"}constructor(t){super("void"),this.batchMesh=t,this.batchingIdNode=null}setup(t){this.batchingIdNode===null&&(t.getDrawIndex()===null?this.batchingIdNode=ox:this.batchingIdNode=D3);const n=qt(([p])=>{const x=ec(Li(this.batchMesh._indirectTexture),0),m=Qe(p).modInt(Qe(x)),g=Qe(p).div(Qe(x));return Li(this.batchMesh._indirectTexture,vs(m,g)).x}).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]})(Qe(this.batchingIdNode)),i=this.batchMesh._matricesTexture,s=ec(Li(i),0),o=Tt(n).mul(4).toInt().toVar(),a=o.modInt(s),l=o.div(Qe(s)),c=Da(Li(i,vs(a,l)),Li(i,vs(a.add(1),l)),Li(i,vs(a.add(2),l)),Li(i,vs(a.add(3),l))),h=this.batchMesh._colorsTexture;if(h!==null){const x=qt(([m])=>{const g=ec(Li(h),0).x,y=m,_=y.modInt(g),T=y.div(g);return Li(h,vs(_,T)).rgb}).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]})(n);Hu("vec3","vBatchColor").assign(x)}const u=ts(c);Fn.assign(c.mul(Fn));const d=ns.div(gt(u[0].dot(u[0]),u[1].dot(u[1]),u[2].dot(u[2]))),f=u.mul(d).xyz;ns.assign(f),t.hasGeometryAttribute("tangent")&&rx.mulAssign(u)}}const O3=Q(B3),ny=new WeakMap;class z3 extends Kt{static get type(){return"SkinningNode"}constructor(t,e=!1){super("void"),this.skinnedMesh=t,this.useReference=e,this.updateType=te.OBJECT,this.skinIndexNode=Sr("skinIndex","uvec4"),this.skinWeightNode=Sr("skinWeight","vec4");let n,i,s;e?(n=He("bindMatrix","mat4"),i=He("bindMatrixInverse","mat4"),s=J_("skeleton.boneMatrices","mat4",t.skeleton.bones.length)):(n=ee(t.bindMatrix,"mat4"),i=ee(t.bindMatrixInverse,"mat4"),s=ix(t.skeleton.boneMatrices,"mat4",t.skeleton.bones.length)),this.bindMatrixNode=n,this.bindMatrixInverseNode=i,this.boneMatricesNode=s,this.previousBoneMatricesNode=null}getSkinnedPosition(t=this.boneMatricesNode,e=Fn){const{skinIndexNode:n,skinWeightNode:i,bindMatrixNode:s,bindMatrixInverseNode:o}=this,a=t.element(n.x),l=t.element(n.y),c=t.element(n.z),h=t.element(n.w),u=s.mul(e),d=Ls(a.mul(i.x).mul(u),l.mul(i.y).mul(u),c.mul(i.z).mul(u),h.mul(i.w).mul(u));return o.mul(d).xyz}getSkinnedNormal(t=this.boneMatricesNode,e=ns){const{skinIndexNode:n,skinWeightNode:i,bindMatrixNode:s,bindMatrixInverseNode:o}=this,a=t.element(n.x),l=t.element(n.y),c=t.element(n.z),h=t.element(n.w);let u=Ls(i.x.mul(a),i.y.mul(l),i.z.mul(c),i.w.mul(h));return u=o.mul(u).mul(s),u.transformDirection(e).xyz}getPreviousSkinnedPosition(t){const e=t.object;return this.previousBoneMatricesNode===null&&(e.skeleton.previousBoneMatrices=new Float32Array(e.skeleton.boneMatrices),this.previousBoneMatricesNode=J_("skeleton.previousBoneMatrices","mat4",e.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,Q_)}needsPreviousBoneMatrices(t){const e=t.renderer.getMRT();return e&&e.has("velocity")}setup(t){this.needsPreviousBoneMatrices(t)&&Q_.assign(this.getPreviousSkinnedPosition(t));const e=this.getSkinnedPosition();if(Fn.assign(e),t.hasGeometryAttribute("normal")){const n=this.getSkinnedNormal();ns.assign(n),t.hasGeometryAttribute("tangent")&&rx.assign(n)}}generate(t,e){if(e!=="void")return Fn.build(t,e)}update(t){const n=(this.useReference?t.object:this.skinnedMesh).skeleton;ny.get(n)!==t.frameId&&(ny.set(n,t.frameId),this.previousBoneMatricesNode!==null&&n.previousBoneMatrices.set(n.boneMatrices),n.update())}}const G3=r=>ht(new z3(r,!0));class k3 extends Kt{static get type(){return"LoopNode"}constructor(t=[]){super(),this.params=t}getVarName(t){return String.fromCharCode(105+t)}getProperties(t){const e=t.getNodeProperties(this);if(e.stackNode!==void 0)return e;const n={};for(let s=0,o=this.params.length-1;s<o;s++){const a=this.params[s],l=a.isNode!==!0&&a.name||this.getVarName(s),c=a.isNode!==!0&&a.type||"int";n[l]=uc(l,c)}const i=t.addStack();return e.returnsNode=this.params[this.params.length-1](n,i,t),e.stackNode=i,t.removeStack(),e}getNodeType(t){const{returnsNode:e}=this.getProperties(t);return e?e.getNodeType(t):"void"}setup(t){this.getProperties(t)}generate(t){const e=this.getProperties(t),n=this.params,i=e.stackNode;for(let a=0,l=n.length-1;a<l;a++){const c=n[a];let h=null,u=null,d=null,f=null,p=null,x=null;c.isNode?(f="int",d=this.getVarName(a),h="0",u=c.build(t,f),p="<"):(f=c.type||"int",d=c.name||this.getVarName(a),h=c.start,u=c.end,p=c.condition,x=c.update,typeof h=="number"?h=h.toString():h&&h.isNode&&(h=h.build(t,f)),typeof u=="number"?u=u.toString():u&&u.isNode&&(u=u.build(t,f)),h!==void 0&&u===void 0?(h=h+" - 1",u="0",p=">="):u!==void 0&&h===void 0&&(h="0",p="<"),p===void 0&&(Number(h)>Number(u)?p=">=":p="<"));const m={start:h,end:u,condition:p},g=m.start,y=m.end;let _="",T="",w="";x||(f==="int"||f==="uint"?p.includes("<")?x="++":x="--":p.includes("<")?x="+= 1.":x="-= 1."),_+=t.getVar(f,d)+" = "+g,T+=d+" "+p+" "+y,w+=d+" "+x;const A=`for ( ${_}; ${T}; ${w} )`;t.addFlowCode((a===0?`
`:"")+t.tab+A+` {

`).addFlowTab()}const s=i.build(t,"void"),o=e.returnsNode?e.returnsNode.build(t):"";t.removeFlowTab().addFlowCode(`
`+t.tab+s);for(let a=0,l=this.params.length-1;a<l;a++)t.addFlowCode((a===0?"":t.tab)+`}

`).removeFlowTab();return t.addFlowTab(),o}}const ur=(...r)=>ht(new k3(Ia(r,"int"))).append(),V3=()=>uc("break").append(),zf=new WeakMap,hi=new ve,iy=qt(({bufferMap:r,influence:t,stride:e,width:n,depth:i,offset:s})=>{const o=Qe(I3).mul(e).add(s),a=o.div(n),l=o.sub(a.mul(n));return Li(r,vs(l,a)).depth(i).mul(t)});function H3(r){const t=r.morphAttributes.position!==void 0,e=r.morphAttributes.normal!==void 0,n=r.morphAttributes.color!==void 0,i=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,s=i!==void 0?i.length:0;let o=zf.get(r);if(o===void 0||o.count!==s){let y=function(){m.dispose(),zf.delete(r),r.removeEventListener("dispose",y)};var a=y;o!==void 0&&o.texture.dispose();const l=r.morphAttributes.position||[],c=r.morphAttributes.normal||[],h=r.morphAttributes.color||[];let u=0;t===!0&&(u=1),e===!0&&(u=2),n===!0&&(u=3);let d=r.attributes.position.count*u,f=1;const p=4096;d>p&&(f=Math.ceil(d/p),d=p);const x=new Float32Array(d*f*4*s),m=new $I(x,d,f,s);m.type=fi,m.needsUpdate=!0;const g=u*4;for(let _=0;_<s;_++){const T=l[_],w=c[_],A=h[_],v=d*f*4*_;for(let R=0;R<T.count;R++){const W=R*g;t===!0&&(hi.fromBufferAttribute(T,R),x[v+W+0]=hi.x,x[v+W+1]=hi.y,x[v+W+2]=hi.z,x[v+W+3]=0),e===!0&&(hi.fromBufferAttribute(w,R),x[v+W+4]=hi.x,x[v+W+5]=hi.y,x[v+W+6]=hi.z,x[v+W+7]=0),n===!0&&(hi.fromBufferAttribute(A,R),x[v+W+8]=hi.x,x[v+W+9]=hi.y,x[v+W+10]=hi.z,x[v+W+11]=A.itemSize===4?hi.w:1)}}o={count:s,texture:m,stride:u,size:new Re(d,f)},zf.set(r,o),r.addEventListener("dispose",y)}return o}class $3 extends Kt{static get type(){return"MorphNode"}constructor(t){super("void"),this.mesh=t,this.morphBaseInfluence=ee(1),this.updateType=te.OBJECT}setup(t){const{geometry:e}=t,n=e.morphAttributes.position!==void 0,i=e.hasAttribute("normal")&&e.morphAttributes.normal!==void 0,s=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=s!==void 0?s.length:0,{texture:a,stride:l,size:c}=H3(e);n===!0&&Fn.mulAssign(this.morphBaseInfluence),i===!0&&ns.mulAssign(this.morphBaseInfluence);const h=Qe(c.width);ur(o,({i:u})=>{const d=Tt(0).toVar();this.mesh.count>1&&this.mesh.morphTexture!==null&&this.mesh.morphTexture!==void 0?d.assign(Li(this.mesh.morphTexture,vs(Qe(u).add(1),Qe(ox))).r):d.assign(He("morphTargetInfluences","float").element(u).toVar()),n===!0&&Fn.addAssign(iy({bufferMap:a,influence:d,stride:l,width:h,depth:u,offset:Qe(0)})),i===!0&&ns.addAssign(iy({bufferMap:a,influence:d,stride:l,width:h,depth:u,offset:Qe(1)}))})}update(){const t=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?t.value=1:t.value=1-this.mesh.morphTargetInfluences.reduce((e,n)=>e+n,0)}}const W3=Q($3),q3=r=>r.sort((t,e)=>t.id-e.id),X3=(r,t)=>{for(const e of t)if(e.isAnalyticLightNode&&e.light.id===r)return e;return null},Gf=new WeakMap;class ZM extends Kt{static get type(){return"LightsNode"}constructor(t=[]){super("vec3"),this.totalDiffuseNode=gt().toVar("totalDiffuse"),this.totalSpecularNode=gt().toVar("totalSpecular"),this.outgoingLightNode=gt().toVar("outgoingLight"),this._lights=t,this._lightNodes=null,this._lightNodesHash=null,this.global=!0}getHash(t){if(this._lightNodesHash===null){this._lightNodes===null&&this.setupLightsNode(t);const e=[];for(const n of this._lightNodes)e.push(n.getHash());this._lightNodesHash="lights-"+e.join(",")}return this._lightNodesHash}analyze(t){const e=t.getDataFromNode(this);for(const n of e.nodes)n.build(t)}setupLightsNode(t){const e=[],n=this._lightNodes,i=q3(this._lights),s=t.renderer.nodes.library;for(const o of i)if(o.isNode)e.push(ht(o));else{let a=null;if(n!==null&&(a=X3(o.id,n)),a===null){const l=s.getLightNodeClass(o.constructor);if(l===null){console.warn(`LightsNode.setupNodeLights: Light node not found for ${o.constructor.name}`);continue}let c=null;Gf.has(o)?c=Gf.get(o):(c=new l(o),Gf.set(o,c)),e.push(c)}}this._lightNodes=e}setup(t){this._lightNodes===null&&this.setupLightsNode(t);const e=t.context,n=e.lightingModel;let i=this.outgoingLightNode;if(n){const{_lightNodes:s,totalDiffuseNode:o,totalSpecularNode:a}=this;e.outgoingLight=i;const l=t.addStack(),c=t.getDataFromNode(this);c.nodes=l.nodes,n.start(e,l,t);for(const g of s)g.build(t);n.indirect(e,l,t);const{backdrop:h,backdropAlpha:u}=e,{directDiffuse:d,directSpecular:f,indirectDiffuse:p,indirectSpecular:x}=e.reflectedLight;let m=d.add(p);h!==null&&(u!==null?m=gt(u.mix(m,h)):m=gt(h),e.material.transparent=!0),o.assign(m),a.assign(f.add(x)),i.assign(o.add(a)),n.finish(e,l,t),i=i.bypass(t.removeStack())}return i}setLights(t){return this._lights=t,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}}const Y3=Q(ZM);class ax extends Kt{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}generate(){console.warn("Abstract function.")}}class j3 extends ax{static get type(){return"AONode"}constructor(t=null){super(),this.aoNode=t}setup(t){t.context.ambientOcclusion.mulAssign(this.aoNode)}}class K3 extends BM{static get type(){return"LightingContextNode"}constructor(t,e=null,n=null,i=null){super(t),this.lightingModel=e,this.backdropNode=n,this.backdropAlphaNode=i,this._value=null}getContext(){const{backdropNode:t,backdropAlphaNode:e}=this,n=gt().toVar("directDiffuse"),i=gt().toVar("directSpecular"),s=gt().toVar("indirectDiffuse"),o=gt().toVar("indirectSpecular"),a={directDiffuse:n,directSpecular:i,indirectDiffuse:s,indirectSpecular:o};return{radiance:gt().toVar("radiance"),irradiance:gt().toVar("irradiance"),iblIrradiance:gt().toVar("iblIrradiance"),ambientOcclusion:Tt(1).toVar("ambientOcclusion"),reflectedLight:a,backdrop:t,backdropAlpha:e}}setup(t){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||t.context.lightingModel,super.setup(t)}}const Z3=Q(K3);class Q3 extends ax{static get type(){return"IrradianceNode"}constructor(t){super(),this.node=t}setup(t){t.context.irradiance.addAssign(this.node)}}let Ul,Bl;class Ke extends Kt{static get type(){return"ScreenNode"}constructor(t){super(),this.scope=t,this.isViewportNode=!0}getNodeType(){return this.scope===Ke.VIEWPORT?"vec4":"vec2"}getUpdateType(){let t=te.NONE;return(this.scope===Ke.SIZE||this.scope===Ke.VIEWPORT)&&(t=te.RENDER),this.updateType=t,t}update({renderer:t}){const e=t.getRenderTarget();this.scope===Ke.VIEWPORT?e!==null?Bl.copy(e.viewport):(t.getViewport(Bl),Bl.multiplyScalar(t.getPixelRatio())):e!==null?(Ul.width=e.width,Ul.height=e.height):t.getDrawingBufferSize(Ul)}setup(){const t=this.scope;let e=null;return t===Ke.SIZE?e=ee(Ul||(Ul=new Re)):t===Ke.VIEWPORT?e=ee(Bl||(Bl=new ve)):e=Ut(gd.div(sy)),e}generate(t){if(this.scope===Ke.COORDINATE){let e=t.getFragCoord();if(t.isFlipY()){const n=t.getNodeProperties(sy).outputNode.build(t);e=`${t.getType("vec2")}( ${e}.x, ${n}.y - ${e}.y )`}return e}return super.generate(t)}}Ke.COORDINATE="coordinate";Ke.VIEWPORT="viewport";Ke.SIZE="size";Ke.UV="uv";const pc=Pt(Ke,Ke.UV),sy=Pt(Ke,Ke.SIZE),gd=Pt(Ke,Ke.COORDINATE),QM=Pt(Ke,Ke.VIEWPORT);QM.zw;QM.xy;const Ol=new Re;class J3 extends Oc{static get type(){return"ViewportTextureNode"}constructor(t=pc,e=null,n=null){n===null&&(n=new pD,n.minFilter=Ns),super(n,t,e),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=te.FRAME}updateBefore(t){const e=t.renderer;e.getDrawingBufferSize(Ol);const n=this.value;(n.image.width!==Ol.width||n.image.height!==Ol.height)&&(n.image.width=Ol.width,n.image.height=Ol.height,n.needsUpdate=!0);const i=n.generateMipmaps;n.generateMipmaps=this.generateMipmaps,e.copyFramebufferToTexture(n),n.generateMipmaps=i}clone(){const t=new this.constructor(this.uvNode,this.levelNode,this.value);return t.generateMipmaps=this.generateMipmaps,t}}let kf=null;class tB extends J3{static get type(){return"ViewportDepthTextureNode"}constructor(t=pc,e=null){kf===null&&(kf=new Lc),super(t,e,kf)}}const eB=Q(tB);class Kn extends Kt{static get type(){return"ViewportDepthNode"}constructor(t,e=null){super("float"),this.scope=t,this.valueNode=e,this.isViewportDepthNode=!0}generate(t){const{scope:e}=this;return e===Kn.DEPTH_BASE?t.getFragDepth():super.generate(t)}setup({camera:t}){const{scope:e}=this,n=this.valueNode;let i=null;if(e===Kn.DEPTH_BASE)n!==null&&(i=tv().assign(n));else if(e===Kn.DEPTH)t.isPerspectiveCamera?i=nB(Hn.z,Il,Dl):i=mu(Hn.z,Il,Dl);else if(e===Kn.LINEAR_DEPTH)if(n!==null)if(t.isPerspectiveCamera){const s=JM(n,Il,Dl);i=mu(s,Il,Dl)}else i=n;else i=mu(Hn.z,Il,Dl);return i}}Kn.DEPTH_BASE="depthBase";Kn.DEPTH="depth";Kn.LINEAR_DEPTH="linearDepth";const mu=(r,t,e)=>r.add(t).div(t.sub(e)),nB=(r,t,e)=>t.add(r).mul(e).div(e.sub(t).mul(r)),JM=(r,t,e)=>t.mul(e).div(e.sub(t).mul(r).sub(e)),tv=Q(Kn,Kn.DEPTH_BASE),ev=Pt(Kn,Kn.DEPTH),iB=Q(Kn,Kn.LINEAR_DEPTH);eB();ev.assign=r=>tv(r);class Mr extends Kt{static get type(){return"ClippingNode"}constructor(t=Mr.DEFAULT){super(),this.scope=t}setup(t){super.setup(t);const e=t.clippingContext,{localClipIntersection:n,localClippingCount:i,globalClippingCount:s}=e,o=s+i,a=n?o-i:o;return this.scope===Mr.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(e.planes,o,a):this.setupDefault(e.planes,o,a)}setupAlphaToCoverage(t,e,n){return qt(()=>{const i=fc(t),s=da("float","distanceToPlane"),o=da("float","distanceToGradient"),a=da("float","clipOpacity");a.assign(1);let l;if(ur(n,({i:c})=>{l=i.element(c),s.assign(Hn.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),a.mulAssign(hc(o.negate(),o,s)),a.equal(0).discard()}),n<e){const c=da("float","unionclipOpacity");c.assign(1),ur({start:n,end:e},({i:h})=>{l=i.element(h),s.assign(Hn.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),c.mulAssign(hc(o.negate(),o,s).oneMinus())}),a.mulAssign(c.oneMinus())}Ss.a.mulAssign(a),Ss.a.equal(0).discard()})()}setupDefault(t,e,n){return qt(()=>{const i=fc(t);let s;if(ur(n,({i:o})=>{s=i.element(o),Hn.dot(s.xyz).greaterThan(s.w).discard()}),n<e){const o=da("bool","clipped");o.assign(!0),ur({start:n,end:e},({i:a})=>{s=i.element(a),o.assign(Hn.dot(s.xyz).greaterThan(s.w).and(o))}),o.discard()}})()}}Mr.ALPHA_TO_COVERAGE="alphaToCoverage";Mr.DEFAULT="default";const sB=()=>ht(new Mr),rB=()=>ht(new Mr(Mr.ALPHA_TO_COVERAGE));class Fs extends lc{static get type(){return"NodeMaterial"}constructor(){super(),this.isNodeMaterial=!0,this.type=this.constructor.type,this.forceSinglePass=!1,this.fog=!0,this.lights=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.depthNode=null,this.shadowNode=null,this.shadowPositionNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+SM(this)}build(t){this.setup(t)}setupObserver(t){return new wD(t)}setup(t){t.context.setupNormal=()=>this.setupNormal(t),t.addStack(),t.stack.outputNode=this.vertexNode||this.setupPosition(t),t.addFlow("vertex",t.removeStack()),t.addStack();let e;const n=this.setupClipping(t);if(this.depthWrite===!0&&this.setupDepth(t),this.fragmentNode===null){this.setupDiffuseColor(t),this.setupVariants(t);const i=this.setupLighting(t);n!==null&&t.stack.add(n);const s=Ae(i,Ss.a).max(0);if(e=this.setupOutput(t,s),uL.assign(e),this.outputNode!==null&&(e=this.outputNode),t.renderer.getRenderTarget()!==null){const a=t.renderer.getMRT(),l=this.mrtNode;a!==null?(e=a,l!==null&&(e=a.merge(l))):l!==null&&(e=l)}}else{let i=this.fragmentNode;i.isOutputStructNode!==!0&&(i=Ae(i)),e=this.setupOutput(t,i)}t.stack.outputNode=e,t.addFlow("fragment",t.removeStack()),t.monitor=this.setupObserver(t)}setupClipping(t){if(t.clippingContext===null)return null;const{globalClippingCount:e,localClippingCount:n}=t.clippingContext;let i=null;if(e||n){const s=t.renderer.samples;this.alphaToCoverage&&s>1?i=rB():t.stack.add(sB())}return i}setupDepth(t){const{renderer:e}=t;let n=this.depthNode;if(n===null){const i=e.getMRT();i&&i.has("depth")?n=i.get("depth"):e.logarithmicDepthBuffer===!0&&(n=Gm().w.add(1).log2().mul(ZU).mul(.5))}n!==null&&ev.assign(n).append()}setupPosition(t){const{object:e}=t,n=e.geometry;if(t.addStack(),(n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color)&&W3(e).append(),e.isSkinnedMesh===!0&&G3(e).append(),this.displacementMap){const s=fa("displacementMap","texture"),o=fa("displacementScale","float"),a=fa("displacementBias","float");Fn.addAssign(ns.normalize().mul(s.x.mul(o).add(a)))}e.isBatchedMesh&&O3(e).append(),e.instanceMatrix&&e.instanceMatrix.isInstancedBufferAttribute===!0&&U3(e).append(),this.positionNode!==null&&Fn.assign(this.positionNode);const i=Gm();return t.context.vertex=t.removeStack(),t.context.mvp=i,i}setupDiffuseColor({object:t,geometry:e}){let n=this.colorNode?Ae(this.colorNode):E3;this.vertexColors===!0&&e.hasAttribute("color")&&(n=Ae(n.xyz.mul(Sr("color","vec3")),n.a)),t.instanceColor&&(n=Hu("vec3","vInstanceColor").mul(n)),t.isBatchedMesh&&t._colorsTexture&&(n=Hu("vec3","vBatchColor").mul(n)),Ss.assign(n);const i=this.opacityNode?Tt(this.opacityNode):w3;if(Ss.a.assign(Ss.a.mul(i)),this.alphaTestNode!==null||this.alphaTest>0){const s=this.alphaTestNode!==null?Tt(this.alphaTestNode):b3;Ss.a.lessThanEqual(s).discard()}this.transparent===!1&&this.blending===mr&&this.alphaToCoverage===!1&&Ss.a.assign(1)}setupVariants(){}setupOutgoingLight(){return this.lights===!0?gt(0):Ss.rgb}setupNormal(){return this.normalNode?gt(this.normalNode):N3}setupEnvironment(){let t=null;return this.envNode?t=this.envNode:this.envMap&&(t=this.envMap.isCubeTexture?fa("envMap","cubeTexture"):fa("envMap","texture")),t}setupLightMap(t){let e=null;return t.material.lightMap&&(e=new Q3(C3)),e}setupLights(t){const e=[],n=this.setupEnvironment(t);n&&n.isLightingNode&&e.push(n);const i=this.setupLightMap(t);if(i&&i.isLightingNode&&e.push(i),this.aoNode!==null||t.material.aoMap){const o=this.aoNode!==null?this.aoNode:P3;e.push(new j3(o))}let s=this.lightsNode||t.lightsNode;return e.length>0&&(s=Y3([...s.getLights(),...e])),s}setupLightingModel(){}setupLighting(t){const{material:e}=t,{backdropNode:n,backdropAlphaNode:i,emissiveNode:s}=this,a=this.lights===!0||this.lightsNode!==null?this.setupLights(t):null;let l=this.setupOutgoingLight(t);if(a&&a.getScope().getLights().length>0){const c=this.setupLightingModel(t);l=Z3(a,c,n,i)}else n!==null&&(l=gt(i!==null?zn(l,n,i):n));return(s&&s.isNode===!0||e.emissive&&e.emissive.isColor===!0)&&(Y_.assign(gt(s||A3)),l=l.add(Y_)),l}setupOutput(t,e){if(this.fog===!0){const n=t.fogNode;n&&(e=Ae(n.mix(e.rgb,n.colorNode),e.a))}return e}setDefaultValues(t){for(const n in t){const i=t[n];this[n]===void 0&&(this[n]=i,i&&i.clone&&(this[n]=i.clone()))}const e=Object.getOwnPropertyDescriptors(t.constructor.prototype);for(const n in e)Object.getOwnPropertyDescriptor(this.constructor.prototype,n)===void 0&&e[n].get!==void 0&&Object.defineProperty(this.constructor.prototype,n,e[n])}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{},nodes:{}});const n=lc.prototype.toJSON.call(this,t),i=Gu(this);n.inputNodes={};for(const{property:o,childNode:a}of i)n.inputNodes[o]=a.toJSON(t).uuid;function s(o){const a=[];for(const l in o){const c=o[l];delete c.metadata,a.push(c)}return a}if(e){const o=s(t.textures),a=s(t.images),l=s(t.nodes);o.length>0&&(n.textures=o),a.length>0&&(n.images=a),l.length>0&&(n.nodes=l)}return n}copy(t){return this.lightsNode=t.lightsNode,this.envNode=t.envNode,this.colorNode=t.colorNode,this.normalNode=t.normalNode,this.opacityNode=t.opacityNode,this.backdropNode=t.backdropNode,this.backdropAlphaNode=t.backdropAlphaNode,this.alphaTestNode=t.alphaTestNode,this.positionNode=t.positionNode,this.depthNode=t.depthNode,this.shadowNode=t.shadowNode,this.shadowPositionNode=t.shadowPositionNode,this.outputNode=t.outputNode,this.mrtNode=t.mrtNode,this.fragmentNode=t.fragmentNode,this.vertexNode=t.vertexNode,super.copy(t)}}class oB extends an{static get type(){return"EquirectUVNode"}constructor(t=$M){super("vec2"),this.dirNode=t}setup(){const t=this.dirNode,e=t.z.atan2(t.x).mul(1/(Math.PI*2)).add(.5),n=t.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return Ut(e,n)}}const nv=Q(oB);class iv extends lD{constructor(t=1,e={}){super(t,e),this.isCubeRenderTarget=!0}fromEquirectangularTexture(t,e){const n=e.minFilter,i=e.generateMipmaps;e.generateMipmaps=!0,this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const s=new Dc(5,5,5),o=nv($M),a=new Fs;a.colorNode=Ge(e,o,0),a.side=zs,a.blending=Wa;const l=new fo(s,a),c=new mM;c.add(l),e.minFilter===Ns&&(e.minFilter=Qn);const h=new pM(1,10,this),u=t.getMRT();return t.setMRT(null),h.update(t,c),t.setMRT(u),e.minFilter=n,e.currentGenerateMipmaps=i,l.geometry.dispose(),l.material.dispose(),this}}const nc=new WeakMap;class aB extends an{static get type(){return"CubeMapNode"}constructor(t){super("vec3"),this.envNode=t,this._cubeTexture=null,this._cubeTextureNode=dc();const e=new Bg;e.isRenderTargetTexture=!0,this._defaultTexture=e,this.updateBeforeType=te.RENDER}updateBefore(t){const{renderer:e,material:n}=t,i=this.envNode;if(i.isTextureNode||i.isMaterialReferenceNode){const s=i.isTextureNode?i.value:n[i.property];if(s&&s.isTexture){const o=s.mapping;if(o===Rc||o===Cc){if(nc.has(s)){const a=nc.get(s);ry(a,s.mapping),this._cubeTexture=a}else{const a=s.image;if(lB(a)){const l=new iv(a.height);l.fromEquirectangularTexture(e,s),ry(l.texture,s.mapping),this._cubeTexture=l.texture,nc.set(s,l.texture),s.addEventListener("dispose",sv)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(t){return this.updateBefore(t),this._cubeTextureNode}}function lB(r){return r==null?!1:r.height>0}function sv(r){const t=r.target;t.removeEventListener("dispose",sv);const e=nc.get(t);e!==void 0&&(nc.delete(t),e.dispose())}function ry(r,t){t===Rc?r.mapping=lo:t===Cc&&(r.mapping=qa)}const cB=Q(aB);gt(.04);Tt(1);const oy=Tt(1),km=Tt(-2),zh=Tt(.8),Vf=Tt(-1),Gh=Tt(.4),Hf=Tt(2),kh=Tt(.305),$f=Tt(3),ay=Tt(.21),hB=Tt(4),ly=Tt(4),uB=Tt(16),dB=qt(([r])=>{const t=gt(ji(r)).toVar(),e=Tt(-1).toVar();return pi(t.x.greaterThan(t.z),()=>{pi(t.x.greaterThan(t.y),()=>{e.assign(Vi(r.x.greaterThan(0),0,3))}).Else(()=>{e.assign(Vi(r.y.greaterThan(0),1,4))})}).Else(()=>{pi(t.z.greaterThan(t.y),()=>{e.assign(Vi(r.z.greaterThan(0),2,5))}).Else(()=>{e.assign(Vi(r.y.greaterThan(0),1,4))})}),e}).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),fB=qt(([r,t])=>{const e=Ut().toVar();return pi(t.equal(0),()=>{e.assign(Ut(r.z,r.y).div(ji(r.x)))}).ElseIf(t.equal(1),()=>{e.assign(Ut(r.x.negate(),r.z.negate()).div(ji(r.y)))}).ElseIf(t.equal(2),()=>{e.assign(Ut(r.x.negate(),r.y).div(ji(r.z)))}).ElseIf(t.equal(3),()=>{e.assign(Ut(r.z.negate(),r.y).div(ji(r.x)))}).ElseIf(t.equal(4),()=>{e.assign(Ut(r.x.negate(),r.z).div(ji(r.y)))}).Else(()=>{e.assign(Ut(r.x,r.y).div(ji(r.z)))}),Nn(.5,e.add(1))}).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),pB=qt(([r])=>{const t=Tt(0).toVar();return pi(r.greaterThanEqual(zh),()=>{t.assign(oy.sub(r).mul(Vf.sub(km)).div(oy.sub(zh)).add(km))}).ElseIf(r.greaterThanEqual(Gh),()=>{t.assign(zh.sub(r).mul(Hf.sub(Vf)).div(zh.sub(Gh)).add(Vf))}).ElseIf(r.greaterThanEqual(kh),()=>{t.assign(Gh.sub(r).mul($f.sub(Hf)).div(Gh.sub(kh)).add(Hf))}).ElseIf(r.greaterThanEqual(ay),()=>{t.assign(kh.sub(r).mul(hB.sub($f)).div(kh.sub(ay)).add($f))}).Else(()=>{t.assign(Tt(-2).mul(Yg(Nn(1.16,r))))}),t}).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),mB=qt(([r,t])=>{const e=r.toVar();e.assign(Nn(2,e).sub(1));const n=gt(e,1).toVar();return pi(t.equal(0),()=>{n.assign(n.zyx)}).ElseIf(t.equal(1),()=>{n.assign(n.xzy),n.xz.mulAssign(-1)}).ElseIf(t.equal(2),()=>{n.x.mulAssign(-1)}).ElseIf(t.equal(3),()=>{n.assign(n.zyx),n.xz.mulAssign(-1)}).ElseIf(t.equal(4),()=>{n.assign(n.xzy),n.xy.mulAssign(-1)}).ElseIf(t.equal(5),()=>{n.z.mulAssign(-1)}),n}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),gB=qt(([r,t,e,n,i,s])=>{const o=Tt(e),a=gt(t),l=po(pB(o),km,s),c=ud(l),h=FM(l),u=gt(Vm(r,a,h,n,i,s)).toVar();return pi(c.notEqual(0),()=>{const d=gt(Vm(r,a,h.add(1),n,i,s)).toVar();u.assign(zn(u,d,c))}),u}),Vm=qt(([r,t,e,n,i,s])=>{const o=Tt(e).toVar(),a=gt(t),l=Tt(dB(a)).toVar(),c=Tt(Us(ly.sub(o),0)).toVar();o.assign(Us(o,ly));const h=Tt(Bm(o)).toVar(),u=Ut(fB(a,l).mul(h.sub(2)).add(1)).toVar();return pi(l.greaterThan(2),()=>{u.y.addAssign(h),l.subAssign(3)}),u.x.addAssign(l.mul(h)),u.x.addAssign(c.mul(Nn(3,uB))),u.y.addAssign(Nn(4,Bm(s).sub(h))),u.x.mulAssign(n),u.y.mulAssign(i),r.uv(u).grad(Ut(),Ut())}),Wf=qt(({envMap:r,mipInt:t,outputDirection:e,theta:n,axis:i,CUBEUV_TEXEL_WIDTH:s,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const l=or(n),c=e.mul(l).add(i.cross(e).mul(bs(n))).add(i.mul(i.dot(e).mul(l.oneMinus())));return Vm(r,c,t,s,o,a)}),xB=qt(({n:r,latitudinal:t,poleAxis:e,outputDirection:n,weights:i,samples:s,dTheta:o,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u})=>{const d=gt(Vi(t,e,UM(e,n))).toVar();pi(PM(d.equals(gt(0))),()=>{d.assign(gt(n.z,0,n.x.negate()))}),d.assign(Kg(d));const f=gt().toVar();return f.addAssign(i.element(Qe(0)).mul(Wf({theta:0,axis:d,outputDirection:n,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u}))),ur({start:Qe(1),end:r},({i:p})=>{pi(p.greaterThanEqual(s),()=>{V3()});const x=Tt(o.mul(Tt(p))).toVar();f.addAssign(i.element(p).mul(Wf({theta:x.mul(-1),axis:d,outputDirection:n,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u}))),f.addAssign(i.element(p).mul(Wf({theta:x,axis:d,outputDirection:n,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u})))}),Ae(f,1)});let $u=null;const cy=new WeakMap;function _B(r){const t=Math.log2(r)-2,e=1/r;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:e,maxMip:t}}function yB(r){let t=cy.get(r);if((t!==void 0?t.pmremVersion:-1)!==r.pmremVersion){const n=r.image;if(r.isCubeTexture)if(TB(n))t=$u.fromCubemap(r,t);else return null;else if(MB(n))t=$u.fromEquirectangular(r,t);else return null;t.pmremVersion=r.pmremVersion,cy.set(r,t)}return t.texture}class SB extends an{static get type(){return"PMREMNode"}constructor(t,e=null,n=null){super("vec3"),this._value=t,this._pmrem=null,this.uvNode=e,this.levelNode=n,this._generator=null;const i=new $n;i.isRenderTargetTexture=!0,this._texture=Ge(i),this._width=ee(0),this._height=ee(0),this._maxMip=ee(0),this.updateBeforeType=te.RENDER}set value(t){this._value=t,this._pmrem=null}get value(){return this._value}updateFromTexture(t){const e=_B(t.image.height);this._texture.value=t,this._width.value=e.texelWidth,this._height.value=e.texelHeight,this._maxMip.value=e.maxMip}updateBefore(){let t=this._pmrem;const e=t?t.pmremVersion:-1,n=this._value;e!==n.pmremVersion&&(n.isPMREMTexture===!0?t=n:t=yB(n),t!==null&&(this._pmrem=t,this.updateFromTexture(t)))}setup(t){$u===null&&($u=t.createPMREMGenerator()),this.updateBefore(t);let e=this.uvNode;e===null&&t.context.getUV&&(e=t.context.getUV(this));const n=this.value;t.renderer.coordinateSystem===ki&&n.isPMREMTexture!==!0&&n.isRenderTargetTexture===!0&&(e=gt(e.x.negate(),e.yz));let i=this.levelNode;return i===null&&t.context.getTextureLevel&&(i=t.context.getTextureLevel(this)),gB(this._texture,e,i,this._width,this._height,this._maxMip)}}function TB(r){if(r==null)return!1;let t=0;const e=6;for(let n=0;n<e;n++)r[n]!==void 0&&t++;return t===e}function MB(r){return r==null?!1:r.height>0}const vB=Q(SB);class bB extends an{static get type(){return"RotateNode"}constructor(t,e){super(),this.positionNode=t,this.rotationNode=e}getNodeType(t){return this.positionNode.getNodeType(t)}setup(t){const{rotationNode:e,positionNode:n}=this;if(this.getNodeType(t)==="vec2"){const s=e.cos(),o=e.sin();return qg(s,o,o.negate(),s).mul(n)}else{const s=e,o=Da(Ae(1,0,0,0),Ae(0,or(s.x),bs(s.x).negate(),0),Ae(0,bs(s.x),or(s.x),0),Ae(0,0,0,1)),a=Da(Ae(or(s.y),0,bs(s.y),0),Ae(0,1,0,0),Ae(bs(s.y).negate(),0,or(s.y),0),Ae(0,0,0,1)),l=Da(Ae(or(s.z),bs(s.z).negate(),0,0),Ae(bs(s.z),or(s.z),0,0),Ae(0,0,1,0),Ae(0,0,0,1));return o.mul(a).mul(l).mul(Ae(n,1)).xyz}}}const EB=Q(bB),AB=new cD;class wB extends Fs{static get type(){return"SpriteNodeMaterial"}constructor(t){super(),this.isSpriteNodeMaterial=!0,this.lights=!1,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(AB),this.setValues(t)}setupPosition({object:t,camera:e,context:n}){const i=this.sizeAttenuation,{positionNode:s,rotationNode:o,scaleNode:a}=this,l=Fn;let c=pd.mul(gt(s||0)),h=Ut(ja[0].xyz.length(),ja[1].xyz.length());a!==null&&(h=h.mul(a)),!i&&e.isPerspectiveCamera&&(h=h.mul(c.z.negate()));let u=l.xy;if(t.center&&t.center.isVector2===!0){const x=wU("center","vec2");u=u.sub(x.sub(.5))}u=u.mul(h);const d=Tt(o||R3),f=EB(u,d);c=Ae(c.xy.add(f),c.zw);const p=VM.mul(c);return n.vertex=l,p}copy(t){return this.positionNode=t.positionNode,this.rotationNode=t.rotationNode,this.scaleNode=t.scaleNode,super.copy(t)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(t){this._useSizeAttenuation!==t&&(this._useSizeAttenuation=t,this.needsUpdate=!0)}}qt(({texture:r,uv:t})=>{const n=gt().toVar();return pi(t.x.lessThan(1e-4),()=>{n.assign(gt(1,0,0))}).ElseIf(t.y.lessThan(1e-4),()=>{n.assign(gt(0,1,0))}).ElseIf(t.z.lessThan(1e-4),()=>{n.assign(gt(0,0,1))}).ElseIf(t.x.greaterThan(1-1e-4),()=>{n.assign(gt(-1,0,0))}).ElseIf(t.y.greaterThan(1-1e-4),()=>{n.assign(gt(0,-1,0))}).ElseIf(t.z.greaterThan(1-1e-4),()=>{n.assign(gt(0,0,-1))}).Else(()=>{const s=r.uv(t.add(gt(-.01,0,0))).r.sub(r.uv(t.add(gt(.01,0,0))).r),o=r.uv(t.add(gt(0,-.01,0))).r.sub(r.uv(t.add(gt(0,.01,0))).r),a=r.uv(t.add(gt(0,0,-.01))).r.sub(r.uv(t.add(gt(0,0,.01))).r);n.assign(gt(s,o,a))}),n.normalize()});class NB{constructor(t,e){this.nodes=t,this.info=e,this.animationLoop=null,this.requestId=null,this._init()}_init(){const t=(e,n)=>{this.requestId=self.requestAnimationFrame(t),this.info.autoReset===!0&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,this.animationLoop!==null&&this.animationLoop(e,n)};t()}dispose(){self.cancelAnimationFrame(this.requestId),this.requestId=null}setAnimationLoop(t){this.animationLoop=t}}class Bs{constructor(){this.weakMap=new WeakMap}get(t){let e=this.weakMap;for(let n=0;n<t.length;n++)if(e=e.get(t[n]),e===void 0)return;return e.get(t[t.length-1])}set(t,e){let n=this.weakMap;for(let i=0;i<t.length;i++){const s=t[i];n.has(s)===!1&&n.set(s,new WeakMap),n=n.get(s)}return n.set(t[t.length-1],e)}delete(t){let e=this.weakMap;for(let n=0;n<t.length;n++)if(e=e.get(t[n]),e===void 0)return!1;return e.delete(t[t.length-1])}}const qf=new rr;class Hm{constructor(){this.version=0,this.globalClippingCount=0,this.localClippingCount=0,this.localClippingEnabled=!1,this.localClipIntersection=!1,this.planes=[],this.parentVersion=0,this.viewNormalMatrix=new mi,this.cacheKey=0}projectPlanes(t,e){const n=t.length,i=this.planes;for(let s=0;s<n;s++){qf.copy(t[s]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const o=i[e+s],a=qf.normal;o.x=-a.x,o.y=-a.y,o.z=-a.z,o.w=qf.constant}}updateGlobal(t,e){const n=t.clippingPlanes;this.viewMatrix=e.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix);let i=!1;if(Array.isArray(n)&&n.length!==0){const s=n.length;if(s!==this.globalClippingCount){const o=[];for(let a=0;a<s;a++)o.push(new ve);this.globalClippingCount=s,this.planes=o,i=!0}this.projectPlanes(n,0)}else this.globalClippingCount!==0&&(this.globalClippingCount=0,this.planes=[],i=!0);t.localClippingEnabled!==this.localClippingEnabled&&(this.localClippingEnabled=t.localClippingEnabled,i=!0),i&&(this.version++,this.cacheKey=zu(this.globalClippingCount,this.localClippingEnabled===!0?1:0))}update(t,e){let n=!1;if(this!==t&&t.version!==this.parentVersion&&(this.globalClippingCount=e.isShadowNodeMaterial?0:t.globalClippingCount,this.localClippingEnabled=t.localClippingEnabled,this.planes=Array.from(t.planes),this.parentVersion=t.version,this.viewMatrix=t.viewMatrix,this.viewNormalMatrix=t.viewNormalMatrix,n=!0),this.localClippingEnabled){const i=e.clippingPlanes;if(Array.isArray(i)&&i.length!==0){const s=i.length,o=this.planes,a=this.globalClippingCount;if(n||s!==this.localClippingCount){o.length=a+s;for(let l=0;l<s;l++)o[a+l]=new ve;this.localClippingCount=s,n=!0}this.projectPlanes(i,a)}else this.localClippingCount!==0&&(this.localClippingCount=0,n=!0);this.localClipIntersection!==e.clipIntersection&&(this.localClipIntersection=e.clipIntersection,n=!0)}n&&(this.version+=t.version,this.cacheKey=zu(t.cacheKey,this.localClippingCount,this.localClipIntersection===!0?1:0))}}let RB=0;function CB(r){const t=Object.keys(r);let e=Object.getPrototypeOf(r);for(;e;){const n=Object.getOwnPropertyDescriptors(e);for(const i in n)if(n[i]!==void 0){const s=n[i];s&&typeof s.get=="function"&&t.push(i)}e=Object.getPrototypeOf(e)}return t}class PB{constructor(t,e,n,i,s,o,a,l,c){this._nodes=t,this._geometries=e,this.id=RB++,this.renderer=n,this.object=i,this.material=s,this.scene=o,this.camera=a,this.lightsNode=l,this.context=c,this.geometry=i.geometry,this.version=s.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.updateClipping(c.clippingContext),this.clippingContextVersion=this.clippingContext.version,this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(t){const e=this.material;let n=this.clippingContext;Array.isArray(e.clippingPlanes)?((n===t||!n)&&(n=new Hm,this.clippingContext=n),n.update(t,e)):this.clippingContext!==t&&(this.clippingContext=t)}get clippingNeedsUpdate(){return this.clippingContext.version===this.clippingContextVersion?!1:(this.clippingContextVersion=this.clippingContext.version,!0)}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().monitor)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getIndex(){return this._geometries.getIndex(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}getAttributes(){if(this.attributes!==null)return this.attributes;const t=this.getNodeBuilderState().nodeAttributes,e=this.geometry,n=[],i=new Set;for(const s of t){const o=s.node&&s.node.attribute?s.node.attribute:e.getAttribute(s.name);if(o===void 0)continue;n.push(o);const a=o.isInterleavedBufferAttribute?o.data:o;i.add(a)}return this.attributes=n,this.vertexBuffers=Array.from(i.values()),n}getVertexBuffers(){return this.vertexBuffers===null&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:t,material:e,geometry:n,group:i,drawRange:s}=this,o=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),a=this.getIndex(),l=a!==null,c=n.isInstancedBufferGeometry?n.instanceCount:t.count>1?t.count:1;if(c===0)return null;if(o.instanceCount=c,t.isBatchedMesh===!0)return o;let h=1;e.wireframe===!0&&!t.isPoints&&!t.isLineSegments&&!t.isLine&&!t.isLineLoop&&(h=2);let u=s.start*h,d=(s.start+s.count)*h;i!==null&&(u=Math.max(u,i.start*h),d=Math.min(d,(i.start+i.count)*h));const f=l===!0?a.count:n.attributes.position.count;u=Math.max(u,0),d=Math.min(d,f);const p=d-u;return p<0||p===1/0?null:(o.vertexCount=p,o.firstVertex=u,o)}getGeometryCacheKey(){const{geometry:t}=this;let e="";for(const n of Object.keys(t.attributes).sort()){const i=t.attributes[n];e+=n+",",i.data&&(e+=i.data.stride+","),i.offset&&(e+=i.offset+","),i.itemSize&&(e+=i.itemSize+","),i.normalized&&(e+="n,")}return t.index&&(e+="index,"),e}getMaterialCacheKey(){const{object:t,material:e}=this;let n=e.customProgramCacheKey();for(const i of CB(e)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(i))continue;const s=e[i];let o;if(s!==null){const a=typeof s;a==="number"?o=s!==0?"1":"0":a==="object"?(o="{",s.isTexture&&(o+=s.mapping),o+="}"):o=String(s)}else o=String(s);n+=o+","}return n+=this.clippingContext.cacheKey+",",t.geometry&&(n+=this.getGeometryCacheKey()),t.skeleton&&(n+=t.skeleton.bones.length+","),t.morphTargetInfluences&&(n+=t.morphTargetInfluences.length+","),t.isBatchedMesh&&(n+=t._matricesTexture.uuid+",",t._colorsTexture!==null&&(n+=t._colorsTexture.uuid+",")),t.count>1&&(n+=t.uuid+","),ND(n)}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let t=this._nodes.getCacheKey(this.scene,this.lightsNode);return this.object.receiveShadow&&(t+=1),t}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const na=[];class FB{constructor(t,e,n,i,s,o){this.renderer=t,this.nodes=e,this.geometries=n,this.pipelines=i,this.bindings=s,this.info=o,this.chainMaps={}}get(t,e,n,i,s,o,a){const l=this.getChainMap(a);na[0]=t,na[1]=e,na[2]=o,na[3]=s;let c=l.get(na);return c===void 0?(c=this.createRenderObject(this.nodes,this.geometries,this.renderer,t,e,n,i,s,o,a),l.set(na,c)):(c.updateClipping(o.clippingContext),(c.version!==e.version||c.needsUpdate)&&(c.initialCacheKey!==c.getCacheKey()?(c.dispose(),c=this.get(t,e,n,i,s,o,a)):c.version=e.version)),c}getChainMap(t="default"){return this.chainMaps[t]||(this.chainMaps[t]=new Bs)}dispose(){this.chainMaps={}}createRenderObject(t,e,n,i,s,o,a,l,c,h){const u=this.getChainMap(h),d=new PB(t,e,n,i,s,o,a,l,c);return d.onDispose=()=>{this.pipelines.delete(d),this.bindings.delete(d),this.nodes.delete(d),u.delete(d.getChainArray())},d}}class Ar{constructor(){this.data=new WeakMap}get(t){let e=this.data.get(t);return e===void 0&&(e={},this.data.set(t,e)),e}delete(t){let e;return this.data.has(t)&&(e=this.data.get(t),this.data.delete(t)),e}has(t){return this.data.has(t)}dispose(){this.data=new WeakMap}}const to={VERTEX:1,INDEX:2,STORAGE:4},cr=16,IB=211,DB=212;class LB extends Ar{constructor(t){super(),this.backend=t}delete(t){const e=super.delete(t);return e!==void 0&&this.backend.destroyAttribute(t),e}update(t,e){const n=this.get(t);if(n.version===void 0)e===to.VERTEX?this.backend.createAttribute(t):e===to.INDEX?this.backend.createIndexAttribute(t):e===to.STORAGE&&this.backend.createStorageAttribute(t),n.version=this._getBufferAttribute(t).version;else{const i=this._getBufferAttribute(t);(n.version<i.version||i.usage===Sa)&&(this.backend.updateAttribute(t),n.version=i.version)}}_getBufferAttribute(t){return t.isInterleavedBufferAttribute&&(t=t.data),t}}function UB(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function rv(r){return r.index!==null?r.index.version:r.attributes.position.version}function hy(r){const t=[],e=r.index,n=r.attributes.position;if(e!==null){const s=e.array;for(let o=0,a=s.length;o<a;o+=3){const l=s[o+0],c=s[o+1],h=s[o+2];t.push(l,c,c,h,h,l)}}else{const s=n.array;for(let o=0,a=s.length/3-1;o<a;o+=3){const l=o+0,c=o+1,h=o+2;t.push(l,c,c,h,h,l)}}const i=new(UB(t)?hM:cM)(t,1);return i.version=rv(r),i}class BB extends Ar{constructor(t,e){super(),this.attributes=t,this.info=e,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(t){const e=t.geometry;return super.has(e)&&this.get(e).initialized===!0}updateForRender(t){this.has(t)===!1&&this.initGeometry(t),this.updateAttributes(t)}initGeometry(t){const e=t.geometry,n=this.get(e);n.initialized=!0,this.info.memory.geometries++;const i=()=>{this.info.memory.geometries--;const s=e.index,o=t.getAttributes();s!==null&&this.attributes.delete(s);for(const l of o)this.attributes.delete(l);const a=this.wireframes.get(e);a!==void 0&&this.attributes.delete(a),e.removeEventListener("dispose",i)};e.addEventListener("dispose",i)}updateAttributes(t){const e=t.getAttributes();for(const i of e)i.isStorageBufferAttribute||i.isStorageInstancedBufferAttribute?this.updateAttribute(i,to.STORAGE):this.updateAttribute(i,to.VERTEX);const n=this.getIndex(t);n!==null&&this.updateAttribute(n,to.INDEX)}updateAttribute(t,e){const n=this.info.render.calls;t.isInterleavedBufferAttribute?this.attributeCall.get(t)===void 0?(this.attributes.update(t,e),this.attributeCall.set(t,n)):this.attributeCall.get(t.data)!==n&&(this.attributes.update(t,e),this.attributeCall.set(t.data,n),this.attributeCall.set(t,n)):this.attributeCall.get(t)!==n&&(this.attributes.update(t,e),this.attributeCall.set(t,n))}getIndex(t){const{geometry:e,material:n}=t;let i=e.index;if(n.wireframe===!0){const s=this.wireframes;let o=s.get(e);o===void 0?(o=hy(e),s.set(e,o)):o.version!==rv(e)&&(this.attributes.delete(o),o=hy(e),s.set(e,o)),i=o}return i}}class OB{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.compute={calls:0,frameCalls:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.memory={geometries:0,textures:0}}update(t,e,n){this.render.drawCalls++,t.isMesh||t.isSprite?this.render.triangles+=n*(e/3):t.isPoints?this.render.points+=n*e:t.isLineSegments?this.render.lines+=n*(e/2):t.isLine?this.render.lines+=n*(e-1):console.error("THREE.WebGPUInfo: Unknown object type.")}updateTimestamp(t,e){this[t].timestampCalls===0&&(this[t].timestamp=0),this[t].timestamp+=e,this[t].timestampCalls++,this[t].timestampCalls>=this[t].previousFrameCalls&&(this[t].timestampCalls=0)}reset(){const t=this.render.frameCalls;this.render.previousFrameCalls=t;const e=this.compute.frameCalls;this.compute.previousFrameCalls=e,this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class ov{constructor(t){this.cacheKey=t,this.usedTimes=0}}class zB extends ov{constructor(t,e,n){super(t),this.vertexProgram=e,this.fragmentProgram=n}}class GB extends ov{constructor(t,e){super(t),this.computeProgram=e,this.isComputePipeline=!0}}let kB=0;class Xf{constructor(t,e,n=null,i=null){this.id=kB++,this.code=t,this.stage=e,this.transforms=n,this.attributes=i,this.usedTimes=0}}class VB extends Ar{constructor(t,e){super(),this.backend=t,this.nodes=e,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(t,e){const{backend:n}=this,i=this.get(t);if(this._needsComputeUpdate(t)){const s=i.pipeline;s&&(s.usedTimes--,s.computeProgram.usedTimes--);const o=this.nodes.getForCompute(t);let a=this.programs.compute.get(o.computeShader);a===void 0&&(s&&s.computeProgram.usedTimes===0&&this._releaseProgram(s.computeProgram),a=new Xf(o.computeShader,"compute",o.transforms,o.nodeAttributes),this.programs.compute.set(o.computeShader,a),n.createProgram(a));const l=this._getComputeCacheKey(t,a);let c=this.caches.get(l);c===void 0&&(s&&s.usedTimes===0&&this._releasePipeline(s),c=this._getComputePipeline(t,a,l,e)),c.usedTimes++,a.usedTimes++,i.version=t.version,i.pipeline=c}return i.pipeline}getForRender(t,e=null){const{backend:n}=this,i=this.get(t);if(this._needsRenderUpdate(t)){const s=i.pipeline;s&&(s.usedTimes--,s.vertexProgram.usedTimes--,s.fragmentProgram.usedTimes--);const o=t.getNodeBuilderState();let a=this.programs.vertex.get(o.vertexShader);a===void 0&&(s&&s.vertexProgram.usedTimes===0&&this._releaseProgram(s.vertexProgram),a=new Xf(o.vertexShader,"vertex"),this.programs.vertex.set(o.vertexShader,a),n.createProgram(a));let l=this.programs.fragment.get(o.fragmentShader);l===void 0&&(s&&s.fragmentProgram.usedTimes===0&&this._releaseProgram(s.fragmentProgram),l=new Xf(o.fragmentShader,"fragment"),this.programs.fragment.set(o.fragmentShader,l),n.createProgram(l));const c=this._getRenderCacheKey(t,a,l);let h=this.caches.get(c);h===void 0?(s&&s.usedTimes===0&&this._releasePipeline(s),h=this._getRenderPipeline(t,a,l,c,e)):t.pipeline=h,h.usedTimes++,a.usedTimes++,l.usedTimes++,i.pipeline=h}return i.pipeline}delete(t){const e=this.get(t).pipeline;return e&&(e.usedTimes--,e.usedTimes===0&&this._releasePipeline(e),e.isComputePipeline?(e.computeProgram.usedTimes--,e.computeProgram.usedTimes===0&&this._releaseProgram(e.computeProgram)):(e.fragmentProgram.usedTimes--,e.vertexProgram.usedTimes--,e.vertexProgram.usedTimes===0&&this._releaseProgram(e.vertexProgram),e.fragmentProgram.usedTimes===0&&this._releaseProgram(e.fragmentProgram))),super.delete(t)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(t){this.getForRender(t)}_getComputePipeline(t,e,n,i){n=n||this._getComputeCacheKey(t,e);let s=this.caches.get(n);return s===void 0&&(s=new GB(n,e),this.caches.set(n,s),this.backend.createComputePipeline(s,i)),s}_getRenderPipeline(t,e,n,i,s){i=i||this._getRenderCacheKey(t,e,n);let o=this.caches.get(i);return o===void 0&&(o=new zB(i,e,n),this.caches.set(i,o),t.pipeline=o,this.backend.createRenderPipeline(t,s)),o}_getComputeCacheKey(t,e){return t.id+","+e.id}_getRenderCacheKey(t,e,n){return e.id+","+n.id+","+this.backend.getRenderCacheKey(t)}_releasePipeline(t){this.caches.delete(t.cacheKey)}_releaseProgram(t){const e=t.code,n=t.stage;this.programs[n].delete(e)}_needsComputeUpdate(t){const e=this.get(t);return e.pipeline===void 0||e.version!==t.version}_needsRenderUpdate(t){return this.get(t).pipeline===void 0||this.backend.needsRenderUpdate(t)}}class HB extends Ar{constructor(t,e,n,i,s,o){super(),this.backend=t,this.textures=n,this.pipelines=s,this.attributes=i,this.nodes=e,this.info=o,this.pipelines.bindings=this}getForRender(t){const e=t.getBindings();for(const n of e){const i=this.get(n);i.bindGroup===void 0&&(this._init(n),this.backend.createBindings(n,e),i.bindGroup=n)}return e}getForCompute(t){const e=this.nodes.getForCompute(t).bindings;for(const n of e){const i=this.get(n);i.bindGroup===void 0&&(this._init(n),this.backend.createBindings(n,e),i.bindGroup=n)}return e}updateForCompute(t){this._updateBindings(this.getForCompute(t))}updateForRender(t){this._updateBindings(this.getForRender(t))}_updateBindings(t){for(const e of t)this._update(e,t)}_init(t){for(const e of t.bindings)if(e.isSampledTexture)this.textures.updateTexture(e.texture);else if(e.isStorageBuffer){const n=e.attribute;this.attributes.update(n,to.STORAGE)}}_update(t,e){const{backend:n}=this;let i=!1;for(const s of t.bindings)if(!(s.isNodeUniformsGroup&&!this.nodes.updateGroup(s))){if(s.isUniformBuffer)s.update()&&n.updateBinding(s);else if(s.isSampler)s.update();else if(s.isSampledTexture){s.needsBindingsUpdate(this.textures.get(s.texture).generation)&&(i=!0);const o=s.update(),a=s.texture;o&&this.textures.updateTexture(a);const l=n.get(a);if(n.isWebGPUBackend===!0&&l.texture===void 0&&l.externalTexture===void 0&&(console.error("Bindings._update: binding should be available:",s,o,a,s.textureNode.value,i),this.textures.updateTexture(a),i=!0),a.isStorageTexture===!0){const c=this.get(a);s.store===!0?c.needsMipmap=!0:a.generateMipmaps===!0&&this.textures.needsMipmaps(a)&&c.needsMipmap===!0&&(this.backend.generateMipmaps(a),c.needsMipmap=!1)}}}i===!0&&this.backend.updateBindings(t,e)}}class uy{constructor(t,e,n=null){this.isNodeAttribute=!0,this.name=t,this.type=e,this.node=n}}class $B{constructor(t,e,n){this.isNodeUniform=!0,this.name=t,this.type=e,this.node=n.getSelf()}get value(){return this.node.value}set value(t){this.node.value=t}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class av{constructor(t,e){this.isNodeVar=!0,this.name=t,this.type=e}}class WB extends av{constructor(t,e){super(t,e),this.needsInterpolation=!1,this.isNodeVarying=!0}}class qB{constructor(t,e,n=""){this.name=t,this.type=e,this.code=n,Object.defineProperty(this,"isNodeCode",{value:!0})}}let XB=0;class Yf{constructor(t=null){this.id=XB++,this.nodesData=new WeakMap,this.parent=t}getData(t){let e=this.nodesData.get(t);return e===void 0&&this.parent!==null&&(e=this.parent.getData(t)),e}setData(t,e){this.nodesData.set(t,e)}}class YB extends ll{static get type(){return"ParameterNode"}constructor(t,e=null){super(t,e),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}class En extends Kt{static get type(){return"CodeNode"}constructor(t="",e=[],n=""){super("code"),this.isCodeNode=!0,this.code=t,this.language=n,this.includes=e}isGlobal(){return!0}setIncludes(t){return this.includes=t,this}getIncludes(){return this.includes}generate(t){const e=this.getIncludes(t);for(const i of e)i.build(t);const n=t.getCodeFromNode(this,this.getNodeType(t));return n.code=this.code,n.code}serialize(t){super.serialize(t),t.code=this.code,t.language=this.language}deserialize(t){super.deserialize(t),this.code=t.code,this.language=t.language}}class jB extends En{static get type(){return"FunctionNode"}constructor(t="",e=[],n=""){super(t,e,n)}getNodeType(t){return this.getNodeFunction(t).type}getInputs(t){return this.getNodeFunction(t).inputs}getNodeFunction(t){const e=t.getDataFromNode(this);let n=e.nodeFunction;return n===void 0&&(n=t.parser.parseFunction(this.code),e.nodeFunction=n),n}generate(t,e){super.generate(t);const n=this.getNodeFunction(t),i=n.name,s=n.type,o=t.getCodeFromNode(this,s);i!==""&&(o.name=i);const a=t.getPropertyName(o),l=this.getNodeFunction(t).getCode(a);return o.code=l+`
`,e==="property"?a:t.format(`${a}()`,s,e)}}class To{constructor(t,e){this.name=t,this.value=e,this.boundary=0,this.itemSize=0,this.offset=0}setValue(t){this.value=t}getValue(){return this.value}}class KB extends To{constructor(t,e=0){super(t,e),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class ZB extends To{constructor(t,e=new Re){super(t,e),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class QB extends To{constructor(t,e=new B){super(t,e),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class JB extends To{constructor(t,e=new ve){super(t,e),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class tO extends To{constructor(t,e=new ti){super(t,e),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class eO extends To{constructor(t,e=new mi){super(t,e),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class nO extends To{constructor(t,e=new Be){super(t,e),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class iO extends KB{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class sO extends ZB{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class rO extends QB{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class oO extends JB{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class aO extends tO{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class lO extends eO{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class cO extends nO{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class hO extends Kt{static get type(){return"StackNode"}constructor(t=null){super(),this.nodes=[],this.outputNode=null,this.parent=t,this._currentCond=null,this.isStackNode=!0}getNodeType(t){return this.outputNode?this.outputNode.getNodeType(t):"void"}add(t){return this.nodes.push(t),this}If(t,e){const n=new pu(e);return this._currentCond=Vi(t,n),this.add(this._currentCond)}ElseIf(t,e){const n=new pu(e),i=Vi(t,n);return this._currentCond.elseNode=i,this._currentCond=i,this}Else(t){return this._currentCond.elseNode=new pu(t),this}build(t,...e){const n=AM();Vu(this);for(const i of this.nodes)i.build(t,"void");return Vu(n),this.outputNode?this.outputNode.build(t,...e):super.build(t,...e)}else(...t){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...t)}elseif(...t){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...t)}}const jf=Q(hO),Ma=4,dy=[.125,.215,.35,.446,.526,.582],Yr=20,Kf=new kg(-1,1,1,-1,0,1),uO=new Ms(90,1),fy=new ti;let Zf=null,Qf=0,Jf=0;const Wr=(1+Math.sqrt(5))/2,ia=1/Wr,py=[new B(-Wr,ia,0),new B(Wr,ia,0),new B(-ia,0,Wr),new B(ia,0,Wr),new B(0,Wr,-ia),new B(0,Wr,ia),new B(-1,1,-1),new B(1,1,-1),new B(-1,1,1),new B(1,1,1)],dO=[3,1,5,0,4,2],tp=mB(fd(),Sr("faceIndex")).normalize(),lx=gt(tp.x,tp.y.negate(),tp.z);class fO{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}fromScene(t,e=0,n=.1,i=100){Zf=this._renderer.getRenderTarget(),Qf=this._renderer.getActiveCubeFace(),Jf=this._renderer.getActiveMipmapLevel(),this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(t,n,i,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}async compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=gy(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=xy(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose(),this._backgroundBox!==null&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Zf,Qf,Jf),t.scissorTest=!1,Vh(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===lo||t.mapping===qa?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Zf=this._renderer.getRenderTarget(),Qf=this._renderer.getActiveCubeFace(),Jf=this._renderer.getActiveMipmapLevel();const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:Qn,minFilter:Qn,generateMipmaps:!1,type:Rs,format:il,colorSpace:Mi},i=my(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=my(t,e,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=pO(s)),this._blurMaterial=mO(s,t,e)}return i}async _compileMaterial(t){const e=new fo(this._lodPlanes[0],t);await this._renderer.compile(e,Kf)}_sceneToCubeUV(t,e,n,i){const s=uO;s.near=e,s.far=n;const o=[-1,1,-1,-1,-1,-1],a=[1,1,1,-1,-1,-1],l=this._renderer,c=l.autoClear;l.getClearColor(fy),l.autoClear=!1;let h=this._backgroundBox;if(h===null){const f=new lM({name:"PMREM.Background",side:zs,depthWrite:!1,depthTest:!1});h=new fo(new Dc,f)}let u=!1;const d=t.background;d?d.isColor&&(h.material.color.copy(d),t.background=null,u=!0):(h.material.color.copy(fy),u=!0),l.setRenderTarget(i),l.clear(),u&&l.render(h,s);for(let f=0;f<6;f++){const p=f%3;p===0?(s.up.set(0,o[f],0),s.lookAt(a[f],0,0)):p===1?(s.up.set(0,0,o[f]),s.lookAt(0,a[f],0)):(s.up.set(0,o[f],0),s.lookAt(0,0,a[f]));const x=this._cubeSize;Vh(i,p*x,f>2?x:0,x,x),l.render(t,s)}l.autoClear=c,t.background=d}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===lo||t.mapping===qa;i?this._cubemapMaterial===null&&(this._cubemapMaterial=gy(t)):this._equirectMaterial===null&&(this._equirectMaterial=xy(t));const s=i?this._cubemapMaterial:this._equirectMaterial;s.fragmentNode.value=t;const o=this._lodMeshes[0];o.material=s;const a=this._cubeSize;Vh(e,0,0,3*a,2*a),n.setRenderTarget(e),n.render(o,Kf)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const i=this._lodPlanes.length;for(let s=1;s<i;s++){const o=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),a=py[(i-s-1)%py.length];this._blur(t,s-1,s,o,a)}e.autoClear=n}_blur(t,e,n,i,s){const o=this._pingPongRenderTarget;this._halfBlur(t,o,e,n,i,"latitudinal",s),this._halfBlur(o,t,n,n,i,"longitudinal",s)}_halfBlur(t,e,n,i,s,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=this._lodMeshes[i];u.material=c;const d=c.uniforms,f=this._sizeLods[n]-1,p=isFinite(s)?Math.PI/(2*f):2*Math.PI/(2*Yr-1),x=s/p,m=isFinite(s)?1+Math.floor(h*x):Yr;m>Yr&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${Yr}`);const g=[];let y=0;for(let v=0;v<Yr;++v){const R=v/x,W=Math.exp(-R*R/2);g.push(W),v===0?y+=W:v<m&&(y+=2*W)}for(let v=0;v<g.length;v++)g[v]=g[v]/y;t.texture.frame=(t.texture.frame||0)+1,d.envMap.value=t.texture,d.samples.value=m,d.weights.array=g,d.latitudinal.value=o==="latitudinal"?1:0,a&&(d.poleAxis.value=a);const{_lodMax:_}=this;d.dTheta.value=p,d.mipInt.value=_-n;const T=this._sizeLods[i],w=3*T*(i>_-Ma?i-_+Ma:0),A=4*(this._cubeSize-T);Vh(e,w,A,3*T,2*T),l.setRenderTarget(e),l.render(u,Kf)}}function pO(r){const t=[],e=[],n=[],i=[];let s=r;const o=r-Ma+1+dy.length;for(let a=0;a<o;a++){const l=Math.pow(2,s);e.push(l);let c=1/l;a>r-Ma?c=dy[a-r+Ma-1]:a===0&&(c=0),n.push(c);const h=1/(l-2),u=-h,d=1+h,f=[u,u,d,u,d,d,u,u,d,d,u,d],p=6,x=6,m=3,g=2,y=1,_=new Float32Array(m*x*p),T=new Float32Array(g*x*p),w=new Float32Array(y*x*p);for(let v=0;v<p;v++){const R=v%3*2/3-1,W=v>2?0:-1,S=[R,W,0,R+2/3,W,0,R+2/3,W+1,0,R,W,0,R+2/3,W+1,0,R,W+1,0],b=dO[v];_.set(S,m*x*b),T.set(f,g*x*b);const H=[b,b,b,b,b,b];w.set(H,y*x*b)}const A=new yo;A.setAttribute("position",new vi(_,m)),A.setAttribute("uv",new vi(T,g)),A.setAttribute("faceIndex",new vi(w,y)),t.push(A),i.push(new fo(A,null)),s>Ma&&s--}return{lodPlanes:t,sizeLods:e,sigmas:n,lodMeshes:i}}function my(r,t,e){const n=new rl(r,t,e);return n.texture.mapping=pm,n.texture.name="PMREM.cubeUv",n.texture.isPMREMTexture=!0,n.scissorTest=!0,n}function Vh(r,t,e,n,i){r.viewport.set(t,e,n,i),r.scissor.set(t,e,n,i)}function cx(r){const t=new Fs;return t.depthTest=!1,t.depthWrite=!1,t.blending=Wa,t.name=`PMREM_${r}`,t}function mO(r,t,e){const n=fc(new Array(Yr).fill(0)),i=ee(new B(0,1,0)),s=ee(0),o=Tt(Yr),a=ee(0),l=ee(1),c=Ge(null),h=ee(0),u=Tt(1/t),d=Tt(1/e),f=Tt(r),p={n:o,latitudinal:a,weights:n,poleAxis:i,outputDirection:lx,dTheta:s,samples:l,envMap:c,mipInt:h,CUBEUV_TEXEL_WIDTH:u,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:f},x=cx("blur");return x.uniforms=p,x.fragmentNode=xB({...p,latitudinal:a.equal(1)}),x}function gy(r){const t=cx("cubemap");return t.fragmentNode=dc(r,lx),t}function xy(r){const t=cx("equirect");return t.fragmentNode=Ge(r,nv(lx),0),t}let gO=0;class $m{constructor(t="",e=[],n=0,i=[]){this.name=t,this.bindings=e,this.index=n,this.bindingsReference=i,this.id=gO++}}const _y=new WeakMap,xO=new Map([[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),_O=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),Hh=r=>(r=Number(r),r+(r%1?"":".0"));class lv{constructor(t,e,n){this.object=t,this.material=t&&t.material||null,this.geometry=t&&t.geometry||null,this.renderer=e,this.parser=n,this.scene=null,this.camera=null,this.nodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.monitor=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=jf(),this.stacks=[],this.tab="	",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new Yf,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let t=_y.get(this.renderer);return t===void 0&&(t=new Bs,_y.set(this.renderer,t)),t}createRenderTarget(t,e,n){return new rl(t,e,n)}createCubeRenderTarget(t,e){return new iv(t,e)}createPMREMGenerator(){return new fO(this.renderer)}includes(t){return this.nodes.includes(t)}_getBindGroup(t,e){const n=this.getBindGroupsCache(),i=[];let s=!0;for(const a of e)i.push(a),s=s&&a.groupNode.shared!==!0;let o;return s?(o=n.get(i),o===void 0&&(o=new $m(t,i,this.bindingsIndexes[t].group,i),n.set(i,o))):o=new $m(t,i,this.bindingsIndexes[t].group,i),o}getBindGroupArray(t,e){const n=this.bindings[e];let i=n[t];return i===void 0&&(this.bindingsIndexes[t]===void 0&&(this.bindingsIndexes[t]={binding:0,group:Object.keys(this.bindingsIndexes).length}),n[t]=i=[]),i}getBindings(){let t=this.bindGroups;if(t===null){const e={},n=this.bindings;for(const i of H_)for(const s in n[i]){const o=n[i][s];(e[s]||(e[s]=[])).push(...o)}t=[];for(const i in e){const s=e[i],o=this._getBindGroup(i,s);t.push(o)}this.bindGroups=t}return t}sortBindingGroups(){const t=this.getBindings();t.sort((e,n)=>e.bindings[0].groupNode.order-n.bindings[0].groupNode.order);for(let e=0;e<t.length;e++){const n=t[e];this.bindingsIndexes[n.name].group=e,n.index=e}}setHashNode(t,e){this.hashNodes[e]=t}addNode(t){this.nodes.includes(t)===!1&&(this.nodes.push(t),this.setHashNode(t,t.getHash(this)))}buildUpdateNodes(){for(const t of this.nodes){const e=t.getUpdateType(),n=t.getUpdateBeforeType(),i=t.getUpdateAfterType();e!==te.NONE&&this.updateNodes.push(t.getSelf()),n!==te.NONE&&this.updateBeforeNodes.push(t.getSelf()),i!==te.NONE&&this.updateAfterNodes.push(t.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(t){return t.magFilter===Qn||t.magFilter===gm||t.magFilter===Pa||t.magFilter===Ns||t.minFilter===Qn||t.minFilter===gm||t.minFilter===Pa||t.minFilter===Ns}addChain(t){this.chaining.push(t)}removeChain(t){if(this.chaining.pop()!==t)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(t){return t}getNodeFromHash(t){return this.hashNodes[t]}addFlow(t,e){return this.flowNodes[t].push(e),e}setContext(t){this.context=t}getContext(){return this.context}getSharedContext(){return{...this.context},this.context}setCache(t){this.cache=t}getCache(){return this.cache}getCacheFromNode(t,e=!0){const n=this.getDataFromNode(t);return n.cache===void 0&&(n.cache=new Yf(e?this.getCache():null)),n.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(t){const e=this.getDataFromNode(t);return e.usageCount=e.usageCount===void 0?1:e.usageCount+1,e.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateConst(t,e=null){if(e===null&&(t==="float"||t==="int"||t==="uint"?e=0:t==="bool"?e=!1:t==="color"?e=new ti:t==="vec2"?e=new Re:t==="vec3"?e=new B:t==="vec4"&&(e=new ve)),t==="float")return Hh(e);if(t==="int")return`${Math.round(e)}`;if(t==="uint")return e>=0?`${Math.round(e)}u`:"0u";if(t==="bool")return e?"true":"false";if(t==="color")return`${this.getType("vec3")}( ${Hh(e.r)}, ${Hh(e.g)}, ${Hh(e.b)} )`;const n=this.getTypeLength(t),i=this.getComponentType(t),s=o=>this.generateConst(i,o);if(n===2)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)} )`;if(n===3)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)}, ${s(e.z)} )`;if(n===4)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)}, ${s(e.z)}, ${s(e.w)} )`;if(n>4&&e&&(e.isMatrix3||e.isMatrix4))return`${this.getType(t)}( ${e.elements.map(s).join(", ")} )`;if(n>4)return`${this.getType(t)}()`;throw new Error(`NodeBuilder: Type '${t}' not found in generate constant attempt.`)}getType(t){return t==="color"?"vec3":t}hasGeometryAttribute(t){return this.geometry&&this.geometry.getAttribute(t)!==void 0}getAttribute(t,e){const n=this.attributes;for(const s of n)if(s.name===t)return s;const i=new uy(t,e);return n.push(i),i}getPropertyName(t){return t.name}isVector(t){return/vec\d/.test(t)}isMatrix(t){return/mat\d/.test(t)}isReference(t){return t==="void"||t==="property"||t==="sampler"||t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="depthTexture"||t==="texture3D"}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(t){const e=t.type;if(t.isDataTexture){if(e===kn)return"int";if(e===gn)return"uint"}return"float"}getElementType(t){return t==="mat2"?"vec2":t==="mat3"?"vec3":t==="mat4"?"vec4":this.getComponentType(t)}getComponentType(t){if(t=this.getVectorType(t),t==="float"||t==="bool"||t==="int"||t==="uint")return t;const e=/(b|i|u|)(vec|mat)([2-4])/.exec(t);return e===null?null:e[1]==="b"?"bool":e[1]==="i"?"int":e[1]==="u"?"uint":"float"}getVectorType(t){return t==="color"?"vec3":t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="texture3D"?"vec4":t}getTypeFromLength(t,e="float"){if(t===1)return e;const n=xO.get(t);return(e==="float"?"":e[0])+n}getTypeFromArray(t){return _O.get(t.constructor)}getTypeFromAttribute(t){let e=t;t.isInterleavedBufferAttribute&&(e=t.data);const n=e.array,i=t.itemSize,s=t.normalized;let o;return!(t instanceof uM)&&s!==!0&&(o=this.getTypeFromArray(n)),this.getTypeFromLength(i,o)}getTypeLength(t){const e=this.getVectorType(t),n=/vec([2-4])/.exec(e);return n!==null?Number(n[1]):e==="float"||e==="bool"||e==="int"||e==="uint"?1:/mat2/.test(t)===!0?4:/mat3/.test(t)===!0?9:/mat4/.test(t)===!0?16:0}getVectorFromMatrix(t){return t.replace("mat","vec")}changeComponentType(t,e){return this.getTypeFromLength(this.getTypeLength(t),e)}getIntegerType(t){const e=this.getComponentType(t);return e==="int"||e==="uint"?t:this.changeComponentType(t,"int")}addStack(){return this.stack=jf(this.stack),this.stacks.push(AM()||this.stack),Vu(this.stack),this.stack}removeStack(){const t=this.stack;return this.stack=t.parent,Vu(this.stacks.pop()),t}getDataFromNode(t,e=this.shaderStage,n=null){n=n===null?t.isGlobal(this)?this.globalCache:this.cache:n;let i=n.getData(t);return i===void 0&&(i={},n.setData(t,i)),i[e]===void 0&&(i[e]={}),i[e]}getNodeProperties(t,e="any"){const n=this.getDataFromNode(t,e);return n.properties||(n.properties={outputNode:null})}getBufferAttributeFromNode(t,e){const n=this.getDataFromNode(t);let i=n.bufferAttribute;if(i===void 0){const s=this.uniforms.index++;i=new uy("nodeAttribute"+s,e,t),this.bufferAttributes.push(i),n.bufferAttribute=i}return i}getStructTypeFromNode(t,e=this.shaderStage){const n=this.getDataFromNode(t,e);if(n.structType===void 0){const i=this.structs.index++;t.name=`StructType${i}`,this.structs[e].push(t),n.structType=t}return t}getUniformFromNode(t,e,n=this.shaderStage,i=null){const s=this.getDataFromNode(t,n,this.globalCache);let o=s.uniform;if(o===void 0){const a=this.uniforms.index++;o=new $B(i||"nodeUniform"+a,e,t),this.uniforms[n].push(o),s.uniform=o}return o}getVarFromNode(t,e=null,n=t.getNodeType(this),i=this.shaderStage){const s=this.getDataFromNode(t,i);let o=s.variable;if(o===void 0){const a=this.vars[i]||(this.vars[i]=[]);e===null&&(e="nodeVar"+a.length),o=new av(e,n),a.push(o),s.variable=o}return o}getVaryingFromNode(t,e=null,n=t.getNodeType(this)){const i=this.getDataFromNode(t,"any");let s=i.varying;if(s===void 0){const o=this.varyings,a=o.length;e===null&&(e="nodeVarying"+a),s=new WB(e,n),o.push(s),i.varying=s}return s}getCodeFromNode(t,e,n=this.shaderStage){const i=this.getDataFromNode(t);let s=i.code;if(s===void 0){const o=this.codes[n]||(this.codes[n]=[]),a=o.length;s=new qB("nodeCode"+a,e),o.push(s),i.code=s}return s}addFlowCodeHierarchy(t,e){const{flowCodes:n,flowCodeBlock:i}=this.getDataFromNode(t);let s=!0,o=e;for(;o;){if(i.get(o)===!0){s=!1;break}o=this.getDataFromNode(o).parentNodeBlock}if(s)for(const a of n)this.addLineFlowCode(a)}addLineFlowCodeBlock(t,e,n){const i=this.getDataFromNode(t),s=i.flowCodes||(i.flowCodes=[]),o=i.flowCodeBlock||(i.flowCodeBlock=new WeakMap);s.push(e),o.set(n,!0)}addLineFlowCode(t,e=null){return t===""?this:(e!==null&&this.context.nodeBlock&&this.addLineFlowCodeBlock(e,t,this.context.nodeBlock),t=this.tab+t,/;\s*$/.test(t)||(t=t+`;
`),this.flow.code+=t,this)}addFlowCode(t){return this.flow.code+=t,this}addFlowTab(){return this.tab+="	",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(t){return this.flowsData.get(t)}flowNode(t){const e=t.getNodeType(this),n=this.flowChildNode(t,e);return this.flowsData.set(t,n),n}buildFunctionNode(t){const e=new jB,n=this.currentFunctionNode;return this.currentFunctionNode=e,e.code=this.buildFunctionCode(t),this.currentFunctionNode=n,e}flowShaderNode(t){const e=t.layout,n={[Symbol.iterator](){let o=0;const a=Object.values(this);return{next:()=>({value:a[o],done:o++>=a.length})}}};for(const o of e.inputs)n[o.name]=new YB(o.type,o.name);t.layout=null;const i=t.call(n),s=this.flowStagesNode(i,e.type);return t.layout=e,s}flowStagesNode(t,e=null){const n=this.flow,i=this.vars,s=this.cache,o=this.buildStage,a=this.stack,l={code:""};this.flow=l,this.vars={},this.cache=new Yf,this.stack=jf();for(const c of V_)this.setBuildStage(c),l.result=t.build(this,e);return l.vars=this.getVars(this.shaderStage),this.flow=n,this.vars=i,this.cache=s,this.stack=a,this.setBuildStage(o),l}getFunctionOperator(){return null}flowChildNode(t,e=null){const n=this.flow,i={code:""};return this.flow=i,i.result=t.build(this,e),this.flow=n,i}flowNodeFromShaderStage(t,e,n=null,i=null){const s=this.shaderStage;this.setShaderStage(t);const o=this.flowChildNode(e,n);return i!==null&&(o.code+=`${this.tab+i} = ${o.result};
`),this.flowCode[t]=this.flowCode[t]+o.code,this.setShaderStage(s),o}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(t,e){return`${this.getType(t)} ${e}`}getVars(t){let e="";const n=this.vars[t];if(n!==void 0)for(const i of n)e+=`${this.getVar(i.type,i.name)}; `;return e}getUniforms(){console.warn("Abstract function.")}getCodes(t){const e=this.codes[t];let n="";if(e!==void 0)for(const i of e)n+=i.code+`
`;return n}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(t){this.shaderStage=t}getShaderStage(){return this.shaderStage}setBuildStage(t){this.buildStage=t}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:t,material:e,renderer:n}=this;if(e!==null){let i=n.nodes.library.fromMaterial(e);i===null&&(console.error(`NodeMaterial: Material "${e.type}" is not compatible.`),i=new Fs),i.build(this)}else this.addFlow("compute",t);for(const i of V_){this.setBuildStage(i),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const s of H_){this.setShaderStage(s);const o=this.flowNodes[s];for(const a of o)i==="generate"?this.flowNode(a):a.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(t,e){if(e==="float"||e==="int"||e==="uint")return new iO(t);if(e==="vec2"||e==="ivec2"||e==="uvec2")return new sO(t);if(e==="vec3"||e==="ivec3"||e==="uvec3")return new rO(t);if(e==="vec4"||e==="ivec4"||e==="uvec4")return new oO(t);if(e==="color")return new aO(t);if(e==="mat3")return new lO(t);if(e==="mat4")return new cO(t);throw new Error(`Uniform "${e}" not declared.`)}createNodeMaterial(t="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${t}() instead.`)}format(t,e,n){if(e=this.getVectorType(e),n=this.getVectorType(n),e===n||n===null||this.isReference(n))return t;const i=this.getTypeLength(e),s=this.getTypeLength(n);return i===16&&s===9?`${this.getType(n)}(${t}[0].xyz, ${t}[1].xyz, ${t}[2].xyz)`:i===9&&s===4?`${this.getType(n)}(${t}[0].xy, ${t}[1].xy)`:i>4||s>4||s===0?t:i===s?`${this.getType(n)}( ${t} )`:i>s?this.format(`${t}.${"xyz".slice(0,s)}`,this.getTypeFromLength(s,this.getComponentType(e)),n):s===4&&i>1?`${this.getType(n)}( ${this.format(t,e,"vec3")}, 1.0 )`:i===2?`${this.getType(n)}( ${this.format(t,e,"vec2")}, 0.0 )`:(i===1&&s>1&&e!==this.getComponentType(n)&&(t=`${this.getType(this.getComponentType(n))}( ${t} )`),`${this.getType(n)}( ${t} )`)}getSignature(){return`// Three.js r${CT} - Node System
`}}class yy{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.startTime=null,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(t,e){let n=t.get(e);return n===void 0&&(n={renderMap:new WeakMap,frameMap:new WeakMap},t.set(e,n)),n}updateBeforeNode(t){const e=t.getUpdateBeforeType(),n=t.updateReference(this);if(e===te.FRAME){const{frameMap:i}=this._getMaps(this.updateBeforeMap,n);i.get(n)!==this.frameId&&t.updateBefore(this)!==!1&&i.set(n,this.frameId)}else if(e===te.RENDER){const{renderMap:i}=this._getMaps(this.updateBeforeMap,n);i.get(n)!==this.renderId&&t.updateBefore(this)!==!1&&i.set(n,this.renderId)}else e===te.OBJECT&&t.updateBefore(this)}updateAfterNode(t){const e=t.getUpdateAfterType(),n=t.updateReference(this);if(e===te.FRAME){const{frameMap:i}=this._getMaps(this.updateAfterMap,n);i.get(n)!==this.frameId&&t.updateAfter(this)!==!1&&i.set(n,this.frameId)}else if(e===te.RENDER){const{renderMap:i}=this._getMaps(this.updateAfterMap,n);i.get(n)!==this.renderId&&t.updateAfter(this)!==!1&&i.set(n,this.renderId)}else e===te.OBJECT&&t.updateAfter(this)}updateNode(t){const e=t.getUpdateType(),n=t.updateReference(this);if(e===te.FRAME){const{frameMap:i}=this._getMaps(this.updateMap,n);i.get(n)!==this.frameId&&t.update(this)!==!1&&i.set(n,this.frameId)}else if(e===te.RENDER){const{renderMap:i}=this._getMaps(this.updateMap,n);i.get(n)!==this.renderId&&t.update(this)!==!1&&i.set(n,this.renderId)}else e===te.OBJECT&&t.update(this)}update(){this.frameId++,this.lastTime===void 0&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class hx{constructor(t,e,n=null,i="",s=!1){this.type=t,this.name=e,this.count=n,this.qualifier=i,this.isConst=s}}hx.isNodeFunctionInput=!0;class Hi extends al{static get type(){return"TimerNode"}constructor(t=Hi.LOCAL,e=1,n=0){super(n),this.scope=t,this.scale=e,this.updateType=te.FRAME}update(t){const e=this.scope,n=this.scale;e===Hi.LOCAL?this.value+=t.deltaTime*n:e===Hi.DELTA?this.value=t.deltaTime*n:e===Hi.FRAME?this.value=t.frameId:this.value=t.time*n}serialize(t){super.serialize(t),t.scope=this.scope,t.scale=this.scale}deserialize(t){super.deserialize(t),this.scope=t.scope,this.scale=t.scale}}Hi.LOCAL="local";Hi.GLOBAL="global";Hi.DELTA="delta";Hi.FRAME="frame";const yO=(r,t=0)=>ht(new Hi(Hi.LOCAL,r,t));class hn extends Kt{static get type(){return"OscNode"}constructor(t=hn.SINE,e=yO()){super(),this.method=t,this.timeNode=e}getNodeType(t){return this.timeNode.getNodeType(t)}setup(){const t=this.method,e=ht(this.timeNode);let n=null;return t===hn.SINE?n=e.add(.75).mul(Math.PI*2).sin().mul(.5).add(.5):t===hn.SQUARE?n=e.fract().round():t===hn.TRIANGLE?n=e.add(.5).fract().mul(2).sub(1).abs():t===hn.SAWTOOTH&&(n=e.fract()),n}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}}hn.SINE="sine";hn.SQUARE="square";hn.TRIANGLE="triangle";hn.SAWTOOTH="sawtooth";hn.SINE;hn.SQUARE;hn.TRIANGLE;hn.SAWTOOTH;new rr;new B;new B;new B;new Be;new B(0,0,-1);new ve;new B;new B;new ve;new Re;new rl;pc.flipX();const ep=new kg(-1,1,1,-1,0,1);class SO extends yo{constructor(t=!1){super();const e=t===!1?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new Ps([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Ps(e,2))}}const TO=new SO;class cv extends fo{constructor(t=null){super(TO,t),this.camera=ep,this.isQuadMesh=!0}renderAsync(t){return t.renderAsync(this,ep)}render(t){t.render(this,ep)}}class Qi extends Kt{static get type(){return"SceneNode"}constructor(t=Qi.BACKGROUND_BLURRINESS,e=null){super(),this.scope=t,this.scene=e}setup(t){const e=this.scope,n=this.scene!==null?this.scene:t.scene;let i;return e===Qi.BACKGROUND_BLURRINESS?i=He("backgroundBlurriness","float",n):e===Qi.BACKGROUND_INTENSITY?i=He("backgroundIntensity","float",n):console.error("THREE.SceneNode: Unknown scope:",e),i}}Qi.BACKGROUND_BLURRINESS="backgroundBlurriness";Qi.BACKGROUND_INTENSITY="backgroundIntensity";const MO=Pt(Qi,Qi.BACKGROUND_BLURRINESS),Sy=Pt(Qi,Qi.BACKGROUND_INTENSITY),va={PointList:"point-list",LineList:"line-list",LineStrip:"line-strip",TriangleList:"triangle-list",TriangleStrip:"triangle-strip"},pn={Never:"never",Less:"less",Equal:"equal",LessEqual:"less-equal",Greater:"greater",NotEqual:"not-equal",GreaterEqual:"greater-equal",Always:"always"},mn={Store:"store",Discard:"discard"},je={Load:"load",Clear:"clear"},np={CCW:"ccw",CW:"cw"},ip={None:"none",Front:"front",Back:"back"},Ka={Uint16:"uint16",Uint32:"uint32"},C={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10uFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},sp={ClampToEdge:"clamp-to-edge",Repeat:"repeat",MirrorRepeat:"mirror-repeat"},Wu={Linear:"linear",Nearest:"nearest"},$t={Zero:"zero",One:"one",Src:"src",OneMinusSrc:"one-minus-src",SrcAlpha:"src-alpha",OneMinusSrcAlpha:"one-minus-src-alpha",Dst:"dst",OneMinusDstColor:"one-minus-dst",DstAlpha:"dst-alpha",OneMinusDstAlpha:"one-minus-dst-alpha",SrcAlphaSaturated:"src-alpha-saturated",Constant:"constant",OneMinusConstant:"one-minus-constant"},kr={Add:"add",Subtract:"subtract",ReverseSubtract:"reverse-subtract",Min:"min",Max:"max"},Ty={None:0,Red:1,Green:2,Blue:4,Alpha:8,All:15},nr={Keep:"keep",Zero:"zero",Replace:"replace",Invert:"invert",IncrementClamp:"increment-clamp",DecrementClamp:"decrement-clamp",IncrementWrap:"increment-wrap",DecrementWrap:"decrement-wrap"},Wm={Uniform:"uniform",Storage:"storage",ReadOnlyStorage:"read-only-storage"},My={WriteOnly:"write-only",ReadOnly:"read-only",ReadWrite:"read-write"},zl={Float:"float",UnfilterableFloat:"unfilterable-float",Depth:"depth",SInt:"sint",UInt:"uint"},vy={OneD:"1d",TwoD:"2d",ThreeD:"3d"},yi={OneD:"1d",TwoD:"2d",TwoDArray:"2d-array",Cube:"cube",CubeArray:"cube-array",ThreeD:"3d"},vO={All:"all",StencilOnly:"stencil-only",DepthOnly:"depth-only"},$h={Vertex:"vertex",Instance:"instance"},qm={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"},bO=new Re;class EO extends Oc{static get type(){return"PassTextureNode"}constructor(t,e){super(e),this.passNode=t,this.setUpdateMatrix(!1)}setup(t){return t.object.isQuadMesh&&this.passNode.build(t),super.setup(t)}clone(){return new this.constructor(this.passNode,this.value)}}class by extends EO{static get type(){return"PassMultipleTextureNode"}constructor(t,e,n=!1){super(t,null),this.textureName=e,this.previousTexture=n}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(t){return this.updateTexture(),super.setup(t)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class xd extends an{static get type(){return"PassNode"}constructor(t,e,n,i={}){super("vec4"),this.scope=t,this.scene=e,this.camera=n,this.options=i,this._pixelRatio=1,this._width=1,this._height=1;const s=new Lc;s.isRenderTargetTexture=!0,s.name="depth";const o=new rl(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:Rs,...i});o.texture.name="output",o.depthTexture=s,this.renderTarget=o,this.updateBeforeType=te.FRAME,this._textures={output:o.texture,depth:s},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=ee(0),this._cameraFar=ee(0),this._mrt=null,this.isPassNode=!0}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(t){let e=this._textures[t];return e===void 0&&(e=this.renderTarget.texture.clone(),e.isRenderTargetTexture=!0,e.name=t,this._textures[t]=e,this.renderTarget.textures.push(e)),e}getPreviousTexture(t){let e=this._previousTextures[t];return e===void 0&&(e=this.getTexture(t).clone(),e.isRenderTargetTexture=!0,this._previousTextures[t]=e),e}toggleTexture(t){const e=this._previousTextures[t];if(e!==void 0){const n=this._textures[t],i=this.renderTarget.textures.indexOf(n);this.renderTarget.textures[i]=e,this._textures[t]=e,this._previousTextures[t]=n,this._textureNodes[t].updateTexture(),this._previousTextureNodes[t].updateTexture()}}getTextureNode(t="output"){let e=this._textureNodes[t];return e===void 0&&(this._textureNodes[t]=e=ht(new by(this,t)),this._textureNodes[t].updateTexture()),e}getPreviousTextureNode(t="output"){let e=this._previousTextureNodes[t];return e===void 0&&(this._textureNodes[t]===void 0&&this.getTextureNode(t),this._previousTextureNodes[t]=e=ht(new by(this,t,!0)),this._previousTextureNodes[t].updateTexture()),e}getViewZNode(t="depth"){let e=this._viewZNodes[t];if(e===void 0){const n=this._cameraNear,i=this._cameraFar;this._viewZNodes[t]=e=JM(this.getTextureNode(t),n,i)}return e}getLinearDepthNode(t="depth"){let e=this._linearDepthNodes[t];if(e===void 0){const n=this._cameraNear,i=this._cameraFar,s=this.getViewZNode(t);this._linearDepthNodes[t]=e=mu(s,n,i)}return e}setup({renderer:t}){return this.renderTarget.samples=this.options.samples===void 0?t.samples:this.options.samples,t.backend.isWebGLBackend===!0&&(this.renderTarget.samples=0),this.renderTarget.depthTexture.isMultisampleRenderTargetTexture=this.renderTarget.samples>1,this.scope===xd.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(t){const{renderer:e}=t,{scene:n,camera:i}=this;this._pixelRatio=e.getPixelRatio();const s=e.getSize(bO);this.setSize(s.width,s.height);const o=e.getRenderTarget(),a=e.getMRT();this._cameraNear.value=i.near,this._cameraFar.value=i.far;for(const l in this._previousTextures)this.toggleTexture(l);e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),e.render(n,i),e.setRenderTarget(o),e.setMRT(a)}setSize(t,e){this._width=t,this._height=e;const n=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget.setSize(n,i)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}xd.COLOR="color";xd.DEPTH="depth";class hv extends Kt{static get type(){return"FogNode"}constructor(t,e){super("float"),this.isFogNode=!0,this.colorNode=t,this.factorNode=e}getViewZNode(t){let e;const n=t.context.getViewZ;return n!==void 0&&(e=n(this)),(e||Hn.z).negate()}setup(){return this.factorNode}}class AO extends hv{static get type(){return"FogRangeNode"}constructor(t,e,n){super(t),this.isFogRangeNode=!0,this.nearNode=e,this.farNode=n}setup(t){const e=this.getViewZNode(t);return hc(this.nearNode,this.farNode,e)}}const wO=Q(AO);class NO extends hv{static get type(){return"FogExp2Node"}constructor(t,e){super(t),this.isFogExp2Node=!0,this.densityNode=e}setup(t){const e=this.getViewZNode(t),n=this.densityNode;return n.mul(n,e,e).negate().exp().oneMinus()}}const RO=Q(NO),CO=qt(({depthTexture:r,shadowCoord:t})=>Ge(r,t.xy).compare(t.z)),PO=qt(({depthTexture:r,shadowCoord:t,shadow:e})=>{const n=(x,m)=>Ge(r,x).compare(m),i=He("mapSize","vec2",e).setGroup(oe),s=He("radius","float",e).setGroup(oe),o=Ut(1).div(i),a=o.x.negate().mul(s),l=o.y.negate().mul(s),c=o.x.mul(s),h=o.y.mul(s),u=a.div(2),d=l.div(2),f=c.div(2),p=h.div(2);return Ls(n(t.xy.add(Ut(a,l)),t.z),n(t.xy.add(Ut(0,l)),t.z),n(t.xy.add(Ut(c,l)),t.z),n(t.xy.add(Ut(u,d)),t.z),n(t.xy.add(Ut(0,d)),t.z),n(t.xy.add(Ut(f,d)),t.z),n(t.xy.add(Ut(a,0)),t.z),n(t.xy.add(Ut(u,0)),t.z),n(t.xy,t.z),n(t.xy.add(Ut(f,0)),t.z),n(t.xy.add(Ut(c,0)),t.z),n(t.xy.add(Ut(u,p)),t.z),n(t.xy.add(Ut(0,p)),t.z),n(t.xy.add(Ut(f,p)),t.z),n(t.xy.add(Ut(a,h)),t.z),n(t.xy.add(Ut(0,h)),t.z),n(t.xy.add(Ut(c,h)),t.z)).mul(1/17)}),FO=qt(({depthTexture:r,shadowCoord:t,shadow:e})=>{const n=(h,u)=>Ge(r,h).compare(u),i=He("mapSize","vec2",e).setGroup(oe),s=Ut(1).div(i),o=s.x,a=s.y,l=t.xy,c=ud(l.mul(i).add(.5));return l.subAssign(c.mul(s)),Ls(n(l,t.z),n(l.add(Ut(o,0)),t.z),n(l.add(Ut(0,a)),t.z),n(l.add(s),t.z),zn(n(l.add(Ut(o.negate(),0)),t.z),n(l.add(Ut(o.mul(2),0)),t.z),c.x),zn(n(l.add(Ut(o.negate(),a)),t.z),n(l.add(Ut(o.mul(2),a)),t.z),c.x),zn(n(l.add(Ut(0,a.negate())),t.z),n(l.add(Ut(0,a.mul(2))),t.z),c.y),zn(n(l.add(Ut(o,a.negate())),t.z),n(l.add(Ut(o,a.mul(2))),t.z),c.y),zn(zn(n(l.add(Ut(o.negate(),a.negate())),t.z),n(l.add(Ut(o.mul(2),a.negate())),t.z),c.x),zn(n(l.add(Ut(o.negate(),a.mul(2))),t.z),n(l.add(Ut(o.mul(2),a.mul(2))),t.z),c.x),c.y)).mul(1/9)}),IO=qt(({depthTexture:r,shadowCoord:t})=>{const e=Tt(1).toVar(),n=Ge(r).uv(t.xy).rg,i=LM(t.z,n.x);return pi(i.notEqual(Tt(1)),()=>{const s=t.z.sub(n.x),o=Us(0,n.y.mul(n.y));let a=o.div(o.add(s.mul(s)));a=po(Jr(a,.3).div(.95-.3)),e.assign(po(Us(i,a)))}),e}),DO=qt(({samples:r,radius:t,size:e,shadowPass:n})=>{const i=Tt(0).toVar(),s=Tt(0).toVar(),o=r.lessThanEqual(Tt(1)).select(Tt(0),Tt(2).div(r.sub(1))),a=r.lessThanEqual(Tt(1)).select(Tt(0),Tt(-1));ur({start:Qe(0),end:Qe(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(Tt(c).mul(o)),u=n.uv(Ls(gd.xy,Ut(0,h).mul(t)).div(e)).x;i.addAssign(u),s.addAssign(u.mul(u))}),i.divAssign(r),s.divAssign(r);const l=jg(s.sub(i.mul(i)));return Ut(i,l)}),LO=qt(({samples:r,radius:t,size:e,shadowPass:n})=>{const i=Tt(0).toVar(),s=Tt(0).toVar(),o=r.lessThanEqual(Tt(1)).select(Tt(0),Tt(2).div(r.sub(1))),a=r.lessThanEqual(Tt(1)).select(Tt(0),Tt(-1));ur({start:Qe(0),end:Qe(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(Tt(c).mul(o)),u=n.uv(Ls(gd.xy,Ut(h,0).mul(t)).div(e));i.addAssign(u.x),s.addAssign(Ls(u.y.mul(u.y),u.x.mul(u.x)))}),i.divAssign(r),s.divAssign(r);const l=jg(s.sub(i.mul(i)));return Ut(i,l)}),UO=[CO,PO,FO,IO];let sa=null;const Wh=new cv;class Mo extends ax{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.updateType=te.FRAME,this.light=t,this.color=new ti,this.colorNode=ee(this.color).setGroup(oe),this.baseColorNode=null,this.shadowMap=null,this.shadowNode=null,this.shadowColorNode=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this.isAnalyticLightNode=!0}getCacheKey(){return zu(super.getCacheKey(),this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadow(t){const{object:e,renderer:n}=t;if(n.shadowMap.enabled===!1)return;let i=this.shadowColorNode;if(i===null){sa===null&&(sa=new Fs,sa.fragmentNode=Ae(0,0,0,1),sa.isShadowNodeMaterial=!0,sa.name="ShadowMaterial");const s=n.shadowMap.type,o=this.light.shadow,a=new Lc;a.compareFunction=Dg;const l=t.createRenderTarget(o.mapSize.width,o.mapSize.height);if(l.depthTexture=a,o.camera.updateProjectionMatrix(),s===Sh){a.compareFunction=null,this.vsmShadowMapVertical=t.createRenderTarget(o.mapSize.width,o.mapSize.height,{format:oc,type:Rs}),this.vsmShadowMapHorizontal=t.createRenderTarget(o.mapSize.width,o.mapSize.height,{format:oc,type:Rs});const _=Ge(a),T=Ge(this.vsmShadowMapVertical.texture),w=He("blurSamples","float",o).setGroup(oe),A=He("radius","float",o).setGroup(oe),v=He("mapSize","vec2",o).setGroup(oe);let R=this.vsmMaterialVertical||(this.vsmMaterialVertical=new Fs);R.fragmentNode=DO({samples:w,radius:A,size:v,shadowPass:_}).context(t.getSharedContext()),R.name="VSMVertical",R=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new Fs),R.fragmentNode=LO({samples:w,radius:A,size:v,shadowPass:T}).context(t.getSharedContext()),R.name="VSMHorizontal"}const c=He("intensity","float",o).setGroup(oe),h=He("bias","float",o).setGroup(oe),u=He("normalBias","float",o).setGroup(oe),d=e.material.shadowPositionNode||JU;let f=ee(o.matrix).setGroup(oe).mul(d.add(md.mul(u)));f=f.xyz.div(f.w);let p=f.z.add(h);n.coordinateSystem===ho&&(p=p.mul(2).sub(1)),f=gt(f.x,f.y.oneMinus(),p);const x=f.x.greaterThanEqual(0).and(f.x.lessThanEqual(1)).and(f.y.greaterThanEqual(0)).and(f.y.lessThanEqual(1)).and(f.z.lessThanEqual(1)),m=o.filterNode||UO[n.shadowMap.type]||null;if(m===null)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const g=Ge(l.texture,f),y=x.select(m({depthTexture:s===Sh?this.vsmShadowMapHorizontal.texture:a,shadowCoord:f,shadow:o}),Tt(1));this.shadowMap=l,this.light.shadow.map=l,this.shadowNode=y,this.shadowColorNode=i=this.colorNode.mul(zn(1,y.rgb.mix(g,1),c.mul(g.a))),this.baseColorNode=this.colorNode}this.colorNode=i,this.updateBeforeType=te.RENDER}setup(t){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?t.object.receiveShadow&&this.setupShadow(t):this.shadowNode!==null&&this.disposeShadow()}updateShadow(t){const{shadowMap:e,light:n}=this,{renderer:i,scene:s,camera:o}=t,a=i.shadowMap.type,l=e.depthTexture.version;this._depthVersionCached=l;const c=s.overrideMaterial;s.overrideMaterial=sa,e.setSize(n.shadow.mapSize.width,n.shadow.mapSize.height),n.shadow.updateMatrices(n),n.shadow.camera.layers.mask=o.layers.mask;const h=i.getRenderTarget(),u=i.getRenderObjectFunction();i.setRenderObjectFunction((d,...f)=>{(d.castShadow===!0||d.receiveShadow&&a===Sh)&&i.renderObject(d,...f)}),i.setRenderTarget(e),i.render(s,n.shadow.camera),i.setRenderObjectFunction(u),n.isPointLight!==!0&&a===Sh&&this.vsmPass(t,n),i.setRenderTarget(h),s.overrideMaterial=c}vsmPass(t,e){const{renderer:n}=t;this.vsmShadowMapVertical.setSize(e.shadow.mapSize.width,e.shadow.mapSize.height),this.vsmShadowMapHorizontal.setSize(e.shadow.mapSize.width,e.shadow.mapSize.height),n.setRenderTarget(this.vsmShadowMapVertical),Wh.material=this.vsmMaterialVertical,Wh.render(n),n.setRenderTarget(this.vsmShadowMapHorizontal),Wh.material=this.vsmMaterialHorizontal,Wh.render(n)}disposeShadow(){this.shadowMap.dispose(),this.shadowMap=null,this.vsmShadowMapVertical!==null&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),this.vsmShadowMapHorizontal!==null&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),this.shadowNode=null,this.shadowColorNode=null,this.baseColorNode=null,this.updateBeforeType=te.NONE}updateBefore(t){const e=this.light.shadow;(e.needsUpdate||e.autoUpdate)&&(this.updateShadow(t),this.shadowMap.depthTexture.version===this._depthVersionCached&&(e.needsUpdate=!1))}update(){const{light:t}=this;this.color.copy(t.color).multiplyScalar(t.intensity)}}const uv=qt(r=>{const{lightDistance:t,cutoffDistance:e,decayExponent:n}=r,i=t.pow(n).max(.01).reciprocal();return e.greaterThan(0).select(i.mul(t.div(e).pow4().oneMinus().clamp().pow2()),i)});let qh;function ux(r){qh=qh||new WeakMap;let t=qh.get(r);return t===void 0&&qh.set(r,t={}),t}function dv(r){const t=ux(r);return t.position||(t.position=ee(new B).setGroup(oe).onRenderUpdate((e,n)=>n.value.setFromMatrixPosition(r.matrixWorld)))}function BO(r){const t=ux(r);return t.targetPosition||(t.targetPosition=ee(new B).setGroup(oe).onRenderUpdate((e,n)=>n.value.setFromMatrixPosition(r.target.matrixWorld)))}function dx(r){const t=ux(r);return t.viewPosition||(t.viewPosition=ee(new B).setGroup(oe).onRenderUpdate(({camera:e},n)=>{n.value=n.value||new B,n.value.setFromMatrixPosition(r.matrixWorld),n.value.applyMatrix4(e.matrixWorldInverse)}))}const fv=r=>cl.transformDirection(dv(r).sub(BO(r))),OO=qt(([r])=>{const t=r.mul(.9478672986).add(.0521327014).pow(2.4),e=r.mul(.0773993808),n=r.lessThanEqual(.04045);return zn(t,e,n)}).setLayout({name:"sRGBToLinearSRGB",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),zO=qt(([r])=>{const t=r.pow(.41666).mul(1.055).sub(.055),e=r.mul(12.92),n=r.lessThanEqual(.0031308);return zn(t,e,n)}).setLayout({name:"linearSRGBTosRGB",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),GO=qt(([r,t])=>r.mul(t).clamp()).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),kO=qt(([r,t])=>(r=r.mul(t),r.div(r.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),VO=qt(([r,t])=>{r=r.mul(t),r=r.sub(.004).max(0);const e=r.mul(r.mul(6.2).add(.5)),n=r.mul(r.mul(6.2).add(1.7)).add(.06);return e.div(n).pow(2.2)}).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),HO=qt(([r])=>{const t=r.mul(r.add(.0245786)).sub(90537e-9),e=r.mul(r.add(.432951).mul(.983729)).add(.238081);return t.div(e)}),$O=qt(([r,t])=>{const e=ts(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),n=ts(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return r=r.mul(t).div(.6),r=e.mul(r),r=HO(r),r=n.mul(r),r.clamp()}).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),WO=ts(gt(1.6605,-.1246,-.0182),gt(-.5876,1.1329,-.1006),gt(-.0728,-.0083,1.1187)),qO=ts(gt(.6274,.0691,.0164),gt(.3293,.9195,.088),gt(.0433,.0113,.8956)),XO=qt(([r])=>{const t=gt(r).toVar(),e=gt(t.mul(t)).toVar(),n=gt(e.mul(e)).toVar();return Tt(15.5).mul(n.mul(e)).sub(Nn(40.14,n.mul(t))).add(Nn(31.96,n).sub(Nn(6.868,e.mul(t))).add(Nn(.4298,e).add(Nn(.1191,t).sub(.00232))))}),YO=qt(([r,t])=>{const e=gt(r).toVar(),n=ts(gt(.856627153315983,.137318972929847,.11189821299995),gt(.0951212405381588,.761241990602591,.0767994186031903),gt(.0482516061458583,.101439036467562,.811302368396859)),i=ts(gt(1.1271005818144368,-.1413297634984383,-.14132976349843826),gt(-.11060664309660323,1.157823702216272,-.11060664309660294),gt(-.016493938717834573,-.016493938717834257,1.2519364065950405)),s=Tt(-12.47393),o=Tt(4.026069);return e.mulAssign(t),e.assign(qO.mul(e)),e.assign(n.mul(e)),e.assign(Us(e,1e-10)),e.assign(Yg(e)),e.assign(e.sub(s).div(o.sub(s))),e.assign(po(e,0,1)),e.assign(XO(e)),e.assign(i.mul(e)),e.assign(Qg(Us(gt(0),e),gt(2.2))),e.assign(WO.mul(e)),e.assign(po(e,0,1)),e}).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),jO=qt(([r,t])=>{const e=Tt(.76),n=Tt(.15);r=r.mul(t);const i=Om(r.r,Om(r.g,r.b)),s=Vi(i.lessThan(.08),i.sub(Nn(6.25,i.mul(i))),.04);r.subAssign(s);const o=Us(r.r,Us(r.g,r.b));pi(o.lessThan(e),()=>r);const a=Jr(1,e),l=Jr(1,a.mul(a).div(o.add(a.sub(e))));r.mulAssign(l.div(o));const c=Jr(1,Xg(1,n.mul(o.sub(l)).add(1)));return zn(r,gt(l),c)}).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class KO extends Kt{constructor(t){super(),this.scope=t}generate(t){const{scope:e}=this,{renderer:n}=t;n.backend.isWebGLBackend===!0?t.addFlowCode(`	// ${e}Barrier 
`):t.addLineFlowCode(`${e}Barrier()`,this)}}Q(KO);class ss extends an{static get type(){return"AtomicFunctionNode"}constructor(t,e,n,i=null){super("uint"),this.method=t,this.pointerNode=e,this.valueNode=n,this.storeNode=i}getInputType(t){return this.pointerNode.getNodeType(t)}getNodeType(t){return this.getInputType(t)}generate(t){const e=this.method,n=this.getNodeType(t),i=this.getInputType(t),s=this.pointerNode,o=this.valueNode,a=[];a.push(`&${s.build(t,i)}`),a.push(o.build(t,i));const l=`${t.getMethod(e,n)}( ${a.join(", ")} )`;if(this.storeNode!==null){const c=this.storeNode.build(t,i);t.addLineFlowCode(`${c} = ${l}`,this)}else t.addLineFlowCode(l,this)}}ss.ATOMIC_LOAD="atomicLoad";ss.ATOMIC_STORE="atomicStore";ss.ATOMIC_ADD="atomicAdd";ss.ATOMIC_SUB="atomicSub";ss.ATOMIC_MAX="atomicMax";ss.ATOMIC_MIN="atomicMin";ss.ATOMIC_AND="atomicAnd";ss.ATOMIC_OR="atomicOr";ss.ATOMIC_XOR="atomicXor";Q(ss);const ZO=qt(([r,t])=>{const e=r.x,n=r.y,i=r.z;let s=t.element(0).mul(.886227);return s=s.add(t.element(1).mul(2*.511664).mul(n)),s=s.add(t.element(2).mul(2*.511664).mul(i)),s=s.add(t.element(3).mul(2*.511664).mul(e)),s=s.add(t.element(4).mul(2*.429043).mul(e).mul(n)),s=s.add(t.element(5).mul(2*.429043).mul(n).mul(i)),s=s.add(t.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),s=s.add(t.element(7).mul(2*.429043).mul(e).mul(i)),s=s.add(t.element(8).mul(.429043).mul(Nn(e,e).sub(Nn(n,n)))),s});class QO extends Mo{static get type(){return"PointLightNode"}constructor(t=null){super(t),this.cutoffDistanceNode=ee(0).setGroup(oe),this.decayExponentNode=ee(0).setGroup(oe)}update(t){const{light:e}=this;super.update(t),this.cutoffDistanceNode.value=e.distance,this.decayExponentNode.value=e.decay}setup(t){const{colorNode:e,cutoffDistanceNode:n,decayExponentNode:i,light:s}=this,o=t.context.lightingModel,a=dx(s).sub(Hn),l=a.normalize(),c=a.length(),h=uv({lightDistance:c,cutoffDistance:n,decayExponent:i}),u=e.mul(h),d=t.context.reflectedLight;o.direct({lightDirection:l,lightColor:u,reflectedLight:d},t.stack,t)}}class JO extends Mo{static get type(){return"DirectionalLightNode"}constructor(t=null){super(t)}setup(t){super.setup(t);const e=t.context.lightingModel,n=this.colorNode,i=fv(this.light),s=t.context.reflectedLight;e.direct({lightDirection:i,lightColor:n,reflectedLight:s},t.stack,t)}}const rp=new Be,Xh=new Be;let Gl=null;class tz extends Mo{static get type(){return"RectAreaLightNode"}constructor(t=null){super(t),this.halfHeight=ee(new B).setGroup(oe),this.halfWidth=ee(new B).setGroup(oe)}update(t){super.update(t);const{light:e}=this,n=t.camera.matrixWorldInverse;Xh.identity(),rp.copy(e.matrixWorld),rp.premultiply(n),Xh.extractRotation(rp),this.halfWidth.value.set(e.width*.5,0,0),this.halfHeight.value.set(0,e.height*.5,0),this.halfWidth.value.applyMatrix4(Xh),this.halfHeight.value.applyMatrix4(Xh)}setup(t){super.setup(t);let e,n;t.isAvailable("float32Filterable")?(e=Ge(Gl.LTC_FLOAT_1),n=Ge(Gl.LTC_FLOAT_2)):(e=Ge(Gl.LTC_HALF_1),n=Ge(Gl.LTC_HALF_2));const{colorNode:i,light:s}=this,o=t.context.lightingModel,a=dx(s),l=t.context.reflectedLight;o.directRectArea({lightColor:i,lightPosition:a,halfWidth:this.halfWidth,halfHeight:this.halfHeight,reflectedLight:l,ltc_1:e,ltc_2:n},t.stack,t)}static setLTC(t){Gl=t}}class pv extends Mo{static get type(){return"SpotLightNode"}constructor(t=null){super(t),this.coneCosNode=ee(0).setGroup(oe),this.penumbraCosNode=ee(0).setGroup(oe),this.cutoffDistanceNode=ee(0).setGroup(oe),this.decayExponentNode=ee(0).setGroup(oe)}update(t){super.update(t);const{light:e}=this;this.coneCosNode.value=Math.cos(e.angle),this.penumbraCosNode.value=Math.cos(e.angle*(1-e.penumbra)),this.cutoffDistanceNode.value=e.distance,this.decayExponentNode.value=e.decay}getSpotAttenuation(t){const{coneCosNode:e,penumbraCosNode:n}=this;return hc(e,n,t)}setup(t){super.setup(t);const e=t.context.lightingModel,{colorNode:n,cutoffDistanceNode:i,decayExponentNode:s,light:o}=this,a=dx(o).sub(Hn),l=a.normalize(),c=l.dot(fv(o)),h=this.getSpotAttenuation(c),u=a.length(),d=uv({lightDistance:u,cutoffDistance:i,decayExponent:s}),f=n.mul(h).mul(d),p=t.context.reflectedLight;e.direct({lightDirection:l,lightColor:f,reflectedLight:p},t.stack,t)}}class ez extends pv{static get type(){return"IESSpotLightNode"}getSpotAttenuation(t){const e=this.light.iesMap;let n=null;if(e&&e.isTexture===!0){const i=t.acos().mul(1/Math.PI);n=Ge(e,Ut(i,0),0).r}else n=super.getSpotAttenuation(t);return n}}class nz extends Mo{static get type(){return"AmbientLightNode"}constructor(t=null){super(t)}setup({context:t}){t.irradiance.addAssign(this.colorNode)}}class iz extends Mo{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=dv(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=ee(new ti).setGroup(oe)}update(t){const{light:e}=this;super.update(t),this.lightPositionNode.object3d=e,this.groundColorNode.value.copy(e.groundColor).multiplyScalar(e.intensity)}setup(t){const{colorNode:e,groundColorNode:n,lightDirectionNode:i}=this,o=Tr.dot(i).mul(.5).add(.5),a=zn(n,e,o);t.context.irradiance.addAssign(a)}}class sz extends Mo{static get type(){return"LightProbeNode"}constructor(t=null){super(t);const e=[];for(let n=0;n<9;n++)e.push(new B);this.lightProbe=fc(e)}update(t){const{light:e}=this;super.update(t);for(let n=0;n<9;n++)this.lightProbe.array[n].copy(e.sh.coefficients[n]).multiplyScalar(e.intensity)}setup(t){const e=ZO(md,this.lightProbe);t.context.irradiance.addAssign(e)}}class mv{parseFunction(){console.warn("Abstract function.")}}class fx{constructor(t,e,n="",i=""){this.type=t,this.inputs=e,this.name=n,this.precision=i}getCode(){console.warn("Abstract function.")}}fx.isNodeFunction=!0;const rz=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,oz=/[a-z_0-9]+/ig,Ey="#pragma main",az=r=>{r=r.trim();const t=r.indexOf(Ey),e=t!==-1?r.slice(t+Ey.length):r,n=e.match(rz);if(n!==null&&n.length===5){const i=n[4],s=[];let o=null;for(;(o=oz.exec(i))!==null;)s.push(o);const a=[];let l=0;for(;l<s.length;){const p=s[l][0]==="const";p===!0&&l++;let x=s[l][0];x==="in"||x==="out"||x==="inout"?l++:x="";const m=s[l++][0];let g=Number.parseInt(s[l][0]);Number.isNaN(g)===!1?l++:g=null;const y=s[l++][0];a.push(new hx(m,y,g,x,p))}const c=e.substring(n[0].length),h=n[3]!==void 0?n[3]:"",u=n[2],d=n[1]!==void 0?n[1]:"",f=t!==-1?r.slice(0,t):"";return{type:u,inputs:a,name:h,precision:d,inputsCode:i,blockCode:c,headerCode:f}}else throw new Error("FunctionNode: Function is not a GLSL code.")};class lz extends fx{constructor(t){const{type:e,inputs:n,name:i,precision:s,inputsCode:o,blockCode:a,headerCode:l}=az(t);super(e,n,i,s),this.inputsCode=o,this.blockCode=a,this.headerCode=l}getCode(t=this.name){let e;const n=this.blockCode;if(n!==""){const{type:i,inputsCode:s,headerCode:o,precision:a}=this;let l=`${i} ${t} ( ${s.trim()} )`;a!==""&&(l=`${a} ${l}`),e=o+l+n}else e="";return e}}class cz extends mv{parseFunction(t){return new lz(t)}}function hz(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.material.id!==t.material.id?r.material.id-t.material.id:r.z!==t.z?r.z-t.z:r.id-t.id}function uz(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.z!==t.z?t.z-r.z:r.id-t.id}class dz{constructor(){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparent=[],this.bundles=[],this.lightsNode=new ZM([]),this.lightsArray=[],this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(t,e,n,i,s,o){let a=this.renderItems[this.renderItemsIndex];return a===void 0?(a={id:t.id,object:t,geometry:e,material:n,groupOrder:i,renderOrder:t.renderOrder,z:s,group:o},this.renderItems[this.renderItemsIndex]=a):(a.id=t.id,a.object=t,a.geometry=e,a.material=n,a.groupOrder=i,a.renderOrder=t.renderOrder,a.z=s,a.group=o),this.renderItemsIndex++,a}push(t,e,n,i,s,o){const a=this.getNextRenderItem(t,e,n,i,s,o);t.occlusionTest===!0&&this.occlusionQueryCount++,(n.transparent===!0||n.transmission>0?this.transparent:this.opaque).push(a)}unshift(t,e,n,i,s,o){const a=this.getNextRenderItem(t,e,n,i,s,o);(n.transparent===!0?this.transparent:this.opaque).unshift(a)}pushBundle(t){this.bundles.push(t)}pushLight(t){this.lightsArray.push(t)}getLightsNode(){return this.lightsNode.fromLights(this.lightsArray)}sort(t,e){this.opaque.length>1&&this.opaque.sort(t||hz),this.transparent.length>1&&this.transparent.sort(e||uz)}finish(){this.lightsNode.setLights(this.lightsArray);for(let t=this.renderItemsIndex,e=this.renderItems.length;t<e;t++){const n=this.renderItems[t];if(n.id===null)break;n.id=null,n.object=null,n.geometry=null,n.material=null,n.groupOrder=null,n.renderOrder=null,n.z=null,n.group=null}}}class fz{constructor(){this.lists=new Bs}get(t,e){const n=this.lists,i=[t,e];let s=n.get(i);return s===void 0&&(s=new dz,n.set(i,s)),s}dispose(){this.lists=new Bs}}let pz=0;class mz{constructor(){this.id=pz++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new ve,this.scissor=!1,this.scissorValue=new ve,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.sampleCount=1,this.width=0,this.height=0,this.isRenderContext=!0}getCacheKey(){return gv(this)}}function gv(r){const{textures:t,activeCubeFace:e}=r,n=[e];for(const i of t)n.push(i.id);return yM(n)}class gz{constructor(){this.chainMaps={}}get(t,e,n=null){const i=[t,e];let s;if(n===null)s="default";else{const l=n.texture.format;s=`${n.textures.length}:${l}:${n.samples}:${n.depthBuffer}:${n.stencilBuffer}`}const o=this.getChainMap(s);let a=o.get(i);return a===void 0&&(a=new mz,o.set(i,a)),n!==null&&(a.sampleCount=n.samples===0?1:n.samples),a}getChainMap(t){return this.chainMaps[t]||(this.chainMaps[t]=new Bs)}dispose(){this.chainMaps={}}}const xz=new B;class _z extends Ar{constructor(t,e,n){super(),this.renderer=t,this.backend=e,this.info=n}updateRenderTarget(t,e=0){const n=this.get(t),i=t.samples===0?1:t.samples,s=n.depthTextureMips||(n.depthTextureMips={}),o=t.textures,a=this.getSize(o[0]),l=a.width>>e,c=a.height>>e;let h=t.depthTexture||s[e],u=!1;h===void 0&&(h=new Lc,h.format=t.stencilBuffer?Xa:Qr,h.type=t.stencilBuffer?Pc:gn,h.image.width=l,h.image.height=c,s[e]=h),(n.width!==a.width||a.height!==n.height)&&(u=!0,h.needsUpdate=!0,h.image.width=l,h.image.height=c),n.width=a.width,n.height=a.height,n.textures=o,n.depthTexture=h,n.depth=t.depthBuffer,n.stencil=t.stencilBuffer,n.renderTarget=t,n.sampleCount!==i&&(u=!0,h.needsUpdate=!0,n.sampleCount=i);const d={sampleCount:i};for(let f=0;f<o.length;f++){const p=o[f];u&&(p.needsUpdate=!0),this.updateTexture(p,d)}if(this.updateTexture(h,d),n.initialized!==!0){n.initialized=!0;const f=()=>{t.removeEventListener("dispose",f);for(let p=0;p<o.length;p++)this._destroyTexture(o[p]);this._destroyTexture(h),this.delete(t)};t.addEventListener("dispose",f)}}updateTexture(t,e={}){const n=this.get(t);if(n.initialized===!0&&n.version===t.version)return;const i=t.isRenderTargetTexture||t.isDepthTexture||t.isFramebufferTexture,s=this.backend;if(i&&n.initialized===!0&&(s.destroySampler(t),s.destroyTexture(t)),t.isFramebufferTexture){const h=this.renderer.getRenderTarget();h?t.type=h.texture.type:t.type=ws}const{width:o,height:a,depth:l}=this.getSize(t);if(e.width=o,e.height=a,e.depth=l,e.needsMipmaps=this.needsMipmaps(t),e.levels=e.needsMipmaps?this.getMipLevels(t,o,a):1,i||t.isStorageTexture===!0)s.createSampler(t),s.createTexture(t,e),n.generation=t.version;else if(n.initialized!==!0&&s.createSampler(t),t.version>0){const h=t.image;if(h===void 0)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(h.complete===!1)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(t.images){const u=[];for(const d of t.images)u.push(d);e.images=u}else e.image=h;(n.isDefaultTexture===void 0||n.isDefaultTexture===!0)&&(s.createTexture(t,e),n.isDefaultTexture=!1,n.generation=t.version),t.source.dataReady===!0&&s.updateTexture(t,e),e.needsMipmaps&&t.mipmaps.length===0&&s.generateMipmaps(t)}}else s.createDefaultTexture(t),n.isDefaultTexture=!0,n.generation=t.version;if(n.initialized!==!0){n.initialized=!0,n.generation=t.version,this.info.memory.textures++;const c=()=>{t.removeEventListener("dispose",c),this._destroyTexture(t),this.info.memory.textures--};t.addEventListener("dispose",c)}n.version=t.version}getSize(t,e=xz){let n=t.images?t.images[0]:t.image;return n?(n.image!==void 0&&(n=n.image),e.width=n.width,e.height=n.height,e.depth=t.isCubeTexture?6:n.depth||1):e.width=e.height=e.depth=1,e}getMipLevels(t,e,n){let i;return t.isCompressedTexture?i=t.mipmaps.length:i=Math.floor(Math.log2(Math.max(e,n)))+1,i}needsMipmaps(t){return this.isEnvironmentTexture(t)?!0:t.isCompressedTexture===!0||t.minFilter!==xn&&t.minFilter!==Qn}isEnvironmentTexture(t){const e=t.mapping;return e===Rc||e===Cc||e===lo||e===qa}_destroyTexture(t){this.backend.destroySampler(t),this.backend.destroyTexture(t),this.delete(t)}}class px extends ti{constructor(t,e,n,i=1){super(t,e,n),this.a=i}set(t,e,n,i=1){return this.a=i,super.set(t,e,n)}copy(t){return t.a!==void 0&&(this.a=t.a),super.copy(t)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}const Di=new px;class yz extends Ar{constructor(t,e){super(),this.renderer=t,this.nodes=e}update(t,e,n){const i=this.renderer,s=this.nodes.getBackgroundNode(t)||t.background;let o=!1;if(s===null)i._clearColor.getRGB(Di,Mi),Di.a=i._clearColor.a;else if(s.isColor===!0)s.getRGB(Di,Mi),Di.a=1,o=!0;else if(s.isNode===!0){const a=this.get(t),l=s;Di.copy(i._clearColor);let c=a.backgroundMesh;if(c===void 0){const u=Jg(Ae(l).mul(Sy),{getUV:()=>md,getTextureLevel:()=>MO});let d=Gm();d=d.setZ(d.w);const f=new Fs;f.name="Background.material",f.side=zs,f.depthTest=!1,f.depthWrite=!1,f.fog=!1,f.lights=!1,f.vertexNode=d,f.colorNode=u,a.backgroundMeshNode=u,a.backgroundMesh=c=new fo(new zg(1,32,32),f),c.frustumCulled=!1,c.name="Background.mesh",c.onBeforeRender=function(p,x,m){this.matrixWorld.copyPosition(m.matrixWorld)}}const h=l.getCacheKey();a.backgroundCacheKey!==h&&(a.backgroundMeshNode.node=Ae(l).mul(Sy),a.backgroundMeshNode.needsUpdate=!0,c.material.needsUpdate=!0,a.backgroundCacheKey=h),e.unshift(c,c.geometry,c.material,0,0,null)}else console.error("THREE.Renderer: Unsupported background configuration.",s);if(i.autoClear===!0||o===!0){Di.multiplyScalar(Di.a);const a=n.clearColorValue;a.r=Di.r,a.g=Di.g,a.b=Di.b,a.a=Di.a,n.depthClearValue=i._clearDepth,n.stencilClearValue=i._clearStencil,n.clearColor=i.autoClearColor===!0,n.clearDepth=i.autoClearDepth===!0,n.clearStencil=i.autoClearStencil===!0}else n.clearColor=!1,n.clearDepth=!1,n.clearStencil=!1}}class Sz{constructor(t,e,n,i,s,o,a,l,c,h=[]){this.vertexShader=t,this.fragmentShader=e,this.computeShader=n,this.transforms=h,this.nodeAttributes=i,this.bindings=s,this.updateNodes=o,this.updateBeforeNodes=a,this.updateAfterNodes=l,this.monitor=c,this.usedTimes=0}createBindings(){const t=[];for(const e of this.bindings)if(e.bindings[0].groupNode.shared!==!0){const i=new $m(e.name,[],e.index,e);t.push(i);for(const s of e.bindings)i.bindings.push(s.clone())}else t.push(e);return t}}const Ay=new WeakMap;class Tz extends Ar{constructor(t,e){super(),this.renderer=t,this.backend=e,this.nodeFrame=new yy,this.nodeBuilderCache=new Map,this.callHashCache=new Bs,this.groupsData=new Bs}updateGroup(t){const e=t.groupNode,n=e.name;if(n===RM.name)return!0;if(n===oe.name){const o=this.get(t),a=this.nodeFrame.renderId;return o.renderId!==a?(o.renderId=a,!0):!1}if(n===hL.name){const o=this.get(t),a=this.nodeFrame.frameId;return o.frameId!==a?(o.frameId=a,!0):!1}const i=[e,t];let s=this.groupsData.get(i);return s===void 0&&this.groupsData.set(i,s={}),s.version!==e.version?(s.version=e.version,!0):!1}getForRenderCacheKey(t){return t.initialCacheKey}getForRender(t){const e=this.get(t);let n=e.nodeBuilderState;if(n===void 0){const{nodeBuilderCache:i}=this,s=this.getForRenderCacheKey(t);if(n=i.get(s),n===void 0){const o=this.backend.createNodeBuilder(t.object,this.renderer);o.scene=t.scene,o.material=t.material,o.camera=t.camera,o.context.material=t.material,o.lightsNode=t.lightsNode,o.environmentNode=this.getEnvironmentNode(t.scene),o.fogNode=this.getFogNode(t.scene),o.clippingContext=t.clippingContext,o.build(),n=this._createNodeBuilderState(o),i.set(s,n)}n.usedTimes++,e.nodeBuilderState=n}return n}delete(t){if(t.isRenderObject){const e=this.get(t).nodeBuilderState;e.usedTimes--,e.usedTimes===0&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(t))}return super.delete(t)}getForCompute(t){const e=this.get(t);let n=e.nodeBuilderState;if(n===void 0){const i=this.backend.createNodeBuilder(t,this.renderer);i.build(),n=this._createNodeBuilderState(i),e.nodeBuilderState=n}return n}_createNodeBuilderState(t){return new Sz(t.vertexShader,t.fragmentShader,t.computeShader,t.getAttributesArray(),t.getBindings(),t.updateNodes,t.updateBeforeNodes,t.updateAfterNodes,t.monitor,t.transforms)}getEnvironmentNode(t){return t.environmentNode||this.get(t).environmentNode||null}getBackgroundNode(t){return t.backgroundNode||this.get(t).backgroundNode||null}getFogNode(t){return t.fogNode||this.get(t).fogNode||null}getCacheKey(t,e){const n=[t,e],i=this.renderer.info.calls;let s=this.callHashCache.get(n);if(s===void 0||s.callId!==i){const o=this.getEnvironmentNode(t),a=this.getFogNode(t),l=[];e&&l.push(e.getCacheKey(!0)),o&&l.push(o.getCacheKey()),a&&l.push(a.getCacheKey()),l.push(this.renderer.shadowMap.enabled?1:0),s={callId:i,cacheKey:yM(l)},this.callHashCache.set(n,s)}return s.cacheKey}updateScene(t){this.updateEnvironment(t),this.updateFog(t),this.updateBackground(t)}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(t){const e=this.get(t),n=t.background;if(n){const i=t.backgroundBlurriness===0&&e.backgroundBlurriness>0||t.backgroundBlurriness>0&&e.backgroundBlurriness===0;if(e.background!==n||i){let s=null;if(n.isCubeTexture===!0||n.mapping===Rc||n.mapping===Cc||n.mapping===pm)if(t.backgroundBlurriness>0||n.mapping===pm)s=vB(n,md);else{let o;n.isCubeTexture===!0?o=dc(n):o=Ge(n),s=cB(o)}else n.isTexture===!0?s=Ge(n,pc.flipY()).setUpdateMatrix(!0):n.isColor!==!0&&console.error("WebGPUNodes: Unsupported background configuration.",n);e.backgroundNode=s,e.background=n,e.backgroundBlurriness=t.backgroundBlurriness}}else e.backgroundNode&&(delete e.backgroundNode,delete e.background)}updateFog(t){const e=this.get(t),n=t.fog;if(n){if(e.fog!==n){let i=null;if(n.isFogExp2){const s=He("color","color",n).setGroup(oe),o=He("density","float",n).setGroup(oe);i=RO(s,o)}else if(n.isFog){const s=He("color","color",n).setGroup(oe),o=He("near","float",n).setGroup(oe),a=He("far","float",n).setGroup(oe);i=wO(s,o,a)}else console.error("WebGPUNodes: Unsupported fog configuration.",n);e.fogNode=i,e.fog=n}}else delete e.fogNode,delete e.fog}updateEnvironment(t){const e=this.get(t),n=t.environment;if(n){if(e.environment!==n){let i=null;n.isCubeTexture===!0?i=dc(n):n.isTexture===!0?i=Ge(n):console.error("Nodes: Unsupported environment configuration.",n),e.environmentNode=i,e.environment=n}}else e.environmentNode&&(delete e.environmentNode,delete e.environment)}getNodeFrame(t=this.renderer,e=null,n=null,i=null,s=null){const o=this.nodeFrame;return o.renderer=t,o.scene=e,o.object=n,o.camera=i,o.material=s,o}getNodeFrameForRender(t){return this.getNodeFrame(t.renderer,t.scene,t.object,t.camera,t.material)}getOutputCacheKey(){const t=this.renderer;return t.toneMapping+","+t.currentColorSpace}hasOutputChange(t){return Ay.get(t)!==this.getOutputCacheKey()}getOutputNode(t){const e=this.renderer,n=this.getOutputCacheKey(),i=Ge(t,pc).renderOutput(e.toneMapping,e.currentColorSpace);return Ay.set(t,n),i}updateBefore(t){const e=t.getNodeBuilderState();for(const n of e.updateBeforeNodes)this.getNodeFrameForRender(t).updateBeforeNode(n)}updateAfter(t){const e=t.getNodeBuilderState();for(const n of e.updateAfterNodes)this.getNodeFrameForRender(t).updateAfterNode(n)}updateForCompute(t){const e=this.getNodeFrame(),n=this.getForCompute(t);for(const i of n.updateNodes)e.updateNode(i)}updateForRender(t){const e=this.getNodeFrameForRender(t),n=t.getNodeBuilderState();for(const i of n.updateNodes)e.updateNode(i)}needsRefresh(t){const e=this.getNodeFrameForRender(t);return t.getMonitor().needsRefresh(t,e)}dispose(){super.dispose(),this.nodeFrame=new yy,this.nodeBuilderCache=new Map}}class Mz{constructor(t,e){this.scene=t,this.camera=e}clone(){return Object.assign(new this.constructor,this)}}class vz{constructor(){this.lists=new Bs}get(t,e){const n=this.lists,i=[t,e];let s=n.get(i);return s===void 0&&(s=new Mz(t,e),n.set(i,s)),s}dispose(){this.lists=new Bs}}class xv{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map,this.colorSpaceNodes=new Map}fromMaterial(t){if(t.isNodeMaterial)return t;let e=null;const n=this.getMaterialNodeClass(t.type);if(n!==null){e=new n;for(const i in t)e[i]=t[i]}return e}addColorSpace(t,e){this.addType(t,e,this.colorSpaceNodes)}getColorSpaceFunction(t){return this.colorSpaceNodes.get(t)||null}addToneMapping(t,e){this.addType(t,e,this.toneMappingNodes)}getToneMappingFunction(t){return this.toneMappingNodes.get(t)||null}getMaterialNodeClass(t){return this.materialNodes.get(t)||null}addMaterial(t,e){this.addType(t,e.name,this.materialNodes)}getLightNodeClass(t){return this.lightNodes.get(t)||null}addLight(t,e){this.addClass(t,e,this.lightNodes)}addType(t,e,n){if(n.has(e)){console.warn(`Redefinition of node ${e}`);return}if(typeof t!="function")throw new Error(`Node class ${t.name} is not a class.`);if(typeof e=="function"||typeof e=="object")throw new Error(`Base class ${e} is not a class.`);n.set(e,t)}addClass(t,e,n){if(n.has(e)){console.warn(`Redefinition of node ${e.name}`);return}if(typeof t!="function")throw new Error(`Node class ${t.name} is not a class.`);if(typeof e!="function")throw new Error(`Base class ${e.name} is not a class.`);n.set(e,t)}}const wy=new mM,Yh=new Re,op=new ve,ap=new xM,jh=new Be,ra=new ve;class bz{constructor(t,e={}){this.isRenderer=!0;const{logarithmicDepthBuffer:n=!1,alpha:i=!0,depth:s=!0,stencil:o=!1,antialias:a=!1,samples:l=0,getFallback:c=null}=e;this.domElement=t.getDomElement(),this.backend=t,this.samples=l||a===!0?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=n,this.outputColorSpace=Bt,this.toneMapping=Ca,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=s,this.stencil=o,this.clippingPlanes=[],this.info=new OB,this.nodes={library:new xv,modelViewMatrix:null,modelNormalViewMatrix:null},this._getFallback=c,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new ve(0,0,this._width,this._height),this._scissor=new ve(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new cv(new Fs),this._quad.material.type="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const h=this.alpha===!0?0:1;this._clearColor=new px(0,0,0,h),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:GF},this.xr={enabled:!1},this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(u,d,f)=>{await this.compileAsync(u,d);const p=this._renderLists.get(u,d),x=this._renderContexts.get(u,d,this._renderTarget),m=u.overrideMaterial||f.material,g=this._objects.get(f,m,u,d,p.lightsNode,x),{fragmentShader:y,vertexShader:_}=g.getNodeBuilderState();return{fragmentShader:y,vertexShader:_}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return this._initPromise!==null?this._initPromise:(this._initPromise=new Promise(async(t,e)=>{let n=this.backend;try{await n.init(this)}catch(i){if(this._getFallback!==null)try{this.backend=n=this._getFallback(i),await n.init(this)}catch(s){e(s);return}else{e(i);return}}this._nodes=new Tz(this,n),this._animation=new NB(this._nodes,this.info),this._attributes=new LB(n),this._background=new yz(this,this._nodes),this._geometries=new BB(this._attributes,this.info),this._textures=new _z(this,n,this.info),this._pipelines=new VB(n,this._nodes),this._bindings=new HB(n,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new FB(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new fz,this._bundles=new vz,this._renderContexts=new gz,this._initialized=!0,t()}),this._initPromise)}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(t,e,n=null){this._initialized===!1&&await this.init();const i=this._nodes.nodeFrame,s=i.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,l=this._compilationPromises,c=t.isScene===!0?t:wy;n===null&&(n=t);const h=this._renderTarget,u=this._renderContexts.get(n,e,h),d=this._activeMipmapLevel,f=[];this._currentRenderContext=u,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=f,i.renderId++,i.update(),u.depth=this.depth,u.stencil=this.stencil,u.clippingContext||(u.clippingContext=new Hm),u.clippingContext.updateGlobal(this,e),c.onBeforeRender(this,t,e,h);const p=this._renderLists.get(t,e);if(p.begin(),this._projectObject(t,e,0,p),n!==t&&n.traverseVisible(function(y){y.isLight&&y.layers.test(e.layers)&&p.pushLight(y)}),p.finish(),h!==null){this._textures.updateRenderTarget(h,d);const y=this._textures.get(h);u.textures=y.textures,u.depthTexture=y.depthTexture}else u.textures=null,u.depthTexture=null;this._nodes.updateScene(c),this._background.update(c,p,u);const x=p.opaque,m=p.transparent,g=p.lightsNode;this.opaque===!0&&x.length>0&&this._renderObjects(x,e,c,g),this.transparent===!0&&m.length>0&&this._renderObjects(m,e,c,g),i.renderId=s,this._currentRenderContext=o,this._currentRenderObjectFunction=a,this._compilationPromises=l,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(f)}async renderAsync(t,e){this._initialized===!1&&await this.init();const n=this._renderScene(t,e);await this.backend.resolveTimestampAsync(n,"render")}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}_renderBundle(t,e,n){const{bundleGroup:i,camera:s,renderList:o}=t,a=this._currentRenderContext,l=this._bundles.get(i,s),c=this.backend.get(l);c.renderContexts===void 0&&(c.renderContexts=new Set);const h=i.version!==c.version,u=c.renderContexts.has(a)===!1||h;if(c.renderContexts.add(a),u){this.backend.beginBundle(a),(c.renderObjects===void 0||h)&&(c.renderObjects=[]),this._currentRenderBundle=l;const d=o.opaque;d.length>0&&this._renderObjects(d,s,e,n),this._currentRenderBundle=null,this.backend.finishBundle(a,l),c.version=i.version}else{const{renderObjects:d}=c;for(let f=0,p=d.length;f<p;f++){const x=d[f];this._nodes.needsRefresh(x)&&(this._nodes.updateBefore(x),this._nodes.updateForRender(x),this._bindings.updateForRender(x),this._nodes.updateAfter(x))}}this.backend.addBundle(a,l)}render(t,e){if(this._initialized===!1)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(t,e);this._renderScene(t,e)}_getFrameBufferTarget(){const{currentToneMapping:t,currentColorSpace:e}=this;if(t!==Ca===!1&&e!==Mi===!1)return null;const{width:s,height:o}=this.getDrawingBufferSize(Yh),{depth:a,stencil:l}=this;let c=this._frameBufferTarget;return c===null&&(c=new rl(s,o,{depthBuffer:a,stencilBuffer:l,type:Rs,format:il,colorSpace:Mi,generateMipmaps:!1,minFilter:Qn,magFilter:Qn,samples:this.samples}),c.isPostProcessingRenderTarget=!0,this._frameBufferTarget=c),c.depthBuffer=a,c.stencilBuffer=l,c.setSize(s,o),c.viewport.copy(this._viewport),c.scissor.copy(this._scissor),c.viewport.multiplyScalar(this._pixelRatio),c.scissor.multiplyScalar(this._pixelRatio),c.scissorTest=this._scissorTest,c}_renderScene(t,e,n=!0){const i=n?this._getFrameBufferTarget():null,s=this._nodes.nodeFrame,o=s.renderId,a=this._currentRenderContext,l=this._currentRenderObjectFunction,c=t.isScene===!0?t:wy,h=this._renderTarget,u=this._activeCubeFace,d=this._activeMipmapLevel;let f;i!==null?(f=i,this.setRenderTarget(f)):f=h;const p=this._renderContexts.get(t,e,f);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,s.renderId=this.info.calls;const x=this.coordinateSystem;e.coordinateSystem!==x&&(e.coordinateSystem=x,e.updateProjectionMatrix()),t.matrixWorldAutoUpdate===!0&&t.updateMatrixWorld(),e.parent===null&&e.matrixWorldAutoUpdate===!0&&e.updateMatrixWorld();let m=this._viewport,g=this._scissor,y=this._pixelRatio;f!==null&&(m=f.viewport,g=f.scissor,y=1),this.getDrawingBufferSize(Yh),op.set(0,0,Yh.width,Yh.height);const _=m.minDepth===void 0?0:m.minDepth,T=m.maxDepth===void 0?1:m.maxDepth;p.viewportValue.copy(m).multiplyScalar(y).floor(),p.viewportValue.width>>=d,p.viewportValue.height>>=d,p.viewportValue.minDepth=_,p.viewportValue.maxDepth=T,p.viewport=p.viewportValue.equals(op)===!1,p.scissorValue.copy(g).multiplyScalar(y).floor(),p.scissor=this._scissorTest&&p.scissorValue.equals(op)===!1,p.scissorValue.width>>=d,p.scissorValue.height>>=d,p.clippingContext||(p.clippingContext=new Hm),p.clippingContext.updateGlobal(this,e),c.onBeforeRender(this,t,e,f),jh.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),ap.setFromProjectionMatrix(jh,x);const w=this._renderLists.get(t,e);if(w.begin(),this._projectObject(t,e,0,w),w.finish(),this.sortObjects===!0&&w.sort(this._opaqueSort,this._transparentSort),f!==null){this._textures.updateRenderTarget(f,d);const S=this._textures.get(f);p.textures=S.textures,p.depthTexture=S.depthTexture,p.width=S.width,p.height=S.height,p.renderTarget=f,p.depth=f.depthBuffer,p.stencil=f.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=d,p.height>>=d,p.activeCubeFace=u,p.activeMipmapLevel=d,p.occlusionQueryCount=w.occlusionQueryCount,this._nodes.updateScene(c),this._background.update(c,w,p),this.backend.beginRender(p);const{bundles:A,lightsNode:v,transparent:R,opaque:W}=w;if(A.length>0&&this._renderBundles(A,c,v),this.opaque===!0&&W.length>0&&this._renderObjects(W,e,c,v),this.transparent===!0&&R.length>0&&this._renderObjects(R,e,c,v),this.backend.finishRender(p),s.renderId=o,this._currentRenderContext=a,this._currentRenderObjectFunction=l,i!==null){this.setRenderTarget(h,u,d);const S=this._quad;this._nodes.hasOutputChange(f.texture)&&(S.material.fragmentNode=this._nodes.getOutputNode(f.texture),S.material.needsUpdate=!0),this._renderScene(S,S.camera,!1)}return c.onAfterRender(this,t,e,f),p}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(t){this._initialized===!1&&await this.init(),this._animation.setAnimationLoop(t)}async getArrayBufferAsync(t){return await this.backend.getArrayBufferAsync(t)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(t){return t.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(t){return t.set(this._width,this._height)}setPixelRatio(t=1){this._pixelRatio=t,this.setSize(this._width,this._height,!1)}setDrawingBufferSize(t,e,n){this._width=t,this._height=e,this._pixelRatio=n,this.domElement.width=Math.floor(t*n),this.domElement.height=Math.floor(e*n),this.setViewport(0,0,t,e),this._initialized&&this.backend.updateSize()}setSize(t,e,n=!0){this._width=t,this._height=e,this.domElement.width=Math.floor(t*this._pixelRatio),this.domElement.height=Math.floor(e*this._pixelRatio),n===!0&&(this.domElement.style.width=t+"px",this.domElement.style.height=e+"px"),this.setViewport(0,0,t,e),this._initialized&&this.backend.updateSize()}setOpaqueSort(t){this._opaqueSort=t}setTransparentSort(t){this._transparentSort=t}getScissor(t){const e=this._scissor;return t.x=e.x,t.y=e.y,t.width=e.width,t.height=e.height,t}setScissor(t,e,n,i){const s=this._scissor;t.isVector4?s.copy(t):s.set(t,e,n,i)}getScissorTest(){return this._scissorTest}setScissorTest(t){this._scissorTest=t,this.backend.setScissorTest(t)}getViewport(t){return t.copy(this._viewport)}setViewport(t,e,n,i,s=0,o=1){const a=this._viewport;t.isVector4?a.copy(t):a.set(t,e,n,i),a.minDepth=s,a.maxDepth=o}getClearColor(t){return t.copy(this._clearColor)}setClearColor(t,e=1){this._clearColor.set(t),this._clearColor.a=e}getClearAlpha(){return this._clearColor.a}setClearAlpha(t){this._clearColor.a=t}getClearDepth(){return this._clearDepth}setClearDepth(t){this._clearDepth=t}getClearStencil(){return this._clearStencil}setClearStencil(t){this._clearStencil=t}isOccluded(t){const e=this._currentRenderContext;return e&&this.backend.isOccluded(e,t)}clear(t=!0,e=!0,n=!0){if(this._initialized===!1)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(t,e,n);const i=this._renderTarget||this._getFrameBufferTarget();let s=null;if(i!==null&&(this._textures.updateRenderTarget(i),s=this._textures.get(i)),this.backend.clear(t,e,n,s),i!==null&&this._renderTarget===null){const o=this._quad;this._nodes.hasOutputChange(i.texture)&&(o.material.fragmentNode=this._nodes.getOutputNode(i.texture),o.material.needsUpdate=!0),this._renderScene(o,o.camera,!1)}}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(t=!0,e=!0,n=!0){this._initialized===!1&&await this.init(),this.clear(t,e,n)}clearColorAsync(){return this.clearAsync(!0,!1,!1)}clearDepthAsync(){return this.clearAsync(!1,!0,!1)}clearStencilAsync(){return this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this._renderTarget!==null?Ca:this.toneMapping}get currentColorSpace(){return this._renderTarget!==null?Mi:this.outputColorSpace}dispose(){this.info.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(t,e=0,n=0){this._renderTarget=t,this._activeCubeFace=e,this._activeMipmapLevel=n}getRenderTarget(){return this._renderTarget}setRenderObjectFunction(t){this._renderObjectFunction=t}getRenderObjectFunction(){return this._renderObjectFunction}async computeAsync(t){this._initialized===!1&&await this.init();const e=this._nodes.nodeFrame,n=e.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,e.renderId=this.info.calls;const i=this.backend,s=this._pipelines,o=this._bindings,a=this._nodes,l=Array.isArray(t)?t:[t];if(l[0]===void 0||l[0].isComputeNode!==!0)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");i.beginCompute(t);for(const c of l){if(s.has(c)===!1){const d=()=>{c.removeEventListener("dispose",d),s.delete(c),o.delete(c),a.delete(c)};c.addEventListener("dispose",d),c.onInit({renderer:this})}a.updateForCompute(c),o.updateForCompute(c);const h=o.getForCompute(c),u=s.getForCompute(c,h);i.compute(t,c,h,u)}i.finishCompute(t),await this.backend.resolveTimestampAsync(t,"compute"),e.renderId=n}async hasFeatureAsync(t){return this._initialized===!1&&await this.init(),this.backend.hasFeature(t)}hasFeature(t){return this._initialized===!1?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(t)}copyFramebufferToTexture(t,e=null){const n=this._currentRenderContext;this._textures.updateTexture(t),e=e===null?ra.set(0,0,t.image.width,t.image.height):e,this.backend.copyFramebufferToTexture(t,n,e)}copyTextureToTexture(t,e,n=null,i=null,s=0){this._textures.updateTexture(t),this._textures.updateTexture(e),this.backend.copyTextureToTexture(t,e,n,i,s)}readRenderTargetPixelsAsync(t,e,n,i,s,o=0,a=0){return this.backend.copyTextureToBuffer(t.textures[o],e,n,i,s,a)}_projectObject(t,e,n,i){if(t.visible===!1)return;if(t.layers.test(e.layers)){if(t.isGroup)n=t.renderOrder;else if(t.isLOD)t.autoUpdate===!0&&t.update(e);else if(t.isLight)i.pushLight(t);else if(t.isSprite){if(!t.frustumCulled||ap.intersectsSprite(t)){this.sortObjects===!0&&ra.setFromMatrixPosition(t.matrixWorld).applyMatrix4(jh);const{geometry:a,material:l}=t;l.visible&&i.push(t,a,l,n,ra.z,null)}}else if(t.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((t.isMesh||t.isLine||t.isPoints)&&(!t.frustumCulled||ap.intersectsObject(t))){const{geometry:a,material:l}=t;if(this.sortObjects===!0&&(a.boundingSphere===null&&a.computeBoundingSphere(),ra.copy(a.boundingSphere.center).applyMatrix4(t.matrixWorld).applyMatrix4(jh)),Array.isArray(l)){const c=a.groups;for(let h=0,u=c.length;h<u;h++){const d=c[h],f=l[d.materialIndex];f&&f.visible&&i.push(t,a,f,n,ra.z,d)}}else l.visible&&i.push(t,a,l,n,ra.z,null)}}if(t.isBundleGroup===!0&&this.backend.beginBundle!==void 0){const a=i;i=this._renderLists.get(t,e),i.begin(),a.pushBundle({bundleGroup:t,camera:e,renderList:i}),i.finish()}const o=t.children;for(let a=0,l=o.length;a<l;a++)this._projectObject(o[a],e,n,i)}_renderBundles(t,e,n){for(const i of t)this._renderBundle(i,e,n)}_renderObjects(t,e,n,i){for(let s=0,o=t.length;s<o;s++){const a=t[s],{object:l,geometry:c,material:h,group:u}=a;if(e.isArrayCamera){const d=e.cameras;for(let f=0,p=d.length;f<p;f++){const x=d[f];if(l.layers.test(x.layers)){const m=x.viewport,g=m.minDepth===void 0?0:m.minDepth,y=m.maxDepth===void 0?1:m.maxDepth,_=this._currentRenderContext.viewportValue;_.copy(m).multiplyScalar(this._pixelRatio).floor(),_.minDepth=g,_.maxDepth=y,this.backend.updateViewport(this._currentRenderContext),this._currentRenderObjectFunction(l,n,x,c,h,u,i)}}}else this._currentRenderObjectFunction(l,n,e,c,h,u,i)}}renderObject(t,e,n,i,s,o,a){let l,c,h;if(t.onBeforeRender(this,e,n,i,s,o),e.overrideMaterial!==null){const u=e.overrideMaterial;s.positionNode&&s.positionNode.isNode&&(l=u.positionNode,u.positionNode=s.positionNode),u.isShadowNodeMaterial&&(u.side=s.shadowSide===null?s.side:s.shadowSide,s.depthNode&&s.depthNode.isNode&&(h=u.depthNode,u.depthNode=s.depthNode),s.shadowNode&&s.shadowNode.isNode&&(c=u.fragmentNode,u.fragmentNode=s.shadowNode),this.localClippingEnabled&&(s.clipShadows?(u.clippingPlanes!==s.clippingPlanes&&(u.clippingPlanes=s.clippingPlanes,u.needsUpdate=!0),u.clipIntersection!==s.clipIntersection&&(u.clipIntersection=s.clipIntersection)):Array.isArray(u.clippingPlanes)&&(u.clippingPlanes=null,u.needsUpdate=!0))),s=u}s.transparent===!0&&s.side===Ru&&s.forceSinglePass===!1?(s.side=zs,this._handleObjectFunction(t,s,e,n,a,o,"backSide"),s.side=rc,this._handleObjectFunction(t,s,e,n,a,o),s.side=Ru):this._handleObjectFunction(t,s,e,n,a,o),l!==void 0&&(e.overrideMaterial.positionNode=l),h!==void 0&&(e.overrideMaterial.depthNode=h),c!==void 0&&(e.overrideMaterial.fragmentNode=c),t.onAfterRender(this,e,n,i,s,o)}_renderObjectDirect(t,e,n,i,s,o,a){const l=this._objects.get(t,e,n,i,s,this._currentRenderContext,a);l.drawRange=t.geometry.drawRange,l.group=o;const c=this._nodes.needsRefresh(l);c&&(this._nodes.updateBefore(l),this._geometries.updateForRender(l),this._nodes.updateForRender(l),this._bindings.updateForRender(l)),this._pipelines.updateForRender(l),this._currentRenderBundle!==null&&(this.backend.get(this._currentRenderBundle).renderObjects.push(l),l.bundle=this._currentRenderBundle.scene),this.backend.draw(l,this.info),c&&this._nodes.updateAfter(l)}_createObjectPipeline(t,e,n,i,s,o){const a=this._objects.get(t,e,n,i,s,this._currentRenderContext,o);this._nodes.updateBefore(a),this._geometries.updateForRender(a),this._nodes.updateForRender(a),this._bindings.updateForRender(a),this._pipelines.getForRender(a,this._compilationPromises),this._nodes.updateAfter(a)}get compute(){return this.computeAsync}get compile(){return this.compileAsync}}class mx{constructor(t=""){this.name=t,this.visibility=0}setVisibility(t){this.visibility|=t}clone(){return Object.assign(new this.constructor,this)}}function Ez(r){return r+(cr-r%cr)%cr}class _v extends mx{constructor(t,e=null){super(t),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=e}get byteLength(){return Ez(this._buffer.byteLength)}get buffer(){return this._buffer}update(){return!0}}class yv extends _v{constructor(t,e=null){super(t,e),this.isUniformBuffer=!0}}let Az=0;class Sv extends yv{constructor(t,e){super("UniformBuffer_"+Az++,t?t.value:null),this.nodeUniform=t,this.groupNode=e}get buffer(){return this.nodeUniform.value}}class wz extends yv{constructor(t){super(t),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(t){return this.uniforms.push(t),this}removeUniform(t){const e=this.uniforms.indexOf(t);return e!==-1&&this.uniforms.splice(e,1),this}get values(){return this._values===null&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let t=this._buffer;if(t===null){const e=this.byteLength;t=new Float32Array(new ArrayBuffer(e)),this._buffer=t}return t}get byteLength(){let t=0;for(let e=0,n=this.uniforms.length;e<n;e++){const i=this.uniforms[e],{boundary:s,itemSize:o}=i,a=t%cr,l=cr-a;a!==0&&l-s<0?t+=cr-a:a%s!==0&&(t+=a%s),i.offset=t/this.bytesPerElement,t+=o*this.bytesPerElement}return Math.ceil(t/cr)*cr}update(){let t=!1;for(const e of this.uniforms)this.updateByType(e)===!0&&(t=!0);return t}updateByType(t){if(t.isNumberUniform)return this.updateNumber(t);if(t.isVector2Uniform)return this.updateVector2(t);if(t.isVector3Uniform)return this.updateVector3(t);if(t.isVector4Uniform)return this.updateVector4(t);if(t.isColorUniform)return this.updateColor(t);if(t.isMatrix3Uniform)return this.updateMatrix3(t);if(t.isMatrix4Uniform)return this.updateMatrix4(t);console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",t)}updateNumber(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s]!==i){const o=this.buffer;o[s]=n[s]=i,e=!0}return e}updateVector2(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s+0]!==i.x||n[s+1]!==i.y){const o=this.buffer;o[s+0]=n[s+0]=i.x,o[s+1]=n[s+1]=i.y,e=!0}return e}updateVector3(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s+0]!==i.x||n[s+1]!==i.y||n[s+2]!==i.z){const o=this.buffer;o[s+0]=n[s+0]=i.x,o[s+1]=n[s+1]=i.y,o[s+2]=n[s+2]=i.z,e=!0}return e}updateVector4(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s+0]!==i.x||n[s+1]!==i.y||n[s+2]!==i.z||n[s+4]!==i.w){const o=this.buffer;o[s+0]=n[s+0]=i.x,o[s+1]=n[s+1]=i.y,o[s+2]=n[s+2]=i.z,o[s+3]=n[s+3]=i.w,e=!0}return e}updateColor(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s+0]!==i.r||n[s+1]!==i.g||n[s+2]!==i.b){const o=this.buffer;o[s+0]=n[s+0]=i.r,o[s+1]=n[s+1]=i.g,o[s+2]=n[s+2]=i.b,e=!0}return e}updateMatrix3(t){let e=!1;const n=this.values,i=t.getValue().elements,s=t.offset;if(n[s+0]!==i[0]||n[s+1]!==i[1]||n[s+2]!==i[2]||n[s+4]!==i[3]||n[s+5]!==i[4]||n[s+6]!==i[5]||n[s+8]!==i[6]||n[s+9]!==i[7]||n[s+10]!==i[8]){const o=this.buffer;o[s+0]=n[s+0]=i[0],o[s+1]=n[s+1]=i[1],o[s+2]=n[s+2]=i[2],o[s+4]=n[s+4]=i[3],o[s+5]=n[s+5]=i[4],o[s+6]=n[s+6]=i[5],o[s+8]=n[s+8]=i[6],o[s+9]=n[s+9]=i[7],o[s+10]=n[s+10]=i[8],e=!0}return e}updateMatrix4(t){let e=!1;const n=this.values,i=t.getValue().elements,s=t.offset;return Rz(n,i,s)===!1&&(this.buffer.set(i,s),Nz(n,i,s),e=!0),e}}function Nz(r,t,e){for(let n=0,i=t.length;n<i;n++)r[e+n]=t[n]}function Rz(r,t,e){for(let n=0,i=t.length;n<i;n++)if(r[e+n]!==t[n])return!1;return!0}let Cz=0;class Tv extends wz{constructor(t,e){super(t),this.id=Cz++,this.groupNode=e,this.isNodeUniformsGroup=!0}getNodes(){const t=[];for(const e of this.uniforms){const n=e.nodeUniform.node;if(!n)throw new Error("NodeUniformsGroup: Uniform has no node.");t.push(n)}return t}}let Pz=0;class Fz extends mx{constructor(t,e){super(t),this.id=Pz++,this.texture=e,this.version=e?e.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(t){const{texture:e}=this;return t!==this.generation?(this.generation=t,!0):e.isVideoTexture}update(){const{texture:t,version:e}=this;return e!==t.version?(this.version=t.version,!0):!1}}class _d extends Fz{constructor(t,e,n,i=null){super(t,e?e.value:null),this.textureNode=e,this.groupNode=n,this.access=i}needsBindingsUpdate(t){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(t)}update(){const{textureNode:t}=this;return this.texture!==t.value?(this.texture=t.value,!0):super.update()}}class Mv extends _d{constructor(t,e,n,i){super(t,e,n,i),this.isSampledCubeTexture=!0}}class vv extends _d{constructor(t,e,n,i){super(t,e,n,i),this.isSampledTexture3D=!0}}const Iz={atan2:"atan",textureDimensions:"textureSize",equals:"equal"},Dz={low:"lowp",medium:"mediump",high:"highp"},Ny={swizzleAssign:!0,storageBuffer:!1},Ry=`
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
`;class Lz extends lv{constructor(t,e){super(t,e,new cz),this.uniformGroups={},this.transforms=[],this.extensions={},this.useComparisonMethod=!0}needsColorSpaceToLinearSRGB(t){return t.isVideoTexture===!0&&t.colorSpace!==co}getMethod(t){return Iz[t]||t}getOutputStructName(){return""}buildFunctionCode(t){const e=t.layout,n=this.flowShaderNode(t),i=[];for(const o of e.inputs)i.push(this.getType(o.type)+" "+o.name);return`${this.getType(e.type)} ${e.name}( ${i.join(", ")} ) {

	${n.vars}

${n.code}
	return ${n.result};

}`}setupPBO(t){const e=t.value;if(e.pbo===void 0){const n=e.array,i=e.count*e.itemSize,{itemSize:s}=e,o=e.array.constructor.name.toLowerCase().includes("int");let a=o?Pg:Cg;s===2?a=o?Fg:oc:s===3?a=o?eI:Rg:s===4&&(a=o?Ig:il);const l={Float32Array:fi,Uint8Array:ws,Uint16Array:ya,Uint32Array:gn,Int8Array:Zl,Int16Array:Ql,Int32Array:kn,Uint8ClampedArray:ws},c=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(i/s))));let h=Math.ceil(i/s/c);c*h*s<i&&h++;const u=c*h*s,d=new n.constructor(u);d.set(n,0),e.array=d;const f=new hD(e.array,c,h,a,l[e.array.constructor.name]||fi);f.needsUpdate=!0,f.isPBOTexture=!0;const p=new Oc(f,null,null);p.setPrecision("high"),e.pboNode=p,e.pbo=p.value,this.getUniformFromNode(e.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(t,e=this.shaderStage){return t.isNodeUniform&&t.node.isTextureNode!==!0&&t.node.isBufferNode!==!0?e.charAt(0)+"_"+t.name:super.getPropertyName(t,e)}generatePBO(t){const{node:e,indexNode:n}=t,i=e.value;if(this.renderer.backend.has(i)){const h=this.renderer.backend.get(i);h.pbo=i.pbo}const s=this.getUniformFromNode(i.pboNode,"texture",this.shaderStage,this.context.label),o=this.getPropertyName(s);this.increaseUsage(n);const a=n.build(this,"uint"),l=this.getDataFromNode(t);let c=l.propertyName;if(c===void 0){const h=this.getVarFromNode(t);c=this.getPropertyName(h);const u=this.getDataFromNode(e);let d=u.propertySizeName;d===void 0&&(d=c+"Size",this.getVarFromNode(e,d,"uint"),this.addLineFlowCode(`${d} = uint( textureSize( ${o}, 0 ).x )`,t),u.propertySizeName=d);const{itemSize:f}=i,p="."+ol.join("").slice(0,f),x=`ivec2(${a} % ${d}, ${a} / ${d})`,m=this.generateTextureLoad(null,o,x,null,"0");let g="vec4";i.pbo.type===gn?g="uvec4":i.pbo.type===kn&&(g="ivec4"),this.addLineFlowCode(`${c} = ${g}(${m})${p}`,t),l.propertyName=c}return c}generateTextureLoad(t,e,n,i,s="0"){return i?`texelFetch( ${e}, ivec3( ${n}, ${i} ), ${s} )`:`texelFetch( ${e}, ${n}, ${s} )`}generateTexture(t,e,n,i){return t.isDepthTexture?`texture( ${e}, ${n} ).x`:(i&&(n=`vec3( ${n}, ${i} )`),`texture( ${e}, ${n} )`)}generateTextureLevel(t,e,n,i){return`textureLod( ${e}, ${n}, ${i} )`}generateTextureBias(t,e,n,i){return`texture( ${e}, ${n}, ${i} )`}generateTextureGrad(t,e,n,i){return`textureGrad( ${e}, ${n}, ${i[0]}, ${i[1]} )`}generateTextureCompare(t,e,n,i,s,o=this.shaderStage){if(o==="fragment")return`texture( ${e}, vec3( ${n}, ${i} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}getVars(t){const e=[],n=this.vars[t];if(n!==void 0)for(const i of n)e.push(`${this.getVar(i.type,i.name)};`);return e.join(`
	`)}getUniforms(t){const e=this.uniforms[t],n=[],i={};for(const o of e){let a=null,l=!1;if(o.type==="texture"){const h=o.node.value;let u="";h.isDataTexture===!0&&(h.type===gn?u="u":h.type===kn&&(u="i")),h.compareFunction?a=`sampler2DShadow ${o.name};`:h.isDataArrayTexture===!0||h.isCompressedArrayTexture===!0?a=`${u}sampler2DArray ${o.name};`:a=`${u}sampler2D ${o.name};`}else if(o.type==="cubeTexture")a=`samplerCube ${o.name};`;else if(o.type==="texture3D")a=`sampler3D ${o.name};`;else if(o.type==="buffer"){const h=o.node,u=this.getType(h.bufferType),d=h.bufferCount,f=d>0?d:"";a=`${h.name} {
	${u} ${o.name}[${f}];
};
`}else a=`${this.getVectorType(o.type)} ${this.getPropertyName(o,t)};`,l=!0;const c=o.node.precision;if(c!==null&&(a=Dz[c]+" "+a),l){a="	"+a;const h=o.groupNode.name;(i[h]||(i[h]=[])).push(a)}else a="uniform "+a,n.push(a)}let s="";for(const o in i){const a=i[o];s+=this._getGLSLUniformStruct(t+"_"+o,a.join(`
`))+`
`}return s+=n.join(`
`),s}getTypeFromAttribute(t){let e=super.getTypeFromAttribute(t);if(/^[iu]/.test(e)&&t.gpuType!==kn){let n=t;t.isInterleavedBufferAttribute&&(n=t.data);const i=n.array;i instanceof Uint32Array||i instanceof Int32Array||(e=e.slice(1))}return e}getAttributes(t){let e="";if(t==="vertex"||t==="compute"){const n=this.getAttributesArray();let i=0;for(const s of n)e+=`layout( location = ${i++} ) in ${s.type} ${s.name};
`}return e}getStructMembers(t){const e=[],n=t.getMemberTypes();for(let i=0;i<n.length;i++){const s=n[i];e.push(`layout( location = ${i} ) out ${s} m${i};`)}return e.join(`
`)}getStructs(t){const e=[],n=this.structs[t];if(n.length===0)return`layout( location = 0 ) out vec4 fragColor;
`;for(let i=0,s=n.length;i<s;i++){const o=n[i];let a=`
`;a+=this.getStructMembers(o),a+=`
`,e.push(a)}return e.join(`

`)}getVaryings(t){let e="";const n=this.varyings;if(t==="vertex"||t==="compute")for(const i of n){t==="compute"&&(i.needsInterpolation=!0);const s=i.type,o=s.includes("int")||s.includes("uv")||s.includes("iv")?"flat ":"";e+=`${o}${i.needsInterpolation?"out":"/*out*/"} ${s} ${i.name};
`}else if(t==="fragment"){for(const i of n)if(i.needsInterpolation){const s=i.type,o=s.includes("int")||s.includes("uv")||s.includes("iv")?"flat ":"";e+=`${o}in ${s} ${i.name};
`}}return e}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce((n,i)=>n*i,1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(t,e,n=this.shaderStage){const i=this.extensions[n]||(this.extensions[n]=new Map);i.has(t)===!1&&i.set(t,{name:t,behavior:e})}getExtensions(t){const e=[];if(t==="vertex"){const i=this.renderer.backend.extensions;this.object.isBatchedMesh&&i.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",t)}const n=this.extensions[t];if(n!==void 0)for(const{name:i,behavior:s}of n.values())e.push(`#extension ${i} : ${s}`);return e.join(`
`)}isAvailable(t){let e=Ny[t];if(e===void 0){if(t==="float32Filterable"){const n=this.renderer.backend.extensions;n.has("OES_texture_float_linear")?(n.get("OES_texture_float_linear"),e=!0):e=!1}Ny[t]=e}return e}isFlipY(){return!0}registerTransform(t,e){this.transforms.push({varyingName:t,attributeNode:e})}getTransforms(){const t=this.transforms;let e="";for(let n=0;n<t.length;n++){const i=t[n],s=this.getPropertyName(i.attributeNode);e+=`${i.varyingName} = ${s};
	`}return e}_getGLSLUniformStruct(t,e){return`
layout( std140 ) uniform ${t} {
${e}
};`}_getGLSLVertexCode(t){return`#version 300 es

${this.getSignature()}

// extensions 
${t.extensions}

// precision
${Ry}

// uniforms
${t.uniforms}

// varyings
${t.varyings}

// attributes
${t.attributes}

// codes
${t.codes}

void main() {

	// vars
	${t.vars}

	// transforms
	${t.transforms}

	// flow
	${t.flow}

	gl_PointSize = 1.0;

}
`}_getGLSLFragmentCode(t){return`#version 300 es

${this.getSignature()}

// precision
${Ry}

// uniforms
${t.uniforms}

// varyings
${t.varyings}

// codes
${t.codes}

${t.structs}

void main() {

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}buildCode(){const t=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const e in t){let n=`// code

`;n+=this.flowCode[e];const i=this.flowNodes[e],s=i[i.length-1];for(const a of i){const l=this.getFlowData(a),c=a.name;c&&(n.length>0&&(n+=`
`),n+=`	// flow -> ${c}
	`),n+=`${l.code}
	`,a===s&&e!=="compute"&&(n+=`// result
	`,e==="vertex"?(n+="gl_Position = ",n+=`${l.result};`):e==="fragment"&&(a.outputNode.isOutputStructNode||(n+="fragColor = ",n+=`${l.result};`)))}const o=t[e];o.extensions=this.getExtensions(e),o.uniforms=this.getUniforms(e),o.attributes=this.getAttributes(e),o.varyings=this.getVaryings(e),o.vars=this.getVars(e),o.structs=this.getStructs(e),o.codes=this.getCodes(e),o.transforms=this.getTransforms(e),o.flow=n}this.material!==null?(this.vertexShader=this._getGLSLVertexCode(t.vertex),this.fragmentShader=this._getGLSLFragmentCode(t.fragment)):this.computeShader=this._getGLSLVertexCode(t.compute)}getUniformFromNode(t,e,n,i=null){const s=super.getUniformFromNode(t,e,n,i),o=this.getDataFromNode(t,n,this.globalCache);let a=o.uniformGPU;if(a===void 0){const l=t.groupNode,c=l.name,h=this.getBindGroupArray(c,n);if(e==="texture")a=new _d(s.name,s.node,l),h.push(a);else if(e==="cubeTexture")a=new Mv(s.name,s.node,l),h.push(a);else if(e==="texture3D")a=new vv(s.name,s.node,l),h.push(a);else if(e==="buffer"){t.name=`NodeBuffer_${t.id}`,s.name=`buffer${t.id}`;const u=new Sv(t,l);u.name=t.name,h.push(u),a=u}else{const u=this.uniformGroups[n]||(this.uniformGroups[n]={});let d=u[c];d===void 0&&(d=new Tv(n+"_"+c,l),u[c]=d,h.push(d)),a=this.getNodeUniform(s,e),d.addUniform(a)}o.uniformGPU=a}return s}}let lp=null,cp=null,oa=null;class bv{constructor(t={}){this.parameters=Object.assign({},t),this.data=new WeakMap,this.renderer=null,this.domElement=null}async init(t){this.renderer=t}begin(){}finish(){}draw(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}createRenderPipeline(){}createComputePipeline(){}destroyPipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}createDefaultTexture(){}createTexture(){}copyTextureToBuffer(){}createAttribute(){}createIndexAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}resolveTimestampAsync(){}hasFeatureAsync(){}hasFeature(){}getInstanceCount(t){const{object:e,geometry:n}=t;return n.isInstancedBufferGeometry?n.instanceCount:e.count>1?e.count:1}getDrawingBufferSize(){return lp=lp||new Re,this.renderer.getDrawingBufferSize(lp)}getScissor(){return cp=cp||new ve,this.renderer.getScissor(cp)}setScissorTest(){}getClearColor(){const t=this.renderer;return oa=oa||new px,t.getClearColor(oa),oa.getRGB(oa,this.renderer.currentColorSpace),oa}getDomElement(){let t=this.domElement;return t===null&&(t=this.parameters.canvas!==void 0?this.parameters.canvas:BI(),"setAttribute"in t&&t.setAttribute("data-engine",`three.js r${CT} webgpu`),this.domElement=t),t}set(t,e){this.data.set(t,e)}get(t){let e=this.data.get(t);return e===void 0&&(e={},this.data.set(t,e)),e}has(t){return this.data.has(t)}delete(t){this.data.delete(t)}}let Uz=0;class Bz{constructor(t,e){this.buffers=[t.bufferGPU,e],this.type=t.type,this.bufferType=t.bufferType,this.pbo=t.pbo,this.byteLength=t.byteLength,this.bytesPerElement=t.BYTES_PER_ELEMENT,this.version=t.version,this.isInteger=t.isInteger,this.activeBufferIndex=0,this.baseId=t.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[this.activeBufferIndex^1]}switchBuffers(){this.activeBufferIndex^=1}}class Oz{constructor(t){this.backend=t}createAttribute(t,e){const n=this.backend,{gl:i}=n,s=t.array,o=t.usage||i.STATIC_DRAW,a=t.isInterleavedBufferAttribute?t.data:t,l=n.get(a);let c=l.bufferGPU;c===void 0&&(c=this._createBuffer(i,e,s,o),l.bufferGPU=c,l.bufferType=e,l.version=a.version);let h;if(s instanceof Float32Array)h=i.FLOAT;else if(s instanceof Uint16Array)t.isFloat16BufferAttribute?h=i.HALF_FLOAT:h=i.UNSIGNED_SHORT;else if(s instanceof Int16Array)h=i.SHORT;else if(s instanceof Uint32Array)h=i.UNSIGNED_INT;else if(s instanceof Int32Array)h=i.INT;else if(s instanceof Int8Array)h=i.BYTE;else if(s instanceof Uint8Array)h=i.UNSIGNED_BYTE;else if(s instanceof Uint8ClampedArray)h=i.UNSIGNED_BYTE;else throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+s);let u={bufferGPU:c,bufferType:e,type:h,byteLength:s.byteLength,bytesPerElement:s.BYTES_PER_ELEMENT,version:t.version,pbo:t.pbo,isInteger:h===i.INT||h===i.UNSIGNED_INT||t.gpuType===kn,id:Uz++};if(t.isStorageBufferAttribute||t.isStorageInstancedBufferAttribute){const d=this._createBuffer(i,e,s,o);u=new Bz(u,d)}n.set(t,u)}updateAttribute(t){const e=this.backend,{gl:n}=e,i=t.array,s=t.isInterleavedBufferAttribute?t.data:t,o=e.get(s),a=o.bufferType,l=t.isInterleavedBufferAttribute?t.data.updateRanges:t.updateRanges;if(n.bindBuffer(a,o.bufferGPU),l.length===0)n.bufferSubData(a,0,i);else{for(let c=0,h=l.length;c<h;c++){const u=l[c];n.bufferSubData(a,u.start*i.BYTES_PER_ELEMENT,i,u.start,u.count)}s.clearUpdateRanges()}n.bindBuffer(a,null),o.version=s.version}destroyAttribute(t){const e=this.backend,{gl:n}=e;t.isInterleavedBufferAttribute&&e.delete(t.data);const i=e.get(t);n.deleteBuffer(i.bufferGPU),e.delete(t)}async getArrayBufferAsync(t){const e=this.backend,{gl:n}=e,i=t.isInterleavedBufferAttribute?t.data:t,{bufferGPU:s}=e.get(i),o=t.array,a=o.byteLength;n.bindBuffer(n.COPY_READ_BUFFER,s);const l=n.createBuffer();n.bindBuffer(n.COPY_WRITE_BUFFER,l),n.bufferData(n.COPY_WRITE_BUFFER,a,n.STREAM_READ),n.copyBufferSubData(n.COPY_READ_BUFFER,n.COPY_WRITE_BUFFER,0,0,a),await e.utils._clientWaitAsync();const c=new t.array.constructor(o.length);return n.bindBuffer(n.COPY_WRITE_BUFFER,l),n.getBufferSubData(n.COPY_WRITE_BUFFER,0,c),n.deleteBuffer(l),n.bindBuffer(n.COPY_READ_BUFFER,null),n.bindBuffer(n.COPY_WRITE_BUFFER,null),c.buffer}_createBuffer(t,e,n,i){const s=t.createBuffer();return t.bindBuffer(e,s),t.bufferData(e,n,i),t.bindBuffer(e,null),s}}let Cy=!1,hp,kl;class zz{constructor(t){this.backend=t,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},Cy===!1&&(this._init(this.gl),Cy=!0)}_init(t){hp={[lr]:t.FUNC_ADD,[FT]:t.FUNC_SUBTRACT,[IT]:t.FUNC_REVERSE_SUBTRACT},kl={[DT]:t.ZERO,[LT]:t.ONE,[UT]:t.SRC_COLOR,[Iu]:t.SRC_ALPHA,[VT]:t.SRC_ALPHA_SATURATE,[GT]:t.DST_COLOR,[OT]:t.DST_ALPHA,[BT]:t.ONE_MINUS_SRC_COLOR,[Du]:t.ONE_MINUS_SRC_ALPHA,[kT]:t.ONE_MINUS_DST_COLOR,[zT]:t.ONE_MINUS_DST_ALPHA}}enable(t){const{enabled:e}=this;e[t]!==!0&&(this.gl.enable(t),e[t]=!0)}disable(t){const{enabled:e}=this;e[t]!==!1&&(this.gl.disable(t),e[t]=!1)}setFlipSided(t){if(this.currentFlipSided!==t){const{gl:e}=this;t?e.frontFace(e.CW):e.frontFace(e.CCW),this.currentFlipSided=t}}setCullFace(t){const{gl:e}=this;t!==BF?(this.enable(e.CULL_FACE),t!==this.currentCullFace&&(t===OF?e.cullFace(e.BACK):t===zF?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):this.disable(e.CULL_FACE),this.currentCullFace=t}setLineWidth(t){const{currentLineWidth:e,gl:n}=this;t!==e&&(n.lineWidth(t),this.currentLineWidth=t)}setBlending(t,e,n,i,s,o,a,l){const{gl:c}=this;if(t===Wa){this.currentBlendingEnabled===!0&&(this.disable(c.BLEND),this.currentBlendingEnabled=!1);return}if(this.currentBlendingEnabled===!1&&(this.enable(c.BLEND),this.currentBlendingEnabled=!0),t!==PT){if(t!==this.currentBlending||l!==this.currentPremultipledAlpha){if((this.currentBlendEquation!==lr||this.currentBlendEquationAlpha!==lr)&&(c.blendEquation(c.FUNC_ADD),this.currentBlendEquation=lr,this.currentBlendEquationAlpha=lr),l)switch(t){case mr:c.blendFuncSeparate(c.ONE,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case Cu:c.blendFunc(c.ONE,c.ONE);break;case Pu:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case Fu:c.blendFuncSeparate(c.ZERO,c.SRC_COLOR,c.ZERO,c.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}else switch(t){case mr:c.blendFuncSeparate(c.SRC_ALPHA,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case Cu:c.blendFunc(c.SRC_ALPHA,c.ONE);break;case Pu:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case Fu:c.blendFunc(c.ZERO,c.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=t,this.currentPremultipledAlpha=l}return}s=s||e,o=o||n,a=a||i,(e!==this.currentBlendEquation||s!==this.currentBlendEquationAlpha)&&(c.blendEquationSeparate(hp[e],hp[s]),this.currentBlendEquation=e,this.currentBlendEquationAlpha=s),(n!==this.currentBlendSrc||i!==this.currentBlendDst||o!==this.currentBlendSrcAlpha||a!==this.currentBlendDstAlpha)&&(c.blendFuncSeparate(kl[n],kl[i],kl[o],kl[a]),this.currentBlendSrc=n,this.currentBlendDst=i,this.currentBlendSrcAlpha=o,this.currentBlendDstAlpha=a),this.currentBlending=t,this.currentPremultipledAlpha=!1}setColorMask(t){this.currentColorMask!==t&&(this.gl.colorMask(t,t,t,t),this.currentColorMask=t)}setDepthTest(t){const{gl:e}=this;t?this.enable(e.DEPTH_TEST):this.disable(e.DEPTH_TEST)}setDepthMask(t){this.currentDepthMask!==t&&(this.gl.depthMask(t),this.currentDepthMask=t)}setDepthFunc(t){if(this.currentDepthFunc!==t){const{gl:e}=this;switch(t){case HT:e.depthFunc(e.NEVER);break;case $T:e.depthFunc(e.ALWAYS);break;case WT:e.depthFunc(e.LESS);break;case Lu:e.depthFunc(e.LEQUAL);break;case qT:e.depthFunc(e.EQUAL);break;case XT:e.depthFunc(e.GEQUAL);break;case YT:e.depthFunc(e.GREATER);break;case jT:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}this.currentDepthFunc=t}}setStencilTest(t){const{gl:e}=this;t?this.enable(e.STENCIL_TEST):this.disable(e.STENCIL_TEST)}setStencilMask(t){this.currentStencilMask!==t&&(this.gl.stencilMask(t),this.currentStencilMask=t)}setStencilFunc(t,e,n){(this.currentStencilFunc!==t||this.currentStencilRef!==e||this.currentStencilFuncMask!==n)&&(this.gl.stencilFunc(t,e,n),this.currentStencilFunc=t,this.currentStencilRef=e,this.currentStencilFuncMask=n)}setStencilOp(t,e,n){(this.currentStencilFail!==t||this.currentStencilZFail!==e||this.currentStencilZPass!==n)&&(this.gl.stencilOp(t,e,n),this.currentStencilFail=t,this.currentStencilZFail=e,this.currentStencilZPass=n)}setMaterial(t,e){const{gl:n}=this;t.side===Ru?this.disable(n.CULL_FACE):this.enable(n.CULL_FACE);let i=t.side===zs;e&&(i=!i),this.setFlipSided(i),t.blending===mr&&t.transparent===!1?this.setBlending(Wa):this.setBlending(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),this.setDepthFunc(t.depthFunc),this.setDepthTest(t.depthTest),this.setDepthMask(t.depthWrite),this.setColorMask(t.colorWrite);const s=t.stencilWrite;this.setStencilTest(s),s&&(this.setStencilMask(t.stencilWriteMask),this.setStencilFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),this.setStencilOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),this.setPolygonOffset(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),t.alphaToCoverage===!0&&this.backend.renderer.samples>1?this.enable(n.SAMPLE_ALPHA_TO_COVERAGE):this.disable(n.SAMPLE_ALPHA_TO_COVERAGE)}setPolygonOffset(t,e,n){const{gl:i}=this;t?(this.enable(i.POLYGON_OFFSET_FILL),(this.currentPolygonOffsetFactor!==e||this.currentPolygonOffsetUnits!==n)&&(i.polygonOffset(e,n),this.currentPolygonOffsetFactor=e,this.currentPolygonOffsetUnits=n)):this.disable(i.POLYGON_OFFSET_FILL)}useProgram(t){return this.currentProgram!==t?(this.gl.useProgram(t),this.currentProgram=t,!0):!1}bindFramebuffer(t,e){const{gl:n,currentBoundFramebuffers:i}=this;return i[t]!==e?(n.bindFramebuffer(t,e),i[t]=e,t===n.DRAW_FRAMEBUFFER&&(i[n.FRAMEBUFFER]=e),t===n.FRAMEBUFFER&&(i[n.DRAW_FRAMEBUFFER]=e),!0):!1}drawBuffers(t,e){const{gl:n}=this;let i=[],s=!1;if(t.textures!==null){i=this.currentDrawbuffers.get(e),i===void 0&&(i=[],this.currentDrawbuffers.set(e,i));const o=t.textures;if(i.length!==o.length||i[0]!==n.COLOR_ATTACHMENT0){for(let a=0,l=o.length;a<l;a++)i[a]=n.COLOR_ATTACHMENT0+a;i.length=o.length,s=!0}}else i[0]!==n.BACK&&(i[0]=n.BACK,s=!0);s&&n.drawBuffers(i)}activeTexture(t){const{gl:e,currentTextureSlot:n,maxTextures:i}=this;t===void 0&&(t=e.TEXTURE0+i-1),n!==t&&(e.activeTexture(t),this.currentTextureSlot=t)}bindTexture(t,e,n){const{gl:i,currentTextureSlot:s,currentBoundTextures:o,maxTextures:a}=this;n===void 0&&(s===null?n=i.TEXTURE0+a-1:n=s);let l=o[n];l===void 0&&(l={type:void 0,texture:void 0},o[n]=l),(l.type!==t||l.texture!==e)&&(s!==n&&(i.activeTexture(n),this.currentTextureSlot=n),i.bindTexture(t,e),l.type=t,l.texture=e)}bindBufferBase(t,e,n){const{gl:i}=this,s=`${t}-${e}`;return this.currentBoundBufferBases[s]!==n?(i.bindBufferBase(t,e,n),this.currentBoundBufferBases[s]=n,!0):!1}unbindTexture(){const{gl:t,currentTextureSlot:e,currentBoundTextures:n}=this,i=n[e];i!==void 0&&i.type!==void 0&&(t.bindTexture(i.type,null),i.type=void 0,i.texture=void 0)}}class Gz{constructor(t){this.backend=t,this.gl=this.backend.gl,this.extensions=t.extensions}convert(t,e=co){const{gl:n,extensions:i}=this;let s;if(t===ws)return n.UNSIGNED_BYTE;if(t===KF)return n.UNSIGNED_SHORT_4_4_4_4;if(t===ZF)return n.UNSIGNED_SHORT_5_5_5_1;if(t===ZT)return n.UNSIGNED_INT_5_9_9_9_REV;if(t===Zl)return n.BYTE;if(t===Ql)return n.SHORT;if(t===ya)return n.UNSIGNED_SHORT;if(t===kn)return n.INT;if(t===gn)return n.UNSIGNED_INT;if(t===fi)return n.FLOAT;if(t===Rs)return n.HALF_FLOAT;if(t===QF)return n.ALPHA;if(t===Rg)return n.RGB;if(t===il)return n.RGBA;if(t===JF)return n.LUMINANCE;if(t===tI)return n.LUMINANCE_ALPHA;if(t===Qr)return n.DEPTH_COMPONENT;if(t===Xa)return n.DEPTH_STENCIL;if(t===Cg)return n.RED;if(t===Pg)return n.RED_INTEGER;if(t===oc)return n.RG;if(t===Fg)return n.RG_INTEGER;if(t===Ig)return n.RGBA_INTEGER;if(t===ff||t===uu||t===du||t===fu)if(e===Bt)if(s=i.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(t===ff)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(t===uu)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(t===du)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(t===fu)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=i.get("WEBGL_compressed_texture_s3tc"),s!==null){if(t===ff)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===uu)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===du)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===fu)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(t===l_||t===c_||t===h_||t===u_)if(s=i.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(t===l_)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===c_)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===h_)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===u_)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(t===d_||t===xm||t===_m)if(s=i.get("WEBGL_compressed_texture_etc"),s!==null){if(t===d_||t===xm)return e===Bt?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(t===_m)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(t===ym||t===Sm||t===Tm||t===Mm||t===vm||t===bm||t===Em||t===Am||t===wm||t===Nm||t===Rm||t===Cm||t===Pm||t===Fm)if(s=i.get("WEBGL_compressed_texture_astc"),s!==null){if(t===ym)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(t===Sm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(t===Tm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(t===Mm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(t===vm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(t===bm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(t===Em)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(t===Am)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(t===wm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(t===Nm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(t===Rm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(t===Cm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(t===Pm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(t===Fm)return e===Bt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(t===pf)if(s=i.get("EXT_texture_compression_bptc"),s!==null){if(t===pf)return e===Bt?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(t===nI||t===f_||t===p_||t===m_)if(s=i.get("EXT_texture_compression_rgtc"),s!==null){if(t===pf)return s.COMPRESSED_RED_RGTC1_EXT;if(t===f_)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(t===p_)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(t===m_)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return t===Pc?n.UNSIGNED_INT_24_8:n[t]!==void 0?n[t]:null}_clientWaitAsync(){const{gl:t}=this,e=t.fenceSync(t.SYNC_GPU_COMMANDS_COMPLETE,0);return t.flush(),new Promise((n,i)=>{function s(){const o=t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0);if(o===t.WAIT_FAILED){t.deleteSync(e),i();return}if(o===t.TIMEOUT_EXPIRED){requestAnimationFrame(s);return}t.deleteSync(e),n()}s()})}}let Py=!1,Kh,up,Fy;class kz{constructor(t){this.backend=t,this.gl=t.gl,this.extensions=t.extensions,this.defaultTextures={},Py===!1&&(this._init(this.gl),Py=!0)}_init(t){Kh={[Uu]:t.REPEAT,[_a]:t.CLAMP_TO_EDGE,[Bu]:t.MIRRORED_REPEAT},up={[xn]:t.NEAREST,[mm]:t.NEAREST_MIPMAP_NEAREST,[Pa]:t.NEAREST_MIPMAP_LINEAR,[Qn]:t.LINEAR,[gm]:t.LINEAR_MIPMAP_NEAREST,[Ns]:t.LINEAR_MIPMAP_LINEAR},Fy={[JT]:t.NEVER,[rM]:t.ALWAYS,[Dg]:t.LESS,[eM]:t.LEQUAL,[tM]:t.EQUAL,[sM]:t.GEQUAL,[nM]:t.GREATER,[iM]:t.NOTEQUAL}}filterFallback(t){const{gl:e}=this;return t===xn||t===mm||t===Pa?e.NEAREST:e.LINEAR}getGLTextureType(t){const{gl:e}=this;let n;return t.isCubeTexture===!0?n=e.TEXTURE_CUBE_MAP:t.isDataArrayTexture===!0||t.isCompressedArrayTexture===!0?n=e.TEXTURE_2D_ARRAY:t.isData3DTexture===!0?n=e.TEXTURE_3D:n=e.TEXTURE_2D,n}getInternalFormat(t,e,n,i,s=!1){const{gl:o,extensions:a}=this;if(t!==null){if(o[t]!==void 0)return o[t];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+t+"'")}let l=e;return e===o.RED&&(n===o.FLOAT&&(l=o.R32F),n===o.HALF_FLOAT&&(l=o.R16F),n===o.UNSIGNED_BYTE&&(l=o.R8),n===o.UNSIGNED_SHORT&&(l=o.R16),n===o.UNSIGNED_INT&&(l=o.R32UI),n===o.BYTE&&(l=o.R8I),n===o.SHORT&&(l=o.R16I),n===o.INT&&(l=o.R32I)),e===o.RED_INTEGER&&(n===o.UNSIGNED_BYTE&&(l=o.R8UI),n===o.UNSIGNED_SHORT&&(l=o.R16UI),n===o.UNSIGNED_INT&&(l=o.R32UI),n===o.BYTE&&(l=o.R8I),n===o.SHORT&&(l=o.R16I),n===o.INT&&(l=o.R32I)),e===o.RG&&(n===o.FLOAT&&(l=o.RG32F),n===o.HALF_FLOAT&&(l=o.RG16F),n===o.UNSIGNED_BYTE&&(l=o.RG8),n===o.UNSIGNED_SHORT&&(l=o.RG16),n===o.UNSIGNED_INT&&(l=o.RG32UI),n===o.BYTE&&(l=o.RG8I),n===o.SHORT&&(l=o.RG16I),n===o.INT&&(l=o.RG32I)),e===o.RG_INTEGER&&(n===o.UNSIGNED_BYTE&&(l=o.RG8UI),n===o.UNSIGNED_SHORT&&(l=o.RG16UI),n===o.UNSIGNED_INT&&(l=o.RG32UI),n===o.BYTE&&(l=o.RG8I),n===o.SHORT&&(l=o.RG16I),n===o.INT&&(l=o.RG32I)),e===o.RGB&&(n===o.FLOAT&&(l=o.RGB32F),n===o.HALF_FLOAT&&(l=o.RGB16F),n===o.UNSIGNED_BYTE&&(l=o.RGB8),n===o.UNSIGNED_SHORT&&(l=o.RGB16),n===o.UNSIGNED_INT&&(l=o.RGB32UI),n===o.BYTE&&(l=o.RGB8I),n===o.SHORT&&(l=o.RGB16I),n===o.INT&&(l=o.RGB32I),n===o.UNSIGNED_BYTE&&(l=i===Bt&&s===!1?o.SRGB8:o.RGB8),n===o.UNSIGNED_SHORT_5_6_5&&(l=o.RGB565),n===o.UNSIGNED_SHORT_5_5_5_1&&(l=o.RGB5_A1),n===o.UNSIGNED_SHORT_4_4_4_4&&(l=o.RGB4),n===o.UNSIGNED_INT_5_9_9_9_REV&&(l=o.RGB9_E5)),e===o.RGB_INTEGER&&(n===o.UNSIGNED_BYTE&&(l=o.RGB8UI),n===o.UNSIGNED_SHORT&&(l=o.RGB16UI),n===o.UNSIGNED_INT&&(l=o.RGB32UI),n===o.BYTE&&(l=o.RGB8I),n===o.SHORT&&(l=o.RGB16I),n===o.INT&&(l=o.RGB32I)),e===o.RGBA&&(n===o.FLOAT&&(l=o.RGBA32F),n===o.HALF_FLOAT&&(l=o.RGBA16F),n===o.UNSIGNED_BYTE&&(l=o.RGBA8),n===o.UNSIGNED_SHORT&&(l=o.RGBA16),n===o.UNSIGNED_INT&&(l=o.RGBA32UI),n===o.BYTE&&(l=o.RGBA8I),n===o.SHORT&&(l=o.RGBA16I),n===o.INT&&(l=o.RGBA32I),n===o.UNSIGNED_BYTE&&(l=i===Bt&&s===!1?o.SRGB8_ALPHA8:o.RGBA8),n===o.UNSIGNED_SHORT_4_4_4_4&&(l=o.RGBA4),n===o.UNSIGNED_SHORT_5_5_5_1&&(l=o.RGB5_A1)),e===o.RGBA_INTEGER&&(n===o.UNSIGNED_BYTE&&(l=o.RGBA8UI),n===o.UNSIGNED_SHORT&&(l=o.RGBA16UI),n===o.UNSIGNED_INT&&(l=o.RGBA32UI),n===o.BYTE&&(l=o.RGBA8I),n===o.SHORT&&(l=o.RGBA16I),n===o.INT&&(l=o.RGBA32I)),e===o.DEPTH_COMPONENT&&(n===o.UNSIGNED_INT&&(l=o.DEPTH24_STENCIL8),n===o.FLOAT&&(l=o.DEPTH_COMPONENT32F)),e===o.DEPTH_STENCIL&&n===o.UNSIGNED_INT_24_8&&(l=o.DEPTH24_STENCIL8),(l===o.R16F||l===o.R32F||l===o.RG16F||l===o.RG32F||l===o.RGBA16F||l===o.RGBA32F)&&a.get("EXT_color_buffer_float"),l}setTextureParameters(t,e){const{gl:n,extensions:i,backend:s}=this;n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,e.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,e.unpackAlignment),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,n.NONE),n.texParameteri(t,n.TEXTURE_WRAP_S,Kh[e.wrapS]),n.texParameteri(t,n.TEXTURE_WRAP_T,Kh[e.wrapT]),(t===n.TEXTURE_3D||t===n.TEXTURE_2D_ARRAY)&&n.texParameteri(t,n.TEXTURE_WRAP_R,Kh[e.wrapR]),n.texParameteri(t,n.TEXTURE_MAG_FILTER,up[e.magFilter]);const o=e.mipmaps!==void 0&&e.mipmaps.length>0,a=e.minFilter===Qn&&o?Ns:e.minFilter;if(n.texParameteri(t,n.TEXTURE_MIN_FILTER,up[a]),e.compareFunction&&(n.texParameteri(t,n.TEXTURE_COMPARE_MODE,n.COMPARE_REF_TO_TEXTURE),n.texParameteri(t,n.TEXTURE_COMPARE_FUNC,Fy[e.compareFunction])),i.has("EXT_texture_filter_anisotropic")===!0){if(e.magFilter===xn||e.minFilter!==Pa&&e.minFilter!==Ns||e.type===fi&&i.has("OES_texture_float_linear")===!1)return;if(e.anisotropy>1){const l=i.get("EXT_texture_filter_anisotropic");n.texParameterf(t,l.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(e.anisotropy,s.getMaxAnisotropy()))}}}createDefaultTexture(t){const{gl:e,backend:n,defaultTextures:i}=this,s=this.getGLTextureType(t);let o=i[s];o===void 0&&(o=e.createTexture(),n.state.bindTexture(s,o),e.texParameteri(s,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(s,e.TEXTURE_MAG_FILTER,e.NEAREST),i[s]=o),n.set(t,{textureGPU:o,glTextureType:s,isDefault:!0})}createTexture(t,e){const{gl:n,backend:i}=this,{levels:s,width:o,height:a,depth:l}=e,c=i.utils.convert(t.format,t.colorSpace),h=i.utils.convert(t.type),u=this.getInternalFormat(t.internalFormat,c,h,t.colorSpace,t.isVideoTexture),d=n.createTexture(),f=this.getGLTextureType(t);i.state.bindTexture(f,d),this.setTextureParameters(f,t),t.isDataArrayTexture||t.isCompressedArrayTexture?n.texStorage3D(n.TEXTURE_2D_ARRAY,s,u,o,a,l):t.isData3DTexture?n.texStorage3D(n.TEXTURE_3D,s,u,o,a,l):t.isVideoTexture||n.texStorage2D(f,s,u,o,a),i.set(t,{textureGPU:d,glTextureType:f,glFormat:c,glType:h,glInternalFormat:u})}copyBufferToTexture(t,e){const{gl:n,backend:i}=this,{textureGPU:s,glTextureType:o,glFormat:a,glType:l}=i.get(e),{width:c,height:h}=e.source.data;n.bindBuffer(n.PIXEL_UNPACK_BUFFER,t),i.state.bindTexture(o,s),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!1),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),n.texSubImage2D(o,0,0,0,c,h,a,l,0),n.bindBuffer(n.PIXEL_UNPACK_BUFFER,null),i.state.unbindTexture()}updateTexture(t,e){const{gl:n}=this,{width:i,height:s}=e,{textureGPU:o,glTextureType:a,glFormat:l,glType:c,glInternalFormat:h}=this.backend.get(t);if(t.isRenderTargetTexture||o===void 0)return;const u=d=>d.isDataTexture?d.image.data:d instanceof ImageBitmap||d instanceof OffscreenCanvas||d instanceof HTMLImageElement||d instanceof HTMLCanvasElement?d:d.data;if(this.backend.state.bindTexture(a,o),this.setTextureParameters(a,t),t.isCompressedTexture){const d=t.mipmaps,f=e.image;for(let p=0;p<d.length;p++){const x=d[p];t.isCompressedArrayTexture?t.format!==n.RGBA?l!==null?n.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY,p,0,0,0,x.width,x.height,f.depth,l,x.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texSubImage3D(n.TEXTURE_2D_ARRAY,p,0,0,0,x.width,x.height,f.depth,l,c,x.data):l!==null?n.compressedTexSubImage2D(n.TEXTURE_2D,p,0,0,x.width,x.height,l,x.data):console.warn("Unsupported compressed texture format")}}else if(t.isCubeTexture){const d=e.images;for(let f=0;f<6;f++){const p=u(d[f]);n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,0,0,i,s,l,c,p)}}else if(t.isDataArrayTexture){const d=e.image;n.texSubImage3D(n.TEXTURE_2D_ARRAY,0,0,0,0,d.width,d.height,d.depth,l,c,d.data)}else if(t.isData3DTexture){const d=e.image;n.texSubImage3D(n.TEXTURE_3D,0,0,0,0,d.width,d.height,d.depth,l,c,d.data)}else if(t.isVideoTexture)t.update(),n.texImage2D(a,0,h,l,c,e.image);else{const d=u(e.image);n.texSubImage2D(a,0,0,0,i,s,l,c,d)}}generateMipmaps(t){const{gl:e,backend:n}=this,{textureGPU:i,glTextureType:s}=n.get(t);n.state.bindTexture(s,i),e.generateMipmap(s)}deallocateRenderBuffers(t){const{gl:e,backend:n}=this;if(t){const i=n.get(t);if(i.renderBufferStorageSetup=void 0,i.framebuffers){for(const s in i.framebuffers)e.deleteFramebuffer(i.framebuffers[s]);delete i.framebuffers}if(i.depthRenderbuffer&&(e.deleteRenderbuffer(i.depthRenderbuffer),delete i.depthRenderbuffer),i.stencilRenderbuffer&&(e.deleteRenderbuffer(i.stencilRenderbuffer),delete i.stencilRenderbuffer),i.msaaFrameBuffer&&(e.deleteFramebuffer(i.msaaFrameBuffer),delete i.msaaFrameBuffer),i.msaaRenderbuffers){for(let s=0;s<i.msaaRenderbuffers.length;s++)e.deleteRenderbuffer(i.msaaRenderbuffers[s]);delete i.msaaRenderbuffers}}}destroyTexture(t){const{gl:e,backend:n}=this,{textureGPU:i,renderTarget:s}=n.get(t);this.deallocateRenderBuffers(s),e.deleteTexture(i),n.delete(t)}copyTextureToTexture(t,e,n=null,i=null,s=0){const{gl:o,backend:a}=this,{state:l}=this.backend,{textureGPU:c,glTextureType:h,glType:u,glFormat:d}=a.get(e);let f,p,x,m,g,y;n!==null?(f=n.max.x-n.min.x,p=n.max.y-n.min.y,x=n.min.x,m=n.min.y):(f=t.image.width,p=t.image.height,x=0,m=0),i!==null?(g=i.x,y=i.y):(g=0,y=0),l.bindTexture(h,c),o.pixelStorei(o.UNPACK_ALIGNMENT,e.unpackAlignment),o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,e.flipY),o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),o.pixelStorei(o.UNPACK_ALIGNMENT,e.unpackAlignment);const _=o.getParameter(o.UNPACK_ROW_LENGTH),T=o.getParameter(o.UNPACK_IMAGE_HEIGHT),w=o.getParameter(o.UNPACK_SKIP_PIXELS),A=o.getParameter(o.UNPACK_SKIP_ROWS),v=o.getParameter(o.UNPACK_SKIP_IMAGES),R=t.isCompressedTexture?t.mipmaps[s]:t.image;o.pixelStorei(o.UNPACK_ROW_LENGTH,R.width),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,R.height),o.pixelStorei(o.UNPACK_SKIP_PIXELS,x),o.pixelStorei(o.UNPACK_SKIP_ROWS,m),t.isDataTexture?o.texSubImage2D(o.TEXTURE_2D,s,g,y,f,p,d,u,R.data):t.isCompressedTexture?o.compressedTexSubImage2D(o.TEXTURE_2D,s,g,y,R.width,R.height,d,R.data):o.texSubImage2D(o.TEXTURE_2D,s,g,y,f,p,d,u,R),o.pixelStorei(o.UNPACK_ROW_LENGTH,_),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,T),o.pixelStorei(o.UNPACK_SKIP_PIXELS,w),o.pixelStorei(o.UNPACK_SKIP_ROWS,A),o.pixelStorei(o.UNPACK_SKIP_IMAGES,v),s===0&&e.generateMipmaps&&o.generateMipmap(o.TEXTURE_2D),l.unbindTexture()}copyFramebufferToTexture(t,e,n){const{gl:i}=this,{state:s}=this.backend,{textureGPU:o}=this.backend.get(t),{x:a,y:l,z:c,w:h}=n,u=t.isDepthTexture===!0||e.renderTarget&&e.renderTarget.samples>0,d=e.renderTarget?e.renderTarget.height:this.backend.gerDrawingBufferSize().y;if(u){const f=a!==0||l!==0;let p,x;if(t.isDepthTexture===!0?(p=i.DEPTH_BUFFER_BIT,x=i.DEPTH_ATTACHMENT,e.stencil&&(p|=i.STENCIL_BUFFER_BIT)):(p=i.COLOR_BUFFER_BIT,x=i.COLOR_ATTACHMENT0),f){const m=this.backend.get(e.renderTarget),g=m.framebuffers[e.getCacheKey()],y=m.msaaFrameBuffer;s.bindFramebuffer(i.DRAW_FRAMEBUFFER,g),s.bindFramebuffer(i.READ_FRAMEBUFFER,y);const _=d-l-h;i.blitFramebuffer(a,_,a+c,_+h,a,_,a+c,_+h,p,i.NEAREST),s.bindFramebuffer(i.READ_FRAMEBUFFER,g),s.bindTexture(i.TEXTURE_2D,o),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,a,_,c,h),s.unbindTexture()}else{const m=i.createFramebuffer();s.bindFramebuffer(i.DRAW_FRAMEBUFFER,m),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,x,i.TEXTURE_2D,o,0),i.blitFramebuffer(0,0,c,h,0,0,c,h,p,i.NEAREST),i.deleteFramebuffer(m)}}else s.bindTexture(i.TEXTURE_2D,o),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,a,d-h-l,c,h),s.unbindTexture();t.generateMipmaps&&this.generateMipmaps(t),this.backend._setFramebuffer(e)}setupRenderBufferStorage(t,e){const{gl:n}=this,i=e.renderTarget,{samples:s,depthTexture:o,depthBuffer:a,stencilBuffer:l,width:c,height:h}=i;if(n.bindRenderbuffer(n.RENDERBUFFER,t),a&&!l){let u=n.DEPTH_COMPONENT24;s>0?(o&&o.isDepthTexture&&o.type===n.FLOAT&&(u=n.DEPTH_COMPONENT32F),n.renderbufferStorageMultisample(n.RENDERBUFFER,s,u,c,h)):n.renderbufferStorage(n.RENDERBUFFER,u,c,h),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,t)}else a&&l&&(s>0?n.renderbufferStorageMultisample(n.RENDERBUFFER,s,n.DEPTH24_STENCIL8,c,h):n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,c,h),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,t))}async copyTextureToBuffer(t,e,n,i,s,o){const{backend:a,gl:l}=this,{textureGPU:c,glFormat:h,glType:u}=this.backend.get(t),d=l.createFramebuffer();l.bindFramebuffer(l.READ_FRAMEBUFFER,d);const f=t.isCubeTexture?l.TEXTURE_CUBE_MAP_POSITIVE_X+o:l.TEXTURE_2D;l.framebufferTexture2D(l.READ_FRAMEBUFFER,l.COLOR_ATTACHMENT0,f,c,0);const p=this._getTypedArrayType(u),x=this._getBytesPerTexel(u,h),g=i*s*x,y=l.createBuffer();l.bindBuffer(l.PIXEL_PACK_BUFFER,y),l.bufferData(l.PIXEL_PACK_BUFFER,g,l.STREAM_READ),l.readPixels(e,n,i,s,h,u,0),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),await a.utils._clientWaitAsync();const _=new p(g/p.BYTES_PER_ELEMENT);return l.bindBuffer(l.PIXEL_PACK_BUFFER,y),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,_),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),l.deleteFramebuffer(d),_}_getTypedArrayType(t){const{gl:e}=this;if(t===e.UNSIGNED_BYTE)return Uint8Array;if(t===e.UNSIGNED_SHORT_4_4_4_4||t===e.UNSIGNED_SHORT_5_5_5_1||t===e.UNSIGNED_SHORT_5_6_5||t===e.UNSIGNED_SHORT)return Uint16Array;if(t===e.UNSIGNED_INT)return Uint32Array;if(t===e.HALF_FLOAT)return Uint16Array;if(t===e.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${t}`)}_getBytesPerTexel(t,e){const{gl:n}=this;let i=0;if(t===n.UNSIGNED_BYTE&&(i=1),(t===n.UNSIGNED_SHORT_4_4_4_4||t===n.UNSIGNED_SHORT_5_5_5_1||t===n.UNSIGNED_SHORT_5_6_5||t===n.UNSIGNED_SHORT||t===n.HALF_FLOAT)&&(i=2),(t===n.UNSIGNED_INT||t===n.FLOAT)&&(i=4),e===n.RGBA)return i*4;if(e===n.RGB)return i*3;if(e===n.ALPHA)return i}}class Vz{constructor(t){this.backend=t,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(t){let e=this.extensions[t];return e===void 0&&(e=this.gl.getExtension(t),this.extensions[t]=e),e}has(t){return this.availableExtensions.includes(t)}}class Hz{constructor(t){this.backend=t,this.maxAnisotropy=null}getMaxAnisotropy(){if(this.maxAnisotropy!==null)return this.maxAnisotropy;const t=this.backend.gl,e=this.backend.extensions;if(e.has("EXT_texture_filter_anisotropic")===!0){const n=e.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const Iy={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class $z{constructor(t){this.gl=t.gl,this.extensions=t.extensions,this.info=t.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(t,e){const{gl:n,mode:i,object:s,type:o,info:a,index:l}=this;l!==0?n.drawElements(i,e,o,t):n.drawArrays(i,t,e),a.update(s,e,i,1)}renderInstances(t,e,n){const{gl:i,mode:s,type:o,index:a,object:l,info:c}=this;n!==0&&(a!==0?i.drawElementsInstanced(s,e,o,t,n):i.drawArraysInstanced(s,t,e,n),c.update(l,e,s,n))}renderMultiDraw(t,e,n){const{extensions:i,mode:s,object:o,info:a}=this;if(n===0)return;const l=i.get("WEBGL_multi_draw");if(l===null)for(let c=0;c<n;c++)this.render(t[c],e[c]);else{this.index!==0?l.multiDrawElementsWEBGL(s,e,0,this.type,t,0,n):l.multiDrawArraysWEBGL(s,t,0,e,0,n);let c=0;for(let h=0;h<n;h++)c+=e[h];a.update(o,c,s,1)}}renderMultiDrawInstances(t,e,n,i){const{extensions:s,mode:o,object:a,info:l}=this;if(n===0)return;const c=s.get("WEBGL_multi_draw");if(c===null)for(let h=0;h<n;h++)this.renderInstances(t[h],e[h],i[h]);else{this.index!==0?c.multiDrawElementsInstancedWEBGL(o,e,0,this.type,t,0,i,0,n):c.multiDrawArraysInstancedWEBGL(o,t,0,e,0,i,0,n);let h=0;for(let u=0;u<n;u++)h+=e[u];for(let u=0;u<i.length;u++)l.update(a,h,o,i[u])}}}class Dy extends bv{constructor(t={}){super(t),this.isWebGLBackend=!0}init(t){super.init(t);const e=this.parameters,n=e.context!==void 0?e.context:t.domElement.getContext("webgl2");this.gl=n,this.extensions=new Vz(this),this.capabilities=new Hz(this),this.attributeUtils=new Oz(this),this.textureUtils=new kz(this),this.bufferRenderer=new $z(this),this.state=new zz(this),this.utils=new Gz(this),this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.trackTimestamp=e.trackTimestamp===!0,this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile"),this._currentContext=null}get coordinateSystem(){return ki}async getArrayBufferAsync(t){return await this.attributeUtils.getArrayBufferAsync(t)}initTimestampQuery(t){if(!this.disjoint||!this.trackTimestamp)return;const e=this.get(t);if(this.queryRunning){e.queryQueue||(e.queryQueue=[]),e.queryQueue.push(t);return}e.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),e.activeQuery=null),e.activeQuery=this.gl.createQuery(),e.activeQuery!==null&&(this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT,e.activeQuery),this.queryRunning=!0)}prepareTimestampBuffer(t){if(!this.disjoint||!this.trackTimestamp)return;const e=this.get(t);if(e.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),e.gpuQueries||(e.gpuQueries=[]),e.gpuQueries.push({query:e.activeQuery}),e.activeQuery=null,this.queryRunning=!1,e.queryQueue&&e.queryQueue.length>0)){const n=e.queryQueue.shift();this.initTimestampQuery(n)}}async resolveTimestampAsync(t,e="render"){if(!this.disjoint||!this.trackTimestamp)return;const n=this.get(t);n.gpuQueries||(n.gpuQueries=[]);for(let i=0;i<n.gpuQueries.length;i++){const s=n.gpuQueries[i],o=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT_AVAILABLE),a=this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);if(o&&!a){const l=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT),c=Number(l)/1e6;this.gl.deleteQuery(s.query),n.gpuQueries.splice(i,1),i--,this.renderer.info.updateTimestamp(e,c)}}}getContext(){return this.gl}beginRender(t){const{gl:e}=this,n=this.get(t);if(this.initTimestampQuery(t),n.previousContext=this._currentContext,this._currentContext=t,this._setFramebuffer(t),this.clear(t.clearColor,t.clearDepth,t.clearStencil,t,!1),t.viewport?this.updateViewport(t):e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),t.scissor){const{x:s,y:o,width:a,height:l}=t.scissorValue;e.scissor(s,t.height-l-o,a,l)}const i=t.occlusionQueryCount;i>0&&(n.currentOcclusionQueries=n.occlusionQueries,n.currentOcclusionQueryObjects=n.occlusionQueryObjects,n.lastOcclusionObject=null,n.occlusionQueries=new Array(i),n.occlusionQueryObjects=new Array(i),n.occlusionQueryIndex=0)}finishRender(t){const{gl:e,state:n}=this,i=this.get(t),s=i.previousContext,o=t.occlusionQueryCount;o>0&&(o>i.occlusionQueryIndex&&e.endQuery(e.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(t));const a=t.textures;if(a!==null)for(let l=0;l<a.length;l++){const c=a[l];c.generateMipmaps&&this.generateMipmaps(c)}if(this._currentContext=s,t.textures!==null&&t.renderTarget){const l=this.get(t.renderTarget),{samples:c}=t.renderTarget;if(c>0){const h=l.framebuffers[t.getCacheKey()],u=e.COLOR_BUFFER_BIT,d=l.msaaFrameBuffer,f=t.textures;n.bindFramebuffer(e.READ_FRAMEBUFFER,d),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,h);for(let p=0;p<f.length;p++)if(t.scissor){const{x,y:m,width:g,height:y}=t.scissorValue,_=t.height-y-m;e.blitFramebuffer(x,_,x+g,_+y,x,_,x+g,_+y,u,e.NEAREST),e.invalidateSubFramebuffer(e.READ_FRAMEBUFFER,l.invalidationArray,x,_,g,y)}else e.blitFramebuffer(0,0,t.width,t.height,0,0,t.width,t.height,u,e.NEAREST),e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l.invalidationArray)}}s!==null&&(this._setFramebuffer(s),s.viewport?this.updateViewport(s):e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight)),this.prepareTimestampBuffer(t)}resolveOccludedAsync(t){const e=this.get(t),{currentOcclusionQueries:n,currentOcclusionQueryObjects:i}=e;if(n&&i){const s=new WeakSet,{gl:o}=this;e.currentOcclusionQueryObjects=null,e.currentOcclusionQueries=null;const a=()=>{let l=0;for(let c=0;c<n.length;c++){const h=n[c];h!==null&&o.getQueryParameter(h,o.QUERY_RESULT_AVAILABLE)&&(o.getQueryParameter(h,o.QUERY_RESULT)>0&&s.add(i[c]),n[c]=null,o.deleteQuery(h),l++)}l<n.length?requestAnimationFrame(a):e.occluded=s};a()}}isOccluded(t,e){const n=this.get(t);return n.occluded&&n.occluded.has(e)}updateViewport(t){const e=this.gl,{x:n,y:i,width:s,height:o}=t.viewportValue;e.viewport(n,t.height-o-i,s,o)}setScissorTest(t){const e=this.gl;t?e.enable(e.SCISSOR_TEST):e.disable(e.SCISSOR_TEST)}clear(t,e,n,i=null,s=!0){const{gl:o}=this;i===null&&(i={textures:null,clearColorValue:this.getClearColor()});let a=0;if(t&&(a|=o.COLOR_BUFFER_BIT),e&&(a|=o.DEPTH_BUFFER_BIT),n&&(a|=o.STENCIL_BUFFER_BIT),a!==0){const l=i.clearColorValue||this.getClearColor();if(l.r*=l.a,l.g*=l.a,l.b*=l.a,e&&this.state.setDepthMask(!0),i.textures===null)o.clearColor(l.r,l.g,l.b,l.a),o.clear(a);else{if(s&&this._setFramebuffer(i),t)for(let c=0;c<i.textures.length;c++)o.clearBufferfv(o.COLOR,c,[l.r,l.g,l.b,l.a]);e&&n?o.clearBufferfi(o.DEPTH_STENCIL,0,1,0):e?o.clearBufferfv(o.DEPTH,0,[1]):n&&o.clearBufferiv(o.STENCIL,0,[0])}}}beginCompute(t){const{state:e,gl:n}=this;e.bindFramebuffer(n.FRAMEBUFFER,null),this.initTimestampQuery(t)}compute(t,e,n,i){const{state:s,gl:o}=this;this.discard||(o.enable(o.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:a,transformBuffers:l,attributes:c}=this.get(i),h=this._getVaoKey(null,c),u=this.vaoCache[h];u===void 0?this._createVao(null,c):o.bindVertexArray(u),s.useProgram(a),this._bindUniforms(n);const d=this._getTransformFeedback(l);o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,d),o.beginTransformFeedback(o.POINTS),c[0].isStorageInstancedBufferAttribute?o.drawArraysInstanced(o.POINTS,0,1,e.count):o.drawArrays(o.POINTS,0,e.count),o.endTransformFeedback(),o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,null);for(let f=0;f<l.length;f++){const p=l[f];p.pbo&&this.textureUtils.copyBufferToTexture(p.transformBuffer,p.pbo),p.switchBuffers()}}finishCompute(t){const e=this.gl;this.discard=!1,e.disable(e.RASTERIZER_DISCARD),this.prepareTimestampBuffer(t)}draw(t){const{object:e,pipeline:n,material:i,context:s}=t,{programGPU:o}=this.get(n),{gl:a,state:l}=this,c=this.get(s),h=t.getDrawParameters();if(h===null)return;this._bindUniforms(t.getBindings());const u=e.isMesh&&e.matrixWorld.determinant()<0;l.setMaterial(i,u),l.useProgram(o);let d=t.staticVao;if(d===void 0){const _=this._getVaoKey(t.getIndex(),t.getAttributes());if(d=this.vaoCache[_],d===void 0){let T;({vaoGPU:d,staticVao:T}=this._createVao(t.getIndex(),t.getAttributes())),T&&(t.staticVao=d)}}a.bindVertexArray(d);const f=t.getIndex(),p=c.lastOcclusionObject;if(p!==e&&p!==void 0){if(p!==null&&p.occlusionTest===!0&&(a.endQuery(a.ANY_SAMPLES_PASSED),c.occlusionQueryIndex++),e.occlusionTest===!0){const _=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,_),c.occlusionQueries[c.occlusionQueryIndex]=_,c.occlusionQueryObjects[c.occlusionQueryIndex]=e}c.lastOcclusionObject=e}const x=this.bufferRenderer;e.isPoints?x.mode=a.POINTS:e.isLineSegments?x.mode=a.LINES:e.isLine?x.mode=a.LINE_STRIP:e.isLineLoop?x.mode=a.LINE_LOOP:i.wireframe===!0?(l.setLineWidth(i.wireframeLinewidth*this.renderer.getPixelRatio()),x.mode=a.LINES):x.mode=a.TRIANGLES;const{vertexCount:m,instanceCount:g}=h;let{firstVertex:y}=h;if(x.object=e,f!==null){y*=f.array.BYTES_PER_ELEMENT;const _=this.get(f);x.index=f.count,x.type=_.type}else x.index=0;e.isBatchedMesh?e._multiDrawInstances!==null?x.renderMultiDrawInstances(e._multiDrawStarts,e._multiDrawCounts,e._multiDrawCount,e._multiDrawInstances):this.hasFeature("WEBGL_multi_draw")?x.renderMultiDraw(e._multiDrawStarts,e._multiDrawCounts,e._multiDrawCount):OI("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):g>1?x.renderInstances(y,m,g):x.render(y,m),a.bindVertexArray(null)}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(t){this.textureUtils.createDefaultTexture(t)}createTexture(t,e){this.textureUtils.createTexture(t,e)}updateTexture(t,e){this.textureUtils.updateTexture(t,e)}generateMipmaps(t){this.textureUtils.generateMipmaps(t)}destroyTexture(t){this.textureUtils.destroyTexture(t)}copyTextureToBuffer(t,e,n,i,s,o){return this.textureUtils.copyTextureToBuffer(t,e,n,i,s,o)}createSampler(){}destroySampler(){}createNodeBuilder(t,e){return new Lz(t,e)}createProgram(t){const e=this.gl,{stage:n,code:i}=t,s=n==="fragment"?e.createShader(e.FRAGMENT_SHADER):e.createShader(e.VERTEX_SHADER);e.shaderSource(s,i),e.compileShader(s),this.set(t,{shaderGPU:s})}destroyProgram(){console.warn("Abstract class.")}createRenderPipeline(t,e){const n=this.gl,i=t.pipeline,{fragmentProgram:s,vertexProgram:o}=i,a=n.createProgram(),l=this.get(s).shaderGPU,c=this.get(o).shaderGPU;if(n.attachShader(a,l),n.attachShader(a,c),n.linkProgram(a),this.set(i,{programGPU:a,fragmentShader:l,vertexShader:c}),e!==null&&this.parallel){const h=new Promise(u=>{const d=this.parallel,f=()=>{n.getProgramParameter(a,d.COMPLETION_STATUS_KHR)?(this._completeCompile(t,i),u()):requestAnimationFrame(f)};f()});e.push(h);return}this._completeCompile(t,i)}_handleSource(t,e){const n=t.split(`
`),i=[],s=Math.max(e-6,0),o=Math.min(e+6,n.length);for(let a=s;a<o;a++){const l=a+1;i.push(`${l===e?">":" "} ${l}: ${n[a]}`)}return i.join(`
`)}_getShaderErrors(t,e,n){const i=t.getShaderParameter(e,t.COMPILE_STATUS),s=t.getShaderInfoLog(e).trim();if(i&&s==="")return"";const o=/ERROR: 0:(\d+)/.exec(s);if(o){const a=parseInt(o[1]);return n.toUpperCase()+`

`+s+`

`+this._handleSource(t.getShaderSource(e),a)}else return s}_logProgramError(t,e,n){if(this.renderer.debug.checkShaderErrors){const i=this.gl,s=i.getProgramInfoLog(t).trim();if(i.getProgramParameter(t,i.LINK_STATUS)===!1)if(typeof this.renderer.debug.onShaderError=="function")this.renderer.debug.onShaderError(i,t,n,e);else{const o=this._getShaderErrors(i,n,"vertex"),a=this._getShaderErrors(i,e,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(t,i.VALIDATE_STATUS)+`

Program Info Log: `+s+`
`+o+`
`+a)}else s!==""&&console.warn("THREE.WebGLProgram: Program Info Log:",s)}}_completeCompile(t,e){const{state:n,gl:i}=this,s=this.get(e),{programGPU:o,fragmentShader:a,vertexShader:l}=s;i.getProgramParameter(o,i.LINK_STATUS)===!1&&this._logProgramError(o,a,l),n.useProgram(o);const c=t.getBindings();this._setupBindings(c,o),this.set(e,{programGPU:o})}createComputePipeline(t,e){const{state:n,gl:i}=this,s={stage:"fragment",code:`#version 300 es
precision highp float;
void main() {}`};this.createProgram(s);const{computeProgram:o}=t,a=i.createProgram(),l=this.get(s).shaderGPU,c=this.get(o).shaderGPU,h=o.transforms,u=[],d=[];for(let m=0;m<h.length;m++){const g=h[m];u.push(g.varyingName),d.push(g.attributeNode)}i.attachShader(a,l),i.attachShader(a,c),i.transformFeedbackVaryings(a,u,i.SEPARATE_ATTRIBS),i.linkProgram(a),i.getProgramParameter(a,i.LINK_STATUS)===!1&&this._logProgramError(a,l,c),n.useProgram(a),this.createBindings(null,e),this._setupBindings(e,a);const f=o.attributes,p=[],x=[];for(let m=0;m<f.length;m++){const g=f[m].node.attribute;p.push(g),this.has(g)||this.attributeUtils.createAttribute(g,i.ARRAY_BUFFER)}for(let m=0;m<d.length;m++){const g=d[m].attribute;this.has(g)||this.attributeUtils.createAttribute(g,i.ARRAY_BUFFER);const y=this.get(g);x.push(y)}this.set(t,{programGPU:a,transformBuffers:x,attributes:p})}createBindings(t,e){this.updateBindings(t,e)}updateBindings(t,e){if(!t)return;const{gl:n}=this,i=this.get(e),s=this.get(t);i.textureIndex===void 0&&(i.textureIndex=0),s.textureIndex===void 0?s.textureIndex=i.textureIndex:i.textureIndex=s.textureIndex;let o=0;for(const a of t.bindings)if(a.isUniformsGroup||a.isUniformBuffer){const l=a.buffer,c=n.createBuffer();n.bindBuffer(n.UNIFORM_BUFFER,c),n.bufferData(n.UNIFORM_BUFFER,l,n.DYNAMIC_DRAW),this.set(a,{index:t.index*2+o++,bufferGPU:c})}else if(a.isSampledTexture){const{textureGPU:l,glTextureType:c}=this.get(a.texture);this.set(a,{index:i.textureIndex++,textureGPU:l,glTextureType:c})}}updateBinding(t){const e=this.gl;if(t.isUniformsGroup||t.isUniformBuffer){const i=this.get(t).bufferGPU,s=t.buffer;e.bindBuffer(e.UNIFORM_BUFFER,i),e.bufferData(e.UNIFORM_BUFFER,s,e.DYNAMIC_DRAW)}}createIndexAttribute(t){const e=this.gl;this.attributeUtils.createAttribute(t,e.ELEMENT_ARRAY_BUFFER)}createAttribute(t){if(this.has(t))return;const e=this.gl;this.attributeUtils.createAttribute(t,e.ARRAY_BUFFER)}createStorageAttribute(t){if(this.has(t))return;const e=this.gl;this.attributeUtils.createAttribute(t,e.ARRAY_BUFFER)}updateAttribute(t){this.attributeUtils.updateAttribute(t)}destroyAttribute(t){this.attributeUtils.destroyAttribute(t)}updateSize(){}hasFeature(t){const e=Object.keys(Iy).filter(i=>Iy[i]===t),n=this.extensions;for(let i=0;i<e.length;i++)if(n.has(e[i]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(t,e,n,i){this.textureUtils.copyTextureToTexture(t,e,n,i)}copyFramebufferToTexture(t,e,n){this.textureUtils.copyFramebufferToTexture(t,e,n)}_setFramebuffer(t){const{gl:e,state:n}=this;let i=null;if(t.textures!==null){const s=t.renderTarget,o=this.get(s),{samples:a,depthBuffer:l,stencilBuffer:c}=s,h=s.isWebGLCubeRenderTarget===!0;let u=o.msaaFrameBuffer,d=o.depthRenderbuffer;const f=gv(t);let p;if(h?(o.cubeFramebuffers||(o.cubeFramebuffers={}),p=o.cubeFramebuffers[f]):(o.framebuffers||(o.framebuffers={}),p=o.framebuffers[f]),p===void 0){p=e.createFramebuffer(),n.bindFramebuffer(e.FRAMEBUFFER,p);const x=t.textures;if(h){o.cubeFramebuffers[f]=p;const{textureGPU:m}=this.get(x[0]),g=this.renderer._activeCubeFace;e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+g,m,0)}else{o.framebuffers[f]=p;for(let m=0;m<x.length;m++){const g=x[m],y=this.get(g);y.renderTarget=t.renderTarget;const _=e.COLOR_ATTACHMENT0+m;e.framebufferTexture2D(e.FRAMEBUFFER,_,e.TEXTURE_2D,y.textureGPU,0)}n.drawBuffers(t,p)}if(t.depthTexture!==null){const m=this.get(t.depthTexture),g=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;e.framebufferTexture2D(e.FRAMEBUFFER,g,e.TEXTURE_2D,m.textureGPU,0)}}if(a>0){if(u===void 0){const x=[];u=e.createFramebuffer(),n.bindFramebuffer(e.FRAMEBUFFER,u);const m=[],g=t.textures;for(let y=0;y<g.length;y++){if(m[y]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,m[y]),x.push(e.COLOR_ATTACHMENT0+y),l){const w=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;x.push(w)}const _=t.textures[y],T=this.get(_);e.renderbufferStorageMultisample(e.RENDERBUFFER,a,T.glInternalFormat,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+y,e.RENDERBUFFER,m[y])}if(o.msaaFrameBuffer=u,o.msaaRenderbuffers=m,d===void 0){d=e.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(d,t),o.depthRenderbuffer=d;const y=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;x.push(y)}o.invalidationArray=x}i=o.msaaFrameBuffer}else i=p}n.bindFramebuffer(e.FRAMEBUFFER,i)}_getVaoKey(t,e){let n=[];if(t!==null){const i=this.get(t);n+=":"+i.id}for(let i=0;i<e.length;i++){const s=this.get(e[i]);n+=":"+s.id}return n}_createVao(t,e){const{gl:n}=this,i=n.createVertexArray();let s="",o=!0;if(n.bindVertexArray(i),t!==null){const a=this.get(t);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,a.bufferGPU),s+=":"+a.id}for(let a=0;a<e.length;a++){const l=e[a],c=this.get(l);s+=":"+c.id,n.bindBuffer(n.ARRAY_BUFFER,c.bufferGPU),n.enableVertexAttribArray(a),(l.isStorageBufferAttribute||l.isStorageInstancedBufferAttribute)&&(o=!1);let h,u;l.isInterleavedBufferAttribute===!0?(h=l.data.stride*c.bytesPerElement,u=l.offset*c.bytesPerElement):(h=0,u=0),c.isInteger?n.vertexAttribIPointer(a,l.itemSize,c.type,h,u):n.vertexAttribPointer(a,l.itemSize,c.type,l.normalized,h,u),l.isInstancedBufferAttribute&&!l.isInterleavedBufferAttribute?n.vertexAttribDivisor(a,l.meshPerAttribute):l.isInterleavedBufferAttribute&&l.data.isInstancedInterleavedBuffer&&n.vertexAttribDivisor(a,l.data.meshPerAttribute)}return n.bindBuffer(n.ARRAY_BUFFER,null),this.vaoCache[s]=i,{vaoGPU:i,staticVao:o}}_getTransformFeedback(t){let e="";for(let s=0;s<t.length;s++)e+=":"+t[s].id;let n=this.transformFeedbackCache[e];if(n!==void 0)return n;const{gl:i}=this;n=i.createTransformFeedback(),i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,n);for(let s=0;s<t.length;s++){const o=t[s];i.bindBufferBase(i.TRANSFORM_FEEDBACK_BUFFER,s,o.transformBuffer)}return i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[e]=n,n}_setupBindings(t,e){const n=this.gl;for(const i of t)for(const s of i.bindings){const a=this.get(s).index;if(s.isUniformsGroup||s.isUniformBuffer){const l=n.getUniformBlockIndex(e,s.name);n.uniformBlockBinding(e,l,a)}else if(s.isSampledTexture){const l=n.getUniformLocation(e,s.name);n.uniform1i(l,a)}}}_bindUniforms(t){const{gl:e,state:n}=this;for(const i of t)for(const s of i.bindings){const o=this.get(s),a=o.index;s.isUniformsGroup||s.isUniformBuffer?n.bindBufferBase(e.UNIFORM_BUFFER,a,o.bufferGPU):s.isSampledTexture&&n.bindTexture(o.glTextureType,o.textureGPU,e.TEXTURE0+a)}}}class Wz extends mx{constructor(t,e){super(t),this.texture=e,this.version=e?e.version:0,this.isSampler=!0}}class qz extends Wz{constructor(t,e,n){super(t,e?e.value:null),this.textureNode=e,this.groupNode=n}update(){this.texture=this.textureNode.value}}class Xz extends _v{constructor(t,e){super(t,e?e.array:null),this.attribute=e,this.isStorageBuffer=!0}}let Yz=0;class jz extends Xz{constructor(t,e){super("StorageBuffer_"+Yz++,t?t.value:null),this.nodeUniform=t,this.access=t?t.access:Wm.Storage,this.groupNode=e}get buffer(){return this.nodeUniform.value}}class Kz extends Ar{constructor(t){super(),this.device=t;const e=`
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`,n=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`,i=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;this.mipmapSampler=t.createSampler({minFilter:Wu.Linear}),this.flipYSampler=t.createSampler({minFilter:Wu.Nearest}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=t.createShaderModule({label:"mipmapVertex",code:e}),this.mipmapFragmentShaderModule=t.createShaderModule({label:"mipmapFragment",code:n}),this.flipYFragmentShaderModule=t.createShaderModule({label:"flipYFragment",code:i})}getTransferPipeline(t){let e=this.transferPipelines[t];return e===void 0&&(e=this.device.createRenderPipeline({label:`mipmap-${t}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:t}]},primitive:{topology:va.TriangleStrip,stripIndexFormat:Ka.Uint32},layout:"auto"}),this.transferPipelines[t]=e),e}getFlipYPipeline(t){let e=this.flipYPipelines[t];return e===void 0&&(e=this.device.createRenderPipeline({label:`flipY-${t}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:t}]},primitive:{topology:va.TriangleStrip,stripIndexFormat:Ka.Uint32},layout:"auto"}),this.flipYPipelines[t]=e),e}flipY(t,e,n=0){const i=e.format,{width:s,height:o}=e.size,a=this.getTransferPipeline(i),l=this.getFlipYPipeline(i),c=this.device.createTexture({size:{width:s,height:o,depthOrArrayLayers:1},format:i,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),h=t.createView({baseMipLevel:0,mipLevelCount:1,dimension:yi.TwoD,baseArrayLayer:n}),u=c.createView({baseMipLevel:0,mipLevelCount:1,dimension:yi.TwoD,baseArrayLayer:0}),d=this.device.createCommandEncoder({}),f=(p,x,m)=>{const g=p.getBindGroupLayout(0),y=this.device.createBindGroup({layout:g,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:x}]}),_=d.beginRenderPass({colorAttachments:[{view:m,loadOp:je.Clear,storeOp:mn.Store,clearValue:[0,0,0,0]}]});_.setPipeline(p),_.setBindGroup(0,y),_.draw(4,1,0,0),_.end()};f(a,h,u),f(l,u,h),this.device.queue.submit([d.finish()]),c.destroy()}generateMipmaps(t,e,n=0){const i=this.get(t);i.useCount===void 0&&(i.useCount=0,i.layers=[]);const s=i.layers[n]||this._mipmapCreateBundles(t,e,n),o=this.device.createCommandEncoder({});this._mipmapRunBundles(o,s),this.device.queue.submit([o.finish()]),i.useCount!==0&&(i.layers[n]=s),i.useCount++}_mipmapCreateBundles(t,e,n){const i=this.getTransferPipeline(e.format),s=i.getBindGroupLayout(0);let o=t.createView({baseMipLevel:0,mipLevelCount:1,dimension:yi.TwoD,baseArrayLayer:n});const a=[];for(let l=1;l<e.mipLevelCount;l++){const c=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:o}]}),h=t.createView({baseMipLevel:l,mipLevelCount:1,dimension:yi.TwoD,baseArrayLayer:n}),u={colorAttachments:[{view:h,loadOp:je.Clear,storeOp:mn.Store,clearValue:[0,0,0,0]}]},d=this.device.createRenderBundleEncoder({colorFormats:[e.format]});d.setPipeline(i),d.setBindGroup(0,c),d.draw(4,1,0,0),a.push({renderBundles:[d.finish()],passDescriptor:u}),o=h}return a}_mipmapRunBundles(t,e){const n=e.length;for(let i=0;i<n;i++){const s=e[i],o=t.beginRenderPass(s.passDescriptor);o.executeBundles(s.renderBundles),o.end()}}}const Zz={[JT]:"never",[Dg]:"less",[tM]:"equal",[eM]:"less-equal",[nM]:"greater",[sM]:"greater-equal",[rM]:"always",[iM]:"not-equal"},Qz=[0,1,3,2,4,5];class Jz{constructor(t){this.backend=t,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new Lc,this.depthTexture.name="depthBuffer"}createSampler(t){const e=this.backend,n=e.device,i=e.get(t),s={addressModeU:this._convertAddressMode(t.wrapS),addressModeV:this._convertAddressMode(t.wrapT),addressModeW:this._convertAddressMode(t.wrapR),magFilter:this._convertFilterMode(t.magFilter),minFilter:this._convertFilterMode(t.minFilter),mipmapFilter:this._convertFilterMode(t.minFilter),maxAnisotropy:t.anisotropy};t.isDepthTexture&&t.compareFunction!==null&&(s.compare=Zz[t.compareFunction]),i.sampler=n.createSampler(s)}createDefaultTexture(t){let e;const n=Xm(t);t.isCubeTexture?e=this._getDefaultCubeTextureGPU(n):t.isVideoTexture?this.backend.get(t).externalTexture=this._getDefaultVideoFrame():e=this._getDefaultTextureGPU(n),this.backend.get(t).texture=e}createTexture(t,e={}){const n=this.backend,i=n.get(t);if(i.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");e.needsMipmaps===void 0&&(e.needsMipmaps=!1),e.levels===void 0&&(e.levels=1),e.depth===void 0&&(e.depth=1);const{width:s,height:o,depth:a,levels:l}=e,c=this._getDimension(t),h=t.internalFormat||e.format||Xm(t,n.device);i.format=h;let u=e.sampleCount!==void 0?e.sampleCount:1;u=n.utils.getSampleCount(u);const d=t.isRenderTargetTexture&&!t.isMultisampleRenderTargetTexture?1:u;let f=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;t.isStorageTexture===!0&&(f|=GPUTextureUsage.STORAGE_BINDING),t.isCompressedTexture!==!0&&t.isCompressedArrayTexture!==!0&&(f|=GPUTextureUsage.RENDER_ATTACHMENT);const p={label:t.name,size:{width:s,height:o,depthOrArrayLayers:a},mipLevelCount:l,sampleCount:d,dimension:c,format:h,usage:f};if(t.isVideoTexture){const x=t.source.data,m=new VideoFrame(x);p.size.width=m.displayWidth,p.size.height=m.displayHeight,m.close(),i.externalTexture=x}else{if(h===void 0)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(t);i.texture=n.device.createTexture(p)}if(t.isRenderTargetTexture&&u>1&&!t.isMultisampleRenderTargetTexture){const x=Object.assign({},p);x.label=x.label+"-msaa",x.sampleCount=u,i.msaaTexture=n.device.createTexture(x)}i.initialized=!0,i.textureDescriptorGPU=p}destroyTexture(t){const e=this.backend,n=e.get(t);n.texture.destroy(),n.msaaTexture!==void 0&&n.msaaTexture.destroy(),e.delete(t)}destroySampler(t){const n=this.backend.get(t);delete n.sampler}generateMipmaps(t){const e=this.backend.get(t);if(t.isCubeTexture)for(let n=0;n<6;n++)this._generateMipmaps(e.texture,e.textureDescriptorGPU,n);else{const n=t.image.depth||1;for(let i=0;i<n;i++)this._generateMipmaps(e.texture,e.textureDescriptorGPU,i)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const t=this.backend,{width:e,height:n}=t.getDrawingBufferSize();return this.colorBuffer=t.device.createTexture({label:"colorBuffer",size:{width:e,height:n,depthOrArrayLayers:1},sampleCount:t.utils.getSampleCount(t.renderer.samples),format:t.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(t=!0,e=!1){const n=this.backend,{width:i,height:s}=n.getDrawingBufferSize(),o=this.depthTexture,a=n.get(o).texture;let l,c;if(e?(l=Xa,c=Pc):t&&(l=Qr,c=gn),a!==void 0){if(o.image.width===i&&o.image.height===s&&o.format===l&&o.type===c)return a;this.destroyTexture(o)}return o.name="depthBuffer",o.format=l,o.type=c,o.image.width=i,o.image.height=s,this.createTexture(o,{sampleCount:n.utils.getSampleCount(n.renderer.samples),width:i,height:s}),n.get(o).texture}updateTexture(t,e){const n=this.backend.get(t),{textureDescriptorGPU:i}=n;if(!(t.isRenderTargetTexture||i===void 0)){if(t.isDataTexture)this._copyBufferToTexture(e.image,n.texture,i,0,t.flipY);else if(t.isDataArrayTexture||t.isData3DTexture)for(let s=0;s<e.image.depth;s++)this._copyBufferToTexture(e.image,n.texture,i,s,t.flipY,s);else if(t.isCompressedTexture||t.isCompressedArrayTexture)this._copyCompressedBufferToTexture(t.mipmaps,n.texture,i);else if(t.isCubeTexture)this._copyCubeMapToTexture(e.images,n.texture,i,t.flipY);else if(t.isVideoTexture){const s=t.source.data;n.externalTexture=s}else this._copyImageToTexture(e.image,n.texture,i,0,t.flipY);n.version=t.version,t.onUpdate&&t.onUpdate(t)}}async copyTextureToBuffer(t,e,n,i,s,o){const a=this.backend.device,l=this.backend.get(t),c=l.texture,h=l.textureDescriptorGPU.format,u=this._getBytesPerTexel(h);let d=i*u;d=Math.ceil(d/256)*256;const f=a.createBuffer({size:i*s*u,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=a.createCommandEncoder();p.copyTextureToBuffer({texture:c,origin:{x:e,y:n,z:o}},{buffer:f,bytesPerRow:d},{width:i,height:s});const x=this._getTypedArrayType(h);a.queue.submit([p.finish()]),await f.mapAsync(GPUMapMode.READ);const m=f.getMappedRange();return new x(m)}_isEnvironmentTexture(t){const e=t.mapping;return e===Rc||e===Cc||e===lo||e===qa}_getDefaultTextureGPU(t){let e=this.defaultTexture[t];if(e===void 0){const n=new $n;n.minFilter=xn,n.magFilter=xn,this.createTexture(n,{width:1,height:1,format:t}),this.defaultTexture[t]=e=n}return this.backend.get(e).texture}_getDefaultCubeTextureGPU(t){let e=this.defaultTexture[t];if(e===void 0){const n=new Bg;n.minFilter=xn,n.magFilter=xn,this.createTexture(n,{width:1,height:1,depth:6}),this.defaultCubeTexture[t]=e=n}return this.backend.get(e).texture}_getDefaultVideoFrame(){let t=this.defaultVideoFrame;if(t===null){const e={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=t=new VideoFrame(new Uint8Array([0,0,0,255]),e)}return t}_copyCubeMapToTexture(t,e,n,i){for(let s=0;s<6;s++){const o=t[s],a=i===!0?Qz[s]:s;o.isDataTexture?this._copyBufferToTexture(o.image,e,n,a,i):this._copyImageToTexture(o,e,n,a,i)}}_copyImageToTexture(t,e,n,i,s){this.backend.device.queue.copyExternalImageToTexture({source:t},{texture:e,mipLevel:0,origin:{x:0,y:0,z:i}},{width:t.width,height:t.height,depthOrArrayLayers:1}),s===!0&&this._flipY(e,n,i)}_getPassUtils(){let t=this._passUtils;return t===null&&(this._passUtils=t=new Kz(this.backend.device)),t}_generateMipmaps(t,e,n=0){this._getPassUtils().generateMipmaps(t,e,n)}_flipY(t,e,n=0){this._getPassUtils().flipY(t,e,n)}_copyBufferToTexture(t,e,n,i,s,o=0){const a=this.backend.device,l=t.data,c=this._getBytesPerTexel(n.format),h=t.width*c;a.queue.writeTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:i}},l,{offset:t.width*t.height*c*o,bytesPerRow:h},{width:t.width,height:t.height,depthOrArrayLayers:1}),s===!0&&this._flipY(e,n,i)}_copyCompressedBufferToTexture(t,e,n){const i=this.backend.device,s=this._getBlockData(n.format),o=n.size.depthOrArrayLayers>1;for(let a=0;a<t.length;a++){const l=t[a],c=l.width,h=l.height,u=o?n.size.depthOrArrayLayers:1,d=Math.ceil(c/s.width)*s.byteLength,f=d*Math.ceil(h/s.height);for(let p=0;p<u;p++)i.queue.writeTexture({texture:e,mipLevel:a,origin:{x:0,y:0,z:p}},l.data,{offset:p*f,bytesPerRow:d,rowsPerImage:Math.ceil(h/s.height)},{width:Math.ceil(c/s.width)*s.width,height:Math.ceil(h/s.height)*s.height,depthOrArrayLayers:1})}}_getBlockData(t){if(t===C.BC1RGBAUnorm||t===C.BC1RGBAUnormSRGB)return{byteLength:8,width:4,height:4};if(t===C.BC2RGBAUnorm||t===C.BC2RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.BC3RGBAUnorm||t===C.BC3RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.BC4RUnorm||t===C.BC4RSNorm)return{byteLength:8,width:4,height:4};if(t===C.BC5RGUnorm||t===C.BC5RGSnorm)return{byteLength:16,width:4,height:4};if(t===C.BC6HRGBUFloat||t===C.BC6HRGBFloat)return{byteLength:16,width:4,height:4};if(t===C.BC7RGBAUnorm||t===C.BC7RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.ETC2RGB8Unorm||t===C.ETC2RGB8UnormSRGB)return{byteLength:8,width:4,height:4};if(t===C.ETC2RGB8A1Unorm||t===C.ETC2RGB8A1UnormSRGB)return{byteLength:8,width:4,height:4};if(t===C.ETC2RGBA8Unorm||t===C.ETC2RGBA8UnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.EACR11Unorm)return{byteLength:8,width:4,height:4};if(t===C.EACR11Snorm)return{byteLength:8,width:4,height:4};if(t===C.EACRG11Unorm)return{byteLength:16,width:4,height:4};if(t===C.EACRG11Snorm)return{byteLength:16,width:4,height:4};if(t===C.ASTC4x4Unorm||t===C.ASTC4x4UnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.ASTC5x4Unorm||t===C.ASTC5x4UnormSRGB)return{byteLength:16,width:5,height:4};if(t===C.ASTC5x5Unorm||t===C.ASTC5x5UnormSRGB)return{byteLength:16,width:5,height:5};if(t===C.ASTC6x5Unorm||t===C.ASTC6x5UnormSRGB)return{byteLength:16,width:6,height:5};if(t===C.ASTC6x6Unorm||t===C.ASTC6x6UnormSRGB)return{byteLength:16,width:6,height:6};if(t===C.ASTC8x5Unorm||t===C.ASTC8x5UnormSRGB)return{byteLength:16,width:8,height:5};if(t===C.ASTC8x6Unorm||t===C.ASTC8x6UnormSRGB)return{byteLength:16,width:8,height:6};if(t===C.ASTC8x8Unorm||t===C.ASTC8x8UnormSRGB)return{byteLength:16,width:8,height:8};if(t===C.ASTC10x5Unorm||t===C.ASTC10x5UnormSRGB)return{byteLength:16,width:10,height:5};if(t===C.ASTC10x6Unorm||t===C.ASTC10x6UnormSRGB)return{byteLength:16,width:10,height:6};if(t===C.ASTC10x8Unorm||t===C.ASTC10x8UnormSRGB)return{byteLength:16,width:10,height:8};if(t===C.ASTC10x10Unorm||t===C.ASTC10x10UnormSRGB)return{byteLength:16,width:10,height:10};if(t===C.ASTC12x10Unorm||t===C.ASTC12x10UnormSRGB)return{byteLength:16,width:12,height:10};if(t===C.ASTC12x12Unorm||t===C.ASTC12x12UnormSRGB)return{byteLength:16,width:12,height:12}}_convertAddressMode(t){let e=sp.ClampToEdge;return t===Uu?e=sp.Repeat:t===Bu&&(e=sp.MirrorRepeat),e}_convertFilterMode(t){let e=Wu.Linear;return(t===xn||t===mm||t===Pa)&&(e=Wu.Nearest),e}_getBytesPerTexel(t){if(t===C.R8Unorm||t===C.R8Snorm||t===C.R8Uint||t===C.R8Sint)return 1;if(t===C.R16Uint||t===C.R16Sint||t===C.R16Float||t===C.RG8Unorm||t===C.RG8Snorm||t===C.RG8Uint||t===C.RG8Sint)return 2;if(t===C.R32Uint||t===C.R32Sint||t===C.R32Float||t===C.RG16Uint||t===C.RG16Sint||t===C.RG16Float||t===C.RGBA8Unorm||t===C.RGBA8UnormSRGB||t===C.RGBA8Snorm||t===C.RGBA8Uint||t===C.RGBA8Sint||t===C.BGRA8Unorm||t===C.BGRA8UnormSRGB||t===C.RGB9E5UFloat||t===C.RGB10A2Unorm||t===C.RG11B10UFloat||t===C.Depth32Float||t===C.Depth24Plus||t===C.Depth24PlusStencil8||t===C.Depth32FloatStencil8)return 4;if(t===C.RG32Uint||t===C.RG32Sint||t===C.RG32Float||t===C.RGBA16Uint||t===C.RGBA16Sint||t===C.RGBA16Float)return 8;if(t===C.RGBA32Uint||t===C.RGBA32Sint||t===C.RGBA32Float)return 16}_getTypedArrayType(t){if(t===C.R8Uint)return Uint8Array;if(t===C.R8Sint)return Int8Array;if(t===C.R8Unorm)return Uint8Array;if(t===C.R8Snorm)return Int8Array;if(t===C.RG8Uint)return Uint8Array;if(t===C.RG8Sint)return Int8Array;if(t===C.RG8Unorm)return Uint8Array;if(t===C.RG8Snorm)return Int8Array;if(t===C.RGBA8Uint)return Uint8Array;if(t===C.RGBA8Sint)return Int8Array;if(t===C.RGBA8Unorm)return Uint8Array;if(t===C.RGBA8Snorm)return Int8Array;if(t===C.R16Uint)return Uint16Array;if(t===C.R16Sint)return Int16Array;if(t===C.RG16Uint)return Uint16Array;if(t===C.RG16Sint)return Int16Array;if(t===C.RGBA16Uint)return Uint16Array;if(t===C.RGBA16Sint)return Int16Array;if(t===C.R16Float||t===C.RG16Float||t===C.RGBA16Float)return Uint16Array;if(t===C.R32Uint)return Uint32Array;if(t===C.R32Sint)return Int32Array;if(t===C.R32Float)return Float32Array;if(t===C.RG32Uint)return Uint32Array;if(t===C.RG32Sint)return Int32Array;if(t===C.RG32Float)return Float32Array;if(t===C.RGBA32Uint)return Uint32Array;if(t===C.RGBA32Sint)return Int32Array;if(t===C.RGBA32Float)return Float32Array;if(t===C.BGRA8Unorm||t===C.BGRA8UnormSRGB)return Uint8Array;if(t===C.RGB10A2Unorm||t===C.RGB9E5UFloat||t===C.RG11B10UFloat)return Uint32Array;if(t===C.Depth32Float)return Float32Array;if(t===C.Depth24Plus||t===C.Depth24PlusStencil8)return Uint32Array;if(t===C.Depth32FloatStencil8)return Float32Array}_getDimension(t){let e;return t.isData3DTexture?e=vy.ThreeD:e=vy.TwoD,e}}function Xm(r,t=null){const e=r.format,n=r.type,i=r.colorSpace;let s;if(r.isFramebufferTexture===!0&&r.type===ws)s=C.BGRA8Unorm;else if(r.isCompressedTexture===!0||r.isCompressedArrayTexture===!0)switch(e){case uu:s=i===Bt?C.BC1RGBAUnormSRGB:C.BC1RGBAUnorm;break;case du:s=i===Bt?C.BC2RGBAUnormSRGB:C.BC2RGBAUnorm;break;case fu:s=i===Bt?C.BC3RGBAUnormSRGB:C.BC3RGBAUnorm;break;case xm:s=i===Bt?C.ETC2RGB8UnormSRGB:C.ETC2RGB8Unorm;break;case _m:s=i===Bt?C.ETC2RGBA8UnormSRGB:C.ETC2RGBA8Unorm;break;case ym:s=i===Bt?C.ASTC4x4UnormSRGB:C.ASTC4x4Unorm;break;case Sm:s=i===Bt?C.ASTC5x4UnormSRGB:C.ASTC5x4Unorm;break;case Tm:s=i===Bt?C.ASTC5x5UnormSRGB:C.ASTC5x5Unorm;break;case Mm:s=i===Bt?C.ASTC6x5UnormSRGB:C.ASTC6x5Unorm;break;case vm:s=i===Bt?C.ASTC6x6UnormSRGB:C.ASTC6x6Unorm;break;case bm:s=i===Bt?C.ASTC8x5UnormSRGB:C.ASTC8x5Unorm;break;case Em:s=i===Bt?C.ASTC8x6UnormSRGB:C.ASTC8x6Unorm;break;case Am:s=i===Bt?C.ASTC8x8UnormSRGB:C.ASTC8x8Unorm;break;case wm:s=i===Bt?C.ASTC10x5UnormSRGB:C.ASTC10x5Unorm;break;case Nm:s=i===Bt?C.ASTC10x6UnormSRGB:C.ASTC10x6Unorm;break;case Rm:s=i===Bt?C.ASTC10x8UnormSRGB:C.ASTC10x8Unorm;break;case Cm:s=i===Bt?C.ASTC10x10UnormSRGB:C.ASTC10x10Unorm;break;case Pm:s=i===Bt?C.ASTC12x10UnormSRGB:C.ASTC12x10Unorm;break;case Fm:s=i===Bt?C.ASTC12x12UnormSRGB:C.ASTC12x12Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",e)}else switch(e){case il:switch(n){case Zl:s=C.RGBA8Snorm;break;case Ql:s=C.RGBA16Sint;break;case ya:s=C.RGBA16Uint;break;case gn:s=C.RGBA32Uint;break;case kn:s=C.RGBA32Sint;break;case ws:s=i===Bt?C.RGBA8UnormSRGB:C.RGBA8Unorm;break;case Rs:s=C.RGBA16Float;break;case fi:s=C.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",n)}break;case Rg:switch(n){case ZT:s=C.RGB9E5UFloat;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",n)}break;case Cg:switch(n){case Zl:s=C.R8Snorm;break;case Ql:s=C.R16Sint;break;case ya:s=C.R16Uint;break;case gn:s=C.R32Uint;break;case kn:s=C.R32Sint;break;case ws:s=C.R8Unorm;break;case Rs:s=C.R16Float;break;case fi:s=C.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",n)}break;case oc:switch(n){case Zl:s=C.RG8Snorm;break;case Ql:s=C.RG16Sint;break;case ya:s=C.RG16Uint;break;case gn:s=C.RG32Uint;break;case kn:s=C.RG32Sint;break;case ws:s=C.RG8Unorm;break;case Rs:s=C.RG16Float;break;case fi:s=C.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",n)}break;case Qr:switch(n){case ya:s=C.Depth16Unorm;break;case gn:s=C.Depth24Plus;break;case fi:s=C.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",n)}break;case Xa:switch(n){case Pc:s=C.Depth24PlusStencil8;break;case fi:t&&t.features.has(qm.Depth32FloatStencil8)===!1&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),s=C.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",n)}break;case Pg:switch(n){case kn:s=C.R32Sint;break;case gn:s=C.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",n)}break;case Fg:switch(n){case kn:s=C.RG32Sint;break;case gn:s=C.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",n)}break;case Ig:switch(n){case kn:s=C.RGBA32Sint;break;case gn:s=C.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",n)}break;default:console.error("WebGPURenderer: Unsupported texture format.",e)}return s}const tG=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,eG=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig,Ly={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"},nG=r=>{r=r.trim();const t=r.match(tG);if(t!==null&&t.length===4){const e=t[2],n=[];let i=null;for(;(i=eG.exec(e))!==null;)n.push({name:i[1],type:i[2]});const s=[];for(let h=0;h<n.length;h++){const{name:u,type:d}=n[h];let f=d;f.startsWith("texture")&&(f=d.split("<")[0]),f=Ly[f]||f,s.push(new hx(f,u))}const o=r.substring(t[0].length),a=t[3]||"void",l=t[1]!==void 0?t[1]:"";return{type:Ly[a]||a,inputs:s,name:l,inputsCode:e,blockCode:o,outputType:a}}else throw new Error("FunctionNode: Function is not a WGSL code.")};class iG extends fx{constructor(t){const{type:e,inputs:n,name:i,inputsCode:s,blockCode:o,outputType:a}=nG(t);super(e,n,i),this.inputsCode=s,this.blockCode=o,this.outputType=a}getCode(t=this.name){const e=this.outputType!=="void"?"-> "+this.outputType:"";return`fn ${t} ( ${this.inputsCode.trim()} ) ${e}`+this.blockCode}}class sG extends mv{parseFunction(t){return new iG(t)}}const aa=self.GPUShaderStage,Zh={vertex:aa?aa.VERTEX:1,fragment:aa?aa.FRAGMENT:2,compute:aa?aa.COMPUTE:4},Uy={instance:!0,swizzleAssign:!1,storageBuffer:!0},rG={"^^":"tsl_xor"},oG={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",imat2:"mat2x2<i32>",umat2:"mat2x2<u32>",bmat2:"mat2x2<bool>",mat3:"mat3x3<f32>",imat3:"mat3x3<i32>",umat3:"mat3x3<u32>",bmat3:"mat3x3<bool>",mat4:"mat4x4<f32>",imat4:"mat4x4<i32>",umat4:"mat4x4<u32>",bmat4:"mat4x4<bool>"},Ts={tsl_xor:new En("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new En("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new En("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new En("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new En("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new En("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new En("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new En("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new En("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping:new En(`
fn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {

	let uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );

	return ( ( uvScaled % dimension ) + dimension ) % dimension;

}
`),biquadraticTexture:new En(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, level : i32 ) -> vec4f {

	let iRes = vec2i( textureDimensions( map, level ) );
	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2i( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2i( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2i( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2i( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)},Xl={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};/Windows/g.test(navigator.userAgent)&&(Ts.pow_float=new En("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),Ts.pow_vec2=new En("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[Ts.pow_float]),Ts.pow_vec3=new En("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[Ts.pow_float]),Ts.pow_vec4=new En("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[Ts.pow_float]),Xl.pow_float="tsl_pow_float",Xl.pow_vec2="tsl_pow_vec2",Xl.pow_vec3="tsl_pow_vec3",Xl.pow_vec4="tsl_pow_vec4");let Ev="";/Firefox/g.test(navigator.userAgent)!==!0&&(Ev+=`diagnostic( off, derivative_uniformity );
`);class aG extends lv{constructor(t,e){super(t,e,new sG),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(t){return t.isVideoTexture===!0&&t.colorSpace!==co}_generateTextureSample(t,e,n,i,s=this.shaderStage){return s==="fragment"?i?`textureSample( ${e}, ${e}_sampler, ${n}, ${i} )`:`textureSample( ${e}, ${e}_sampler, ${n} )`:this.isFilteredTexture(t)?this.generateFilteredTexture(t,e,n):this.generateTextureLod(t,e,n,"0")}_generateVideoSample(t,e,n=this.shaderStage){if(n==="fragment")return`textureSampleBaseClampToEdge( ${t}, ${t}_sampler, vec2<f32>( ${e}.x, 1.0 - ${e}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${n} shader.`)}_generateTextureSampleLevel(t,e,n,i,s,o=this.shaderStage){return o==="fragment"&&this.isUnfilterable(t)===!1?`textureSampleLevel( ${e}, ${e}_sampler, ${n}, ${i} )`:this.isFilteredTexture(t)?this.generateFilteredTexture(t,e,n,i):this.generateTextureLod(t,e,n,i)}generateFilteredTexture(t,e,n,i="0"){return this._include("biquadraticTexture"),`tsl_biquadraticTexture( ${e}, ${n}, i32( ${i} ) )`}generateTextureLod(t,e,n,i="0"){this._include("repeatWrapping");const s=t.isMultisampleRenderTargetTexture===!0?`textureDimensions( ${e} )`:`textureDimensions( ${e}, 0 )`;return`textureLoad( ${e}, tsl_repeatWrapping( ${n}, ${s} ), i32( ${i} ) )`}generateTextureLoad(t,e,n,i,s="0u"){return i?`textureLoad( ${e}, ${n}, ${i}, ${s} )`:`textureLoad( ${e}, ${n}, ${s} )`}generateTextureStore(t,e,n,i){return`textureStore( ${e}, ${n}, ${i} )`}isUnfilterable(t){return this.getComponentTypeFromTexture(t)!=="float"||!this.isAvailable("float32Filterable")&&t.isDataTexture===!0&&t.type===fi||t.isMultisampleRenderTargetTexture===!0}generateTexture(t,e,n,i,s=this.shaderStage){let o=null;return t.isVideoTexture===!0?o=this._generateVideoSample(e,n,s):this.isUnfilterable(t)?o=this.generateTextureLod(t,e,n,"0",i,s):o=this._generateTextureSample(t,e,n,i,s),o}generateTextureGrad(t,e,n,i,s,o=this.shaderStage){if(o==="fragment")return`textureSampleGrad( ${e}, ${e}_sampler, ${n},  ${i[0]}, ${i[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${o} shader.`)}generateTextureCompare(t,e,n,i,s,o=this.shaderStage){if(o==="fragment")return`textureSampleCompare( ${e}, ${e}_sampler, ${n}, ${i} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}generateTextureLevel(t,e,n,i,s,o=this.shaderStage){let a=null;return t.isVideoTexture===!0?a=this._generateVideoSample(e,n,o):a=this._generateTextureSampleLevel(t,e,n,i,s,o),a}generateTextureBias(t,e,n,i,s,o=this.shaderStage){if(o==="fragment")return`textureSampleBias( ${e}, ${e}_sampler, ${n}, ${i} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${o} shader.`)}getPropertyName(t,e=this.shaderStage){if(t.isNodeVarying===!0&&t.needsInterpolation===!0){if(e==="vertex")return`varyings.${t.name}`}else if(t.isNodeUniform===!0){const n=t.name,i=t.type;return i==="texture"||i==="cubeTexture"||i==="storageTexture"||i==="texture3D"?n:i==="buffer"||i==="storageBuffer"?`NodeBuffer_${t.id}.${n}`:t.groupNode.name+"."+n}return super.getPropertyName(t)}getOutputStructName(){return"output"}_getUniformGroupCount(t){return Object.keys(this.uniforms[t]).length}getFunctionOperator(t){const e=rG[t];return e!==void 0?(this._include(e),e):null}getStorageAccess(t){if(t.isStorageTextureNode)switch(t.access){case My.ReadOnly:return"read";case My.WriteOnly:return"write";default:return"read_write"}else switch(t.access){case Wm.Storage:return"read_write";case Wm.ReadOnlyStorage:return"read";default:return"write"}}getUniformFromNode(t,e,n,i=null){const s=super.getUniformFromNode(t,e,n,i),o=this.getDataFromNode(t,n,this.globalCache);if(o.uniformGPU===void 0){let a;const l=t.groupNode,c=l.name,h=this.getBindGroupArray(c,n);if(e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="texture3D"){let u=null;if(e==="texture"||e==="storageTexture"?u=new _d(s.name,s.node,l,t.access?t.access:null):e==="cubeTexture"?u=new Mv(s.name,s.node,l,t.access?t.access:null):e==="texture3D"&&(u=new vv(s.name,s.node,l,t.access?t.access:null)),u.store=t.isStorageTextureNode===!0,u.setVisibility(Zh[n]),n==="fragment"&&this.isUnfilterable(t.value)===!1&&u.store===!1){const d=new qz(`${s.name}_sampler`,s.node,l);d.setVisibility(Zh[n]),h.push(d,u),a=[d,u]}else h.push(u),a=[u]}else if(e==="buffer"||e==="storageBuffer"){const u=e==="storageBuffer"?jz:Sv,d=new u(t,l);d.setVisibility(Zh[n]),h.push(d),a=d}else{const u=this.uniformGroups[n]||(this.uniformGroups[n]={});let d=u[c];d===void 0&&(d=new Tv(c,l),d.setVisibility(Zh[n]),u[c]=d,h.push(d)),a=this.getNodeUniform(s,e),d.addUniform(a)}o.uniformGPU=a}return s}getBuiltin(t,e,n,i=this.shaderStage){const s=this.builtins[i]||(this.builtins[i]=new Map);return s.has(t)===!1&&s.set(t,{name:t,property:e,type:n}),e}hasBuiltin(t,e=this.shaderStage){return this.builtins[e]!==void 0&&this.builtins[e].has(t)}getVertexIndex(){return this.shaderStage==="vertex"?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(t){const e=t.layout,n=this.flowShaderNode(t),i=[];for(const o of e.inputs)i.push(o.name+" : "+this.getType(o.type));let s=`fn ${e.name}( ${i.join(", ")} ) -> ${this.getType(e.type)} {
${n.vars}
${n.code}
`;return n.result&&(s+=`	return ${n.result};
`),s+=`
}
`,s}getInstanceIndex(){return this.shaderStage==="vertex"?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}isFlipY(){return!1}enableDirective(t,e=this.shaderStage){(this.directives[e]||(this.directives[e]=new Set)).add(t)}getDirectives(t){const e=[],n=this.directives[t];if(n!==void 0)for(const i of n)e.push(`enable ${i};`);return e.join(`
`)}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}getBuiltins(t){const e=[],n=this.builtins[t];if(n!==void 0)for(const{name:i,property:s,type:o}of n.values())e.push(`@builtin( ${i} ) ${s} : ${o}`);return e.join(`,
	`)}getScopedArray(t,e,n,i){return this.scopedArrays.has(t)===!1&&this.scopedArrays.set(t,{name:t,scope:e,bufferType:n,bufferCount:i}),t}getScopedArrays(t){if(t!=="compute")return;const e=[];for(const{name:n,scope:i,bufferType:s,bufferCount:o}of this.scopedArrays.values()){const a=this.getType(s);e.push(`var<${i}> ${n}: array< ${a}, ${o} >;`)}return e.join(`
`)}getAttributes(t){const e=[];if(t==="compute"&&(this.getBuiltin("global_invocation_id","id","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",t),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),t==="vertex"||t==="compute"){const n=this.getBuiltins("attribute");n&&e.push(n);const i=this.getAttributesArray();for(let s=0,o=i.length;s<o;s++){const a=i[s],l=a.name,c=this.getType(a.type);e.push(`@location( ${s} ) ${l} : ${c}`)}}return e.join(`,
	`)}getStructMembers(t){const e=[],n=t.getMemberTypes();for(let s=0;s<n.length;s++){const o=n[s];e.push(`	@location( ${s} ) m${s} : ${o}<f32>`)}const i=this.getBuiltins("output");return i&&e.push("	"+i),e.join(`,
`)}getStructs(t){const e=[],n=this.structs[t];for(let i=0,s=n.length;i<s;i++){const o=n[i],a=o.name;let l=`struct ${a} {
`;l+=this.getStructMembers(o),l+=`
}`,e.push(l),e.push(`
var<private> output : ${a};

`)}return e.join(`

`)}getVar(t,e){return`var ${e} : ${this.getType(t)}`}getVars(t){const e=[],n=this.vars[t];if(n!==void 0)for(const i of n)e.push(`	${this.getVar(i.type,i.name)};`);return`
${e.join(`
`)}
`}getVaryings(t){const e=[];if(t==="vertex"&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),t==="vertex"||t==="fragment"){const s=this.varyings,o=this.vars[t];for(let a=0;a<s.length;a++){const l=s[a];if(l.needsInterpolation){let c=`@location( ${a} )`;/^(int|uint|ivec|uvec)/.test(l.type)&&(c+=" @interpolate( flat )"),e.push(`${c} ${l.name} : ${this.getType(l.type)}`)}else t==="vertex"&&o.includes(l)===!1&&o.push(l)}}const n=this.getBuiltins(t);n&&e.push(n);const i=e.join(`,
	`);return t==="vertex"?this._getWGSLStruct("VaryingsStruct","	"+i):i}getUniforms(t){const e=this.uniforms[t],n=[],i=[],s=[],o={};for(const l of e){const c=l.groupNode.name,h=this.bindingsIndexes[c];if(l.type==="texture"||l.type==="cubeTexture"||l.type==="storageTexture"||l.type==="texture3D"){const u=l.node.value;t==="fragment"&&this.isUnfilterable(u)===!1&&l.node.isStorageTextureNode!==!0&&(u.isDepthTexture===!0&&u.compareFunction!==null?n.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name}_sampler : sampler_comparison;`):n.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name}_sampler : sampler;`));let d,f="";if(u.isMultisampleRenderTargetTexture===!0&&(f="_multisampled"),u.isCubeTexture===!0)d="texture_cube<f32>";else if(u.isDataArrayTexture===!0||u.isCompressedArrayTexture===!0)d="texture_2d_array<f32>";else if(u.isDepthTexture===!0)d=`texture_depth${f}_2d`;else if(u.isVideoTexture===!0)d="texture_external";else if(u.isData3DTexture===!0)d="texture_3d<f32>";else if(l.node.isStorageTextureNode===!0){const p=Xm(u),x=this.getStorageAccess(l.node);d=`texture_storage_2d<${p}, ${x}>`}else{const p=this.getComponentTypeFromTexture(u).charAt(0);d=`texture${f}_2d<${p}32>`}n.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name} : ${d};`)}else if(l.type==="buffer"||l.type==="storageBuffer"){const u=l.node,d=this.getType(u.bufferType),f=u.bufferCount,p=f>0?", "+f:"",x=u.isAtomic?`atomic<${d}>`:`${d}`,m=`	${l.name} : array< ${x}${p} >
`,g=u.isStorageBufferNode?`storage, ${this.getStorageAccess(u)}`:"uniform";i.push(this._getWGSLStructBinding("NodeBuffer_"+u.id,m,g,h.binding++,h.group))}else{const u=this.getType(this.getVectorType(l.type)),d=l.groupNode.name;(o[d]||(o[d]={index:h.binding++,id:h.group,snippets:[]})).snippets.push(`	${l.name} : ${u}`)}}for(const l in o){const c=o[l];s.push(this._getWGSLStructBinding(l,c.snippets.join(`,
`),"uniform",c.index,c.id))}let a=n.join(`
`);return a+=i.join(`
`),a+=s.join(`
`),a}buildCode(){const t=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const e in t){const n=t[e];n.uniforms=this.getUniforms(e),n.attributes=this.getAttributes(e),n.varyings=this.getVaryings(e),n.structs=this.getStructs(e),n.vars=this.getVars(e),n.codes=this.getCodes(e),n.directives=this.getDirectives(e),n.scopedArrays=this.getScopedArrays(e);let i=`// code

`;i+=this.flowCode[e];const s=this.flowNodes[e],o=s[s.length-1],a=o.outputNode,l=a!==void 0&&a.isOutputStructNode===!0;for(const c of s){const h=this.getFlowData(c),u=c.name;if(u&&(i.length>0&&(i+=`
`),i+=`	// flow -> ${u}
	`),i+=`${h.code}
	`,c===o&&e!=="compute"){if(i+=`// result

	`,e==="vertex")i+=`varyings.Vertex = ${h.result};`;else if(e==="fragment")if(l)n.returnType=a.nodeType,i+=`return ${h.result};`;else{let d="	@location(0) color: vec4<f32>";const f=this.getBuiltins("output");f&&(d+=`,
	`+f),n.returnType="OutputStruct",n.structs+=this._getWGSLStruct("OutputStruct",d),n.structs+=`
var<private> output : OutputStruct;

`,i+=`output.color = ${h.result};

	return output;`}}}n.flow=i}this.material!==null?(this.vertexShader=this._getWGSLVertexCode(t.vertex),this.fragmentShader=this._getWGSLFragmentCode(t.fragment)):this.computeShader=this._getWGSLComputeCode(t.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(t,e=null){let n;return e!==null&&(n=this._getWGSLMethod(t+"_"+e)),n===void 0&&(n=this._getWGSLMethod(t)),n||t}getType(t){return oG[t]||t}isAvailable(t){let e=Uy[t];return e===void 0&&(t==="float32Filterable"&&(e=this.renderer.hasFeature("float32-filterable")),Uy[t]=e),e}_getWGSLMethod(t){return Ts[t]!==void 0&&this._include(t),Xl[t]}_include(t){const e=Ts[t];return e.build(this),this.currentFunctionNode!==null&&this.currentFunctionNode.includes.push(e),e}_getWGSLVertexCode(t){return`${this.getSignature()}
// directives
${t.directives}

// uniforms
${t.uniforms}

// varyings
${t.varyings}
var<private> varyings : VaryingsStruct;

// codes
${t.codes}

@vertex
fn main( ${t.attributes} ) -> VaryingsStruct {

	// vars
	${t.vars}

	// flow
	${t.flow}

	return varyings;

}
`}_getWGSLFragmentCode(t){return`${this.getSignature()}
// global
${Ev}

// uniforms
${t.uniforms}

// structs
${t.structs}

// codes
${t.codes}

@fragment
fn main( ${t.varyings} ) -> ${t.returnType} {

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}_getWGSLComputeCode(t,e){return`${this.getSignature()}
// directives
${t.directives}

// system
var<private> instanceIndex : u32;

// locals
${t.scopedArrays}

// uniforms
${t.uniforms}

// codes
${t.codes}

@compute @workgroup_size( ${e} )
fn main( ${t.attributes} ) {

	// system
	instanceIndex = id.x + id.y * numWorkgroups.x * u32(${e}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${e});

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}_getWGSLStruct(t,e){return`
struct ${t} {
${e}
};`}_getWGSLStructBinding(t,e,n,i=0,s=0){const o=t+"Struct";return`${this._getWGSLStruct(o,e)}
@binding( ${i} ) @group( ${s} )
var<${n}> ${t} : ${o};`}}class lG{constructor(t){this.backend=t}getCurrentDepthStencilFormat(t){let e;return t.depthTexture!==null?e=this.getTextureFormatGPU(t.depthTexture):t.depth&&t.stencil?e=C.Depth24PlusStencil8:t.depth&&(e=C.Depth24Plus),e}getTextureFormatGPU(t){return this.backend.get(t).format}getCurrentColorFormat(t){let e;return t.textures!==null?e=this.getTextureFormatGPU(t.textures[0]):e=this.getPreferredCanvasFormat(),e}getCurrentColorSpace(t){return t.textures!==null?t.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(t,e){if(t.isPoints)return va.PointList;if(t.isLineSegments||t.isMesh&&e.wireframe===!0)return va.LineList;if(t.isLine)return va.LineStrip;if(t.isMesh)return va.TriangleList}getSampleCount(t){let e=1;return t>1&&(e=Math.pow(2,Math.floor(Math.log2(t))),e===2&&(e=4)),e}getSampleCountRenderContext(t){return t.textures!==null?this.getSampleCount(t.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){return navigator.userAgent.includes("Quest")?C.BGRA8Unorm:navigator.gpu.getPreferredCanvasFormat()}}const cG=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),hG=new Map([[uM,["float16"]]]),uG=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class dG{constructor(t){this.backend=t}createAttribute(t,e){const n=this._getBufferAttribute(t),i=this.backend,s=i.get(n);let o=s.buffer;if(o===void 0){const a=i.device;let l=n.array;if(t.normalized===!1&&(l.constructor===Int16Array||l.constructor===Uint16Array)){const h=new Uint32Array(l.length);for(let u=0;u<l.length;u++)h[u]=l[u];l=h}if(n.array=l,(n.isStorageBufferAttribute||n.isStorageInstancedBufferAttribute)&&n.itemSize===3){l=new l.constructor(n.count*4);for(let h=0;h<n.count;h++)l.set(n.array.subarray(h*3,h*3+3),h*4);n.itemSize=4,n.array=l}const c=l.byteLength+(4-l.byteLength%4)%4;o=a.createBuffer({label:n.name,size:c,usage:e,mappedAtCreation:!0}),new l.constructor(o.getMappedRange()).set(l),o.unmap(),s.buffer=o}}updateAttribute(t){const e=this._getBufferAttribute(t),n=this.backend,i=n.device,s=n.get(e).buffer,o=e.array,a=e.updateRanges;if(a.length===0)i.queue.writeBuffer(s,0,o,0);else{for(let l=0,c=a.length;l<c;l++){const h=a[l];i.queue.writeBuffer(s,0,o,h.start*o.BYTES_PER_ELEMENT,h.count*o.BYTES_PER_ELEMENT)}e.clearUpdateRanges()}}createShaderVertexBuffers(t){const e=t.getAttributes(),n=new Map;for(let i=0;i<e.length;i++){const s=e[i],o=s.array.BYTES_PER_ELEMENT,a=this._getBufferAttribute(s);let l=n.get(a);if(l===void 0){let u,d;s.isInterleavedBufferAttribute===!0?(u=s.data.stride*o,d=s.data.isInstancedInterleavedBuffer?$h.Instance:$h.Vertex):(u=s.itemSize*o,d=s.isInstancedBufferAttribute?$h.Instance:$h.Vertex),s.normalized===!1&&(s.array.constructor===Int16Array||s.array.constructor===Uint16Array)&&(u=4),l={arrayStride:u,attributes:[],stepMode:d},n.set(a,l)}const c=this._getVertexFormat(s),h=s.isInterleavedBufferAttribute===!0?s.offset*o:0;l.attributes.push({shaderLocation:i,offset:h,format:c})}return Array.from(n.values())}destroyAttribute(t){const e=this.backend;e.get(this._getBufferAttribute(t)).buffer.destroy(),e.delete(t)}async getArrayBufferAsync(t){const e=this.backend,n=e.device,s=e.get(this._getBufferAttribute(t)).buffer,o=s.size,a=n.createBuffer({label:t.name,size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),l=n.createCommandEncoder({});l.copyBufferToBuffer(s,0,a,0,o),a.unmap();const c=l.finish();return n.queue.submit([c]),await a.mapAsync(GPUMapMode.READ),a.getMappedRange()}_getVertexFormat(t){const{itemSize:e,normalized:n}=t,i=t.array.constructor,s=t.constructor;let o;if(e==1)o=uG.get(i);else{const l=(hG.get(s)||cG.get(i))[n?1:0];if(l){const c=i.BYTES_PER_ELEMENT*e,u=Math.floor((c+3)/4)*4/i.BYTES_PER_ELEMENT;if(u%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");o=`${l}x${u}`}}return o||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),o}_getBufferAttribute(t){return t.isInterleavedBufferAttribute&&(t=t.data),t}}class fG{constructor(t){this.backend=t,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(t){const n=this.backend.device,i=[];let s=0;for(const o of t.bindings){const a={binding:s++,visibility:o.visibility};if(o.isUniformBuffer||o.isStorageBuffer){const l={};o.isStorageBuffer&&(l.type=o.access),a.buffer=l}else if(o.isSampler){const l={};o.texture.isDepthTexture&&o.texture.compareFunction!==null&&(l.type="comparison"),a.sampler=l}else if(o.isSampledTexture&&o.texture.isVideoTexture)a.externalTexture={};else if(o.isSampledTexture&&o.store){const l=this.backend.get(o.texture).texture.format,c=o.access;a.storageTexture={format:l,access:c}}else if(o.isSampledTexture){const l={};if(o.texture.isMultisampleRenderTargetTexture===!0&&(l.multisampled=!0),o.texture.isDepthTexture)l.sampleType=zl.Depth;else if(o.texture.isDataTexture||o.texture.isDataArrayTexture||o.texture.isData3DTexture){const c=o.texture.type;c===kn?l.sampleType=zl.SInt:c===gn?l.sampleType=zl.UInt:c===fi&&(this.backend.hasFeature("float32-filterable")?l.sampleType=zl.Float:l.sampleType=zl.UnfilterableFloat)}o.isSampledCubeTexture?l.viewDimension=yi.Cube:o.texture.isDataArrayTexture||o.texture.isCompressedArrayTexture?l.viewDimension=yi.TwoDArray:o.isSampledTexture3D&&(l.viewDimension=yi.ThreeD),a.texture=l}else console.error(`WebGPUBindingUtils: Unsupported binding "${o}".`);i.push(a)}return n.createBindGroupLayout({entries:i})}createBindings(t){const{backend:e,bindGroupLayoutCache:n}=this,i=e.get(t);let s=n.get(t.bindingsReference);s===void 0&&(s=this.createBindingsLayout(t),n.set(t.bindingsReference,s));const o=this.createBindGroup(t,s);i.layout=s,i.group=o}updateBinding(t){const e=this.backend,n=e.device,i=t.buffer,s=e.get(t).buffer;n.queue.writeBuffer(s,0,i,0)}createBindGroup(t,e){const n=this.backend,i=n.device;let s=0;const o=[];for(const a of t.bindings){if(a.isUniformBuffer){const l=n.get(a);if(l.buffer===void 0){const c=a.byteLength,h=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,u=i.createBuffer({label:"bindingBuffer_"+a.name,size:c,usage:h});l.buffer=u}o.push({binding:s,resource:{buffer:l.buffer}})}else if(a.isStorageBuffer){const l=n.get(a);if(l.buffer===void 0){const c=a.attribute;l.buffer=n.get(c).buffer}o.push({binding:s,resource:{buffer:l.buffer}})}else if(a.isSampler){const l=n.get(a.texture);o.push({binding:s,resource:l.sampler})}else if(a.isSampledTexture){const l=n.get(a.texture);let c;if(l.externalTexture!==void 0)c=i.importExternalTexture({source:l.externalTexture});else{const h=a.store?1:l.texture.mipLevelCount,u=`view-${l.texture.width}-${l.texture.height}-${h}`;if(c=l[u],c===void 0){const d=vO.All;let f;a.isSampledCubeTexture?f=yi.Cube:a.isSampledTexture3D?f=yi.ThreeD:a.texture.isDataArrayTexture||a.texture.isCompressedArrayTexture?f=yi.TwoDArray:f=yi.TwoD,c=l[u]=l.texture.createView({aspect:d,dimension:f,mipLevelCount:h})}}o.push({binding:s,resource:c})}s++}return i.createBindGroup({label:"bindGroup_"+t.name,layout:e,entries:o})}}class pG{constructor(t){this.backend=t}_getSampleCount(t){return this.backend.utils.getSampleCountRenderContext(t)}createRenderPipeline(t,e){const{object:n,material:i,geometry:s,pipeline:o}=t,{vertexProgram:a,fragmentProgram:l}=o,c=this.backend,h=c.device,u=c.utils,d=c.get(o),f=[];for(const S of t.getBindings()){const b=c.get(S);f.push(b.layout)}const p=c.attributeUtils.createShaderVertexBuffers(t);let x;i.transparent===!0&&i.blending!==Wa&&(x=this._getBlending(i));let m={};i.stencilWrite===!0&&(m={compare:this._getStencilCompare(i),failOp:this._getStencilOperation(i.stencilFail),depthFailOp:this._getStencilOperation(i.stencilZFail),passOp:this._getStencilOperation(i.stencilZPass)});const g=this._getColorWriteMask(i),y=[];if(t.context.textures!==null){const S=t.context.textures;for(let b=0;b<S.length;b++){const H=u.getTextureFormatGPU(S[b]);y.push({format:H,blend:x,writeMask:g})}}else{const S=u.getCurrentColorFormat(t.context);y.push({format:S,blend:x,writeMask:g})}const _=c.get(a).module,T=c.get(l).module,w=this._getPrimitiveState(n,s,i),A=this._getDepthCompare(i),v=u.getCurrentDepthStencilFormat(t.context),R=this._getSampleCount(t.context),W={label:`renderPipeline_${i.name||i.type}_${i.id}`,vertex:Object.assign({},_,{buffers:p}),fragment:Object.assign({},T,{targets:y}),primitive:w,depthStencil:{format:v,depthWriteEnabled:i.depthWrite,depthCompare:A,stencilFront:m,stencilBack:{},stencilReadMask:i.stencilFuncMask,stencilWriteMask:i.stencilWriteMask},multisample:{count:R,alphaToCoverageEnabled:i.alphaToCoverage&&R>1},layout:h.createPipelineLayout({bindGroupLayouts:f})};if(e===null)d.pipeline=h.createRenderPipeline(W);else{const S=new Promise(b=>{h.createRenderPipelineAsync(W).then(H=>{d.pipeline=H,b()})});e.push(S)}}createBundleEncoder(t){const e=this.backend,{utils:n,device:i}=e,s=n.getCurrentDepthStencilFormat(t),o=n.getCurrentColorFormat(t),a=this._getSampleCount(t),l={label:"renderBundleEncoder",colorFormats:[o],depthStencilFormat:s,sampleCount:a};return i.createRenderBundleEncoder(l)}createComputePipeline(t,e){const n=this.backend,i=n.device,s=n.get(t.computeProgram).module,o=n.get(t),a=[];for(const l of e){const c=n.get(l);a.push(c.layout)}o.pipeline=i.createComputePipeline({compute:s,layout:i.createPipelineLayout({bindGroupLayouts:a})})}_getBlending(t){let e,n;const i=t.blending,s=t.blendSrc,o=t.blendDst,a=t.blendEquation;if(i===PT){const l=t.blendSrcAlpha!==null?t.blendSrcAlpha:s,c=t.blendDstAlpha!==null?t.blendDstAlpha:o,h=t.blendEquationAlpha!==null?t.blendEquationAlpha:a;e={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(o),operation:this._getBlendOperation(a)},n={srcFactor:this._getBlendFactor(l),dstFactor:this._getBlendFactor(c),operation:this._getBlendOperation(h)}}else{const l=t.premultipliedAlpha,c=(h,u,d,f)=>{e={srcFactor:h,dstFactor:u,operation:kr.Add},n={srcFactor:d,dstFactor:f,operation:kr.Add}};if(l)switch(i){case mr:c($t.One,$t.OneMinusSrcAlpha,$t.One,$t.OneMinusSrcAlpha);break;case Cu:c($t.One,$t.One,$t.One,$t.One);break;case Pu:c($t.Zero,$t.OneMinusSrc,$t.Zero,$t.One);break;case Fu:c($t.Zero,$t.Src,$t.Zero,$t.SrcAlpha);break}else switch(i){case mr:c($t.SrcAlpha,$t.OneMinusSrcAlpha,$t.One,$t.OneMinusSrcAlpha);break;case Cu:c($t.SrcAlpha,$t.One,$t.SrcAlpha,$t.One);break;case Pu:c($t.Zero,$t.OneMinusSrc,$t.Zero,$t.One);break;case Fu:c($t.Zero,$t.Src,$t.Zero,$t.Src);break}}if(e!==void 0&&n!==void 0)return{color:e,alpha:n};console.error("THREE.WebGPURenderer: Invalid blending: ",i)}_getBlendFactor(t){let e;switch(t){case DT:e=$t.Zero;break;case LT:e=$t.One;break;case UT:e=$t.Src;break;case BT:e=$t.OneMinusSrc;break;case Iu:e=$t.SrcAlpha;break;case Du:e=$t.OneMinusSrcAlpha;break;case GT:e=$t.Dst;break;case kT:e=$t.OneMinusDstColor;break;case OT:e=$t.DstAlpha;break;case zT:e=$t.OneMinusDstAlpha;break;case VT:e=$t.SrcAlphaSaturated;break;case IB:e=$t.Constant;break;case DB:e=$t.OneMinusConstant;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",t)}return e}_getStencilCompare(t){let e;const n=t.stencilFunc;switch(n){case dI:e=pn.Never;break;case Dm:e=pn.Always;break;case fI:e=pn.Less;break;case mI:e=pn.LessEqual;break;case pI:e=pn.Equal;break;case _I:e=pn.GreaterEqual;break;case gI:e=pn.Greater;break;case xI:e=pn.NotEqual;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",n)}return e}_getStencilOperation(t){let e;switch(t){case $r:e=nr.Keep;break;case rI:e=nr.Zero;break;case oI:e=nr.Replace;break;case uI:e=nr.Invert;break;case aI:e=nr.IncrementClamp;break;case lI:e=nr.DecrementClamp;break;case cI:e=nr.IncrementWrap;break;case hI:e=nr.DecrementWrap;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",e)}return e}_getBlendOperation(t){let e;switch(t){case lr:e=kr.Add;break;case FT:e=kr.Subtract;break;case IT:e=kr.ReverseSubtract;break;case kF:e=kr.Min;break;case VF:e=kr.Max;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",t)}return e}_getPrimitiveState(t,e,n){const i={},s=this.backend.utils;switch(i.topology=s.getPrimitiveTopology(t,n),e.index!==null&&t.isLine===!0&&t.isLineSegments!==!0&&(i.stripIndexFormat=e.index.array instanceof Uint16Array?Ka.Uint16:Ka.Uint32),n.side){case rc:i.frontFace=np.CCW,i.cullMode=ip.Back;break;case zs:i.frontFace=np.CCW,i.cullMode=ip.Front;break;case Ru:i.frontFace=np.CCW,i.cullMode=ip.None;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",n.side);break}return i}_getColorWriteMask(t){return t.colorWrite===!0?Ty.All:Ty.None}_getDepthCompare(t){let e;if(t.depthTest===!1)e=pn.Always;else{const n=t.depthFunc;switch(n){case HT:e=pn.Never;break;case $T:e=pn.Always;break;case WT:e=pn.Less;break;case Lu:e=pn.LessEqual;break;case qT:e=pn.Equal;break;case XT:e=pn.GreaterEqual;break;case YT:e=pn.Greater;break;case jT:e=pn.NotEqual;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",n)}}return e}}class mG extends bv{constructor(t={}){super(t),this.isWebGPUBackend=!0,this.parameters.alpha=t.alpha===void 0?!0:t.alpha,this.parameters.requiredLimits=t.requiredLimits===void 0?{}:t.requiredLimits,this.trackTimestamp=t.trackTimestamp===!0,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new lG(this),this.attributeUtils=new dG(this),this.bindingUtils=new fG(this),this.pipelineUtils=new pG(this),this.textureUtils=new Jz(this),this.occludedResolveCache=new Map}async init(t){await super.init(t);const e=this.parameters;let n;if(e.device===void 0){const o={powerPreference:e.powerPreference},a=await navigator.gpu.requestAdapter(o);if(a===null)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const l=Object.values(qm),c=[];for(const u of l)a.features.has(u)&&c.push(u);const h={requiredFeatures:c,requiredLimits:e.requiredLimits};n=await a.requestDevice(h)}else n=e.device;const i=e.context!==void 0?e.context:t.domElement.getContext("webgpu");this.device=n,this.context=i;const s=e.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(qm.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:s}),this.updateSize()}get coordinateSystem(){return ho}async getArrayBufferAsync(t){return await this.attributeUtils.getArrayBufferAsync(t)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let t=this.defaultRenderPassdescriptor;if(t===null){const n=this.renderer;t={colorAttachments:[{view:null}],depthStencilAttachment:{view:this.textureUtils.getDepthBuffer(n.depth,n.stencil).createView()}};const i=t.colorAttachments[0];this.renderer.samples>0?i.view=this.colorBuffer.createView():i.resolveTarget=void 0,this.defaultRenderPassdescriptor=t}const e=t.colorAttachments[0];return this.renderer.samples>0?e.resolveTarget=this.context.getCurrentTexture().createView():e.view=this.context.getCurrentTexture().createView(),t}_getRenderPassDescriptor(t){const e=t.renderTarget,n=this.get(e);let i=n.descriptors;if(i===void 0||n.width!==e.width||n.height!==e.height||n.activeMipmapLevel!==e.activeMipmapLevel||n.samples!==e.samples){i={},n.descriptors=i;const a=()=>{e.removeEventListener("dispose",a),this.delete(e)};e.addEventListener("dispose",a)}const s=t.getCacheKey();let o=i[s];if(o===void 0){const a=t.textures,l=[];for(let u=0;u<a.length;u++){const d=this.get(a[u]),f=d.texture.createView({baseMipLevel:t.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:t.activeCubeFace,dimension:yi.TwoD});let p,x;d.msaaTexture!==void 0?(p=d.msaaTexture.createView(),x=f):(p=f,x=void 0),l.push({view:p,resolveTarget:x,loadOp:je.Load,storeOp:mn.Store})}const h={view:this.get(t.depthTexture).texture.createView()};o={colorAttachments:l,depthStencilAttachment:h},i[s]=o,n.width=e.width,n.height=e.height,n.samples=e.samples,n.activeMipmapLevel=e.activeMipmapLevel}return o}beginRender(t){const e=this.get(t),n=this.device,i=t.occlusionQueryCount;let s;i>0&&(e.currentOcclusionQuerySet&&e.currentOcclusionQuerySet.destroy(),e.currentOcclusionQueryBuffer&&e.currentOcclusionQueryBuffer.destroy(),e.currentOcclusionQuerySet=e.occlusionQuerySet,e.currentOcclusionQueryBuffer=e.occlusionQueryBuffer,e.currentOcclusionQueryObjects=e.occlusionQueryObjects,s=n.createQuerySet({type:"occlusion",count:i}),e.occlusionQuerySet=s,e.occlusionQueryIndex=0,e.occlusionQueryObjects=new Array(i),e.lastOcclusionObject=null);let o;t.textures===null?o=this._getDefaultRenderPassDescriptor():o=this._getRenderPassDescriptor(t),this.initTimestampQuery(t,o),o.occlusionQuerySet=s;const a=o.depthStencilAttachment;if(t.textures!==null){const h=o.colorAttachments;for(let u=0;u<h.length;u++){const d=h[u];t.clearColor?(d.clearValue=u===0?t.clearColorValue:{r:0,g:0,b:0,a:1},d.loadOp=je.Clear,d.storeOp=mn.Store):(d.loadOp=je.Load,d.storeOp=mn.Store)}}else{const h=o.colorAttachments[0];t.clearColor?(h.clearValue=t.clearColorValue,h.loadOp=je.Clear,h.storeOp=mn.Store):(h.loadOp=je.Load,h.storeOp=mn.Store)}t.depth&&(t.clearDepth?(a.depthClearValue=t.clearDepthValue,a.depthLoadOp=je.Clear,a.depthStoreOp=mn.Store):(a.depthLoadOp=je.Load,a.depthStoreOp=mn.Store)),t.stencil&&(t.clearStencil?(a.stencilClearValue=t.clearStencilValue,a.stencilLoadOp=je.Clear,a.stencilStoreOp=mn.Store):(a.stencilLoadOp=je.Load,a.stencilStoreOp=mn.Store));const l=n.createCommandEncoder({label:"renderContext_"+t.id}),c=l.beginRenderPass(o);if(e.descriptor=o,e.encoder=l,e.currentPass=c,e.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},e.renderBundles=[],t.viewport&&this.updateViewport(t),t.scissor){const{x:h,y:u,width:d,height:f}=t.scissorValue;c.setScissorRect(h,u,d,f)}}finishRender(t){const e=this.get(t),n=t.occlusionQueryCount;if(e.renderBundles.length>0&&e.currentPass.executeBundles(e.renderBundles),n>e.occlusionQueryIndex&&e.currentPass.endOcclusionQuery(),e.currentPass.end(),n>0){const i=n*8;let s=this.occludedResolveCache.get(i);s===void 0&&(s=this.device.createBuffer({size:i,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(i,s));const o=this.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});e.encoder.resolveQuerySet(e.occlusionQuerySet,0,n,s,0),e.encoder.copyBufferToBuffer(s,0,o,0,i),e.occlusionQueryBuffer=o,this.resolveOccludedAsync(t)}if(this.prepareTimestampBuffer(t,e.encoder),this.device.queue.submit([e.encoder.finish()]),t.textures!==null){const i=t.textures;for(let s=0;s<i.length;s++){const o=i[s];o.generateMipmaps===!0&&this.textureUtils.generateMipmaps(o)}}}isOccluded(t,e){const n=this.get(t);return n.occluded&&n.occluded.has(e)}async resolveOccludedAsync(t){const e=this.get(t),{currentOcclusionQueryBuffer:n,currentOcclusionQueryObjects:i}=e;if(n&&i){const s=new WeakSet;e.currentOcclusionQueryObjects=null,e.currentOcclusionQueryBuffer=null,await n.mapAsync(GPUMapMode.READ);const o=n.getMappedRange(),a=new BigUint64Array(o);for(let l=0;l<i.length;l++)a[l]!==BigInt(0)&&s.add(i[l]);n.destroy(),e.occluded=s}}updateViewport(t){const{currentPass:e}=this.get(t),{x:n,y:i,width:s,height:o,minDepth:a,maxDepth:l}=t.viewportValue;e.setViewport(n,i,s,o,a,l)}clear(t,e,n,i=null){const s=this.device,o=this.renderer;let a=[],l,c,h,u;if(t){const p=this.getClearColor();if(this.renderer.alpha===!0){const x=p.a;c={r:p.r*x,g:p.g*x,b:p.b*x,a:x}}else c={r:p.r,g:p.g,b:p.b,a:p.a}}if(i===null){h=o.depth,u=o.stencil;const p=this._getDefaultRenderPassDescriptor();if(t){a=p.colorAttachments;const x=a[0];x.clearValue=c,x.loadOp=je.Clear,x.storeOp=mn.Store}(h||u)&&(l=p.depthStencilAttachment)}else{if(h=i.depth,u=i.stencil,t)for(const p of i.textures){const x=this.get(p),m=x.texture.createView();let g,y;x.msaaTexture!==void 0?(g=x.msaaTexture.createView(),y=m):(g=m,y=void 0),a.push({view:g,resolveTarget:y,clearValue:c,loadOp:je.Clear,storeOp:mn.Store})}(h||u)&&(l={view:this.get(i.depthTexture).texture.createView()})}h&&(e?(l.depthLoadOp=je.Clear,l.depthClearValue=o.getClearDepth(),l.depthStoreOp=mn.Store):(l.depthLoadOp=je.Load,l.depthStoreOp=mn.Store)),u&&(n?(l.stencilLoadOp=je.Clear,l.stencilClearValue=o.getClearStencil(),l.stencilStoreOp=mn.Store):(l.stencilLoadOp=je.Load,l.stencilStoreOp=mn.Store));const d=s.createCommandEncoder({});d.beginRenderPass({colorAttachments:a,depthStencilAttachment:l}).end(),s.queue.submit([d.finish()])}beginCompute(t){const e=this.get(t),n={};this.initTimestampQuery(t,n),e.cmdEncoderGPU=this.device.createCommandEncoder(),e.passEncoderGPU=e.cmdEncoderGPU.beginComputePass(n)}compute(t,e,n,i){const{passEncoderGPU:s}=this.get(t),o=this.get(i).pipeline;s.setPipeline(o);for(let h=0,u=n.length;h<u;h++){const d=n[h],f=this.get(d);s.setBindGroup(h,f.group)}const a=this.device.limits.maxComputeWorkgroupsPerDimension,l=this.get(e);l.dispatchSize===void 0&&(l.dispatchSize={x:0,y:1,z:1});const{dispatchSize:c}=l;e.dispatchCount>a?(c.x=Math.min(e.dispatchCount,a),c.y=Math.ceil(e.dispatchCount/a)):c.x=e.dispatchCount,s.dispatchWorkgroups(c.x,c.y,c.z)}finishCompute(t){const e=this.get(t);e.passEncoderGPU.end(),this.prepareTimestampBuffer(t,e.cmdEncoderGPU),this.device.queue.submit([e.cmdEncoderGPU.finish()])}draw(t,e){const{object:n,context:i,pipeline:s}=t,o=t.getBindings(),a=this.get(i),l=this.get(s).pipeline,c=a.currentSets,h=a.currentPass,u=t.getDrawParameters();if(u===null)return;c.pipeline!==l&&(h.setPipeline(l),c.pipeline=l);const d=c.bindingGroups;for(let m=0,g=o.length;m<g;m++){const y=o[m],_=this.get(y);d[y.index]!==y.id&&(h.setBindGroup(y.index,_.group),d[y.index]=y.id)}const f=t.getIndex(),p=f!==null;if(p===!0&&c.index!==f){const m=this.get(f).buffer,g=f.array instanceof Uint16Array?Ka.Uint16:Ka.Uint32;h.setIndexBuffer(m,g),c.index=f}const x=t.getVertexBuffers();for(let m=0,g=x.length;m<g;m++){const y=x[m];if(c.attributes[m]!==y){const _=this.get(y).buffer;h.setVertexBuffer(m,_),c.attributes[m]=y}}if(a.occlusionQuerySet!==void 0){const m=a.lastOcclusionObject;m!==n&&(m!==null&&m.occlusionTest===!0&&(h.endOcclusionQuery(),a.occlusionQueryIndex++),n.occlusionTest===!0&&(h.beginOcclusionQuery(a.occlusionQueryIndex),a.occlusionQueryObjects[a.occlusionQueryIndex]=n),a.lastOcclusionObject=n)}if(n.isBatchedMesh===!0){const m=n._multiDrawStarts,g=n._multiDrawCounts,y=n._multiDrawCount,_=n._multiDrawInstances,T=p?f.array.BYTES_PER_ELEMENT:1;for(let w=0;w<y;w++){const A=_?_[w]:1,v=A>1?0:w;h.drawIndexed(g[w],A,m[w]/T,0,v)}}else if(p===!0){const{vertexCount:m,instanceCount:g,firstVertex:y}=u;h.drawIndexed(m,g,y,0,0),e.update(n,m,g)}else{const{vertexCount:m,instanceCount:g,firstVertex:y}=u;h.draw(m,g,y,0),e.update(n,m,g)}}needsRenderUpdate(t){const e=this.get(t),{object:n,material:i}=t,s=this.utils,o=s.getSampleCountRenderContext(t.context),a=s.getCurrentColorSpace(t.context),l=s.getCurrentColorFormat(t.context),c=s.getCurrentDepthStencilFormat(t.context),h=s.getPrimitiveTopology(n,i);let u=!1;return(e.material!==i||e.materialVersion!==i.version||e.transparent!==i.transparent||e.blending!==i.blending||e.premultipliedAlpha!==i.premultipliedAlpha||e.blendSrc!==i.blendSrc||e.blendDst!==i.blendDst||e.blendEquation!==i.blendEquation||e.blendSrcAlpha!==i.blendSrcAlpha||e.blendDstAlpha!==i.blendDstAlpha||e.blendEquationAlpha!==i.blendEquationAlpha||e.colorWrite!==i.colorWrite||e.depthWrite!==i.depthWrite||e.depthTest!==i.depthTest||e.depthFunc!==i.depthFunc||e.stencilWrite!==i.stencilWrite||e.stencilFunc!==i.stencilFunc||e.stencilFail!==i.stencilFail||e.stencilZFail!==i.stencilZFail||e.stencilZPass!==i.stencilZPass||e.stencilFuncMask!==i.stencilFuncMask||e.stencilWriteMask!==i.stencilWriteMask||e.side!==i.side||e.alphaToCoverage!==i.alphaToCoverage||e.sampleCount!==o||e.colorSpace!==a||e.colorFormat!==l||e.depthStencilFormat!==c||e.primitiveTopology!==h||e.clippingContextCacheKey!==t.clippingContext.cacheKey)&&(e.material=i,e.materialVersion=i.version,e.transparent=i.transparent,e.blending=i.blending,e.premultipliedAlpha=i.premultipliedAlpha,e.blendSrc=i.blendSrc,e.blendDst=i.blendDst,e.blendEquation=i.blendEquation,e.blendSrcAlpha=i.blendSrcAlpha,e.blendDstAlpha=i.blendDstAlpha,e.blendEquationAlpha=i.blendEquationAlpha,e.colorWrite=i.colorWrite,e.depthWrite=i.depthWrite,e.depthTest=i.depthTest,e.depthFunc=i.depthFunc,e.stencilWrite=i.stencilWrite,e.stencilFunc=i.stencilFunc,e.stencilFail=i.stencilFail,e.stencilZFail=i.stencilZFail,e.stencilZPass=i.stencilZPass,e.stencilFuncMask=i.stencilFuncMask,e.stencilWriteMask=i.stencilWriteMask,e.side=i.side,e.alphaToCoverage=i.alphaToCoverage,e.sampleCount=o,e.colorSpace=a,e.colorFormat=l,e.depthStencilFormat=c,e.primitiveTopology=h,e.clippingContextCacheKey=t.clippingContext.cacheKey,u=!0),u}getRenderCacheKey(t){const{object:e,material:n}=t,i=this.utils,s=t.context;return[n.transparent,n.blending,n.premultipliedAlpha,n.blendSrc,n.blendDst,n.blendEquation,n.blendSrcAlpha,n.blendDstAlpha,n.blendEquationAlpha,n.colorWrite,n.depthWrite,n.depthTest,n.depthFunc,n.stencilWrite,n.stencilFunc,n.stencilFail,n.stencilZFail,n.stencilZPass,n.stencilFuncMask,n.stencilWriteMask,n.side,i.getSampleCountRenderContext(s),i.getCurrentColorSpace(s),i.getCurrentColorFormat(s),i.getCurrentDepthStencilFormat(s),i.getPrimitiveTopology(e,n),t.clippingContext.cacheKey].join()}createSampler(t){this.textureUtils.createSampler(t)}destroySampler(t){this.textureUtils.destroySampler(t)}createDefaultTexture(t){this.textureUtils.createDefaultTexture(t)}createTexture(t,e){this.textureUtils.createTexture(t,e)}updateTexture(t,e){this.textureUtils.updateTexture(t,e)}generateMipmaps(t){this.textureUtils.generateMipmaps(t)}destroyTexture(t){this.textureUtils.destroyTexture(t)}copyTextureToBuffer(t,e,n,i,s,o){return this.textureUtils.copyTextureToBuffer(t,e,n,i,s,o)}initTimestampQuery(t,e){if(!this.trackTimestamp)return;const n=this.get(t);if(!n.timeStampQuerySet){const i=this.device.createQuerySet({type:"timestamp",count:2});Object.assign(e,{timestampWrites:{querySet:i,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}}),n.timeStampQuerySet=i}}prepareTimestampBuffer(t,e){if(!this.trackTimestamp)return;const n=this.get(t),i=2*BigInt64Array.BYTES_PER_ELEMENT;n.currentTimestampQueryBuffers===void 0&&(n.currentTimestampQueryBuffers={resolveBuffer:this.device.createBuffer({label:"timestamp resolve buffer",size:i,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),resultBuffer:this.device.createBuffer({label:"timestamp result buffer",size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),isMappingPending:!1});const{resolveBuffer:s,resultBuffer:o,isMappingPending:a}=n.currentTimestampQueryBuffers;a!==!0&&(e.resolveQuerySet(n.timeStampQuerySet,0,2,s,0),e.copyBufferToBuffer(s,0,o,0,i))}async resolveTimestampAsync(t,e="render"){if(!this.trackTimestamp)return;const n=this.get(t);if(n.currentTimestampQueryBuffers===void 0)return;const{resultBuffer:i,isMappingPending:s}=n.currentTimestampQueryBuffers;s!==!0&&(n.currentTimestampQueryBuffers.isMappingPending=!0,i.mapAsync(GPUMapMode.READ).then(()=>{const o=new BigUint64Array(i.getMappedRange()),a=Number(o[1]-o[0])/1e6;this.renderer.info.updateTimestamp(e,a),i.unmap(),n.currentTimestampQueryBuffers.isMappingPending=!1}))}createNodeBuilder(t,e){return new aG(t,e)}createProgram(t){const e=this.get(t);e.module={module:this.device.createShaderModule({code:t.code,label:t.stage}),entryPoint:"main"}}destroyProgram(t){this.delete(t)}createRenderPipeline(t,e){this.pipelineUtils.createRenderPipeline(t,e)}createComputePipeline(t,e){this.pipelineUtils.createComputePipeline(t,e)}beginBundle(t){const e=this.get(t);e._currentPass=e.currentPass,e._currentSets=e.currentSets,e.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},e.currentPass=this.pipelineUtils.createBundleEncoder(t)}finishBundle(t,e){const n=this.get(t),s=n.currentPass.finish();this.get(e).bundleGPU=s,n.currentSets=n._currentSets,n.currentPass=n._currentPass}addBundle(t,e){this.get(t).renderBundles.push(this.get(e).bundleGPU)}createBindings(t){this.bindingUtils.createBindings(t)}updateBindings(t){this.bindingUtils.createBindings(t)}updateBinding(t){this.bindingUtils.updateBinding(t)}createIndexAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(t){this.attributeUtils.updateAttribute(t)}destroyAttribute(t){this.attributeUtils.destroyAttribute(t)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(t){return this.device.features.has(t)}copyTextureToTexture(t,e,n=null,i=null,s=0){let o=0,a=0,l=0,c=0,h=0,u=0,d=t.image.width,f=t.image.height;n!==null&&(c=n.x,h=n.y,u=n.z||0,d=n.width,f=n.height),i!==null&&(o=i.x,a=i.y,l=i.z||0);const p=this.device.createCommandEncoder({label:"copyTextureToTexture_"+t.id+"_"+e.id}),x=this.get(t).texture,m=this.get(e).texture;p.copyTextureToTexture({texture:x,mipLevel:s,origin:{x:c,y:h,z:u}},{texture:m,mipLevel:s,origin:{x:o,y:a,z:l}},[d,f,1]),this.device.queue.submit([p.finish()])}copyFramebufferToTexture(t,e,n){const i=this.get(e),{encoder:s,descriptor:o}=i;let a=null;e.renderTarget?t.isDepthTexture?a=this.get(e.depthTexture).texture:a=this.get(e.textures[0]).texture:t.isDepthTexture?a=this.textureUtils.getDepthBuffer(e.depth,e.stencil):a=this.context.getCurrentTexture();const l=this.get(t).texture;if(a.format!==l.format){console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",a.format,l.format);return}i.currentPass.end(),s.copyTextureToTexture({texture:a,origin:{x:n.x,y:n.y,z:0}},{texture:l},[n.z,n.w]),t.generateMipmaps&&this.textureUtils.generateMipmaps(t);for(let c=0;c<o.colorAttachments.length;c++)o.colorAttachments[c].loadOp=je.Load;e.depth&&(o.depthStencilAttachment.depthLoadOp=je.Load),e.stencil&&(o.depthStencilAttachment.stencilLoadOp=je.Load),i.currentPass=s.beginRenderPass(o),i.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null}}}class gG extends _M{constructor(t,e,n,i,s,o){super(t,e,n,i,s,o),this.iesMap=null}copy(t,e){return super.copy(t,e),this.iesMap=t.iesMap,this}}class xG extends xv{constructor(){super(),this.addLight(QO,_D),this.addLight(JO,SD),this.addLight(tz,MD),this.addLight(pv,_M),this.addLight(nz,TD),this.addLight(iz,mD),this.addLight(sz,bD),this.addLight(ez,gG),this.addToneMapping(GO,$F),this.addToneMapping(kO,WF),this.addToneMapping(VO,qF),this.addToneMapping($O,XF),this.addToneMapping(YO,YF),this.addToneMapping(jO,jF),this.addColorSpace(zO,zm(Mi,Bt)),this.addColorSpace(OO,zm(Bt,Mi))}}class _G extends bz{constructor(t={}){let e;t.forceWebGL?e=Dy:(e=mG,t.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new Dy(t)));const n=new e(t);super(n,t),this.nodes.library=new xG,this.isWebGPURenderer=!0}}const yG=()=>{const r=yc();r.position.set(4,2,5).multiplyScalar(.7);const t=_c();t.background=new ae(2103577);const e=new wB({transparent:!0,depthWrite:!1,blending:dp}),n=Pn(.08);e.scaleNode=_h(0,1).mul(n);const i=wT(),s=_h(0,1),o=s.pow(1.5).mul(5).toVar(),a=3,c=_h(0,a).floor().mul(T2.div(a)).add(i.mul(s.oneMinus())),h=se(sT(c),0,Mg(c)).mul(o),u=_h(se(-1),se(1)).pow(3).mul(s).add(.2);e.positionNode=h.add(u);const d=Pn(lm("#ffa575")),f=Pn(lm("#311599")),p=ys(d,f,s.oneMinus().pow(2).oneMinus()),x=re(.1).div(wc().sub(.5).length()).sub(.2);e.colorNode=so(p,x);const m=new yS(new _o(1,1),e,2e4);t.add(m);const y=Tc({title:"Particulas with TSL",description:"Velit velit anim Lorem deserunt cillum reprehenderit qui pariatur. Eu proident culpa commodo proident veniam aliquip sunt. Occaecat sint ex laborum ullamco aliquip."}),_=new _G({antialias:!0,canvas:y,alpha:!0});_.setAnimationLoop(w);const T=Ku(r,_);T.enableZoom=!1;async function w(){Sc(_,r),T.update(),_.render(t,r)}},SG=()=>{const t=Tc({title:"Wireframe cube (template)",description:"Sit enim deserunt ex ut minim et. Ut esse cillum esse labore adipisicing amet pariatur ad. Incididunt dolor nisi sit fugiat fugiat ex proident velit qui aute aliquip culpa consequat. Commodo dolor Lorem veniam consectetur. Proident et cupidatat veniam tempor."}),e=ju(t),n=yc(),i=_c(),s=new Rn(new xc(1,1,1),new gc({color:16711680,wireframe:!0}));i.add(s);function o(){Sc(e,n),s.rotation.x+=.01,s.rotation.y+=.01,e.render(i,n),requestAnimationFrame(o)}o()};function TG(){const t=Tc({title:"Torus made with ThreeJS",description:"Sit enim deserunt ex ut minim et. Ut esse cillum esse labore adipisicing amet pariatur ad. Incididunt dolor nisi sit fugiat fugiat ex proident velit qui aute aliquip culpa consequat. Commodo dolor Lorem veniam consectetur. Proident et cupidatat veniam tempor."}),e=_c(),n=yc(),i=ju(t),s=Ku(n,i);s.enableZoom=!1;const o=new Rn(new hg(.7),new gc({color:65535,wireframe:!0}));e.add(o);function a(){Sc(i,n),o.rotation.x+=.01,o.rotation.y-=.01,requestAnimationFrame(a),i.render(e,n),s.update()}a()}yG();SR();TR();SG();TG();
