(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function e(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(i){if(i.ep)return;i.ep=!0;const s=e(i);fetch(i.href,s)}})();/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Gg="169",Oa={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},wa={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},f1=0,g0=1,p1=2,kg=1,m1=2,Ps=3,Cr=0,ii=1,Wi=2,wr=0,za=1,Zp=2,x0=3,y0=4,g1=5,oo=100,x1=101,y1=102,_1=103,M1=104,S1=200,T1=201,v1=202,b1=203,Qp=204,Jp=205,E1=206,A1=207,w1=208,N1=209,R1=210,C1=211,P1=212,F1=213,I1=214,tm=0,em=1,nm=2,Za=3,im=4,sm=5,rm=6,om=7,HM=0,L1=1,D1=2,Nr=0,U1=1,B1=2,O1=3,z1=4,G1=5,k1=6,V1=7,$M=300,Qa=301,Ja=302,am=303,lm=304,_d=306,cm=1e3,co=1001,hm=1002,ti=1003,H1=1004,rh=1005,qi=1006,rf=1007,ho=1008,Xs=1009,WM=1010,qM=1011,Mc=1012,Vg=1013,xo=1014,cs=1015,Lc=1016,Hg=1017,$g=1018,tl=1020,XM=35902,YM=1021,jM=1022,ji=1023,KM=1024,ZM=1025,Ga=1026,el=1027,Wg=1028,qg=1029,QM=1030,Xg=1031,Yg=1033,xu=33776,yu=33777,_u=33778,Mu=33779,um=35840,dm=35841,fm=35842,pm=35843,mm=36196,gm=37492,xm=37496,ym=37808,_m=37809,Mm=37810,Sm=37811,Tm=37812,vm=37813,bm=37814,Em=37815,Am=37816,wm=37817,Nm=37818,Rm=37819,Cm=37820,Pm=37821,Su=36492,Fm=36494,Im=36495,JM=36283,Lm=36284,Dm=36285,Um=36286,$1=3200,W1=3201,jg=0,q1=1,Tr="",os="srgb",Br="srgb-linear",Kg="display-p3",Md="display-p3-linear",zu="linear",Be="srgb",Gu="rec709",ku="p3",Oo=7680,_0=519,X1=512,Y1=513,j1=514,tS=515,K1=516,Z1=517,Q1=518,J1=519,M0=35044,S0="300 es",Gs=2e3,Vu=2001;let Co=class{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const i=this._listeners[t];if(i!==void 0){const s=i.indexOf(e);s!==-1&&i.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,t);t.target=null}}};const An=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let T0=1234567;const uc=Math.PI/180,Sc=180/Math.PI;function fl(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(An[r&255]+An[r>>8&255]+An[r>>16&255]+An[r>>24&255]+"-"+An[t&255]+An[t>>8&255]+"-"+An[t>>16&15|64]+An[t>>24&255]+"-"+An[e&63|128]+An[e>>8&255]+"-"+An[e>>16&255]+An[e>>24&255]+An[n&255]+An[n>>8&255]+An[n>>16&255]+An[n>>24&255]).toLowerCase()}function Ln(r,t,e){return Math.max(t,Math.min(e,r))}function Zg(r,t){return(r%t+t)%t}function tE(r,t,e,n,i){return n+(r-t)*(i-n)/(e-t)}function eE(r,t,e){return r!==t?(e-r)/(t-r):0}function dc(r,t,e){return(1-e)*r+e*t}function nE(r,t,e,n){return dc(r,t,1-Math.exp(-e*n))}function iE(r,t=1){return t-Math.abs(Zg(r,t*2)-t)}function sE(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function rE(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function oE(r,t){return r+Math.floor(Math.random()*(t-r+1))}function aE(r,t){return r+Math.random()*(t-r)}function lE(r){return r*(.5-Math.random())}function cE(r){r!==void 0&&(T0=r);let t=T0+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function hE(r){return r*uc}function uE(r){return r*Sc}function dE(r){return(r&r-1)===0&&r!==0}function fE(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function pE(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function mE(r,t,e,n,i){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+n)/2),h=o((t+n)/2),u=s((t-n)/2),d=o((t-n)/2),f=s((n-t)/2),p=o((n-t)/2);switch(i){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*p,l*f,a*c);break;case"YXY":r.set(l*f,a*h,l*p,a*c);break;case"ZYZ":r.set(l*p,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function Ta(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function $n(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const gE={DEG2RAD:uc,RAD2DEG:Sc,generateUUID:fl,clamp:Ln,euclideanModulo:Zg,mapLinear:tE,inverseLerp:eE,lerp:dc,damp:nE,pingpong:iE,smoothstep:sE,smootherstep:rE,randInt:oE,randFloat:aE,randFloatSpread:lE,seededRandom:cE,degToRad:hE,radToDeg:uE,isPowerOfTwo:dE,ceilPowerOfTwo:fE,floorPowerOfTwo:pE,setQuaternionFromProperEuler:mE,normalize:$n,denormalize:Ta};let ee=class eS{constructor(t=0,e=0){eS.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Ln(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*n-o*i+t.x,this.y=s*i+o*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},se=class nS{constructor(t,e,n,i,s,o,a,l,c){nS.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c)}set(t,e,n,i,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=i,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=n,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],f=n[5],p=n[8],x=i[0],m=i[3],g=i[6],_=i[1],y=i[4],S=i[7],w=i[2],A=i[5],T=i[8];return s[0]=o*x+a*_+l*w,s[3]=o*m+a*y+l*A,s[6]=o*g+a*S+l*T,s[1]=c*x+h*_+u*w,s[4]=c*m+h*y+u*A,s[7]=c*g+h*S+u*T,s[2]=d*x+f*_+p*w,s[5]=d*m+f*y+p*A,s[8]=d*g+f*S+p*T,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-n*s*h+n*a*l+i*s*c-i*o*l}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,p=e*u+n*d+i*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/p;return t[0]=u*x,t[1]=(i*c-h*n)*x,t[2]=(a*n-i*o)*x,t[3]=d*x,t[4]=(h*e-i*l)*x,t[5]=(i*s-a*e)*x,t[6]=f*x,t[7]=(n*l-c*e)*x,t[8]=(o*e-n*s)*x,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*o+c*a)+o+t,-i*c,i*l,-i*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(of.makeScale(t,e)),this}rotate(t){return this.premultiply(of.makeRotation(-t)),this}translate(t,e){return this.premultiply(of.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}};const of=new se;function iS(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function Hu(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function xE(){const r=Hu("canvas");return r.style.display="block",r}const v0={};function Tu(r){r in v0||(v0[r]=!0,console.warn(r))}function yE(r,t,e){return new Promise(function(n,i){function s(){switch(r.clientWaitSync(t,r.SYNC_FLUSH_COMMANDS_BIT,0)){case r.WAIT_FAILED:i();break;case r.TIMEOUT_EXPIRED:setTimeout(s,e);break;default:n()}}setTimeout(s,e)})}function _E(r){const t=r.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function ME(r){const t=r.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const b0=new se().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),E0=new se().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),El={[Br]:{transfer:zu,primaries:Gu,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r,fromReference:r=>r},[os]:{transfer:Be,primaries:Gu,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r.convertSRGBToLinear(),fromReference:r=>r.convertLinearToSRGB()},[Md]:{transfer:zu,primaries:ku,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.applyMatrix3(E0),fromReference:r=>r.applyMatrix3(b0)},[Kg]:{transfer:Be,primaries:ku,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.convertSRGBToLinear().applyMatrix3(E0),fromReference:r=>r.applyMatrix3(b0).convertLinearToSRGB()}},SE=new Set([Br,Md]),be={enabled:!0,_workingColorSpace:Br,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(r){if(!SE.has(r))throw new Error(`Unsupported working color space, "${r}".`);this._workingColorSpace=r},convert:function(r,t,e){if(this.enabled===!1||t===e||!t||!e)return r;const n=El[t].toReference,i=El[e].fromReference;return i(n(r))},fromWorkingColorSpace:function(r,t){return this.convert(r,this._workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this._workingColorSpace)},getPrimaries:function(r){return El[r].primaries},getTransfer:function(r){return r===Tr?zu:El[r].transfer},getLuminanceCoefficients:function(r,t=this._workingColorSpace){return r.fromArray(El[t].luminanceCoefficients)}};function ka(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function af(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let zo,TE=class{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{zo===void 0&&(zo=Hu("canvas")),zo.width=t.width,zo.height=t.height;const n=zo.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=zo}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=Hu("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),s=i.data;for(let o=0;o<s.length;o++)s[o]=ka(s[o]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(ka(e[n]/255)*255):e[n]=ka(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}},vE=0,sS=class{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:vE++}),this.uuid=fl(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?s.push(lf(i[o].image)):s.push(lf(i[o]))}else s=lf(i);n.url=s}return e||(t.images[this.uuid]=n),n}};function lf(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?TE.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let bE=0,is=class vu extends Co{constructor(t=vu.DEFAULT_IMAGE,e=vu.DEFAULT_MAPPING,n=co,i=co,s=qi,o=ho,a=ji,l=Xs,c=vu.DEFAULT_ANISOTROPY,h=Tr){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:bE++}),this.uuid=fl(),this.name="",this.source=new sS(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new ee(0,0),this.repeat=new ee(1,1),this.center=new ee(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new se,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==$M)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case cm:t.x=t.x-Math.floor(t.x);break;case co:t.x=t.x<0?0:1;break;case hm:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case cm:t.y=t.y-Math.floor(t.y);break;case co:t.y=t.y<0?0:1;break;case hm:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}};is.DEFAULT_IMAGE=null;is.DEFAULT_MAPPING=$M;is.DEFAULT_ANISOTROPY=1;let on=class rS{constructor(t=0,e=0,n=0,i=1){rS.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*e+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*e+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*e+o[7]*n+o[11]*i+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,s;const l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],p=l[9],x=l[2],m=l[6],g=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-x)<.01&&Math.abs(p-m)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+x)<.1&&Math.abs(p+m)<.1&&Math.abs(c+f+g-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const y=(c+1)/2,S=(f+1)/2,w=(g+1)/2,A=(h+d)/4,T=(u+x)/4,R=(p+m)/4;return y>S&&y>w?y<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(y),i=A/n,s=T/n):S>w?S<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(S),n=A/i,s=R/i):w<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(w),n=T/s,i=R/s),this.set(n,i,s,e),this}let _=Math.sqrt((m-p)*(m-p)+(u-x)*(u-x)+(d-h)*(d-h));return Math.abs(_)<.001&&(_=1),this.x=(m-p)/_,this.y=(u-x)/_,this.z=(d-h)/_,this.w=Math.acos((c+f+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}},EE=class extends Co{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new on(0,0,t,e),this.scissorTest=!1,this.viewport=new on(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:qi,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const s=new is(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let n=0,i=t.textures.length;n<i;n++)this.textures[n]=t.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new sS(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}},yo=class extends EE{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}},oS=class extends is{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=ti,this.minFilter=ti,this.wrapR=co,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}};class AE extends is{constructor(t=null,e=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=ti,this.minFilter=ti,this.wrapR=co,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}let _o=class{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,s,o,a){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[o+0],f=s[o+1],p=s[o+2],x=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=x;return}if(u!==x||l!==d||c!==f||h!==p){let m=1-a;const g=l*d+c*f+h*p+u*x,_=g>=0?1:-1,y=1-g*g;if(y>Number.EPSILON){const w=Math.sqrt(y),A=Math.atan2(w,g*_);m=Math.sin(m*A)/w,a=Math.sin(a*A)/w}const S=a*_;if(l=l*m+d*S,c=c*m+f*S,h=h*m+p*S,u=u*m+x*S,m===1-a){const w=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=w,c*=w,h*=w,u*=w}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,n,i,s,o){const a=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[o],d=s[o+1],f=s[o+2],p=s[o+3];return t[e]=a*p+h*u+l*f-c*d,t[e+1]=l*p+h*d+c*u-a*f,t[e+2]=c*p+h*f+a*d-l*u,t[e+3]=h*p-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(n/2),h=a(i/2),u=a(s/2),d=l(n/2),f=l(i/2),p=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"YXZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"ZXY":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"ZYX":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"YZX":this._x=d*h*u+c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u-d*f*p;break;case"XZY":this._x=d*h*u-c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=n+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-i)*f}else if(n>a&&n>u){const f=2*Math.sqrt(1+n-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(i+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-n-u);this._w=(s-c)/f,this._x=(i+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-n-a);this._w=(o-i)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Ln(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=n*h+o*a+i*c-s*l,this._y=i*h+o*l+s*a-n*c,this._z=s*h+o*c+n*l-i*a,this._w=o*h-n*a-i*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*t._w+n*t._x+i*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*n+e*this._x,this._y=f*i+e*this._y,this._z=f*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},U=class aS{constructor(t=0,e=0,n=0){aS.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(A0.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(A0.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*i,this.y=s[1]*e+s[4]*n+s[7]*i,this.z=s[2]*e+s[5]*n+s[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=t.elements,o=1/(s[3]*e+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*e+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*e+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=2*(o*i-a*n),h=2*(a*e-s*i),u=2*(s*n-o*e);return this.x=e+l*c+o*u-a*h,this.y=n+l*h+a*c-s*u,this.z=i+l*u+s*h-o*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i,this.y=s[1]*e+s[5]*n+s[9]*i,this.z=s[2]*e+s[6]*n+s[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=i*l-s*a,this.y=s*o-n*l,this.z=n*a-i*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return cf.copy(this).projectOnVector(t),this.sub(cf)}reflect(t){return this.sub(cf.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Ln(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const cf=new U,A0=new _o;let Po=class{constructor(t=new U(1/0,1/0,1/0),e=new U(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(Ui.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(Ui.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Ui.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const s=n.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let o=0,a=s.count;o<a;o++)t.isMesh===!0?t.getVertexPosition(o,Ui):Ui.fromBufferAttribute(s,o),Ui.applyMatrix4(t.matrixWorld),this.expandByPoint(Ui);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),oh.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),oh.copy(n.boundingBox)),oh.applyMatrix4(t.matrixWorld),this.union(oh)}const i=t.children;for(let s=0,o=i.length;s<o;s++)this.expandByObject(i[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Ui),Ui.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Al),ah.subVectors(this.max,Al),Go.subVectors(t.a,Al),ko.subVectors(t.b,Al),Vo.subVectors(t.c,Al),ir.subVectors(ko,Go),sr.subVectors(Vo,ko),kr.subVectors(Go,Vo);let e=[0,-ir.z,ir.y,0,-sr.z,sr.y,0,-kr.z,kr.y,ir.z,0,-ir.x,sr.z,0,-sr.x,kr.z,0,-kr.x,-ir.y,ir.x,0,-sr.y,sr.x,0,-kr.y,kr.x,0];return!hf(e,Go,ko,Vo,ah)||(e=[1,0,0,0,1,0,0,0,1],!hf(e,Go,ko,Vo,ah))?!1:(lh.crossVectors(ir,sr),e=[lh.x,lh.y,lh.z],hf(e,Go,ko,Vo,ah))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Ui).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Ui).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(Ms[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Ms[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Ms[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Ms[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Ms[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Ms[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Ms[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Ms[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Ms),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}};const Ms=[new U,new U,new U,new U,new U,new U,new U,new U],Ui=new U,oh=new Po,Go=new U,ko=new U,Vo=new U,ir=new U,sr=new U,kr=new U,Al=new U,ah=new U,lh=new U,Vr=new U;function hf(r,t,e,n,i){for(let s=0,o=r.length-3;s<=o;s+=3){Vr.fromArray(r,s);const a=i.x*Math.abs(Vr.x)+i.y*Math.abs(Vr.y)+i.z*Math.abs(Vr.z),l=t.dot(Vr),c=e.dot(Vr),h=n.dot(Vr);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const wE=new Po,wl=new U,uf=new U;let pl=class{constructor(t=new U,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):wE.setFromPoints(t).getCenter(n);let i=0;for(let s=0,o=t.length;s<o;s++)i=Math.max(i,n.distanceToSquared(t[s]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;wl.subVectors(t,this.center);const e=wl.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),i=(n-this.radius)*.5;this.center.addScaledVector(wl,i/n),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(uf.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(wl.copy(t.center).add(uf)),this.expandByPoint(wl.copy(t.center).sub(uf))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}};const Ss=new U,df=new U,ch=new U,rr=new U,ff=new U,hh=new U,pf=new U;let Qg=class{constructor(t=new U,e=new U(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Ss)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Ss.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Ss.copy(this.origin).addScaledVector(this.direction,e),Ss.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){df.copy(t).add(e).multiplyScalar(.5),ch.copy(e).sub(t).normalize(),rr.copy(this.origin).sub(df);const s=t.distanceTo(e)*.5,o=-this.direction.dot(ch),a=rr.dot(this.direction),l=-rr.dot(ch),c=rr.lengthSq(),h=Math.abs(1-o*o);let u,d,f,p;if(h>0)if(u=o*l-a,d=o*a-l,p=s*h,u>=0)if(d>=-p)if(d<=p){const x=1/h;u*=x,d*=x,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-p?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c):d<=p?(u=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,u),i&&i.copy(df).addScaledVector(ch,d),f}intersectSphere(t,e){Ss.subVectors(t.center,this.origin);const n=Ss.dot(this.direction),i=Ss.dot(Ss)-n*n,s=t.radius*t.radius;if(i>s)return null;const o=Math.sqrt(s-i),a=n-o,l=n+o;return l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(n=(t.min.x-d.x)*c,i=(t.max.x-d.x)*c):(n=(t.max.x-d.x)*c,i=(t.min.x-d.x)*c),h>=0?(s=(t.min.y-d.y)*h,o=(t.max.y-d.y)*h):(s=(t.max.y-d.y)*h,o=(t.min.y-d.y)*h),n>o||s>i||((s>n||isNaN(n))&&(n=s),(o<i||isNaN(i))&&(i=o),u>=0?(a=(t.min.z-d.z)*u,l=(t.max.z-d.z)*u):(a=(t.max.z-d.z)*u,l=(t.min.z-d.z)*u),n>l||a>i)||((a>n||n!==n)&&(n=a),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,Ss)!==null}intersectTriangle(t,e,n,i,s){ff.subVectors(e,t),hh.subVectors(n,t),pf.crossVectors(ff,hh);let o=this.direction.dot(pf),a;if(o>0){if(i)return null;a=1}else if(o<0)a=-1,o=-o;else return null;rr.subVectors(this.origin,t);const l=a*this.direction.dot(hh.crossVectors(rr,hh));if(l<0)return null;const c=a*this.direction.dot(ff.cross(rr));if(c<0||l+c>o)return null;const h=-a*rr.dot(pf);return h<0?null:this.at(h/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}},He=class Bm{constructor(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){Bm.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m)}set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=s,g[5]=o,g[9]=a,g[13]=l,g[2]=c,g[6]=h,g[10]=u,g[14]=d,g[3]=f,g[7]=p,g[11]=x,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Bm().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Ho.setFromMatrixColumn(t,0).length(),s=1/Ho.setFromMatrixColumn(t,1).length(),o=1/Ho.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*o,e[9]=n[9]*o,e[10]=n[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,s=t.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+p*c,e[5]=d-x*c,e[9]=-a*l,e[2]=x-d*c,e[6]=p+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d+x*a,e[4]=p*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=x+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d-x*a,e[4]=-o*u,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=x-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=p*c-f,e[8]=d*c+x,e[1]=l*u,e[5]=x*c+d,e[9]=f*c-p,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=x-d*u,e[8]=p*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+p,e[10]=d-x*u}else if(t.order==="XZY"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+x,e[5]=o*h,e[9]=f*u-p,e[2]=p*u-f,e[6]=a*h,e[10]=x*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(NE,t,RE)}lookAt(t,e,n){const i=this.elements;return di.subVectors(t,e),di.lengthSq()===0&&(di.z=1),di.normalize(),or.crossVectors(n,di),or.lengthSq()===0&&(Math.abs(n.z)===1?di.x+=1e-4:di.z+=1e-4,di.normalize(),or.crossVectors(n,di)),or.normalize(),uh.crossVectors(di,or),i[0]=or.x,i[4]=uh.x,i[8]=di.x,i[1]=or.y,i[5]=uh.y,i[9]=di.y,i[2]=or.z,i[6]=uh.z,i[10]=di.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],f=n[13],p=n[2],x=n[6],m=n[10],g=n[14],_=n[3],y=n[7],S=n[11],w=n[15],A=i[0],T=i[4],R=i[8],$=i[12],M=i[1],b=i[5],k=i[9],z=i[13],Z=i[2],nt=i[6],q=i[10],rt=i[14],W=i[3],dt=i[7],ft=i[11],yt=i[15];return s[0]=o*A+a*M+l*Z+c*W,s[4]=o*T+a*b+l*nt+c*dt,s[8]=o*R+a*k+l*q+c*ft,s[12]=o*$+a*z+l*rt+c*yt,s[1]=h*A+u*M+d*Z+f*W,s[5]=h*T+u*b+d*nt+f*dt,s[9]=h*R+u*k+d*q+f*ft,s[13]=h*$+u*z+d*rt+f*yt,s[2]=p*A+x*M+m*Z+g*W,s[6]=p*T+x*b+m*nt+g*dt,s[10]=p*R+x*k+m*q+g*ft,s[14]=p*$+x*z+m*rt+g*yt,s[3]=_*A+y*M+S*Z+w*W,s[7]=_*T+y*b+S*nt+w*dt,s[11]=_*R+y*k+S*q+w*ft,s[15]=_*$+y*z+S*rt+w*yt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],p=t[3],x=t[7],m=t[11],g=t[15];return p*(+s*l*u-i*c*u-s*a*d+n*c*d+i*a*f-n*l*f)+x*(+e*l*f-e*c*d+s*o*d-i*o*f+i*c*h-s*l*h)+m*(+e*c*u-e*a*f-s*o*u+n*o*f+s*a*h-n*c*h)+g*(-i*a*h-e*l*u+e*a*d+i*o*u-n*o*d+n*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],p=t[12],x=t[13],m=t[14],g=t[15],_=u*m*c-x*d*c+x*l*f-a*m*f-u*l*g+a*d*g,y=p*d*c-h*m*c-p*l*f+o*m*f+h*l*g-o*d*g,S=h*x*c-p*u*c+p*a*f-o*x*f-h*a*g+o*u*g,w=p*u*l-h*x*l-p*a*d+o*x*d+h*a*m-o*u*m,A=e*_+n*y+i*S+s*w;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const T=1/A;return t[0]=_*T,t[1]=(x*d*s-u*m*s-x*i*f+n*m*f+u*i*g-n*d*g)*T,t[2]=(a*m*s-x*l*s+x*i*c-n*m*c-a*i*g+n*l*g)*T,t[3]=(u*l*s-a*d*s-u*i*c+n*d*c+a*i*f-n*l*f)*T,t[4]=y*T,t[5]=(h*m*s-p*d*s+p*i*f-e*m*f-h*i*g+e*d*g)*T,t[6]=(p*l*s-o*m*s-p*i*c+e*m*c+o*i*g-e*l*g)*T,t[7]=(o*d*s-h*l*s+h*i*c-e*d*c-o*i*f+e*l*f)*T,t[8]=S*T,t[9]=(p*u*s-h*x*s-p*n*f+e*x*f+h*n*g-e*u*g)*T,t[10]=(o*x*s-p*a*s+p*n*c-e*x*c-o*n*g+e*a*g)*T,t[11]=(h*a*s-o*u*s-h*n*c+e*u*c+o*n*f-e*a*f)*T,t[12]=w*T,t[13]=(h*x*i-p*u*i+p*n*d-e*x*d-h*n*m+e*u*m)*T,t[14]=(p*a*i-o*x*i-p*n*l+e*x*l+o*n*m-e*a*m)*T,t[15]=(o*u*i-h*a*i+h*n*l-e*u*l-o*n*d+e*a*d)*T,this}scale(t){const e=this.elements,n=t.x,i=t.y,s=t.z;return e[0]*=n,e[4]*=i,e[8]*=s,e[1]*=n,e[5]*=i,e[9]*=s,e[2]*=n,e[6]*=i,e[10]*=s,e[3]*=n,e[7]*=i,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),s=1-n,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+n,c*a-i*l,c*l+i*a,0,c*a+i*l,h*a+n,h*l-i*o,0,c*l-i*a,h*l+i*o,s*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,s,o){return this.set(1,n,s,0,t,1,o,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,p=s*u,x=o*h,m=o*u,g=a*u,_=l*c,y=l*h,S=l*u,w=n.x,A=n.y,T=n.z;return i[0]=(1-(x+g))*w,i[1]=(f+S)*w,i[2]=(p-y)*w,i[3]=0,i[4]=(f-S)*A,i[5]=(1-(d+g))*A,i[6]=(m+_)*A,i[7]=0,i[8]=(p+y)*T,i[9]=(m-_)*T,i[10]=(1-(d+x))*T,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let s=Ho.set(i[0],i[1],i[2]).length();const o=Ho.set(i[4],i[5],i[6]).length(),a=Ho.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),t.x=i[12],t.y=i[13],t.z=i[14],Bi.copy(this);const c=1/s,h=1/o,u=1/a;return Bi.elements[0]*=c,Bi.elements[1]*=c,Bi.elements[2]*=c,Bi.elements[4]*=h,Bi.elements[5]*=h,Bi.elements[6]*=h,Bi.elements[8]*=u,Bi.elements[9]*=u,Bi.elements[10]*=u,e.setFromRotationMatrix(Bi),n.x=s,n.y=o,n.z=a,this}makePerspective(t,e,n,i,s,o,a=Gs){const l=this.elements,c=2*s/(e-t),h=2*s/(n-i),u=(e+t)/(e-t),d=(n+i)/(n-i);let f,p;if(a===Gs)f=-(o+s)/(o-s),p=-2*o*s/(o-s);else if(a===Vu)f=-o/(o-s),p=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,i,s,o,a=Gs){const l=this.elements,c=1/(e-t),h=1/(n-i),u=1/(o-s),d=(e+t)*c,f=(n+i)*h;let p,x;if(a===Gs)p=(o+s)*u,x=-2*u;else if(a===Vu)p=s*u,x=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=x,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}};const Ho=new U,Bi=new He,NE=new U(0,0,0),RE=new U(1,1,1),or=new U,uh=new U,di=new U,w0=new He,N0=new _o;let Pr=class lS{constructor(t=0,e=0,n=0,i=lS.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,s=i[0],o=i[4],a=i[8],l=i[1],c=i[5],h=i[9],u=i[2],d=i[6],f=i[10];switch(e){case"XYZ":this._y=Math.asin(Ln(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Ln(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(Ln(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-Ln(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(Ln(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-Ln(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return w0.makeRotationFromQuaternion(t),this.setFromRotationMatrix(w0,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return N0.setFromEuler(this),this.setFromQuaternion(N0,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}};Pr.DEFAULT_ORDER="XYZ";let cS=class{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}},CE=0;const R0=new U,$o=new _o,Ts=new He,dh=new U,Nl=new U,PE=new U,FE=new _o,C0=new U(1,0,0),P0=new U(0,1,0),F0=new U(0,0,1),I0={type:"added"},IE={type:"removed"},Wo={type:"childadded",child:null},mf={type:"childremoved",child:null};let Kn=class bu extends Co{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:CE++}),this.uuid=fl(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=bu.DEFAULT_UP.clone();const t=new U,e=new Pr,n=new _o,i=new U(1,1,1);function s(){n.setFromEuler(e,!1)}function o(){e.setFromQuaternion(n,void 0,!1)}e._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new He},normalMatrix:{value:new se}}),this.matrix=new He,this.matrixWorld=new He,this.matrixAutoUpdate=bu.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=bu.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new cS,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return $o.setFromAxisAngle(t,e),this.quaternion.multiply($o),this}rotateOnWorldAxis(t,e){return $o.setFromAxisAngle(t,e),this.quaternion.premultiply($o),this}rotateX(t){return this.rotateOnAxis(C0,t)}rotateY(t){return this.rotateOnAxis(P0,t)}rotateZ(t){return this.rotateOnAxis(F0,t)}translateOnAxis(t,e){return R0.copy(t).applyQuaternion(this.quaternion),this.position.add(R0.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(C0,t)}translateY(t){return this.translateOnAxis(P0,t)}translateZ(t){return this.translateOnAxis(F0,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Ts.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?dh.copy(t):dh.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Nl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ts.lookAt(Nl,dh,this.up):Ts.lookAt(dh,Nl,this.up),this.quaternion.setFromRotationMatrix(Ts),i&&(Ts.extractRotation(i.matrixWorld),$o.setFromRotationMatrix(Ts),this.quaternion.premultiply($o.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(I0),Wo.child=t,this.dispatchEvent(Wo),Wo.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(IE),mf.child=t,this.dispatchEvent(mf),mf.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Ts.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Ts.multiply(t.parent.matrixWorld)),t.applyMatrix4(Ts),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(I0),Wo.child=t,this.dispatchEvent(Wo),Wo.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Nl,t,PE),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Nl,FE,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));i.material=a}else i.material=s(t.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];i.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(n.geometries=a),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f),p.length>0&&(n.nodes=p)}return n.object=i,n;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}};Kn.DEFAULT_UP=new U(0,1,0);Kn.DEFAULT_MATRIX_AUTO_UPDATE=!0;Kn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Oi=new U,vs=new U,gf=new U,bs=new U,qo=new U,Xo=new U,L0=new U,xf=new U,yf=new U,_f=new U,Mf=new on,Sf=new on,Tf=new on;let Rl=class va{constructor(t=new U,e=new U,n=new U){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Oi.subVectors(t,e),i.cross(Oi);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(t,e,n,i,s){Oi.subVectors(i,e),vs.subVectors(n,e),gf.subVectors(t,e);const o=Oi.dot(Oi),a=Oi.dot(vs),l=Oi.dot(gf),c=vs.dot(vs),h=vs.dot(gf),u=o*c-a*a;if(u===0)return s.set(0,0,0),null;const d=1/u,f=(c*l-a*h)*d,p=(o*h-a*l)*d;return s.set(1-f-p,p,f)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,bs)===null?!1:bs.x>=0&&bs.y>=0&&bs.x+bs.y<=1}static getInterpolation(t,e,n,i,s,o,a,l){return this.getBarycoord(t,e,n,i,bs)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,bs.x),l.addScaledVector(o,bs.y),l.addScaledVector(a,bs.z),l)}static getInterpolatedAttribute(t,e,n,i,s,o){return Mf.setScalar(0),Sf.setScalar(0),Tf.setScalar(0),Mf.fromBufferAttribute(t,e),Sf.fromBufferAttribute(t,n),Tf.fromBufferAttribute(t,i),o.setScalar(0),o.addScaledVector(Mf,s.x),o.addScaledVector(Sf,s.y),o.addScaledVector(Tf,s.z),o}static isFrontFacing(t,e,n,i){return Oi.subVectors(n,e),vs.subVectors(t,e),Oi.cross(vs).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Oi.subVectors(this.c,this.b),vs.subVectors(this.a,this.b),Oi.cross(vs).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return va.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return va.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,s){return va.getInterpolation(t,this.a,this.b,this.c,e,n,i,s)}containsPoint(t){return va.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return va.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,s=this.c;let o,a;qo.subVectors(i,n),Xo.subVectors(s,n),xf.subVectors(t,n);const l=qo.dot(xf),c=Xo.dot(xf);if(l<=0&&c<=0)return e.copy(n);yf.subVectors(t,i);const h=qo.dot(yf),u=Xo.dot(yf);if(h>=0&&u<=h)return e.copy(i);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),e.copy(n).addScaledVector(qo,o);_f.subVectors(t,s);const f=qo.dot(_f),p=Xo.dot(_f);if(p>=0&&f<=p)return e.copy(s);const x=f*c-l*p;if(x<=0&&c>=0&&p<=0)return a=c/(c-p),e.copy(n).addScaledVector(Xo,a);const m=h*p-f*u;if(m<=0&&u-h>=0&&f-p>=0)return L0.subVectors(s,i),a=(u-h)/(u-h+(f-p)),e.copy(i).addScaledVector(L0,a);const g=1/(m+x+d);return o=x*g,a=d*g,e.copy(n).addScaledVector(qo,o).addScaledVector(Xo,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}};const hS={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ar={h:0,s:0,l:0},fh={h:0,s:0,l:0};function vf(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}let oe=class{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=os){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,be.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=be.workingColorSpace){return this.r=t,this.g=e,this.b=n,be.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=be.workingColorSpace){if(t=Zg(t,1),e=Ln(e,0,1),n=Ln(n,0,1),e===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+e):n+e-n*e,o=2*n-s;this.r=vf(o,s,t+1/3),this.g=vf(o,s,t),this.b=vf(o,s,t-1/3)}return be.toWorkingColorSpace(this,i),this}setStyle(t,e=os){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=i[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=os){const n=hS[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=ka(t.r),this.g=ka(t.g),this.b=ka(t.b),this}copyLinearToSRGB(t){return this.r=af(t.r),this.g=af(t.g),this.b=af(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=os){return be.fromWorkingColorSpace(wn.copy(this),t),Math.round(Ln(wn.r*255,0,255))*65536+Math.round(Ln(wn.g*255,0,255))*256+Math.round(Ln(wn.b*255,0,255))}getHexString(t=os){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=be.workingColorSpace){be.fromWorkingColorSpace(wn.copy(this),e);const n=wn.r,i=wn.g,s=wn.b,o=Math.max(n,i,s),a=Math.min(n,i,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=be.workingColorSpace){return be.fromWorkingColorSpace(wn.copy(this),e),t.r=wn.r,t.g=wn.g,t.b=wn.b,t}getStyle(t=os){be.fromWorkingColorSpace(wn.copy(this),t);const e=wn.r,n=wn.g,i=wn.b;return t!==os?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){return this.getHSL(ar),this.setHSL(ar.h+t,ar.s+e,ar.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(ar),t.getHSL(fh);const n=dc(ar.h,fh.h,e),i=dc(ar.s,fh.s,e),s=dc(ar.l,fh.l,e);return this.setHSL(n,i,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,s=t.elements;return this.r=s[0]*e+s[3]*n+s[6]*i,this.g=s[1]*e+s[4]*n+s[7]*i,this.b=s[2]*e+s[5]*n+s[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};const wn=new oe;oe.NAMES=hS;let LE=0,Or=class extends Co{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:LE++}),this.uuid=fl(),this.name="",this.type="Material",this.blending=za,this.side=Cr,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Qp,this.blendDst=Jp,this.blendEquation=oo,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new oe(0,0,0),this.blendAlpha=0,this.depthFunc=Za,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=_0,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Oo,this.stencilZFail=Oo,this.stencilZPass=Oo,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==za&&(n.blending=this.blending),this.side!==Cr&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==Qp&&(n.blendSrc=this.blendSrc),this.blendDst!==Jp&&(n.blendDst=this.blendDst),this.blendEquation!==oo&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==Za&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==_0&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Oo&&(n.stencilFail=this.stencilFail),this.stencilZFail!==Oo&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==Oo&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(e){const s=i(t.textures),o=i(t.images);s.length>0&&(n.textures=s),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const i=e.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=e[s].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}},Dc=class extends Or{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new oe(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Pr,this.combine=HM,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}};const Qe=new U,ph=new ee;let Qi=class{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=M0,this.updateRanges=[],this.gpuType=cs,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)ph.fromBufferAttribute(this,e),ph.applyMatrix3(t),this.setXY(e,ph.x,ph.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)Qe.fromBufferAttribute(this,e),Qe.applyMatrix3(t),this.setXYZ(e,Qe.x,Qe.y,Qe.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)Qe.fromBufferAttribute(this,e),Qe.applyMatrix4(t),this.setXYZ(e,Qe.x,Qe.y,Qe.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Qe.fromBufferAttribute(this,e),Qe.applyNormalMatrix(t),this.setXYZ(e,Qe.x,Qe.y,Qe.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Qe.fromBufferAttribute(this,e),Qe.transformDirection(t),this.setXYZ(e,Qe.x,Qe.y,Qe.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=Ta(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=$n(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Ta(e,this.array)),e}setX(t,e){return this.normalized&&(e=$n(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Ta(e,this.array)),e}setY(t,e){return this.normalized&&(e=$n(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Ta(e,this.array)),e}setZ(t,e){return this.normalized&&(e=$n(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Ta(e,this.array)),e}setW(t,e){return this.normalized&&(e=$n(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=$n(e,this.array),n=$n(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=$n(e,this.array),n=$n(n,this.array),i=$n(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=$n(e,this.array),n=$n(n,this.array),i=$n(i,this.array),s=$n(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==M0&&(t.usage=this.usage),t}},uS=class extends Qi{constructor(t,e,n){super(new Uint16Array(t),e,n)}},dS=class extends Qi{constructor(t,e,n){super(new Uint32Array(t),e,n)}},Bn=class extends Qi{constructor(t,e,n){super(new Float32Array(t),e,n)}},DE=0;const Ei=new He,bf=new Kn,Yo=new U,fi=new Po,Cl=new Po,gn=new U;let ts=class fS extends Co{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:DE++}),this.uuid=fl(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(iS(t)?dS:uS)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new se().getNormalMatrix(t);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(t),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ei.makeRotationFromQuaternion(t),this.applyMatrix4(Ei),this}rotateX(t){return Ei.makeRotationX(t),this.applyMatrix4(Ei),this}rotateY(t){return Ei.makeRotationY(t),this.applyMatrix4(Ei),this}rotateZ(t){return Ei.makeRotationZ(t),this.applyMatrix4(Ei),this}translate(t,e,n){return Ei.makeTranslation(t,e,n),this.applyMatrix4(Ei),this}scale(t,e,n){return Ei.makeScale(t,e,n),this.applyMatrix4(Ei),this}lookAt(t){return bf.lookAt(t),bf.updateMatrix(),this.applyMatrix4(bf.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Yo).negate(),this.translate(Yo.x,Yo.y,Yo.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const s=t[n];e.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new Bn(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Po);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new U(-1/0,-1/0,-1/0),new U(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,i=e.length;n<i;n++){const s=e[n];fi.setFromBufferAttribute(s),this.morphTargetsRelative?(gn.addVectors(this.boundingBox.min,fi.min),this.boundingBox.expandByPoint(gn),gn.addVectors(this.boundingBox.max,fi.max),this.boundingBox.expandByPoint(gn)):(this.boundingBox.expandByPoint(fi.min),this.boundingBox.expandByPoint(fi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new pl);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new U,1/0);return}if(t){const n=this.boundingSphere.center;if(fi.setFromBufferAttribute(t),e)for(let s=0,o=e.length;s<o;s++){const a=e[s];Cl.setFromBufferAttribute(a),this.morphTargetsRelative?(gn.addVectors(fi.min,Cl.min),fi.expandByPoint(gn),gn.addVectors(fi.max,Cl.max),fi.expandByPoint(gn)):(fi.expandByPoint(Cl.min),fi.expandByPoint(Cl.max))}fi.getCenter(n);let i=0;for(let s=0,o=t.count;s<o;s++)gn.fromBufferAttribute(t,s),i=Math.max(i,n.distanceToSquared(gn));if(e)for(let s=0,o=e.length;s<o;s++){const a=e[s],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)gn.fromBufferAttribute(a,c),l&&(Yo.fromBufferAttribute(t,c),gn.add(Yo)),i=Math.max(i,n.distanceToSquared(gn))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position,i=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Qi(new Float32Array(4*n.count),4));const o=this.getAttribute("tangent"),a=[],l=[];for(let R=0;R<n.count;R++)a[R]=new U,l[R]=new U;const c=new U,h=new U,u=new U,d=new ee,f=new ee,p=new ee,x=new U,m=new U;function g(R,$,M){c.fromBufferAttribute(n,R),h.fromBufferAttribute(n,$),u.fromBufferAttribute(n,M),d.fromBufferAttribute(s,R),f.fromBufferAttribute(s,$),p.fromBufferAttribute(s,M),h.sub(c),u.sub(c),f.sub(d),p.sub(d);const b=1/(f.x*p.y-p.x*f.y);isFinite(b)&&(x.copy(h).multiplyScalar(p.y).addScaledVector(u,-f.y).multiplyScalar(b),m.copy(u).multiplyScalar(f.x).addScaledVector(h,-p.x).multiplyScalar(b),a[R].add(x),a[$].add(x),a[M].add(x),l[R].add(m),l[$].add(m),l[M].add(m))}let _=this.groups;_.length===0&&(_=[{start:0,count:t.count}]);for(let R=0,$=_.length;R<$;++R){const M=_[R],b=M.start,k=M.count;for(let z=b,Z=b+k;z<Z;z+=3)g(t.getX(z+0),t.getX(z+1),t.getX(z+2))}const y=new U,S=new U,w=new U,A=new U;function T(R){w.fromBufferAttribute(i,R),A.copy(w);const $=a[R];y.copy($),y.sub(w.multiplyScalar(w.dot($))).normalize(),S.crossVectors(A,$);const b=S.dot(l[R])<0?-1:1;o.setXYZW(R,y.x,y.y,y.z,b)}for(let R=0,$=_.length;R<$;++R){const M=_[R],b=M.start,k=M.count;for(let z=b,Z=b+k;z<Z;z+=3)T(t.getX(z+0)),T(t.getX(z+1)),T(t.getX(z+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Qi(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let d=0,f=n.count;d<f;d++)n.setXYZ(d,0,0,0);const i=new U,s=new U,o=new U,a=new U,l=new U,c=new U,h=new U,u=new U;if(t)for(let d=0,f=t.count;d<f;d+=3){const p=t.getX(d+0),x=t.getX(d+1),m=t.getX(d+2);i.fromBufferAttribute(e,p),s.fromBufferAttribute(e,x),o.fromBufferAttribute(e,m),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),a.fromBufferAttribute(n,p),l.fromBufferAttribute(n,x),c.fromBufferAttribute(n,m),a.add(h),l.add(h),c.add(h),n.setXYZ(p,a.x,a.y,a.z),n.setXYZ(x,l.x,l.y,l.z),n.setXYZ(m,c.x,c.y,c.z)}else for(let d=0,f=e.count;d<f;d+=3)i.fromBufferAttribute(e,d+0),s.fromBufferAttribute(e,d+1),o.fromBufferAttribute(e,d+2),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),n.setXYZ(d+0,h.x,h.y,h.z),n.setXYZ(d+1,h.x,h.y,h.z),n.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)gn.fromBufferAttribute(t,e),gn.normalize(),t.setXYZ(e,gn.x,gn.y,gn.z)}toNonIndexed(){function t(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let f=0,p=0;for(let x=0,m=l.length;x<m;x++){a.isInterleavedBufferAttribute?f=l[x]*a.data.stride+a.offset:f=l[x]*h;for(let g=0;g<h;g++)d[p++]=c[f++]}return new Qi(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new fS,n=this.index.array,i=this.attributes;for(const a in i){const l=i[a],c=t(l,n);e.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[],c=s[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],f=t(d,n);l.push(f)}e.morphAttributes[a]=l}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const l in n){const c=n[l];t.data.attributes[l]=c.toJSON(t.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u];h.push(f.toJSON(t.data))}h.length>0&&(i[l]=h,s=!0)}s&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone(e));const i=t.attributes;for(const c in i){const h=i[c];this.setAttribute(c,h.clone(e))}const s=t.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,f=u.length;d<f;d++)h.push(u[d].clone(e));this.morphAttributes[c]=h}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}};const D0=new He,Hr=new Qg,mh=new pl,U0=new U,gh=new U,xh=new U,yh=new U,Ef=new U,_h=new U,B0=new U,Mh=new U;let Dn=class extends Kn{constructor(t=new ts,e=new Dc){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,o=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const a=this.morphTargetInfluences;if(s&&a){_h.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const h=a[l],u=s[l];h!==0&&(Ef.fromBufferAttribute(u,t),o?_h.addScaledVector(Ef,h):_h.addScaledVector(Ef.sub(e),h))}e.add(_h)}return e}raycast(t,e){const n=this.geometry,i=this.material,s=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),mh.copy(n.boundingSphere),mh.applyMatrix4(s),Hr.copy(t.ray).recast(t.near),!(mh.containsPoint(Hr.origin)===!1&&(Hr.intersectSphere(mh,U0)===null||Hr.origin.distanceToSquared(U0)>(t.far-t.near)**2))&&(D0.copy(s).invert(),Hr.copy(t.ray).applyMatrix4(D0),!(n.boundingBox!==null&&Hr.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,Hr)))}_computeIntersections(t,e,n){let i;const s=this.geometry,o=this.material,a=s.index,l=s.attributes.position,c=s.attributes.uv,h=s.attributes.uv1,u=s.attributes.normal,d=s.groups,f=s.drawRange;if(a!==null)if(Array.isArray(o))for(let p=0,x=d.length;p<x;p++){const m=d[p],g=o[m.materialIndex],_=Math.max(m.start,f.start),y=Math.min(a.count,Math.min(m.start+m.count,f.start+f.count));for(let S=_,w=y;S<w;S+=3){const A=a.getX(S),T=a.getX(S+1),R=a.getX(S+2);i=Sh(this,g,t,n,c,h,u,A,T,R),i&&(i.faceIndex=Math.floor(S/3),i.face.materialIndex=m.materialIndex,e.push(i))}}else{const p=Math.max(0,f.start),x=Math.min(a.count,f.start+f.count);for(let m=p,g=x;m<g;m+=3){const _=a.getX(m),y=a.getX(m+1),S=a.getX(m+2);i=Sh(this,o,t,n,c,h,u,_,y,S),i&&(i.faceIndex=Math.floor(m/3),e.push(i))}}else if(l!==void 0)if(Array.isArray(o))for(let p=0,x=d.length;p<x;p++){const m=d[p],g=o[m.materialIndex],_=Math.max(m.start,f.start),y=Math.min(l.count,Math.min(m.start+m.count,f.start+f.count));for(let S=_,w=y;S<w;S+=3){const A=S,T=S+1,R=S+2;i=Sh(this,g,t,n,c,h,u,A,T,R),i&&(i.faceIndex=Math.floor(S/3),i.face.materialIndex=m.materialIndex,e.push(i))}}else{const p=Math.max(0,f.start),x=Math.min(l.count,f.start+f.count);for(let m=p,g=x;m<g;m+=3){const _=m,y=m+1,S=m+2;i=Sh(this,o,t,n,c,h,u,_,y,S),i&&(i.faceIndex=Math.floor(m/3),e.push(i))}}}};function UE(r,t,e,n,i,s,o,a){let l;if(t.side===ii?l=n.intersectTriangle(o,s,i,!0,a):l=n.intersectTriangle(i,s,o,t.side===Cr,a),l===null)return null;Mh.copy(a),Mh.applyMatrix4(r.matrixWorld);const c=e.ray.origin.distanceTo(Mh);return c<e.near||c>e.far?null:{distance:c,point:Mh.clone(),object:r}}function Sh(r,t,e,n,i,s,o,a,l,c){r.getVertexPosition(a,gh),r.getVertexPosition(l,xh),r.getVertexPosition(c,yh);const h=UE(r,t,e,n,gh,xh,yh,B0);if(h){const u=new U;Rl.getBarycoord(B0,gh,xh,yh,u),i&&(h.uv=Rl.getInterpolatedAttribute(i,a,l,c,u,new ee)),s&&(h.uv1=Rl.getInterpolatedAttribute(s,a,l,c,u,new ee)),o&&(h.normal=Rl.getInterpolatedAttribute(o,a,l,c,u,new U),h.normal.dot(n.direction)>0&&h.normal.multiplyScalar(-1));const d={a,b:l,c,normal:new U,materialIndex:0};Rl.getNormal(gh,xh,yh,d.normal),h.face=d,h.barycoord=u}return h}let Uc=class pS extends ts{constructor(t=1,e=1,n=1,i=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:s,depthSegments:o};const a=this;i=Math.floor(i),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;p("z","y","x",-1,-1,n,e,t,o,s,0),p("z","y","x",1,-1,n,e,-t,o,s,1),p("x","z","y",1,1,t,n,e,i,o,2),p("x","z","y",1,-1,t,n,-e,i,o,3),p("x","y","z",1,-1,t,e,n,i,s,4),p("x","y","z",-1,-1,t,e,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new Bn(c,3)),this.setAttribute("normal",new Bn(h,3)),this.setAttribute("uv",new Bn(u,2));function p(x,m,g,_,y,S,w,A,T,R,$){const M=S/T,b=w/R,k=S/2,z=w/2,Z=A/2,nt=T+1,q=R+1;let rt=0,W=0;const dt=new U;for(let ft=0;ft<q;ft++){const yt=ft*b-z;for(let ie=0;ie<nt;ie++){const he=ie*M-k;dt[x]=he*_,dt[m]=yt*y,dt[g]=Z,c.push(dt.x,dt.y,dt.z),dt[x]=0,dt[m]=0,dt[g]=A>0?1:-1,h.push(dt.x,dt.y,dt.z),u.push(ie/T),u.push(1-ft/R),rt+=1}}for(let ft=0;ft<R;ft++)for(let yt=0;yt<T;yt++){const ie=d+yt+nt*ft,he=d+yt+nt*(ft+1),et=d+(yt+1)+nt*(ft+1),ht=d+(yt+1)+nt*ft;l.push(ie,he,ht),l.push(he,et,ht),W+=6}a.addGroup(f,W,$),f+=W,d+=rt}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new pS(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}};function nl(r){const t={};for(const e in r){t[e]={};for(const n in r[e]){const i=r[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function Wn(r){const t={};for(let e=0;e<r.length;e++){const n=nl(r[e]);for(const i in n)t[i]=n[i]}return t}function BE(r){const t=[];for(let e=0;e<r.length;e++)t.push(r[e].clone());return t}function mS(r){const t=r.getRenderTarget();return t===null?r.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:be.workingColorSpace}const OE={clone:nl,merge:Wn};var zE=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,GE=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;let Fr=class extends Or{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=zE,this.fragmentShader=GE,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=nl(t.uniforms),this.uniformsGroups=BE(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const o=this.uniforms[i].value;o&&o.isTexture?e.uniforms[i]={type:"t",value:o.toJSON(t).uuid}:o&&o.isColor?e.uniforms[i]={type:"c",value:o.getHex()}:o&&o.isVector2?e.uniforms[i]={type:"v2",value:o.toArray()}:o&&o.isVector3?e.uniforms[i]={type:"v3",value:o.toArray()}:o&&o.isVector4?e.uniforms[i]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?e.uniforms[i]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?e.uniforms[i]={type:"m4",value:o.toArray()}:e.uniforms[i]={value:o}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}},gS=class extends Kn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new He,this.projectionMatrix=new He,this.projectionMatrixInverse=new He,this.coordinateSystem=Gs}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}};const lr=new U,O0=new ee,z0=new ee;let Ni=class extends gS{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=Sc*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(uc*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return Sc*2*Math.atan(Math.tan(uc*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){lr.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(lr.x,lr.y).multiplyScalar(-t/lr.z),lr.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(lr.x,lr.y).multiplyScalar(-t/lr.z)}getViewSize(t,e){return this.getViewBounds(t,O0,z0),e.subVectors(z0,O0)}setViewOffset(t,e,n,i,s,o){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(uc*.5*this.fov)/this.zoom,n=2*e,i=this.aspect*n,s=-.5*i;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*i/l,e-=o.offsetY*n/c,i*=o.width/l,n*=o.height/c}const a=this.filmOffset;a!==0&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}};const jo=-90,Ko=1;let kE=class extends Kn{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Ni(jo,Ko,t,e);i.layers=this.layers,this.add(i);const s=new Ni(jo,Ko,t,e);s.layers=this.layers,this.add(s);const o=new Ni(jo,Ko,t,e);o.layers=this.layers,this.add(o);const a=new Ni(jo,Ko,t,e);a.layers=this.layers,this.add(a);const l=new Ni(jo,Ko,t,e);l.layers=this.layers,this.add(l);const c=new Ni(jo,Ko,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,s,o,a,l]=e;for(const c of e)this.remove(c);if(t===Gs)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===Vu)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,o,a,l,c,h]=this.children,u=t.getRenderTarget(),d=t.getActiveCubeFace(),f=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const x=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,s),t.setRenderTarget(n,1,i),t.render(e,o),t.setRenderTarget(n,2,i),t.render(e,a),t.setRenderTarget(n,3,i),t.render(e,l),t.setRenderTarget(n,4,i),t.render(e,c),n.texture.generateMipmaps=x,t.setRenderTarget(n,5,i),t.render(e,h),t.setRenderTarget(u,d,f),t.xr.enabled=p,n.texture.needsPMREMUpdate=!0}},xS=class extends is{constructor(t,e,n,i,s,o,a,l,c,h){t=t!==void 0?t:[],e=e!==void 0?e:Qa,super(t,e,n,i,s,o,a,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}},VE=class extends yo{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new xS(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:qi}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new Uc(5,5,5),s=new Fr({name:"CubemapFromEquirect",uniforms:nl(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:ii,blending:wr});s.uniforms.tEquirect.value=e;const o=new Dn(i,s),a=e.minFilter;return e.minFilter===ho&&(e.minFilter=qi),new kE(1,10,this).update(t,o),e.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,i){const s=t.getRenderTarget();for(let o=0;o<6;o++)t.setRenderTarget(this,o),t.clear(e,n,i);t.setRenderTarget(s)}};const Af=new U,HE=new U,$E=new se;let _r=class{constructor(t=new U(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Af.subVectors(n,e).cross(HE.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(Af),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:e.copy(t.start).addScaledVector(n,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||$E.getNormalMatrix(t),i=this.coplanarPoint(Af).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}};const $r=new pl,Th=new U;let Jg=class{constructor(t=new _r,e=new _r,n=new _r,i=new _r,s=new _r,o=new _r){this.planes=[t,e,n,i,s,o]}set(t,e,n,i,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(s),a[5].copy(o),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=Gs){const n=this.planes,i=t.elements,s=i[0],o=i[1],a=i[2],l=i[3],c=i[4],h=i[5],u=i[6],d=i[7],f=i[8],p=i[9],x=i[10],m=i[11],g=i[12],_=i[13],y=i[14],S=i[15];if(n[0].setComponents(l-s,d-c,m-f,S-g).normalize(),n[1].setComponents(l+s,d+c,m+f,S+g).normalize(),n[2].setComponents(l+o,d+h,m+p,S+_).normalize(),n[3].setComponents(l-o,d-h,m-p,S-_).normalize(),n[4].setComponents(l-a,d-u,m-x,S-y).normalize(),e===Gs)n[5].setComponents(l+a,d+u,m+x,S+y).normalize();else if(e===Vu)n[5].setComponents(a,u,x,y).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),$r.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),$r.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere($r)}intersectsSprite(t){return $r.center.set(0,0,0),$r.radius=.7071067811865476,$r.applyMatrix4(t.matrixWorld),this.intersectsSphere($r)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(Th.x=i.normal.x>0?t.max.x:t.min.x,Th.y=i.normal.y>0?t.max.y:t.min.y,Th.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(Th)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}};function yS(){let r=null,t=!1,e=null,n=null;function i(s,o){e(s,o),n=r.requestAnimationFrame(i)}return{start:function(){t!==!0&&e!==null&&(n=r.requestAnimationFrame(i),t=!0)},stop:function(){r.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){r=s}}}function WE(r){const t=new WeakMap;function e(a,l){const c=a.array,h=a.usage,u=c.byteLength,d=r.createBuffer();r.bindBuffer(l,d),r.bufferData(l,c,h),a.onUploadCallback();let f;if(c instanceof Float32Array)f=r.FLOAT;else if(c instanceof Uint16Array)a.isFloat16BufferAttribute?f=r.HALF_FLOAT:f=r.UNSIGNED_SHORT;else if(c instanceof Int16Array)f=r.SHORT;else if(c instanceof Uint32Array)f=r.UNSIGNED_INT;else if(c instanceof Int32Array)f=r.INT;else if(c instanceof Int8Array)f=r.BYTE;else if(c instanceof Uint8Array)f=r.UNSIGNED_BYTE;else if(c instanceof Uint8ClampedArray)f=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:d,type:f,bytesPerElement:c.BYTES_PER_ELEMENT,version:a.version,size:u}}function n(a,l,c){const h=l.array,u=l.updateRanges;if(r.bindBuffer(c,a),u.length===0)r.bufferSubData(c,0,h);else{u.sort((f,p)=>f.start-p.start);let d=0;for(let f=1;f<u.length;f++){const p=u[d],x=u[f];x.start<=p.start+p.count+1?p.count=Math.max(p.count,x.start+x.count-p.start):(++d,u[d]=x)}u.length=d+1;for(let f=0,p=u.length;f<p;f++){const x=u[f];r.bufferSubData(c,x.start*h.BYTES_PER_ELEMENT,h,x.start,x.count)}l.clearUpdateRanges()}l.onUploadCallback()}function i(a){return a.isInterleavedBufferAttribute&&(a=a.data),t.get(a)}function s(a){a.isInterleavedBufferAttribute&&(a=a.data);const l=t.get(a);l&&(r.deleteBuffer(l.buffer),t.delete(a))}function o(a,l){if(a.isInterleavedBufferAttribute&&(a=a.data),a.isGLBufferAttribute){const h=t.get(a);(!h||h.version<a.version)&&t.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}const c=t.get(a);if(c===void 0)t.set(a,e(a,l));else if(c.version<a.version){if(c.size!==a.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(c.buffer,a,l),c.version=a.version}}return{get:i,remove:s,update:o}}class Fo extends ts{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const s=t/2,o=e/2,a=Math.floor(n),l=Math.floor(i),c=a+1,h=l+1,u=t/a,d=e/l,f=[],p=[],x=[],m=[];for(let g=0;g<h;g++){const _=g*d-o;for(let y=0;y<c;y++){const S=y*u-s;p.push(S,-_,0),x.push(0,0,1),m.push(y/a),m.push(1-g/l)}}for(let g=0;g<l;g++)for(let _=0;_<a;_++){const y=_+c*g,S=_+c*(g+1),w=_+1+c*(g+1),A=_+1+c*g;f.push(y,S,A),f.push(S,w,A)}this.setIndex(f),this.setAttribute("position",new Bn(p,3)),this.setAttribute("normal",new Bn(x,3)),this.setAttribute("uv",new Bn(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Fo(t.width,t.height,t.widthSegments,t.heightSegments)}}var qE=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,XE=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,YE=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,jE=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,KE=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,ZE=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,QE=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,JE=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,tA=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,eA=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,nA=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,iA=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,sA=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,rA=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,oA=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,aA=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,lA=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,cA=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,hA=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,uA=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,dA=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,fA=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,pA=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,mA=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,gA=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,xA=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,yA=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,_A=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,MA=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,SA=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,TA="gl_FragColor = linearToOutputTexel( gl_FragColor );",vA=`
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,bA=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,EA=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,AA=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,wA=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,NA=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,RA=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,CA=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,PA=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,FA=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,IA=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,LA=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,DA=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,UA=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,BA=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,OA=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,zA=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,GA=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,kA=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,VA=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,HA=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,$A=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,WA=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,qA=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,XA=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,YA=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,jA=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,KA=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,ZA=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,QA=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,JA=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,tw=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,ew=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,nw=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,iw=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,sw=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,rw=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,ow=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,aw=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,lw=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,cw=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,hw=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,uw=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,dw=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,fw=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,pw=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,mw=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,gw=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,xw=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,yw=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,_w=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,Mw=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,Sw=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Tw=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,vw=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,bw=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,Ew=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,Aw=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,ww=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,Nw=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Rw=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,Cw=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Pw=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,Fw=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,Iw=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Lw=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Dw=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Uw=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Bw=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Ow=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,zw=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,Gw=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,kw=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Vw=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Hw=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,$w=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Ww=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,qw=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Xw=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Yw=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,jw=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Kw=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Zw=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,Qw=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,Jw=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,tN=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,eN=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,nN=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,iN=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,sN=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,rN=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,oN=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,aN=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,lN=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,cN=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,hN=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,uN=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,dN=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,fN=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,pN=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,mN=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,gN=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,xN=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,yN=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,_N=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,MN=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,SN=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,TN=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,vN=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,bN=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,te={alphahash_fragment:qE,alphahash_pars_fragment:XE,alphamap_fragment:YE,alphamap_pars_fragment:jE,alphatest_fragment:KE,alphatest_pars_fragment:ZE,aomap_fragment:QE,aomap_pars_fragment:JE,batching_pars_vertex:tA,batching_vertex:eA,begin_vertex:nA,beginnormal_vertex:iA,bsdfs:sA,iridescence_fragment:rA,bumpmap_pars_fragment:oA,clipping_planes_fragment:aA,clipping_planes_pars_fragment:lA,clipping_planes_pars_vertex:cA,clipping_planes_vertex:hA,color_fragment:uA,color_pars_fragment:dA,color_pars_vertex:fA,color_vertex:pA,common:mA,cube_uv_reflection_fragment:gA,defaultnormal_vertex:xA,displacementmap_pars_vertex:yA,displacementmap_vertex:_A,emissivemap_fragment:MA,emissivemap_pars_fragment:SA,colorspace_fragment:TA,colorspace_pars_fragment:vA,envmap_fragment:bA,envmap_common_pars_fragment:EA,envmap_pars_fragment:AA,envmap_pars_vertex:wA,envmap_physical_pars_fragment:OA,envmap_vertex:NA,fog_vertex:RA,fog_pars_vertex:CA,fog_fragment:PA,fog_pars_fragment:FA,gradientmap_pars_fragment:IA,lightmap_pars_fragment:LA,lights_lambert_fragment:DA,lights_lambert_pars_fragment:UA,lights_pars_begin:BA,lights_toon_fragment:zA,lights_toon_pars_fragment:GA,lights_phong_fragment:kA,lights_phong_pars_fragment:VA,lights_physical_fragment:HA,lights_physical_pars_fragment:$A,lights_fragment_begin:WA,lights_fragment_maps:qA,lights_fragment_end:XA,logdepthbuf_fragment:YA,logdepthbuf_pars_fragment:jA,logdepthbuf_pars_vertex:KA,logdepthbuf_vertex:ZA,map_fragment:QA,map_pars_fragment:JA,map_particle_fragment:tw,map_particle_pars_fragment:ew,metalnessmap_fragment:nw,metalnessmap_pars_fragment:iw,morphinstance_vertex:sw,morphcolor_vertex:rw,morphnormal_vertex:ow,morphtarget_pars_vertex:aw,morphtarget_vertex:lw,normal_fragment_begin:cw,normal_fragment_maps:hw,normal_pars_fragment:uw,normal_pars_vertex:dw,normal_vertex:fw,normalmap_pars_fragment:pw,clearcoat_normal_fragment_begin:mw,clearcoat_normal_fragment_maps:gw,clearcoat_pars_fragment:xw,iridescence_pars_fragment:yw,opaque_fragment:_w,packing:Mw,premultiplied_alpha_fragment:Sw,project_vertex:Tw,dithering_fragment:vw,dithering_pars_fragment:bw,roughnessmap_fragment:Ew,roughnessmap_pars_fragment:Aw,shadowmap_pars_fragment:ww,shadowmap_pars_vertex:Nw,shadowmap_vertex:Rw,shadowmask_pars_fragment:Cw,skinbase_vertex:Pw,skinning_pars_vertex:Fw,skinning_vertex:Iw,skinnormal_vertex:Lw,specularmap_fragment:Dw,specularmap_pars_fragment:Uw,tonemapping_fragment:Bw,tonemapping_pars_fragment:Ow,transmission_fragment:zw,transmission_pars_fragment:Gw,uv_pars_fragment:kw,uv_pars_vertex:Vw,uv_vertex:Hw,worldpos_vertex:$w,background_vert:Ww,background_frag:qw,backgroundCube_vert:Xw,backgroundCube_frag:Yw,cube_vert:jw,cube_frag:Kw,depth_vert:Zw,depth_frag:Qw,distanceRGBA_vert:Jw,distanceRGBA_frag:tN,equirect_vert:eN,equirect_frag:nN,linedashed_vert:iN,linedashed_frag:sN,meshbasic_vert:rN,meshbasic_frag:oN,meshlambert_vert:aN,meshlambert_frag:lN,meshmatcap_vert:cN,meshmatcap_frag:hN,meshnormal_vert:uN,meshnormal_frag:dN,meshphong_vert:fN,meshphong_frag:pN,meshphysical_vert:mN,meshphysical_frag:gN,meshtoon_vert:xN,meshtoon_frag:yN,points_vert:_N,points_frag:MN,shadow_vert:SN,shadow_frag:TN,sprite_vert:vN,sprite_frag:bN},_t={common:{diffuse:{value:new oe(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new se},alphaMap:{value:null},alphaMapTransform:{value:new se},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new se}},envmap:{envMap:{value:null},envMapRotation:{value:new se},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new se}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new se}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new se},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new se},normalScale:{value:new ee(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new se},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new se}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new se}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new se}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new oe(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new oe(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new se},alphaTest:{value:0},uvTransform:{value:new se}},sprite:{diffuse:{value:new oe(16777215)},opacity:{value:1},center:{value:new ee(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new se},alphaMap:{value:null},alphaMapTransform:{value:new se},alphaTest:{value:0}}},as={basic:{uniforms:Wn([_t.common,_t.specularmap,_t.envmap,_t.aomap,_t.lightmap,_t.fog]),vertexShader:te.meshbasic_vert,fragmentShader:te.meshbasic_frag},lambert:{uniforms:Wn([_t.common,_t.specularmap,_t.envmap,_t.aomap,_t.lightmap,_t.emissivemap,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.fog,_t.lights,{emissive:{value:new oe(0)}}]),vertexShader:te.meshlambert_vert,fragmentShader:te.meshlambert_frag},phong:{uniforms:Wn([_t.common,_t.specularmap,_t.envmap,_t.aomap,_t.lightmap,_t.emissivemap,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.fog,_t.lights,{emissive:{value:new oe(0)},specular:{value:new oe(1118481)},shininess:{value:30}}]),vertexShader:te.meshphong_vert,fragmentShader:te.meshphong_frag},standard:{uniforms:Wn([_t.common,_t.envmap,_t.aomap,_t.lightmap,_t.emissivemap,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.roughnessmap,_t.metalnessmap,_t.fog,_t.lights,{emissive:{value:new oe(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:te.meshphysical_vert,fragmentShader:te.meshphysical_frag},toon:{uniforms:Wn([_t.common,_t.aomap,_t.lightmap,_t.emissivemap,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.gradientmap,_t.fog,_t.lights,{emissive:{value:new oe(0)}}]),vertexShader:te.meshtoon_vert,fragmentShader:te.meshtoon_frag},matcap:{uniforms:Wn([_t.common,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.fog,{matcap:{value:null}}]),vertexShader:te.meshmatcap_vert,fragmentShader:te.meshmatcap_frag},points:{uniforms:Wn([_t.points,_t.fog]),vertexShader:te.points_vert,fragmentShader:te.points_frag},dashed:{uniforms:Wn([_t.common,_t.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:te.linedashed_vert,fragmentShader:te.linedashed_frag},depth:{uniforms:Wn([_t.common,_t.displacementmap]),vertexShader:te.depth_vert,fragmentShader:te.depth_frag},normal:{uniforms:Wn([_t.common,_t.bumpmap,_t.normalmap,_t.displacementmap,{opacity:{value:1}}]),vertexShader:te.meshnormal_vert,fragmentShader:te.meshnormal_frag},sprite:{uniforms:Wn([_t.sprite,_t.fog]),vertexShader:te.sprite_vert,fragmentShader:te.sprite_frag},background:{uniforms:{uvTransform:{value:new se},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:te.background_vert,fragmentShader:te.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new se}},vertexShader:te.backgroundCube_vert,fragmentShader:te.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:te.cube_vert,fragmentShader:te.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:te.equirect_vert,fragmentShader:te.equirect_frag},distanceRGBA:{uniforms:Wn([_t.common,_t.displacementmap,{referencePosition:{value:new U},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:te.distanceRGBA_vert,fragmentShader:te.distanceRGBA_frag},shadow:{uniforms:Wn([_t.lights,_t.fog,{color:{value:new oe(0)},opacity:{value:1}}]),vertexShader:te.shadow_vert,fragmentShader:te.shadow_frag}};as.physical={uniforms:Wn([as.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new se},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new se},clearcoatNormalScale:{value:new ee(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new se},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new se},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new se},sheen:{value:0},sheenColor:{value:new oe(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new se},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new se},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new se},transmissionSamplerSize:{value:new ee},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new se},attenuationDistance:{value:0},attenuationColor:{value:new oe(0)},specularColor:{value:new oe(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new se},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new se},anisotropyVector:{value:new ee},anisotropyMap:{value:null},anisotropyMapTransform:{value:new se}}]),vertexShader:te.meshphysical_vert,fragmentShader:te.meshphysical_frag};const vh={r:0,b:0,g:0},Wr=new Pr,EN=new He;function AN(r,t,e,n,i,s,o){const a=new oe(0);let l=s===!0?0:1,c,h,u=null,d=0,f=null;function p(_){let y=_.isScene===!0?_.background:null;return y&&y.isTexture&&(y=(_.backgroundBlurriness>0?e:t).get(y)),y}function x(_){let y=!1;const S=p(_);S===null?g(a,l):S&&S.isColor&&(g(S,1),y=!0);const w=r.xr.getEnvironmentBlendMode();w==="additive"?n.buffers.color.setClear(0,0,0,1,o):w==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,o),(r.autoClear||y)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil))}function m(_,y){const S=p(y);S&&(S.isCubeTexture||S.mapping===_d)?(h===void 0&&(h=new Dn(new Uc(1,1,1),new Fr({name:"BackgroundCubeMaterial",uniforms:nl(as.backgroundCube.uniforms),vertexShader:as.backgroundCube.vertexShader,fragmentShader:as.backgroundCube.fragmentShader,side:ii,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(w,A,T){this.matrixWorld.copyPosition(T.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(h)),Wr.copy(y.backgroundRotation),Wr.x*=-1,Wr.y*=-1,Wr.z*=-1,S.isCubeTexture&&S.isRenderTargetTexture===!1&&(Wr.y*=-1,Wr.z*=-1),h.material.uniforms.envMap.value=S,h.material.uniforms.flipEnvMap.value=S.isCubeTexture&&S.isRenderTargetTexture===!1?-1:1,h.material.uniforms.backgroundBlurriness.value=y.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=y.backgroundIntensity,h.material.uniforms.backgroundRotation.value.setFromMatrix4(EN.makeRotationFromEuler(Wr)),h.material.toneMapped=be.getTransfer(S.colorSpace)!==Be,(u!==S||d!==S.version||f!==r.toneMapping)&&(h.material.needsUpdate=!0,u=S,d=S.version,f=r.toneMapping),h.layers.enableAll(),_.unshift(h,h.geometry,h.material,0,0,null)):S&&S.isTexture&&(c===void 0&&(c=new Dn(new Fo(2,2),new Fr({name:"BackgroundMaterial",uniforms:nl(as.background.uniforms),vertexShader:as.background.vertexShader,fragmentShader:as.background.fragmentShader,side:Cr,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(c)),c.material.uniforms.t2D.value=S,c.material.uniforms.backgroundIntensity.value=y.backgroundIntensity,c.material.toneMapped=be.getTransfer(S.colorSpace)!==Be,S.matrixAutoUpdate===!0&&S.updateMatrix(),c.material.uniforms.uvTransform.value.copy(S.matrix),(u!==S||d!==S.version||f!==r.toneMapping)&&(c.material.needsUpdate=!0,u=S,d=S.version,f=r.toneMapping),c.layers.enableAll(),_.unshift(c,c.geometry,c.material,0,0,null))}function g(_,y){_.getRGB(vh,mS(r)),n.buffers.color.setClear(vh.r,vh.g,vh.b,y,o)}return{getClearColor:function(){return a},setClearColor:function(_,y=1){a.set(_),l=y,g(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(_){l=_,g(a,l)},render:x,addToRenderList:m}}function wN(r,t){const e=r.getParameter(r.MAX_VERTEX_ATTRIBS),n={},i=d(null);let s=i,o=!1;function a(M,b,k,z,Z){let nt=!1;const q=u(z,k,b);s!==q&&(s=q,c(s.object)),nt=f(M,z,k,Z),nt&&p(M,z,k,Z),Z!==null&&t.update(Z,r.ELEMENT_ARRAY_BUFFER),(nt||o)&&(o=!1,S(M,b,k,z),Z!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.get(Z).buffer))}function l(){return r.createVertexArray()}function c(M){return r.bindVertexArray(M)}function h(M){return r.deleteVertexArray(M)}function u(M,b,k){const z=k.wireframe===!0;let Z=n[M.id];Z===void 0&&(Z={},n[M.id]=Z);let nt=Z[b.id];nt===void 0&&(nt={},Z[b.id]=nt);let q=nt[z];return q===void 0&&(q=d(l()),nt[z]=q),q}function d(M){const b=[],k=[],z=[];for(let Z=0;Z<e;Z++)b[Z]=0,k[Z]=0,z[Z]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:b,enabledAttributes:k,attributeDivisors:z,object:M,attributes:{},index:null}}function f(M,b,k,z){const Z=s.attributes,nt=b.attributes;let q=0;const rt=k.getAttributes();for(const W in rt)if(rt[W].location>=0){const ft=Z[W];let yt=nt[W];if(yt===void 0&&(W==="instanceMatrix"&&M.instanceMatrix&&(yt=M.instanceMatrix),W==="instanceColor"&&M.instanceColor&&(yt=M.instanceColor)),ft===void 0||ft.attribute!==yt||yt&&ft.data!==yt.data)return!0;q++}return s.attributesNum!==q||s.index!==z}function p(M,b,k,z){const Z={},nt=b.attributes;let q=0;const rt=k.getAttributes();for(const W in rt)if(rt[W].location>=0){let ft=nt[W];ft===void 0&&(W==="instanceMatrix"&&M.instanceMatrix&&(ft=M.instanceMatrix),W==="instanceColor"&&M.instanceColor&&(ft=M.instanceColor));const yt={};yt.attribute=ft,ft&&ft.data&&(yt.data=ft.data),Z[W]=yt,q++}s.attributes=Z,s.attributesNum=q,s.index=z}function x(){const M=s.newAttributes;for(let b=0,k=M.length;b<k;b++)M[b]=0}function m(M){g(M,0)}function g(M,b){const k=s.newAttributes,z=s.enabledAttributes,Z=s.attributeDivisors;k[M]=1,z[M]===0&&(r.enableVertexAttribArray(M),z[M]=1),Z[M]!==b&&(r.vertexAttribDivisor(M,b),Z[M]=b)}function _(){const M=s.newAttributes,b=s.enabledAttributes;for(let k=0,z=b.length;k<z;k++)b[k]!==M[k]&&(r.disableVertexAttribArray(k),b[k]=0)}function y(M,b,k,z,Z,nt,q){q===!0?r.vertexAttribIPointer(M,b,k,Z,nt):r.vertexAttribPointer(M,b,k,z,Z,nt)}function S(M,b,k,z){x();const Z=z.attributes,nt=k.getAttributes(),q=b.defaultAttributeValues;for(const rt in nt){const W=nt[rt];if(W.location>=0){let dt=Z[rt];if(dt===void 0&&(rt==="instanceMatrix"&&M.instanceMatrix&&(dt=M.instanceMatrix),rt==="instanceColor"&&M.instanceColor&&(dt=M.instanceColor)),dt!==void 0){const ft=dt.normalized,yt=dt.itemSize,ie=t.get(dt);if(ie===void 0)continue;const he=ie.buffer,et=ie.type,ht=ie.bytesPerElement,Ft=et===r.INT||et===r.UNSIGNED_INT||dt.gpuType===Vg;if(dt.isInterleavedBufferAttribute){const wt=dt.data,Xt=wt.stride,Gt=dt.offset;if(wt.isInstancedInterleavedBuffer){for(let fe=0;fe<W.locationSize;fe++)g(W.location+fe,wt.meshPerAttribute);M.isInstancedMesh!==!0&&z._maxInstanceCount===void 0&&(z._maxInstanceCount=wt.meshPerAttribute*wt.count)}else for(let fe=0;fe<W.locationSize;fe++)m(W.location+fe);r.bindBuffer(r.ARRAY_BUFFER,he);for(let fe=0;fe<W.locationSize;fe++)y(W.location+fe,yt/W.locationSize,et,ft,Xt*ht,(Gt+yt/W.locationSize*fe)*ht,Ft)}else{if(dt.isInstancedBufferAttribute){for(let wt=0;wt<W.locationSize;wt++)g(W.location+wt,dt.meshPerAttribute);M.isInstancedMesh!==!0&&z._maxInstanceCount===void 0&&(z._maxInstanceCount=dt.meshPerAttribute*dt.count)}else for(let wt=0;wt<W.locationSize;wt++)m(W.location+wt);r.bindBuffer(r.ARRAY_BUFFER,he);for(let wt=0;wt<W.locationSize;wt++)y(W.location+wt,yt/W.locationSize,et,ft,yt*ht,yt/W.locationSize*wt*ht,Ft)}}else if(q!==void 0){const ft=q[rt];if(ft!==void 0)switch(ft.length){case 2:r.vertexAttrib2fv(W.location,ft);break;case 3:r.vertexAttrib3fv(W.location,ft);break;case 4:r.vertexAttrib4fv(W.location,ft);break;default:r.vertexAttrib1fv(W.location,ft)}}}}_()}function w(){R();for(const M in n){const b=n[M];for(const k in b){const z=b[k];for(const Z in z)h(z[Z].object),delete z[Z];delete b[k]}delete n[M]}}function A(M){if(n[M.id]===void 0)return;const b=n[M.id];for(const k in b){const z=b[k];for(const Z in z)h(z[Z].object),delete z[Z];delete b[k]}delete n[M.id]}function T(M){for(const b in n){const k=n[b];if(k[M.id]===void 0)continue;const z=k[M.id];for(const Z in z)h(z[Z].object),delete z[Z];delete k[M.id]}}function R(){$(),o=!0,s!==i&&(s=i,c(s.object))}function $(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:a,reset:R,resetDefaultState:$,dispose:w,releaseStatesOfGeometry:A,releaseStatesOfProgram:T,initAttributes:x,enableAttribute:m,disableUnusedAttributes:_}}function NN(r,t,e){let n;function i(c){n=c}function s(c,h){r.drawArrays(n,c,h),e.update(h,n,1)}function o(c,h,u){u!==0&&(r.drawArraysInstanced(n,c,h,u),e.update(h,n,u))}function a(c,h,u){if(u===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,c,0,h,0,u);let f=0;for(let p=0;p<u;p++)f+=h[p];e.update(f,n,1)}function l(c,h,u,d){if(u===0)return;const f=t.get("WEBGL_multi_draw");if(f===null)for(let p=0;p<c.length;p++)o(c[p],h[p],d[p]);else{f.multiDrawArraysInstancedWEBGL(n,c,0,h,0,d,0,u);let p=0;for(let x=0;x<u;x++)p+=h[x];for(let x=0;x<d.length;x++)e.update(p,n,d[x])}}this.setMode=i,this.render=s,this.renderInstances=o,this.renderMultiDraw=a,this.renderMultiDrawInstances=l}function RN(r,t,e,n){let i;function s(){if(i!==void 0)return i;if(t.has("EXT_texture_filter_anisotropic")===!0){const T=t.get("EXT_texture_filter_anisotropic");i=r.getParameter(T.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function o(T){return!(T!==ji&&n.convert(T)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT))}function a(T){const R=T===Lc&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(T!==Xs&&n.convert(T)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)&&T!==cs&&!R)}function l(T){if(T==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";T="mediump"}return T==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=e.precision!==void 0?e.precision:"highp";const h=l(c);h!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",h,"instead."),c=h);const u=e.logarithmicDepthBuffer===!0,d=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control");if(d===!0){const T=t.get("EXT_clip_control");T.clipControlEXT(T.LOWER_LEFT_EXT,T.ZERO_TO_ONE_EXT)}const f=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),p=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),x=r.getParameter(r.MAX_TEXTURE_SIZE),m=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),g=r.getParameter(r.MAX_VERTEX_ATTRIBS),_=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),y=r.getParameter(r.MAX_VARYING_VECTORS),S=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),w=p>0,A=r.getParameter(r.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:o,textureTypeReadable:a,precision:c,logarithmicDepthBuffer:u,reverseDepthBuffer:d,maxTextures:f,maxVertexTextures:p,maxTextureSize:x,maxCubemapSize:m,maxAttributes:g,maxVertexUniforms:_,maxVaryings:y,maxFragmentUniforms:S,vertexTextures:w,maxSamples:A}}function CN(r){const t=this;let e=null,n=0,i=!1,s=!1;const o=new _r,a=new se,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,d){const f=u.length!==0||d||n!==0||i;return i=d,n=u.length,f},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(u,d){e=h(u,d,0)},this.setState=function(u,d,f){const p=u.clippingPlanes,x=u.clipIntersection,m=u.clipShadows,g=r.get(u);if(!i||p===null||p.length===0||s&&!m)s?h(null):c();else{const _=s?0:n,y=_*4;let S=g.clippingState||null;l.value=S,S=h(p,d,y,f);for(let w=0;w!==y;++w)S[w]=e[w];g.clippingState=S,this.numIntersection=x?this.numPlanes:0,this.numPlanes+=_}};function c(){l.value!==e&&(l.value=e,l.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function h(u,d,f,p){const x=u!==null?u.length:0;let m=null;if(x!==0){if(m=l.value,p!==!0||m===null){const g=f+x*4,_=d.matrixWorldInverse;a.getNormalMatrix(_),(m===null||m.length<g)&&(m=new Float32Array(g));for(let y=0,S=f;y!==x;++y,S+=4)o.copy(u[y]).applyMatrix4(_,a),o.normal.toArray(m,S),m[S+3]=o.constant}l.value=m,l.needsUpdate=!0}return t.numPlanes=x,t.numIntersection=0,m}}function PN(r){let t=new WeakMap;function e(o,a){return a===am?o.mapping=Qa:a===lm&&(o.mapping=Ja),o}function n(o){if(o&&o.isTexture){const a=o.mapping;if(a===am||a===lm)if(t.has(o)){const l=t.get(o).texture;return e(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=new VE(l.height);return c.fromEquirectangularTexture(r,o),t.set(o,c),o.addEventListener("dispose",i),e(c.texture,o.mapping)}else return null}}return o}function i(o){const a=o.target;a.removeEventListener("dispose",i);const l=t.get(a);l!==void 0&&(t.delete(a),l.dispose())}function s(){t=new WeakMap}return{get:n,dispose:s}}let _S=class extends gS{constructor(t=-1,e=1,n=1,i=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-t,o=n+t,a=i+e,l=i-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,o=s+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}};const Na=4,G0=[.125,.215,.35,.446,.526,.582],ao=20,wf=new _S,k0=new oe;let Nf=null,Rf=0,Cf=0,Pf=!1;const eo=(1+Math.sqrt(5))/2,Zo=1/eo,V0=[new U(-eo,Zo,0),new U(eo,Zo,0),new U(-Zo,0,eo),new U(Zo,0,eo),new U(0,eo,-Zo),new U(0,eo,Zo),new U(-1,1,-1),new U(1,1,-1),new U(-1,1,1),new U(1,1,1)];let H0=class{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Nf=this._renderer.getRenderTarget(),Rf=this._renderer.getActiveCubeFace(),Cf=this._renderer.getActiveMipmapLevel(),Pf=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(t,n,i,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=q0(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=W0(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Nf,Rf,Cf),this._renderer.xr.enabled=Pf,t.scissorTest=!1,bh(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===Qa||t.mapping===Ja?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Nf=this._renderer.getRenderTarget(),Rf=this._renderer.getActiveCubeFace(),Cf=this._renderer.getActiveMipmapLevel(),Pf=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:qi,minFilter:qi,generateMipmaps:!1,type:Lc,format:ji,colorSpace:Br,depthBuffer:!1},i=$0(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=$0(t,e,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=FN(s)),this._blurMaterial=IN(s,t,e)}return i}_compileMaterial(t){const e=new Dn(this._lodPlanes[0],t);this._renderer.compile(e,wf)}_sceneToCubeUV(t,e,n,i){const a=new Ni(90,1,e,n),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,u=h.autoClear,d=h.toneMapping;h.getClearColor(k0),h.toneMapping=Nr,h.autoClear=!1;const f=new Dc({name:"PMREM.Background",side:ii,depthWrite:!1,depthTest:!1}),p=new Dn(new Uc,f);let x=!1;const m=t.background;m?m.isColor&&(f.color.copy(m),t.background=null,x=!0):(f.color.copy(k0),x=!0);for(let g=0;g<6;g++){const _=g%3;_===0?(a.up.set(0,l[g],0),a.lookAt(c[g],0,0)):_===1?(a.up.set(0,0,l[g]),a.lookAt(0,c[g],0)):(a.up.set(0,l[g],0),a.lookAt(0,0,c[g]));const y=this._cubeSize;bh(i,_*y,g>2?y:0,y,y),h.setRenderTarget(i),x&&h.render(p,a),h.render(t,a)}p.geometry.dispose(),p.material.dispose(),h.toneMapping=d,h.autoClear=u,t.background=m}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===Qa||t.mapping===Ja;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=q0()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=W0());const s=i?this._cubemapMaterial:this._equirectMaterial,o=new Dn(this._lodPlanes[0],s),a=s.uniforms;a.envMap.value=t;const l=this._cubeSize;bh(e,0,0,3*l,2*l),n.setRenderTarget(e),n.render(o,wf)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const i=this._lodPlanes.length;for(let s=1;s<i;s++){const o=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),a=V0[(i-s-1)%V0.length];this._blur(t,s-1,s,o,a)}e.autoClear=n}_blur(t,e,n,i,s){const o=this._pingPongRenderTarget;this._halfBlur(t,o,e,n,i,"latitudinal",s),this._halfBlur(o,t,n,n,i,"longitudinal",s)}_halfBlur(t,e,n,i,s,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=new Dn(this._lodPlanes[i],c),d=c.uniforms,f=this._sizeLods[n]-1,p=isFinite(s)?Math.PI/(2*f):2*Math.PI/(2*ao-1),x=s/p,m=isFinite(s)?1+Math.floor(h*x):ao;m>ao&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${ao}`);const g=[];let _=0;for(let T=0;T<ao;++T){const R=T/x,$=Math.exp(-R*R/2);g.push($),T===0?_+=$:T<m&&(_+=2*$)}for(let T=0;T<g.length;T++)g[T]=g[T]/_;d.envMap.value=t.texture,d.samples.value=m,d.weights.value=g,d.latitudinal.value=o==="latitudinal",a&&(d.poleAxis.value=a);const{_lodMax:y}=this;d.dTheta.value=p,d.mipInt.value=y-n;const S=this._sizeLods[i],w=3*S*(i>y-Na?i-y+Na:0),A=4*(this._cubeSize-S);bh(e,w,A,3*S,2*S),l.setRenderTarget(e),l.render(u,wf)}};function FN(r){const t=[],e=[],n=[];let i=r;const s=r-Na+1+G0.length;for(let o=0;o<s;o++){const a=Math.pow(2,i);e.push(a);let l=1/a;o>r-Na?l=G0[o-r+Na-1]:o===0&&(l=0),n.push(l);const c=1/(a-2),h=-c,u=1+c,d=[h,h,u,h,u,u,h,h,u,u,h,u],f=6,p=6,x=3,m=2,g=1,_=new Float32Array(x*p*f),y=new Float32Array(m*p*f),S=new Float32Array(g*p*f);for(let A=0;A<f;A++){const T=A%3*2/3-1,R=A>2?0:-1,$=[T,R,0,T+2/3,R,0,T+2/3,R+1,0,T,R,0,T+2/3,R+1,0,T,R+1,0];_.set($,x*p*A),y.set(d,m*p*A);const M=[A,A,A,A,A,A];S.set(M,g*p*A)}const w=new ts;w.setAttribute("position",new Qi(_,x)),w.setAttribute("uv",new Qi(y,m)),w.setAttribute("faceIndex",new Qi(S,g)),t.push(w),i>Na&&i--}return{lodPlanes:t,sizeLods:e,sigmas:n}}function $0(r,t,e){const n=new yo(r,t,e);return n.texture.mapping=_d,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function bh(r,t,e,n,i){r.viewport.set(t,e,n,i),r.scissor.set(t,e,n,i)}function IN(r,t,e){const n=new Float32Array(ao),i=new U(0,1,0);return new Fr({name:"SphericalGaussianBlur",defines:{n:ao,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:tx(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:wr,depthTest:!1,depthWrite:!1})}function W0(){return new Fr({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:tx(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:wr,depthTest:!1,depthWrite:!1})}function q0(){return new Fr({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:tx(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:wr,depthTest:!1,depthWrite:!1})}function tx(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function LN(r){let t=new WeakMap,e=null;function n(a){if(a&&a.isTexture){const l=a.mapping,c=l===am||l===lm,h=l===Qa||l===Ja;if(c||h){let u=t.get(a);const d=u!==void 0?u.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==d)return e===null&&(e=new H0(r)),u=c?e.fromEquirectangular(a,u):e.fromCubemap(a,u),u.texture.pmremVersion=a.pmremVersion,t.set(a,u),u.texture;if(u!==void 0)return u.texture;{const f=a.image;return c&&f&&f.height>0||h&&f&&i(f)?(e===null&&(e=new H0(r)),u=c?e.fromEquirectangular(a):e.fromCubemap(a),u.texture.pmremVersion=a.pmremVersion,t.set(a,u),a.addEventListener("dispose",s),u.texture):null}}}return a}function i(a){let l=0;const c=6;for(let h=0;h<c;h++)a[h]!==void 0&&l++;return l===c}function s(a){const l=a.target;l.removeEventListener("dispose",s);const c=t.get(l);c!==void 0&&(t.delete(l),c.dispose())}function o(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:n,dispose:o}}function DN(r){const t={};function e(n){if(t[n]!==void 0)return t[n];let i;switch(n){case"WEBGL_depth_texture":i=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=r.getExtension(n)}return t[n]=i,i}return{has:function(n){return e(n)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(n){const i=e(n);return i===null&&Tu("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function UN(r,t,e,n){const i={},s=new WeakMap;function o(u){const d=u.target;d.index!==null&&t.remove(d.index);for(const p in d.attributes)t.remove(d.attributes[p]);for(const p in d.morphAttributes){const x=d.morphAttributes[p];for(let m=0,g=x.length;m<g;m++)t.remove(x[m])}d.removeEventListener("dispose",o),delete i[d.id];const f=s.get(d);f&&(t.remove(f),s.delete(d)),n.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,e.memory.geometries--}function a(u,d){return i[d.id]===!0||(d.addEventListener("dispose",o),i[d.id]=!0,e.memory.geometries++),d}function l(u){const d=u.attributes;for(const p in d)t.update(d[p],r.ARRAY_BUFFER);const f=u.morphAttributes;for(const p in f){const x=f[p];for(let m=0,g=x.length;m<g;m++)t.update(x[m],r.ARRAY_BUFFER)}}function c(u){const d=[],f=u.index,p=u.attributes.position;let x=0;if(f!==null){const _=f.array;x=f.version;for(let y=0,S=_.length;y<S;y+=3){const w=_[y+0],A=_[y+1],T=_[y+2];d.push(w,A,A,T,T,w)}}else if(p!==void 0){const _=p.array;x=p.version;for(let y=0,S=_.length/3-1;y<S;y+=3){const w=y+0,A=y+1,T=y+2;d.push(w,A,A,T,T,w)}}else return;const m=new(iS(d)?dS:uS)(d,1);m.version=x;const g=s.get(u);g&&t.remove(g),s.set(u,m)}function h(u){const d=s.get(u);if(d){const f=u.index;f!==null&&d.version<f.version&&c(u)}else c(u);return s.get(u)}return{get:a,update:l,getWireframeAttribute:h}}function BN(r,t,e){let n;function i(d){n=d}let s,o;function a(d){s=d.type,o=d.bytesPerElement}function l(d,f){r.drawElements(n,f,s,d*o),e.update(f,n,1)}function c(d,f,p){p!==0&&(r.drawElementsInstanced(n,f,s,d*o,p),e.update(f,n,p))}function h(d,f,p){if(p===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,f,0,s,d,0,p);let m=0;for(let g=0;g<p;g++)m+=f[g];e.update(m,n,1)}function u(d,f,p,x){if(p===0)return;const m=t.get("WEBGL_multi_draw");if(m===null)for(let g=0;g<d.length;g++)c(d[g]/o,f[g],x[g]);else{m.multiDrawElementsInstancedWEBGL(n,f,0,s,d,0,x,0,p);let g=0;for(let _=0;_<p;_++)g+=f[_];for(let _=0;_<x.length;_++)e.update(g,n,x[_])}}this.setMode=i,this.setIndex=a,this.render=l,this.renderInstances=c,this.renderMultiDraw=h,this.renderMultiDrawInstances=u}function ON(r){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,o,a){switch(e.calls++,o){case r.TRIANGLES:e.triangles+=a*(s/3);break;case r.LINES:e.lines+=a*(s/2);break;case r.LINE_STRIP:e.lines+=a*(s-1);break;case r.LINE_LOOP:e.lines+=a*s;break;case r.POINTS:e.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function i(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:i,update:n}}function zN(r,t,e){const n=new WeakMap,i=new on;function s(o,a,l){const c=o.morphTargetInfluences,h=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,u=h!==void 0?h.length:0;let d=n.get(a);if(d===void 0||d.count!==u){let M=function(){R.dispose(),n.delete(a),a.removeEventListener("dispose",M)};var f=M;d!==void 0&&d.texture.dispose();const p=a.morphAttributes.position!==void 0,x=a.morphAttributes.normal!==void 0,m=a.morphAttributes.color!==void 0,g=a.morphAttributes.position||[],_=a.morphAttributes.normal||[],y=a.morphAttributes.color||[];let S=0;p===!0&&(S=1),x===!0&&(S=2),m===!0&&(S=3);let w=a.attributes.position.count*S,A=1;w>t.maxTextureSize&&(A=Math.ceil(w/t.maxTextureSize),w=t.maxTextureSize);const T=new Float32Array(w*A*4*u),R=new oS(T,w,A,u);R.type=cs,R.needsUpdate=!0;const $=S*4;for(let b=0;b<u;b++){const k=g[b],z=_[b],Z=y[b],nt=w*A*4*b;for(let q=0;q<k.count;q++){const rt=q*$;p===!0&&(i.fromBufferAttribute(k,q),T[nt+rt+0]=i.x,T[nt+rt+1]=i.y,T[nt+rt+2]=i.z,T[nt+rt+3]=0),x===!0&&(i.fromBufferAttribute(z,q),T[nt+rt+4]=i.x,T[nt+rt+5]=i.y,T[nt+rt+6]=i.z,T[nt+rt+7]=0),m===!0&&(i.fromBufferAttribute(Z,q),T[nt+rt+8]=i.x,T[nt+rt+9]=i.y,T[nt+rt+10]=i.z,T[nt+rt+11]=Z.itemSize===4?i.w:1)}}d={count:u,texture:R,size:new ee(w,A)},n.set(a,d),a.addEventListener("dispose",M)}if(o.isInstancedMesh===!0&&o.morphTexture!==null)l.getUniforms().setValue(r,"morphTexture",o.morphTexture,e);else{let p=0;for(let m=0;m<c.length;m++)p+=c[m];const x=a.morphTargetsRelative?1:1-p;l.getUniforms().setValue(r,"morphTargetBaseInfluence",x),l.getUniforms().setValue(r,"morphTargetInfluences",c)}l.getUniforms().setValue(r,"morphTargetsTexture",d.texture,e),l.getUniforms().setValue(r,"morphTargetsTextureSize",d.size)}return{update:s}}function GN(r,t,e,n){let i=new WeakMap;function s(l){const c=n.render.frame,h=l.geometry,u=t.get(l,h);if(i.get(u)!==c&&(t.update(u),i.set(u,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",a)===!1&&l.addEventListener("dispose",a),i.get(l)!==c&&(e.update(l.instanceMatrix,r.ARRAY_BUFFER),l.instanceColor!==null&&e.update(l.instanceColor,r.ARRAY_BUFFER),i.set(l,c))),l.isSkinnedMesh){const d=l.skeleton;i.get(d)!==c&&(d.update(),i.set(d,c))}return u}function o(){i=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a),e.remove(c.instanceMatrix),c.instanceColor!==null&&e.remove(c.instanceColor)}return{update:s,dispose:o}}let MS=class extends is{constructor(t,e,n,i,s,o,a,l,c,h=Ga){if(h!==Ga&&h!==el)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===Ga&&(n=xo),n===void 0&&h===el&&(n=tl),super(null,i,s,o,a,l,h,n,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:ti,this.minFilter=l!==void 0?l:ti,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}};const SS=new is,X0=new MS(1,1),TS=new oS,vS=new AE,bS=new xS,Y0=[],j0=[],K0=new Float32Array(16),Z0=new Float32Array(9),Q0=new Float32Array(4);function ml(r,t,e){const n=r[0];if(n<=0||n>0)return r;const i=t*e;let s=Y0[i];if(s===void 0&&(s=new Float32Array(i),Y0[i]=s),t!==0){n.toArray(s,0);for(let o=1,a=0;o!==t;++o)a+=e,r[o].toArray(s,a)}return s}function pn(r,t){if(r.length!==t.length)return!1;for(let e=0,n=r.length;e<n;e++)if(r[e]!==t[e])return!1;return!0}function mn(r,t){for(let e=0,n=t.length;e<n;e++)r[e]=t[e]}function Sd(r,t){let e=j0[t];e===void 0&&(e=new Int32Array(t),j0[t]=e);for(let n=0;n!==t;++n)e[n]=r.allocateTextureUnit();return e}function kN(r,t){const e=this.cache;e[0]!==t&&(r.uniform1f(this.addr,t),e[0]=t)}function VN(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(pn(e,t))return;r.uniform2fv(this.addr,t),mn(e,t)}}function HN(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(r.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(pn(e,t))return;r.uniform3fv(this.addr,t),mn(e,t)}}function $N(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(pn(e,t))return;r.uniform4fv(this.addr,t),mn(e,t)}}function WN(r,t){const e=this.cache,n=t.elements;if(n===void 0){if(pn(e,t))return;r.uniformMatrix2fv(this.addr,!1,t),mn(e,t)}else{if(pn(e,n))return;Q0.set(n),r.uniformMatrix2fv(this.addr,!1,Q0),mn(e,n)}}function qN(r,t){const e=this.cache,n=t.elements;if(n===void 0){if(pn(e,t))return;r.uniformMatrix3fv(this.addr,!1,t),mn(e,t)}else{if(pn(e,n))return;Z0.set(n),r.uniformMatrix3fv(this.addr,!1,Z0),mn(e,n)}}function XN(r,t){const e=this.cache,n=t.elements;if(n===void 0){if(pn(e,t))return;r.uniformMatrix4fv(this.addr,!1,t),mn(e,t)}else{if(pn(e,n))return;K0.set(n),r.uniformMatrix4fv(this.addr,!1,K0),mn(e,n)}}function YN(r,t){const e=this.cache;e[0]!==t&&(r.uniform1i(this.addr,t),e[0]=t)}function jN(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(pn(e,t))return;r.uniform2iv(this.addr,t),mn(e,t)}}function KN(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(pn(e,t))return;r.uniform3iv(this.addr,t),mn(e,t)}}function ZN(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(pn(e,t))return;r.uniform4iv(this.addr,t),mn(e,t)}}function QN(r,t){const e=this.cache;e[0]!==t&&(r.uniform1ui(this.addr,t),e[0]=t)}function JN(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(pn(e,t))return;r.uniform2uiv(this.addr,t),mn(e,t)}}function tR(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(pn(e,t))return;r.uniform3uiv(this.addr,t),mn(e,t)}}function eR(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(pn(e,t))return;r.uniform4uiv(this.addr,t),mn(e,t)}}function nR(r,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i);let s;this.type===r.SAMPLER_2D_SHADOW?(X0.compareFunction=tS,s=X0):s=SS,e.setTexture2D(t||s,i)}function iR(r,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),e.setTexture3D(t||vS,i)}function sR(r,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),e.setTextureCube(t||bS,i)}function rR(r,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),e.setTexture2DArray(t||TS,i)}function oR(r){switch(r){case 5126:return kN;case 35664:return VN;case 35665:return HN;case 35666:return $N;case 35674:return WN;case 35675:return qN;case 35676:return XN;case 5124:case 35670:return YN;case 35667:case 35671:return jN;case 35668:case 35672:return KN;case 35669:case 35673:return ZN;case 5125:return QN;case 36294:return JN;case 36295:return tR;case 36296:return eR;case 35678:case 36198:case 36298:case 36306:case 35682:return nR;case 35679:case 36299:case 36307:return iR;case 35680:case 36300:case 36308:case 36293:return sR;case 36289:case 36303:case 36311:case 36292:return rR}}function aR(r,t){r.uniform1fv(this.addr,t)}function lR(r,t){const e=ml(t,this.size,2);r.uniform2fv(this.addr,e)}function cR(r,t){const e=ml(t,this.size,3);r.uniform3fv(this.addr,e)}function hR(r,t){const e=ml(t,this.size,4);r.uniform4fv(this.addr,e)}function uR(r,t){const e=ml(t,this.size,4);r.uniformMatrix2fv(this.addr,!1,e)}function dR(r,t){const e=ml(t,this.size,9);r.uniformMatrix3fv(this.addr,!1,e)}function fR(r,t){const e=ml(t,this.size,16);r.uniformMatrix4fv(this.addr,!1,e)}function pR(r,t){r.uniform1iv(this.addr,t)}function mR(r,t){r.uniform2iv(this.addr,t)}function gR(r,t){r.uniform3iv(this.addr,t)}function xR(r,t){r.uniform4iv(this.addr,t)}function yR(r,t){r.uniform1uiv(this.addr,t)}function _R(r,t){r.uniform2uiv(this.addr,t)}function MR(r,t){r.uniform3uiv(this.addr,t)}function SR(r,t){r.uniform4uiv(this.addr,t)}function TR(r,t,e){const n=this.cache,i=t.length,s=Sd(e,i);pn(n,s)||(r.uniform1iv(this.addr,s),mn(n,s));for(let o=0;o!==i;++o)e.setTexture2D(t[o]||SS,s[o])}function vR(r,t,e){const n=this.cache,i=t.length,s=Sd(e,i);pn(n,s)||(r.uniform1iv(this.addr,s),mn(n,s));for(let o=0;o!==i;++o)e.setTexture3D(t[o]||vS,s[o])}function bR(r,t,e){const n=this.cache,i=t.length,s=Sd(e,i);pn(n,s)||(r.uniform1iv(this.addr,s),mn(n,s));for(let o=0;o!==i;++o)e.setTextureCube(t[o]||bS,s[o])}function ER(r,t,e){const n=this.cache,i=t.length,s=Sd(e,i);pn(n,s)||(r.uniform1iv(this.addr,s),mn(n,s));for(let o=0;o!==i;++o)e.setTexture2DArray(t[o]||TS,s[o])}function AR(r){switch(r){case 5126:return aR;case 35664:return lR;case 35665:return cR;case 35666:return hR;case 35674:return uR;case 35675:return dR;case 35676:return fR;case 5124:case 35670:return pR;case 35667:case 35671:return mR;case 35668:case 35672:return gR;case 35669:case 35673:return xR;case 5125:return yR;case 36294:return _R;case 36295:return MR;case 36296:return SR;case 35678:case 36198:case 36298:case 36306:case 35682:return TR;case 35679:case 36299:case 36307:return vR;case 35680:case 36300:case 36308:case 36293:return bR;case 36289:case 36303:case 36311:case 36292:return ER}}class wR{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=oR(e.type)}}class NR{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=AR(e.type)}}class RR{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const i=this.seq;for(let s=0,o=i.length;s!==o;++s){const a=i[s];a.setValue(t,e[a.id],n)}}}const Ff=/(\w+)(\])?(\[|\.)?/g;function J0(r,t){r.seq.push(t),r.map[t.id]=t}function CR(r,t,e){const n=r.name,i=n.length;for(Ff.lastIndex=0;;){const s=Ff.exec(n),o=Ff.lastIndex;let a=s[1];const l=s[2]==="]",c=s[3];if(l&&(a=a|0),c===void 0||c==="["&&o+2===i){J0(e,c===void 0?new wR(a,r,t):new NR(a,r,t));break}else{let u=e.map[a];u===void 0&&(u=new RR(a),J0(e,u)),e=u}}}class Eu{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const s=t.getActiveUniform(e,i),o=t.getUniformLocation(e,s.name);CR(s,o,this)}}setValue(t,e,n,i){const s=this.map[e];s!==void 0&&s.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];i!==void 0&&this.setValue(t,n,i)}static upload(t,e,n,i){for(let s=0,o=e.length;s!==o;++s){const a=e[s],l=n[a.id];l.needsUpdate!==!1&&a.setValue(t,l.value,i)}}static seqWithValue(t,e){const n=[];for(let i=0,s=t.length;i!==s;++i){const o=t[i];o.id in e&&n.push(o)}return n}}function ty(r,t,e){const n=r.createShader(t);return r.shaderSource(n,e),r.compileShader(n),n}const PR=37297;let FR=0;function IR(r,t){const e=r.split(`
`),n=[],i=Math.max(t-6,0),s=Math.min(t+6,e.length);for(let o=i;o<s;o++){const a=o+1;n.push(`${a===t?">":" "} ${a}: ${e[o]}`)}return n.join(`
`)}function LR(r){const t=be.getPrimaries(be.workingColorSpace),e=be.getPrimaries(r);let n;switch(t===e?n="":t===ku&&e===Gu?n="LinearDisplayP3ToLinearSRGB":t===Gu&&e===ku&&(n="LinearSRGBToLinearDisplayP3"),r){case Br:case Md:return[n,"LinearTransferOETF"];case os:case Kg:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",r),[n,"LinearTransferOETF"]}}function ey(r,t,e){const n=r.getShaderParameter(t,r.COMPILE_STATUS),i=r.getShaderInfoLog(t).trim();if(n&&i==="")return"";const s=/ERROR: 0:(\d+)/.exec(i);if(s){const o=parseInt(s[1]);return e.toUpperCase()+`

`+i+`

`+IR(r.getShaderSource(t),o)}else return i}function DR(r,t){const e=LR(t);return`vec4 ${r}( vec4 value ) { return ${e[0]}( ${e[1]}( value ) ); }`}function UR(r,t){let e;switch(t){case U1:e="Linear";break;case B1:e="Reinhard";break;case O1:e="Cineon";break;case z1:e="ACESFilmic";break;case k1:e="AgX";break;case V1:e="Neutral";break;case G1:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+r+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const Eh=new U;function BR(){be.getLuminanceCoefficients(Eh);const r=Eh.x.toFixed(4),t=Eh.y.toFixed(4),e=Eh.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${r}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function OR(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",r.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(ic).join(`
`)}function zR(r){const t=[];for(const e in r){const n=r[e];n!==!1&&t.push("#define "+e+" "+n)}return t.join(`
`)}function GR(r,t){const e={},n=r.getProgramParameter(t,r.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const s=r.getActiveAttrib(t,i),o=s.name;let a=1;s.type===r.FLOAT_MAT2&&(a=2),s.type===r.FLOAT_MAT3&&(a=3),s.type===r.FLOAT_MAT4&&(a=4),e[o]={type:s.type,location:r.getAttribLocation(t,o),locationSize:a}}return e}function ic(r){return r!==""}function ny(r,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function iy(r,t){return r.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const kR=/^[ \t]*#include +<([\w\d./]+)>/gm;function Om(r){return r.replace(kR,HR)}const VR=new Map;function HR(r,t){let e=te[t];if(e===void 0){const n=VR.get(t);if(n!==void 0)e=te[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,n);else throw new Error("Can not resolve #include <"+t+">")}return Om(e)}const $R=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function sy(r){return r.replace($R,WR)}function WR(r,t,e,n){let i="";for(let s=parseInt(t);s<parseInt(e);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function ry(r){let t=`precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;return r.precision==="highp"?t+=`
#define HIGH_PRECISION`:r.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function qR(r){let t="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===kg?t="SHADOWMAP_TYPE_PCF":r.shadowMapType===m1?t="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===Ps&&(t="SHADOWMAP_TYPE_VSM"),t}function XR(r){let t="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case Qa:case Ja:t="ENVMAP_TYPE_CUBE";break;case _d:t="ENVMAP_TYPE_CUBE_UV";break}return t}function YR(r){let t="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case Ja:t="ENVMAP_MODE_REFRACTION";break}return t}function jR(r){let t="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case HM:t="ENVMAP_BLENDING_MULTIPLY";break;case L1:t="ENVMAP_BLENDING_MIX";break;case D1:t="ENVMAP_BLENDING_ADD";break}return t}function KR(r){const t=r.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,n=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:n,maxMip:e}}function ZR(r,t,e,n){const i=r.getContext(),s=e.defines;let o=e.vertexShader,a=e.fragmentShader;const l=qR(e),c=XR(e),h=YR(e),u=jR(e),d=KR(e),f=OR(e),p=zR(s),x=i.createProgram();let m,g,_=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(m=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p].filter(ic).join(`
`),m.length>0&&(m+=`
`),g=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p].filter(ic).join(`
`),g.length>0&&(g+=`
`)):(m=[ry(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(ic).join(`
`),g=[ry(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+h:"",e.envMap?"#define "+u:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==Nr?"#define TONE_MAPPING":"",e.toneMapping!==Nr?te.tonemapping_pars_fragment:"",e.toneMapping!==Nr?UR("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",te.colorspace_pars_fragment,DR("linearToOutputTexel",e.outputColorSpace),BR(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(ic).join(`
`)),o=Om(o),o=ny(o,e),o=iy(o,e),a=Om(a),a=ny(a,e),a=iy(a,e),o=sy(o),a=sy(a),e.isRawShaderMaterial!==!0&&(_=`#version 300 es
`,m=[f,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+m,g=["#define varying in",e.glslVersion===S0?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===S0?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+g);const y=_+m+o,S=_+g+a,w=ty(i,i.VERTEX_SHADER,y),A=ty(i,i.FRAGMENT_SHADER,S);i.attachShader(x,w),i.attachShader(x,A),e.index0AttributeName!==void 0?i.bindAttribLocation(x,0,e.index0AttributeName):e.morphTargets===!0&&i.bindAttribLocation(x,0,"position"),i.linkProgram(x);function T(b){if(r.debug.checkShaderErrors){const k=i.getProgramInfoLog(x).trim(),z=i.getShaderInfoLog(w).trim(),Z=i.getShaderInfoLog(A).trim();let nt=!0,q=!0;if(i.getProgramParameter(x,i.LINK_STATUS)===!1)if(nt=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(i,x,w,A);else{const rt=ey(i,w,"vertex"),W=ey(i,A,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(x,i.VALIDATE_STATUS)+`

Material Name: `+b.name+`
Material Type: `+b.type+`

Program Info Log: `+k+`
`+rt+`
`+W)}else k!==""?console.warn("THREE.WebGLProgram: Program Info Log:",k):(z===""||Z==="")&&(q=!1);q&&(b.diagnostics={runnable:nt,programLog:k,vertexShader:{log:z,prefix:m},fragmentShader:{log:Z,prefix:g}})}i.deleteShader(w),i.deleteShader(A),R=new Eu(i,x),$=GR(i,x)}let R;this.getUniforms=function(){return R===void 0&&T(this),R};let $;this.getAttributes=function(){return $===void 0&&T(this),$};let M=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return M===!1&&(M=i.getProgramParameter(x,PR)),M},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(x),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=FR++,this.cacheKey=t,this.usedTimes=1,this.program=x,this.vertexShader=w,this.fragmentShader=A,this}let QR=0;class JR{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),s=this._getShaderStage(n),o=this._getShaderCacheForMaterial(t);return o.has(i)===!1&&(o.add(i),i.usedTimes++),o.has(s)===!1&&(o.add(s),s.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const n of e)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return n===void 0&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return n===void 0&&(n=new tC(t),e.set(t,n)),n}}class tC{constructor(t){this.id=QR++,this.code=t,this.usedTimes=0}}function eC(r,t,e,n,i,s,o){const a=new cS,l=new JR,c=new Set,h=[],u=i.logarithmicDepthBuffer,d=i.reverseDepthBuffer,f=i.vertexTextures;let p=i.precision;const x={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function m(M){return c.add(M),M===0?"uv":`uv${M}`}function g(M,b,k,z,Z){const nt=z.fog,q=Z.geometry,rt=M.isMeshStandardMaterial?z.environment:null,W=(M.isMeshStandardMaterial?e:t).get(M.envMap||rt),dt=W&&W.mapping===_d?W.image.height:null,ft=x[M.type];M.precision!==null&&(p=i.getMaxPrecision(M.precision),p!==M.precision&&console.warn("THREE.WebGLProgram.getParameters:",M.precision,"not supported, using",p,"instead."));const yt=q.morphAttributes.position||q.morphAttributes.normal||q.morphAttributes.color,ie=yt!==void 0?yt.length:0;let he=0;q.morphAttributes.position!==void 0&&(he=1),q.morphAttributes.normal!==void 0&&(he=2),q.morphAttributes.color!==void 0&&(he=3);let et,ht,Ft,wt;if(ft){const Qn=as[ft];et=Qn.vertexShader,ht=Qn.fragmentShader}else et=M.vertexShader,ht=M.fragmentShader,l.update(M),Ft=l.getVertexShaderID(M),wt=l.getFragmentShaderID(M);const Xt=r.getRenderTarget(),Gt=Z.isInstancedMesh===!0,fe=Z.isBatchedMesh===!0,Pe=!!M.map,pe=!!M.matcap,P=!!W,ci=!!M.aoMap,ue=!!M.lightMap,xe=!!M.bumpMap,Vt=!!M.normalMap,De=!!M.displacementMap,qt=!!M.emissiveMap,N=!!M.metalnessMap,v=!!M.roughnessMap,G=M.anisotropy>0,ot=M.clearcoat>0,ct=M.dispersion>0,it=M.iridescence>0,Lt=M.sheen>0,St=M.transmission>0,Nt=G&&!!M.anisotropyMap,ye=ot&&!!M.clearcoatMap,pt=ot&&!!M.clearcoatNormalMap,Rt=ot&&!!M.clearcoatRoughnessMap,Ht=it&&!!M.iridescenceMap,$t=it&&!!M.iridescenceThicknessMap,Ct=Lt&&!!M.sheenColorMap,de=Lt&&!!M.sheenRoughnessMap,Yt=!!M.specularMap,Le=!!M.specularColorMap,F=!!M.specularIntensityMap,Et=St&&!!M.transmissionMap,Y=St&&!!M.thicknessMap,lt=!!M.gradientMap,vt=!!M.alphaMap,At=M.alphaTest>0,me=!!M.alphaHash,Ze=!!M.extensions;let Zn=Nr;M.toneMapped&&(Xt===null||Xt.isXRRenderTarget===!0)&&(Zn=r.toneMapping);const Se={shaderID:ft,shaderType:M.type,shaderName:M.name,vertexShader:et,fragmentShader:ht,defines:M.defines,customVertexShaderID:Ft,customFragmentShaderID:wt,isRawShaderMaterial:M.isRawShaderMaterial===!0,glslVersion:M.glslVersion,precision:p,batching:fe,batchingColor:fe&&Z._colorsTexture!==null,instancing:Gt,instancingColor:Gt&&Z.instanceColor!==null,instancingMorph:Gt&&Z.morphTexture!==null,supportsVertexTextures:f,outputColorSpace:Xt===null?r.outputColorSpace:Xt.isXRRenderTarget===!0?Xt.texture.colorSpace:Br,alphaToCoverage:!!M.alphaToCoverage,map:Pe,matcap:pe,envMap:P,envMapMode:P&&W.mapping,envMapCubeUVHeight:dt,aoMap:ci,lightMap:ue,bumpMap:xe,normalMap:Vt,displacementMap:f&&De,emissiveMap:qt,normalMapObjectSpace:Vt&&M.normalMapType===q1,normalMapTangentSpace:Vt&&M.normalMapType===jg,metalnessMap:N,roughnessMap:v,anisotropy:G,anisotropyMap:Nt,clearcoat:ot,clearcoatMap:ye,clearcoatNormalMap:pt,clearcoatRoughnessMap:Rt,dispersion:ct,iridescence:it,iridescenceMap:Ht,iridescenceThicknessMap:$t,sheen:Lt,sheenColorMap:Ct,sheenRoughnessMap:de,specularMap:Yt,specularColorMap:Le,specularIntensityMap:F,transmission:St,transmissionMap:Et,thicknessMap:Y,gradientMap:lt,opaque:M.transparent===!1&&M.blending===za&&M.alphaToCoverage===!1,alphaMap:vt,alphaTest:At,alphaHash:me,combine:M.combine,mapUv:Pe&&m(M.map.channel),aoMapUv:ci&&m(M.aoMap.channel),lightMapUv:ue&&m(M.lightMap.channel),bumpMapUv:xe&&m(M.bumpMap.channel),normalMapUv:Vt&&m(M.normalMap.channel),displacementMapUv:De&&m(M.displacementMap.channel),emissiveMapUv:qt&&m(M.emissiveMap.channel),metalnessMapUv:N&&m(M.metalnessMap.channel),roughnessMapUv:v&&m(M.roughnessMap.channel),anisotropyMapUv:Nt&&m(M.anisotropyMap.channel),clearcoatMapUv:ye&&m(M.clearcoatMap.channel),clearcoatNormalMapUv:pt&&m(M.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:Rt&&m(M.clearcoatRoughnessMap.channel),iridescenceMapUv:Ht&&m(M.iridescenceMap.channel),iridescenceThicknessMapUv:$t&&m(M.iridescenceThicknessMap.channel),sheenColorMapUv:Ct&&m(M.sheenColorMap.channel),sheenRoughnessMapUv:de&&m(M.sheenRoughnessMap.channel),specularMapUv:Yt&&m(M.specularMap.channel),specularColorMapUv:Le&&m(M.specularColorMap.channel),specularIntensityMapUv:F&&m(M.specularIntensityMap.channel),transmissionMapUv:Et&&m(M.transmissionMap.channel),thicknessMapUv:Y&&m(M.thicknessMap.channel),alphaMapUv:vt&&m(M.alphaMap.channel),vertexTangents:!!q.attributes.tangent&&(Vt||G),vertexColors:M.vertexColors,vertexAlphas:M.vertexColors===!0&&!!q.attributes.color&&q.attributes.color.itemSize===4,pointsUvs:Z.isPoints===!0&&!!q.attributes.uv&&(Pe||vt),fog:!!nt,useFog:M.fog===!0,fogExp2:!!nt&&nt.isFogExp2,flatShading:M.flatShading===!0,sizeAttenuation:M.sizeAttenuation===!0,logarithmicDepthBuffer:u,reverseDepthBuffer:d,skinning:Z.isSkinnedMesh===!0,morphTargets:q.morphAttributes.position!==void 0,morphNormals:q.morphAttributes.normal!==void 0,morphColors:q.morphAttributes.color!==void 0,morphTargetsCount:ie,morphTextureStride:he,numDirLights:b.directional.length,numPointLights:b.point.length,numSpotLights:b.spot.length,numSpotLightMaps:b.spotLightMap.length,numRectAreaLights:b.rectArea.length,numHemiLights:b.hemi.length,numDirLightShadows:b.directionalShadowMap.length,numPointLightShadows:b.pointShadowMap.length,numSpotLightShadows:b.spotShadowMap.length,numSpotLightShadowsWithMaps:b.numSpotLightShadowsWithMaps,numLightProbes:b.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:M.dithering,shadowMapEnabled:r.shadowMap.enabled&&k.length>0,shadowMapType:r.shadowMap.type,toneMapping:Zn,decodeVideoTexture:Pe&&M.map.isVideoTexture===!0&&be.getTransfer(M.map.colorSpace)===Be,premultipliedAlpha:M.premultipliedAlpha,doubleSided:M.side===Wi,flipSided:M.side===ii,useDepthPacking:M.depthPacking>=0,depthPacking:M.depthPacking||0,index0AttributeName:M.index0AttributeName,extensionClipCullDistance:Ze&&M.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Ze&&M.extensions.multiDraw===!0||fe)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:M.customProgramCacheKey()};return Se.vertexUv1s=c.has(1),Se.vertexUv2s=c.has(2),Se.vertexUv3s=c.has(3),c.clear(),Se}function _(M){const b=[];if(M.shaderID?b.push(M.shaderID):(b.push(M.customVertexShaderID),b.push(M.customFragmentShaderID)),M.defines!==void 0)for(const k in M.defines)b.push(k),b.push(M.defines[k]);return M.isRawShaderMaterial===!1&&(y(b,M),S(b,M),b.push(r.outputColorSpace)),b.push(M.customProgramCacheKey),b.join()}function y(M,b){M.push(b.precision),M.push(b.outputColorSpace),M.push(b.envMapMode),M.push(b.envMapCubeUVHeight),M.push(b.mapUv),M.push(b.alphaMapUv),M.push(b.lightMapUv),M.push(b.aoMapUv),M.push(b.bumpMapUv),M.push(b.normalMapUv),M.push(b.displacementMapUv),M.push(b.emissiveMapUv),M.push(b.metalnessMapUv),M.push(b.roughnessMapUv),M.push(b.anisotropyMapUv),M.push(b.clearcoatMapUv),M.push(b.clearcoatNormalMapUv),M.push(b.clearcoatRoughnessMapUv),M.push(b.iridescenceMapUv),M.push(b.iridescenceThicknessMapUv),M.push(b.sheenColorMapUv),M.push(b.sheenRoughnessMapUv),M.push(b.specularMapUv),M.push(b.specularColorMapUv),M.push(b.specularIntensityMapUv),M.push(b.transmissionMapUv),M.push(b.thicknessMapUv),M.push(b.combine),M.push(b.fogExp2),M.push(b.sizeAttenuation),M.push(b.morphTargetsCount),M.push(b.morphAttributeCount),M.push(b.numDirLights),M.push(b.numPointLights),M.push(b.numSpotLights),M.push(b.numSpotLightMaps),M.push(b.numHemiLights),M.push(b.numRectAreaLights),M.push(b.numDirLightShadows),M.push(b.numPointLightShadows),M.push(b.numSpotLightShadows),M.push(b.numSpotLightShadowsWithMaps),M.push(b.numLightProbes),M.push(b.shadowMapType),M.push(b.toneMapping),M.push(b.numClippingPlanes),M.push(b.numClipIntersection),M.push(b.depthPacking)}function S(M,b){a.disableAll(),b.supportsVertexTextures&&a.enable(0),b.instancing&&a.enable(1),b.instancingColor&&a.enable(2),b.instancingMorph&&a.enable(3),b.matcap&&a.enable(4),b.envMap&&a.enable(5),b.normalMapObjectSpace&&a.enable(6),b.normalMapTangentSpace&&a.enable(7),b.clearcoat&&a.enable(8),b.iridescence&&a.enable(9),b.alphaTest&&a.enable(10),b.vertexColors&&a.enable(11),b.vertexAlphas&&a.enable(12),b.vertexUv1s&&a.enable(13),b.vertexUv2s&&a.enable(14),b.vertexUv3s&&a.enable(15),b.vertexTangents&&a.enable(16),b.anisotropy&&a.enable(17),b.alphaHash&&a.enable(18),b.batching&&a.enable(19),b.dispersion&&a.enable(20),b.batchingColor&&a.enable(21),M.push(a.mask),a.disableAll(),b.fog&&a.enable(0),b.useFog&&a.enable(1),b.flatShading&&a.enable(2),b.logarithmicDepthBuffer&&a.enable(3),b.reverseDepthBuffer&&a.enable(4),b.skinning&&a.enable(5),b.morphTargets&&a.enable(6),b.morphNormals&&a.enable(7),b.morphColors&&a.enable(8),b.premultipliedAlpha&&a.enable(9),b.shadowMapEnabled&&a.enable(10),b.doubleSided&&a.enable(11),b.flipSided&&a.enable(12),b.useDepthPacking&&a.enable(13),b.dithering&&a.enable(14),b.transmission&&a.enable(15),b.sheen&&a.enable(16),b.opaque&&a.enable(17),b.pointsUvs&&a.enable(18),b.decodeVideoTexture&&a.enable(19),b.alphaToCoverage&&a.enable(20),M.push(a.mask)}function w(M){const b=x[M.type];let k;if(b){const z=as[b];k=OE.clone(z.uniforms)}else k=M.uniforms;return k}function A(M,b){let k;for(let z=0,Z=h.length;z<Z;z++){const nt=h[z];if(nt.cacheKey===b){k=nt,++k.usedTimes;break}}return k===void 0&&(k=new ZR(r,b,M,s),h.push(k)),k}function T(M){if(--M.usedTimes===0){const b=h.indexOf(M);h[b]=h[h.length-1],h.pop(),M.destroy()}}function R(M){l.remove(M)}function $(){l.dispose()}return{getParameters:g,getProgramCacheKey:_,getUniforms:w,acquireProgram:A,releaseProgram:T,releaseShaderCache:R,programs:h,dispose:$}}function nC(){let r=new WeakMap;function t(o){return r.has(o)}function e(o){let a=r.get(o);return a===void 0&&(a={},r.set(o,a)),a}function n(o){r.delete(o)}function i(o,a,l){r.get(o)[a]=l}function s(){r=new WeakMap}return{has:t,get:e,remove:n,update:i,dispose:s}}function iC(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.material.id!==t.material.id?r.material.id-t.material.id:r.z!==t.z?r.z-t.z:r.id-t.id}function oy(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.z!==t.z?t.z-r.z:r.id-t.id}function ay(){const r=[];let t=0;const e=[],n=[],i=[];function s(){t=0,e.length=0,n.length=0,i.length=0}function o(u,d,f,p,x,m){let g=r[t];return g===void 0?(g={id:u.id,object:u,geometry:d,material:f,groupOrder:p,renderOrder:u.renderOrder,z:x,group:m},r[t]=g):(g.id=u.id,g.object=u,g.geometry=d,g.material=f,g.groupOrder=p,g.renderOrder=u.renderOrder,g.z=x,g.group=m),t++,g}function a(u,d,f,p,x,m){const g=o(u,d,f,p,x,m);f.transmission>0?n.push(g):f.transparent===!0?i.push(g):e.push(g)}function l(u,d,f,p,x,m){const g=o(u,d,f,p,x,m);f.transmission>0?n.unshift(g):f.transparent===!0?i.unshift(g):e.unshift(g)}function c(u,d){e.length>1&&e.sort(u||iC),n.length>1&&n.sort(d||oy),i.length>1&&i.sort(d||oy)}function h(){for(let u=t,d=r.length;u<d;u++){const f=r[u];if(f.id===null)break;f.id=null,f.object=null,f.geometry=null,f.material=null,f.group=null}}return{opaque:e,transmissive:n,transparent:i,init:s,push:a,unshift:l,finish:h,sort:c}}function sC(){let r=new WeakMap;function t(n,i){const s=r.get(n);let o;return s===void 0?(o=new ay,r.set(n,[o])):i>=s.length?(o=new ay,s.push(o)):o=s[i],o}function e(){r=new WeakMap}return{get:t,dispose:e}}function rC(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new U,color:new oe};break;case"SpotLight":e={position:new U,direction:new U,color:new oe,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new U,color:new oe,distance:0,decay:0};break;case"HemisphereLight":e={direction:new U,skyColor:new oe,groundColor:new oe};break;case"RectAreaLight":e={color:new oe,position:new U,halfWidth:new U,halfHeight:new U};break}return r[t.id]=e,e}}}function oC(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ee};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ee};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ee,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[t.id]=e,e}}}let aC=0;function lC(r,t){return(t.castShadow?2:0)-(r.castShadow?2:0)+(t.map?1:0)-(r.map?1:0)}function cC(r){const t=new rC,e=oC(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let c=0;c<9;c++)n.probe.push(new U);const i=new U,s=new He,o=new He;function a(c){let h=0,u=0,d=0;for(let $=0;$<9;$++)n.probe[$].set(0,0,0);let f=0,p=0,x=0,m=0,g=0,_=0,y=0,S=0,w=0,A=0,T=0;c.sort(lC);for(let $=0,M=c.length;$<M;$++){const b=c[$],k=b.color,z=b.intensity,Z=b.distance,nt=b.shadow&&b.shadow.map?b.shadow.map.texture:null;if(b.isAmbientLight)h+=k.r*z,u+=k.g*z,d+=k.b*z;else if(b.isLightProbe){for(let q=0;q<9;q++)n.probe[q].addScaledVector(b.sh.coefficients[q],z);T++}else if(b.isDirectionalLight){const q=t.get(b);if(q.color.copy(b.color).multiplyScalar(b.intensity),b.castShadow){const rt=b.shadow,W=e.get(b);W.shadowIntensity=rt.intensity,W.shadowBias=rt.bias,W.shadowNormalBias=rt.normalBias,W.shadowRadius=rt.radius,W.shadowMapSize=rt.mapSize,n.directionalShadow[f]=W,n.directionalShadowMap[f]=nt,n.directionalShadowMatrix[f]=b.shadow.matrix,_++}n.directional[f]=q,f++}else if(b.isSpotLight){const q=t.get(b);q.position.setFromMatrixPosition(b.matrixWorld),q.color.copy(k).multiplyScalar(z),q.distance=Z,q.coneCos=Math.cos(b.angle),q.penumbraCos=Math.cos(b.angle*(1-b.penumbra)),q.decay=b.decay,n.spot[x]=q;const rt=b.shadow;if(b.map&&(n.spotLightMap[w]=b.map,w++,rt.updateMatrices(b),b.castShadow&&A++),n.spotLightMatrix[x]=rt.matrix,b.castShadow){const W=e.get(b);W.shadowIntensity=rt.intensity,W.shadowBias=rt.bias,W.shadowNormalBias=rt.normalBias,W.shadowRadius=rt.radius,W.shadowMapSize=rt.mapSize,n.spotShadow[x]=W,n.spotShadowMap[x]=nt,S++}x++}else if(b.isRectAreaLight){const q=t.get(b);q.color.copy(k).multiplyScalar(z),q.halfWidth.set(b.width*.5,0,0),q.halfHeight.set(0,b.height*.5,0),n.rectArea[m]=q,m++}else if(b.isPointLight){const q=t.get(b);if(q.color.copy(b.color).multiplyScalar(b.intensity),q.distance=b.distance,q.decay=b.decay,b.castShadow){const rt=b.shadow,W=e.get(b);W.shadowIntensity=rt.intensity,W.shadowBias=rt.bias,W.shadowNormalBias=rt.normalBias,W.shadowRadius=rt.radius,W.shadowMapSize=rt.mapSize,W.shadowCameraNear=rt.camera.near,W.shadowCameraFar=rt.camera.far,n.pointShadow[p]=W,n.pointShadowMap[p]=nt,n.pointShadowMatrix[p]=b.shadow.matrix,y++}n.point[p]=q,p++}else if(b.isHemisphereLight){const q=t.get(b);q.skyColor.copy(b.color).multiplyScalar(z),q.groundColor.copy(b.groundColor).multiplyScalar(z),n.hemi[g]=q,g++}}m>0&&(r.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=_t.LTC_FLOAT_1,n.rectAreaLTC2=_t.LTC_FLOAT_2):(n.rectAreaLTC1=_t.LTC_HALF_1,n.rectAreaLTC2=_t.LTC_HALF_2)),n.ambient[0]=h,n.ambient[1]=u,n.ambient[2]=d;const R=n.hash;(R.directionalLength!==f||R.pointLength!==p||R.spotLength!==x||R.rectAreaLength!==m||R.hemiLength!==g||R.numDirectionalShadows!==_||R.numPointShadows!==y||R.numSpotShadows!==S||R.numSpotMaps!==w||R.numLightProbes!==T)&&(n.directional.length=f,n.spot.length=x,n.rectArea.length=m,n.point.length=p,n.hemi.length=g,n.directionalShadow.length=_,n.directionalShadowMap.length=_,n.pointShadow.length=y,n.pointShadowMap.length=y,n.spotShadow.length=S,n.spotShadowMap.length=S,n.directionalShadowMatrix.length=_,n.pointShadowMatrix.length=y,n.spotLightMatrix.length=S+w-A,n.spotLightMap.length=w,n.numSpotLightShadowsWithMaps=A,n.numLightProbes=T,R.directionalLength=f,R.pointLength=p,R.spotLength=x,R.rectAreaLength=m,R.hemiLength=g,R.numDirectionalShadows=_,R.numPointShadows=y,R.numSpotShadows=S,R.numSpotMaps=w,R.numLightProbes=T,n.version=aC++)}function l(c,h){let u=0,d=0,f=0,p=0,x=0;const m=h.matrixWorldInverse;for(let g=0,_=c.length;g<_;g++){const y=c[g];if(y.isDirectionalLight){const S=n.directional[u];S.direction.setFromMatrixPosition(y.matrixWorld),i.setFromMatrixPosition(y.target.matrixWorld),S.direction.sub(i),S.direction.transformDirection(m),u++}else if(y.isSpotLight){const S=n.spot[f];S.position.setFromMatrixPosition(y.matrixWorld),S.position.applyMatrix4(m),S.direction.setFromMatrixPosition(y.matrixWorld),i.setFromMatrixPosition(y.target.matrixWorld),S.direction.sub(i),S.direction.transformDirection(m),f++}else if(y.isRectAreaLight){const S=n.rectArea[p];S.position.setFromMatrixPosition(y.matrixWorld),S.position.applyMatrix4(m),o.identity(),s.copy(y.matrixWorld),s.premultiply(m),o.extractRotation(s),S.halfWidth.set(y.width*.5,0,0),S.halfHeight.set(0,y.height*.5,0),S.halfWidth.applyMatrix4(o),S.halfHeight.applyMatrix4(o),p++}else if(y.isPointLight){const S=n.point[d];S.position.setFromMatrixPosition(y.matrixWorld),S.position.applyMatrix4(m),d++}else if(y.isHemisphereLight){const S=n.hemi[x];S.direction.setFromMatrixPosition(y.matrixWorld),S.direction.transformDirection(m),x++}}}return{setup:a,setupView:l,state:n}}function ly(r){const t=new cC(r),e=[],n=[];function i(h){c.camera=h,e.length=0,n.length=0}function s(h){e.push(h)}function o(h){n.push(h)}function a(){t.setup(e)}function l(h){t.setupView(e,h)}const c={lightsArray:e,shadowsArray:n,camera:null,lights:t,transmissionRenderTarget:{}};return{init:i,state:c,setupLights:a,setupLightsView:l,pushLight:s,pushShadow:o}}function hC(r){let t=new WeakMap;function e(i,s=0){const o=t.get(i);let a;return o===void 0?(a=new ly(r),t.set(i,[a])):s>=o.length?(a=new ly(r),o.push(a)):a=o[s],a}function n(){t=new WeakMap}return{get:e,dispose:n}}class uC extends Or{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=$1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class dC extends Or{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}const fC=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,pC=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function mC(r,t,e){let n=new Jg;const i=new ee,s=new ee,o=new on,a=new uC({depthPacking:W1}),l=new dC,c={},h=e.maxTextureSize,u={[Cr]:ii,[ii]:Cr,[Wi]:Wi},d=new Fr({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new ee},radius:{value:4}},vertexShader:fC,fragmentShader:pC}),f=d.clone();f.defines.HORIZONTAL_PASS=1;const p=new ts;p.setAttribute("position",new Qi(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const x=new Dn(p,d),m=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=kg;let g=this.type;this.render=function(A,T,R){if(m.enabled===!1||m.autoUpdate===!1&&m.needsUpdate===!1||A.length===0)return;const $=r.getRenderTarget(),M=r.getActiveCubeFace(),b=r.getActiveMipmapLevel(),k=r.state;k.setBlending(wr),k.buffers.color.setClear(1,1,1,1),k.buffers.depth.setTest(!0),k.setScissorTest(!1);const z=g!==Ps&&this.type===Ps,Z=g===Ps&&this.type!==Ps;for(let nt=0,q=A.length;nt<q;nt++){const rt=A[nt],W=rt.shadow;if(W===void 0){console.warn("THREE.WebGLShadowMap:",rt,"has no shadow.");continue}if(W.autoUpdate===!1&&W.needsUpdate===!1)continue;i.copy(W.mapSize);const dt=W.getFrameExtents();if(i.multiply(dt),s.copy(W.mapSize),(i.x>h||i.y>h)&&(i.x>h&&(s.x=Math.floor(h/dt.x),i.x=s.x*dt.x,W.mapSize.x=s.x),i.y>h&&(s.y=Math.floor(h/dt.y),i.y=s.y*dt.y,W.mapSize.y=s.y)),W.map===null||z===!0||Z===!0){const yt=this.type!==Ps?{minFilter:ti,magFilter:ti}:{};W.map!==null&&W.map.dispose(),W.map=new yo(i.x,i.y,yt),W.map.texture.name=rt.name+".shadowMap",W.camera.updateProjectionMatrix()}r.setRenderTarget(W.map),r.clear();const ft=W.getViewportCount();for(let yt=0;yt<ft;yt++){const ie=W.getViewport(yt);o.set(s.x*ie.x,s.y*ie.y,s.x*ie.z,s.y*ie.w),k.viewport(o),W.updateMatrices(rt,yt),n=W.getFrustum(),S(T,R,W.camera,rt,this.type)}W.isPointLightShadow!==!0&&this.type===Ps&&_(W,R),W.needsUpdate=!1}g=this.type,m.needsUpdate=!1,r.setRenderTarget($,M,b)};function _(A,T){const R=t.update(x);d.defines.VSM_SAMPLES!==A.blurSamples&&(d.defines.VSM_SAMPLES=A.blurSamples,f.defines.VSM_SAMPLES=A.blurSamples,d.needsUpdate=!0,f.needsUpdate=!0),A.mapPass===null&&(A.mapPass=new yo(i.x,i.y)),d.uniforms.shadow_pass.value=A.map.texture,d.uniforms.resolution.value=A.mapSize,d.uniforms.radius.value=A.radius,r.setRenderTarget(A.mapPass),r.clear(),r.renderBufferDirect(T,null,R,d,x,null),f.uniforms.shadow_pass.value=A.mapPass.texture,f.uniforms.resolution.value=A.mapSize,f.uniforms.radius.value=A.radius,r.setRenderTarget(A.map),r.clear(),r.renderBufferDirect(T,null,R,f,x,null)}function y(A,T,R,$){let M=null;const b=R.isPointLight===!0?A.customDistanceMaterial:A.customDepthMaterial;if(b!==void 0)M=b;else if(M=R.isPointLight===!0?l:a,r.localClippingEnabled&&T.clipShadows===!0&&Array.isArray(T.clippingPlanes)&&T.clippingPlanes.length!==0||T.displacementMap&&T.displacementScale!==0||T.alphaMap&&T.alphaTest>0||T.map&&T.alphaTest>0){const k=M.uuid,z=T.uuid;let Z=c[k];Z===void 0&&(Z={},c[k]=Z);let nt=Z[z];nt===void 0&&(nt=M.clone(),Z[z]=nt,T.addEventListener("dispose",w)),M=nt}if(M.visible=T.visible,M.wireframe=T.wireframe,$===Ps?M.side=T.shadowSide!==null?T.shadowSide:T.side:M.side=T.shadowSide!==null?T.shadowSide:u[T.side],M.alphaMap=T.alphaMap,M.alphaTest=T.alphaTest,M.map=T.map,M.clipShadows=T.clipShadows,M.clippingPlanes=T.clippingPlanes,M.clipIntersection=T.clipIntersection,M.displacementMap=T.displacementMap,M.displacementScale=T.displacementScale,M.displacementBias=T.displacementBias,M.wireframeLinewidth=T.wireframeLinewidth,M.linewidth=T.linewidth,R.isPointLight===!0&&M.isMeshDistanceMaterial===!0){const k=r.properties.get(M);k.light=R}return M}function S(A,T,R,$,M){if(A.visible===!1)return;if(A.layers.test(T.layers)&&(A.isMesh||A.isLine||A.isPoints)&&(A.castShadow||A.receiveShadow&&M===Ps)&&(!A.frustumCulled||n.intersectsObject(A))){A.modelViewMatrix.multiplyMatrices(R.matrixWorldInverse,A.matrixWorld);const z=t.update(A),Z=A.material;if(Array.isArray(Z)){const nt=z.groups;for(let q=0,rt=nt.length;q<rt;q++){const W=nt[q],dt=Z[W.materialIndex];if(dt&&dt.visible){const ft=y(A,dt,$,M);A.onBeforeShadow(r,A,T,R,z,ft,W),r.renderBufferDirect(R,null,z,ft,A,W),A.onAfterShadow(r,A,T,R,z,ft,W)}}}else if(Z.visible){const nt=y(A,Z,$,M);A.onBeforeShadow(r,A,T,R,z,nt,null),r.renderBufferDirect(R,null,z,nt,A,null),A.onAfterShadow(r,A,T,R,z,nt,null)}}const k=A.children;for(let z=0,Z=k.length;z<Z;z++)S(k[z],T,R,$,M)}function w(A){A.target.removeEventListener("dispose",w);for(const R in c){const $=c[R],M=A.target.uuid;M in $&&($[M].dispose(),delete $[M])}}}const gC={[tm]:em,[nm]:rm,[im]:om,[Za]:sm,[em]:tm,[rm]:nm,[om]:im,[sm]:Za};function xC(r){function t(){let F=!1;const Et=new on;let Y=null;const lt=new on(0,0,0,0);return{setMask:function(vt){Y!==vt&&!F&&(r.colorMask(vt,vt,vt,vt),Y=vt)},setLocked:function(vt){F=vt},setClear:function(vt,At,me,Ze,Zn){Zn===!0&&(vt*=Ze,At*=Ze,me*=Ze),Et.set(vt,At,me,Ze),lt.equals(Et)===!1&&(r.clearColor(vt,At,me,Ze),lt.copy(Et))},reset:function(){F=!1,Y=null,lt.set(-1,0,0,0)}}}function e(){let F=!1,Et=!1,Y=null,lt=null,vt=null;return{setReversed:function(At){Et=At},setTest:function(At){At?Ft(r.DEPTH_TEST):wt(r.DEPTH_TEST)},setMask:function(At){Y!==At&&!F&&(r.depthMask(At),Y=At)},setFunc:function(At){if(Et&&(At=gC[At]),lt!==At){switch(At){case tm:r.depthFunc(r.NEVER);break;case em:r.depthFunc(r.ALWAYS);break;case nm:r.depthFunc(r.LESS);break;case Za:r.depthFunc(r.LEQUAL);break;case im:r.depthFunc(r.EQUAL);break;case sm:r.depthFunc(r.GEQUAL);break;case rm:r.depthFunc(r.GREATER);break;case om:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}lt=At}},setLocked:function(At){F=At},setClear:function(At){vt!==At&&(r.clearDepth(At),vt=At)},reset:function(){F=!1,Y=null,lt=null,vt=null}}}function n(){let F=!1,Et=null,Y=null,lt=null,vt=null,At=null,me=null,Ze=null,Zn=null;return{setTest:function(Se){F||(Se?Ft(r.STENCIL_TEST):wt(r.STENCIL_TEST))},setMask:function(Se){Et!==Se&&!F&&(r.stencilMask(Se),Et=Se)},setFunc:function(Se,Qn,_s){(Y!==Se||lt!==Qn||vt!==_s)&&(r.stencilFunc(Se,Qn,_s),Y=Se,lt=Qn,vt=_s)},setOp:function(Se,Qn,_s){(At!==Se||me!==Qn||Ze!==_s)&&(r.stencilOp(Se,Qn,_s),At=Se,me=Qn,Ze=_s)},setLocked:function(Se){F=Se},setClear:function(Se){Zn!==Se&&(r.clearStencil(Se),Zn=Se)},reset:function(){F=!1,Et=null,Y=null,lt=null,vt=null,At=null,me=null,Ze=null,Zn=null}}}const i=new t,s=new e,o=new n,a=new WeakMap,l=new WeakMap;let c={},h={},u=new WeakMap,d=[],f=null,p=!1,x=null,m=null,g=null,_=null,y=null,S=null,w=null,A=new oe(0,0,0),T=0,R=!1,$=null,M=null,b=null,k=null,z=null;const Z=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let nt=!1,q=0;const rt=r.getParameter(r.VERSION);rt.indexOf("WebGL")!==-1?(q=parseFloat(/^WebGL (\d)/.exec(rt)[1]),nt=q>=1):rt.indexOf("OpenGL ES")!==-1&&(q=parseFloat(/^OpenGL ES (\d)/.exec(rt)[1]),nt=q>=2);let W=null,dt={};const ft=r.getParameter(r.SCISSOR_BOX),yt=r.getParameter(r.VIEWPORT),ie=new on().fromArray(ft),he=new on().fromArray(yt);function et(F,Et,Y,lt){const vt=new Uint8Array(4),At=r.createTexture();r.bindTexture(F,At),r.texParameteri(F,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(F,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let me=0;me<Y;me++)F===r.TEXTURE_3D||F===r.TEXTURE_2D_ARRAY?r.texImage3D(Et,0,r.RGBA,1,1,lt,0,r.RGBA,r.UNSIGNED_BYTE,vt):r.texImage2D(Et+me,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,vt);return At}const ht={};ht[r.TEXTURE_2D]=et(r.TEXTURE_2D,r.TEXTURE_2D,1),ht[r.TEXTURE_CUBE_MAP]=et(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),ht[r.TEXTURE_2D_ARRAY]=et(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),ht[r.TEXTURE_3D]=et(r.TEXTURE_3D,r.TEXTURE_3D,1,1),i.setClear(0,0,0,1),s.setClear(1),o.setClear(0),Ft(r.DEPTH_TEST),s.setFunc(Za),ue(!1),xe(g0),Ft(r.CULL_FACE),P(wr);function Ft(F){c[F]!==!0&&(r.enable(F),c[F]=!0)}function wt(F){c[F]!==!1&&(r.disable(F),c[F]=!1)}function Xt(F,Et){return h[F]!==Et?(r.bindFramebuffer(F,Et),h[F]=Et,F===r.DRAW_FRAMEBUFFER&&(h[r.FRAMEBUFFER]=Et),F===r.FRAMEBUFFER&&(h[r.DRAW_FRAMEBUFFER]=Et),!0):!1}function Gt(F,Et){let Y=d,lt=!1;if(F){Y=u.get(Et),Y===void 0&&(Y=[],u.set(Et,Y));const vt=F.textures;if(Y.length!==vt.length||Y[0]!==r.COLOR_ATTACHMENT0){for(let At=0,me=vt.length;At<me;At++)Y[At]=r.COLOR_ATTACHMENT0+At;Y.length=vt.length,lt=!0}}else Y[0]!==r.BACK&&(Y[0]=r.BACK,lt=!0);lt&&r.drawBuffers(Y)}function fe(F){return f!==F?(r.useProgram(F),f=F,!0):!1}const Pe={[oo]:r.FUNC_ADD,[x1]:r.FUNC_SUBTRACT,[y1]:r.FUNC_REVERSE_SUBTRACT};Pe[_1]=r.MIN,Pe[M1]=r.MAX;const pe={[S1]:r.ZERO,[T1]:r.ONE,[v1]:r.SRC_COLOR,[Qp]:r.SRC_ALPHA,[R1]:r.SRC_ALPHA_SATURATE,[w1]:r.DST_COLOR,[E1]:r.DST_ALPHA,[b1]:r.ONE_MINUS_SRC_COLOR,[Jp]:r.ONE_MINUS_SRC_ALPHA,[N1]:r.ONE_MINUS_DST_COLOR,[A1]:r.ONE_MINUS_DST_ALPHA,[C1]:r.CONSTANT_COLOR,[P1]:r.ONE_MINUS_CONSTANT_COLOR,[F1]:r.CONSTANT_ALPHA,[I1]:r.ONE_MINUS_CONSTANT_ALPHA};function P(F,Et,Y,lt,vt,At,me,Ze,Zn,Se){if(F===wr){p===!0&&(wt(r.BLEND),p=!1);return}if(p===!1&&(Ft(r.BLEND),p=!0),F!==g1){if(F!==x||Se!==R){if((m!==oo||y!==oo)&&(r.blendEquation(r.FUNC_ADD),m=oo,y=oo),Se)switch(F){case za:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Zp:r.blendFunc(r.ONE,r.ONE);break;case x0:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case y0:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",F);break}else switch(F){case za:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Zp:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case x0:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case y0:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",F);break}g=null,_=null,S=null,w=null,A.set(0,0,0),T=0,x=F,R=Se}return}vt=vt||Et,At=At||Y,me=me||lt,(Et!==m||vt!==y)&&(r.blendEquationSeparate(Pe[Et],Pe[vt]),m=Et,y=vt),(Y!==g||lt!==_||At!==S||me!==w)&&(r.blendFuncSeparate(pe[Y],pe[lt],pe[At],pe[me]),g=Y,_=lt,S=At,w=me),(Ze.equals(A)===!1||Zn!==T)&&(r.blendColor(Ze.r,Ze.g,Ze.b,Zn),A.copy(Ze),T=Zn),x=F,R=!1}function ci(F,Et){F.side===Wi?wt(r.CULL_FACE):Ft(r.CULL_FACE);let Y=F.side===ii;Et&&(Y=!Y),ue(Y),F.blending===za&&F.transparent===!1?P(wr):P(F.blending,F.blendEquation,F.blendSrc,F.blendDst,F.blendEquationAlpha,F.blendSrcAlpha,F.blendDstAlpha,F.blendColor,F.blendAlpha,F.premultipliedAlpha),s.setFunc(F.depthFunc),s.setTest(F.depthTest),s.setMask(F.depthWrite),i.setMask(F.colorWrite);const lt=F.stencilWrite;o.setTest(lt),lt&&(o.setMask(F.stencilWriteMask),o.setFunc(F.stencilFunc,F.stencilRef,F.stencilFuncMask),o.setOp(F.stencilFail,F.stencilZFail,F.stencilZPass)),De(F.polygonOffset,F.polygonOffsetFactor,F.polygonOffsetUnits),F.alphaToCoverage===!0?Ft(r.SAMPLE_ALPHA_TO_COVERAGE):wt(r.SAMPLE_ALPHA_TO_COVERAGE)}function ue(F){$!==F&&(F?r.frontFace(r.CW):r.frontFace(r.CCW),$=F)}function xe(F){F!==f1?(Ft(r.CULL_FACE),F!==M&&(F===g0?r.cullFace(r.BACK):F===p1?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):wt(r.CULL_FACE),M=F}function Vt(F){F!==b&&(nt&&r.lineWidth(F),b=F)}function De(F,Et,Y){F?(Ft(r.POLYGON_OFFSET_FILL),(k!==Et||z!==Y)&&(r.polygonOffset(Et,Y),k=Et,z=Y)):wt(r.POLYGON_OFFSET_FILL)}function qt(F){F?Ft(r.SCISSOR_TEST):wt(r.SCISSOR_TEST)}function N(F){F===void 0&&(F=r.TEXTURE0+Z-1),W!==F&&(r.activeTexture(F),W=F)}function v(F,Et,Y){Y===void 0&&(W===null?Y=r.TEXTURE0+Z-1:Y=W);let lt=dt[Y];lt===void 0&&(lt={type:void 0,texture:void 0},dt[Y]=lt),(lt.type!==F||lt.texture!==Et)&&(W!==Y&&(r.activeTexture(Y),W=Y),r.bindTexture(F,Et||ht[F]),lt.type=F,lt.texture=Et)}function G(){const F=dt[W];F!==void 0&&F.type!==void 0&&(r.bindTexture(F.type,null),F.type=void 0,F.texture=void 0)}function ot(){try{r.compressedTexImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function ct(){try{r.compressedTexImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function it(){try{r.texSubImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function Lt(){try{r.texSubImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function St(){try{r.compressedTexSubImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function Nt(){try{r.compressedTexSubImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function ye(){try{r.texStorage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function pt(){try{r.texStorage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function Rt(){try{r.texImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function Ht(){try{r.texImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function $t(F){ie.equals(F)===!1&&(r.scissor(F.x,F.y,F.z,F.w),ie.copy(F))}function Ct(F){he.equals(F)===!1&&(r.viewport(F.x,F.y,F.z,F.w),he.copy(F))}function de(F,Et){let Y=l.get(Et);Y===void 0&&(Y=new WeakMap,l.set(Et,Y));let lt=Y.get(F);lt===void 0&&(lt=r.getUniformBlockIndex(Et,F.name),Y.set(F,lt))}function Yt(F,Et){const lt=l.get(Et).get(F);a.get(Et)!==lt&&(r.uniformBlockBinding(Et,lt,F.__bindingPointIndex),a.set(Et,lt))}function Le(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),c={},W=null,dt={},h={},u=new WeakMap,d=[],f=null,p=!1,x=null,m=null,g=null,_=null,y=null,S=null,w=null,A=new oe(0,0,0),T=0,R=!1,$=null,M=null,b=null,k=null,z=null,ie.set(0,0,r.canvas.width,r.canvas.height),he.set(0,0,r.canvas.width,r.canvas.height),i.reset(),s.reset(),o.reset()}return{buffers:{color:i,depth:s,stencil:o},enable:Ft,disable:wt,bindFramebuffer:Xt,drawBuffers:Gt,useProgram:fe,setBlending:P,setMaterial:ci,setFlipSided:ue,setCullFace:xe,setLineWidth:Vt,setPolygonOffset:De,setScissorTest:qt,activeTexture:N,bindTexture:v,unbindTexture:G,compressedTexImage2D:ot,compressedTexImage3D:ct,texImage2D:Rt,texImage3D:Ht,updateUBOMapping:de,uniformBlockBinding:Yt,texStorage2D:ye,texStorage3D:pt,texSubImage2D:it,texSubImage3D:Lt,compressedTexSubImage2D:St,compressedTexSubImage3D:Nt,scissor:$t,viewport:Ct,reset:Le}}function cy(r,t,e,n){const i=yC(n);switch(e){case YM:return r*t;case KM:return r*t;case ZM:return r*t*2;case Wg:return r*t/i.components*i.byteLength;case qg:return r*t/i.components*i.byteLength;case QM:return r*t*2/i.components*i.byteLength;case Xg:return r*t*2/i.components*i.byteLength;case jM:return r*t*3/i.components*i.byteLength;case ji:return r*t*4/i.components*i.byteLength;case Yg:return r*t*4/i.components*i.byteLength;case xu:case yu:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*8;case _u:case Mu:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case dm:case pm:return Math.max(r,16)*Math.max(t,8)/4;case um:case fm:return Math.max(r,8)*Math.max(t,8)/2;case mm:case gm:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*8;case xm:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case ym:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case _m:return Math.floor((r+4)/5)*Math.floor((t+3)/4)*16;case Mm:return Math.floor((r+4)/5)*Math.floor((t+4)/5)*16;case Sm:return Math.floor((r+5)/6)*Math.floor((t+4)/5)*16;case Tm:return Math.floor((r+5)/6)*Math.floor((t+5)/6)*16;case vm:return Math.floor((r+7)/8)*Math.floor((t+4)/5)*16;case bm:return Math.floor((r+7)/8)*Math.floor((t+5)/6)*16;case Em:return Math.floor((r+7)/8)*Math.floor((t+7)/8)*16;case Am:return Math.floor((r+9)/10)*Math.floor((t+4)/5)*16;case wm:return Math.floor((r+9)/10)*Math.floor((t+5)/6)*16;case Nm:return Math.floor((r+9)/10)*Math.floor((t+7)/8)*16;case Rm:return Math.floor((r+9)/10)*Math.floor((t+9)/10)*16;case Cm:return Math.floor((r+11)/12)*Math.floor((t+9)/10)*16;case Pm:return Math.floor((r+11)/12)*Math.floor((t+11)/12)*16;case Su:case Fm:case Im:return Math.ceil(r/4)*Math.ceil(t/4)*16;case JM:case Lm:return Math.ceil(r/4)*Math.ceil(t/4)*8;case Dm:case Um:return Math.ceil(r/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function yC(r){switch(r){case Xs:case WM:return{byteLength:1,components:1};case Mc:case qM:case Lc:return{byteLength:2,components:1};case Hg:case $g:return{byteLength:2,components:4};case xo:case Vg:case cs:return{byteLength:4,components:1};case XM:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${r}.`)}function _C(r,t,e,n,i,s,o){const a=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),c=new ee,h=new WeakMap;let u;const d=new WeakMap;let f=!1;try{f=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function p(N,v){return f?new OffscreenCanvas(N,v):Hu("canvas")}function x(N,v,G){let ot=1;const ct=qt(N);if((ct.width>G||ct.height>G)&&(ot=G/Math.max(ct.width,ct.height)),ot<1)if(typeof HTMLImageElement<"u"&&N instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&N instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&N instanceof ImageBitmap||typeof VideoFrame<"u"&&N instanceof VideoFrame){const it=Math.floor(ot*ct.width),Lt=Math.floor(ot*ct.height);u===void 0&&(u=p(it,Lt));const St=v?p(it,Lt):u;return St.width=it,St.height=Lt,St.getContext("2d").drawImage(N,0,0,it,Lt),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+ct.width+"x"+ct.height+") to ("+it+"x"+Lt+")."),St}else return"data"in N&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+ct.width+"x"+ct.height+")."),N;return N}function m(N){return N.generateMipmaps&&N.minFilter!==ti&&N.minFilter!==qi}function g(N){r.generateMipmap(N)}function _(N,v,G,ot,ct=!1){if(N!==null){if(r[N]!==void 0)return r[N];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+N+"'")}let it=v;if(v===r.RED&&(G===r.FLOAT&&(it=r.R32F),G===r.HALF_FLOAT&&(it=r.R16F),G===r.UNSIGNED_BYTE&&(it=r.R8)),v===r.RED_INTEGER&&(G===r.UNSIGNED_BYTE&&(it=r.R8UI),G===r.UNSIGNED_SHORT&&(it=r.R16UI),G===r.UNSIGNED_INT&&(it=r.R32UI),G===r.BYTE&&(it=r.R8I),G===r.SHORT&&(it=r.R16I),G===r.INT&&(it=r.R32I)),v===r.RG&&(G===r.FLOAT&&(it=r.RG32F),G===r.HALF_FLOAT&&(it=r.RG16F),G===r.UNSIGNED_BYTE&&(it=r.RG8)),v===r.RG_INTEGER&&(G===r.UNSIGNED_BYTE&&(it=r.RG8UI),G===r.UNSIGNED_SHORT&&(it=r.RG16UI),G===r.UNSIGNED_INT&&(it=r.RG32UI),G===r.BYTE&&(it=r.RG8I),G===r.SHORT&&(it=r.RG16I),G===r.INT&&(it=r.RG32I)),v===r.RGB_INTEGER&&(G===r.UNSIGNED_BYTE&&(it=r.RGB8UI),G===r.UNSIGNED_SHORT&&(it=r.RGB16UI),G===r.UNSIGNED_INT&&(it=r.RGB32UI),G===r.BYTE&&(it=r.RGB8I),G===r.SHORT&&(it=r.RGB16I),G===r.INT&&(it=r.RGB32I)),v===r.RGBA_INTEGER&&(G===r.UNSIGNED_BYTE&&(it=r.RGBA8UI),G===r.UNSIGNED_SHORT&&(it=r.RGBA16UI),G===r.UNSIGNED_INT&&(it=r.RGBA32UI),G===r.BYTE&&(it=r.RGBA8I),G===r.SHORT&&(it=r.RGBA16I),G===r.INT&&(it=r.RGBA32I)),v===r.RGB&&G===r.UNSIGNED_INT_5_9_9_9_REV&&(it=r.RGB9_E5),v===r.RGBA){const Lt=ct?zu:be.getTransfer(ot);G===r.FLOAT&&(it=r.RGBA32F),G===r.HALF_FLOAT&&(it=r.RGBA16F),G===r.UNSIGNED_BYTE&&(it=Lt===Be?r.SRGB8_ALPHA8:r.RGBA8),G===r.UNSIGNED_SHORT_4_4_4_4&&(it=r.RGBA4),G===r.UNSIGNED_SHORT_5_5_5_1&&(it=r.RGB5_A1)}return(it===r.R16F||it===r.R32F||it===r.RG16F||it===r.RG32F||it===r.RGBA16F||it===r.RGBA32F)&&t.get("EXT_color_buffer_float"),it}function y(N,v){let G;return N?v===null||v===xo||v===tl?G=r.DEPTH24_STENCIL8:v===cs?G=r.DEPTH32F_STENCIL8:v===Mc&&(G=r.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):v===null||v===xo||v===tl?G=r.DEPTH_COMPONENT24:v===cs?G=r.DEPTH_COMPONENT32F:v===Mc&&(G=r.DEPTH_COMPONENT16),G}function S(N,v){return m(N)===!0||N.isFramebufferTexture&&N.minFilter!==ti&&N.minFilter!==qi?Math.log2(Math.max(v.width,v.height))+1:N.mipmaps!==void 0&&N.mipmaps.length>0?N.mipmaps.length:N.isCompressedTexture&&Array.isArray(N.image)?v.mipmaps.length:1}function w(N){const v=N.target;v.removeEventListener("dispose",w),T(v),v.isVideoTexture&&h.delete(v)}function A(N){const v=N.target;v.removeEventListener("dispose",A),$(v)}function T(N){const v=n.get(N);if(v.__webglInit===void 0)return;const G=N.source,ot=d.get(G);if(ot){const ct=ot[v.__cacheKey];ct.usedTimes--,ct.usedTimes===0&&R(N),Object.keys(ot).length===0&&d.delete(G)}n.remove(N)}function R(N){const v=n.get(N);r.deleteTexture(v.__webglTexture);const G=N.source,ot=d.get(G);delete ot[v.__cacheKey],o.memory.textures--}function $(N){const v=n.get(N);if(N.depthTexture&&N.depthTexture.dispose(),N.isWebGLCubeRenderTarget)for(let ot=0;ot<6;ot++){if(Array.isArray(v.__webglFramebuffer[ot]))for(let ct=0;ct<v.__webglFramebuffer[ot].length;ct++)r.deleteFramebuffer(v.__webglFramebuffer[ot][ct]);else r.deleteFramebuffer(v.__webglFramebuffer[ot]);v.__webglDepthbuffer&&r.deleteRenderbuffer(v.__webglDepthbuffer[ot])}else{if(Array.isArray(v.__webglFramebuffer))for(let ot=0;ot<v.__webglFramebuffer.length;ot++)r.deleteFramebuffer(v.__webglFramebuffer[ot]);else r.deleteFramebuffer(v.__webglFramebuffer);if(v.__webglDepthbuffer&&r.deleteRenderbuffer(v.__webglDepthbuffer),v.__webglMultisampledFramebuffer&&r.deleteFramebuffer(v.__webglMultisampledFramebuffer),v.__webglColorRenderbuffer)for(let ot=0;ot<v.__webglColorRenderbuffer.length;ot++)v.__webglColorRenderbuffer[ot]&&r.deleteRenderbuffer(v.__webglColorRenderbuffer[ot]);v.__webglDepthRenderbuffer&&r.deleteRenderbuffer(v.__webglDepthRenderbuffer)}const G=N.textures;for(let ot=0,ct=G.length;ot<ct;ot++){const it=n.get(G[ot]);it.__webglTexture&&(r.deleteTexture(it.__webglTexture),o.memory.textures--),n.remove(G[ot])}n.remove(N)}let M=0;function b(){M=0}function k(){const N=M;return N>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+N+" texture units while this GPU supports only "+i.maxTextures),M+=1,N}function z(N){const v=[];return v.push(N.wrapS),v.push(N.wrapT),v.push(N.wrapR||0),v.push(N.magFilter),v.push(N.minFilter),v.push(N.anisotropy),v.push(N.internalFormat),v.push(N.format),v.push(N.type),v.push(N.generateMipmaps),v.push(N.premultiplyAlpha),v.push(N.flipY),v.push(N.unpackAlignment),v.push(N.colorSpace),v.join()}function Z(N,v){const G=n.get(N);if(N.isVideoTexture&&Vt(N),N.isRenderTargetTexture===!1&&N.version>0&&G.__version!==N.version){const ot=N.image;if(ot===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(ot.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{he(G,N,v);return}}e.bindTexture(r.TEXTURE_2D,G.__webglTexture,r.TEXTURE0+v)}function nt(N,v){const G=n.get(N);if(N.version>0&&G.__version!==N.version){he(G,N,v);return}e.bindTexture(r.TEXTURE_2D_ARRAY,G.__webglTexture,r.TEXTURE0+v)}function q(N,v){const G=n.get(N);if(N.version>0&&G.__version!==N.version){he(G,N,v);return}e.bindTexture(r.TEXTURE_3D,G.__webglTexture,r.TEXTURE0+v)}function rt(N,v){const G=n.get(N);if(N.version>0&&G.__version!==N.version){et(G,N,v);return}e.bindTexture(r.TEXTURE_CUBE_MAP,G.__webglTexture,r.TEXTURE0+v)}const W={[cm]:r.REPEAT,[co]:r.CLAMP_TO_EDGE,[hm]:r.MIRRORED_REPEAT},dt={[ti]:r.NEAREST,[H1]:r.NEAREST_MIPMAP_NEAREST,[rh]:r.NEAREST_MIPMAP_LINEAR,[qi]:r.LINEAR,[rf]:r.LINEAR_MIPMAP_NEAREST,[ho]:r.LINEAR_MIPMAP_LINEAR},ft={[X1]:r.NEVER,[J1]:r.ALWAYS,[Y1]:r.LESS,[tS]:r.LEQUAL,[j1]:r.EQUAL,[Q1]:r.GEQUAL,[K1]:r.GREATER,[Z1]:r.NOTEQUAL};function yt(N,v){if(v.type===cs&&t.has("OES_texture_float_linear")===!1&&(v.magFilter===qi||v.magFilter===rf||v.magFilter===rh||v.magFilter===ho||v.minFilter===qi||v.minFilter===rf||v.minFilter===rh||v.minFilter===ho)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),r.texParameteri(N,r.TEXTURE_WRAP_S,W[v.wrapS]),r.texParameteri(N,r.TEXTURE_WRAP_T,W[v.wrapT]),(N===r.TEXTURE_3D||N===r.TEXTURE_2D_ARRAY)&&r.texParameteri(N,r.TEXTURE_WRAP_R,W[v.wrapR]),r.texParameteri(N,r.TEXTURE_MAG_FILTER,dt[v.magFilter]),r.texParameteri(N,r.TEXTURE_MIN_FILTER,dt[v.minFilter]),v.compareFunction&&(r.texParameteri(N,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(N,r.TEXTURE_COMPARE_FUNC,ft[v.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(v.magFilter===ti||v.minFilter!==rh&&v.minFilter!==ho||v.type===cs&&t.has("OES_texture_float_linear")===!1)return;if(v.anisotropy>1||n.get(v).__currentAnisotropy){const G=t.get("EXT_texture_filter_anisotropic");r.texParameterf(N,G.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(v.anisotropy,i.getMaxAnisotropy())),n.get(v).__currentAnisotropy=v.anisotropy}}}function ie(N,v){let G=!1;N.__webglInit===void 0&&(N.__webglInit=!0,v.addEventListener("dispose",w));const ot=v.source;let ct=d.get(ot);ct===void 0&&(ct={},d.set(ot,ct));const it=z(v);if(it!==N.__cacheKey){ct[it]===void 0&&(ct[it]={texture:r.createTexture(),usedTimes:0},o.memory.textures++,G=!0),ct[it].usedTimes++;const Lt=ct[N.__cacheKey];Lt!==void 0&&(ct[N.__cacheKey].usedTimes--,Lt.usedTimes===0&&R(v)),N.__cacheKey=it,N.__webglTexture=ct[it].texture}return G}function he(N,v,G){let ot=r.TEXTURE_2D;(v.isDataArrayTexture||v.isCompressedArrayTexture)&&(ot=r.TEXTURE_2D_ARRAY),v.isData3DTexture&&(ot=r.TEXTURE_3D);const ct=ie(N,v),it=v.source;e.bindTexture(ot,N.__webglTexture,r.TEXTURE0+G);const Lt=n.get(it);if(it.version!==Lt.__version||ct===!0){e.activeTexture(r.TEXTURE0+G);const St=be.getPrimaries(be.workingColorSpace),Nt=v.colorSpace===Tr?null:be.getPrimaries(v.colorSpace),ye=v.colorSpace===Tr||St===Nt?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,v.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,v.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,v.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,ye);let pt=x(v.image,!1,i.maxTextureSize);pt=De(v,pt);const Rt=s.convert(v.format,v.colorSpace),Ht=s.convert(v.type);let $t=_(v.internalFormat,Rt,Ht,v.colorSpace,v.isVideoTexture);yt(ot,v);let Ct;const de=v.mipmaps,Yt=v.isVideoTexture!==!0,Le=Lt.__version===void 0||ct===!0,F=it.dataReady,Et=S(v,pt);if(v.isDepthTexture)$t=y(v.format===el,v.type),Le&&(Yt?e.texStorage2D(r.TEXTURE_2D,1,$t,pt.width,pt.height):e.texImage2D(r.TEXTURE_2D,0,$t,pt.width,pt.height,0,Rt,Ht,null));else if(v.isDataTexture)if(de.length>0){Yt&&Le&&e.texStorage2D(r.TEXTURE_2D,Et,$t,de[0].width,de[0].height);for(let Y=0,lt=de.length;Y<lt;Y++)Ct=de[Y],Yt?F&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,Ct.width,Ct.height,Rt,Ht,Ct.data):e.texImage2D(r.TEXTURE_2D,Y,$t,Ct.width,Ct.height,0,Rt,Ht,Ct.data);v.generateMipmaps=!1}else Yt?(Le&&e.texStorage2D(r.TEXTURE_2D,Et,$t,pt.width,pt.height),F&&e.texSubImage2D(r.TEXTURE_2D,0,0,0,pt.width,pt.height,Rt,Ht,pt.data)):e.texImage2D(r.TEXTURE_2D,0,$t,pt.width,pt.height,0,Rt,Ht,pt.data);else if(v.isCompressedTexture)if(v.isCompressedArrayTexture){Yt&&Le&&e.texStorage3D(r.TEXTURE_2D_ARRAY,Et,$t,de[0].width,de[0].height,pt.depth);for(let Y=0,lt=de.length;Y<lt;Y++)if(Ct=de[Y],v.format!==ji)if(Rt!==null)if(Yt){if(F)if(v.layerUpdates.size>0){const vt=cy(Ct.width,Ct.height,v.format,v.type);for(const At of v.layerUpdates){const me=Ct.data.subarray(At*vt/Ct.data.BYTES_PER_ELEMENT,(At+1)*vt/Ct.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,At,Ct.width,Ct.height,1,Rt,me,0,0)}v.clearLayerUpdates()}else e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,0,Ct.width,Ct.height,pt.depth,Rt,Ct.data,0,0)}else e.compressedTexImage3D(r.TEXTURE_2D_ARRAY,Y,$t,Ct.width,Ct.height,pt.depth,0,Ct.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else Yt?F&&e.texSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,0,Ct.width,Ct.height,pt.depth,Rt,Ht,Ct.data):e.texImage3D(r.TEXTURE_2D_ARRAY,Y,$t,Ct.width,Ct.height,pt.depth,0,Rt,Ht,Ct.data)}else{Yt&&Le&&e.texStorage2D(r.TEXTURE_2D,Et,$t,de[0].width,de[0].height);for(let Y=0,lt=de.length;Y<lt;Y++)Ct=de[Y],v.format!==ji?Rt!==null?Yt?F&&e.compressedTexSubImage2D(r.TEXTURE_2D,Y,0,0,Ct.width,Ct.height,Rt,Ct.data):e.compressedTexImage2D(r.TEXTURE_2D,Y,$t,Ct.width,Ct.height,0,Ct.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Yt?F&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,Ct.width,Ct.height,Rt,Ht,Ct.data):e.texImage2D(r.TEXTURE_2D,Y,$t,Ct.width,Ct.height,0,Rt,Ht,Ct.data)}else if(v.isDataArrayTexture)if(Yt){if(Le&&e.texStorage3D(r.TEXTURE_2D_ARRAY,Et,$t,pt.width,pt.height,pt.depth),F)if(v.layerUpdates.size>0){const Y=cy(pt.width,pt.height,v.format,v.type);for(const lt of v.layerUpdates){const vt=pt.data.subarray(lt*Y/pt.data.BYTES_PER_ELEMENT,(lt+1)*Y/pt.data.BYTES_PER_ELEMENT);e.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,lt,pt.width,pt.height,1,Rt,Ht,vt)}v.clearLayerUpdates()}else e.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,pt.width,pt.height,pt.depth,Rt,Ht,pt.data)}else e.texImage3D(r.TEXTURE_2D_ARRAY,0,$t,pt.width,pt.height,pt.depth,0,Rt,Ht,pt.data);else if(v.isData3DTexture)Yt?(Le&&e.texStorage3D(r.TEXTURE_3D,Et,$t,pt.width,pt.height,pt.depth),F&&e.texSubImage3D(r.TEXTURE_3D,0,0,0,0,pt.width,pt.height,pt.depth,Rt,Ht,pt.data)):e.texImage3D(r.TEXTURE_3D,0,$t,pt.width,pt.height,pt.depth,0,Rt,Ht,pt.data);else if(v.isFramebufferTexture){if(Le)if(Yt)e.texStorage2D(r.TEXTURE_2D,Et,$t,pt.width,pt.height);else{let Y=pt.width,lt=pt.height;for(let vt=0;vt<Et;vt++)e.texImage2D(r.TEXTURE_2D,vt,$t,Y,lt,0,Rt,Ht,null),Y>>=1,lt>>=1}}else if(de.length>0){if(Yt&&Le){const Y=qt(de[0]);e.texStorage2D(r.TEXTURE_2D,Et,$t,Y.width,Y.height)}for(let Y=0,lt=de.length;Y<lt;Y++)Ct=de[Y],Yt?F&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,Rt,Ht,Ct):e.texImage2D(r.TEXTURE_2D,Y,$t,Rt,Ht,Ct);v.generateMipmaps=!1}else if(Yt){if(Le){const Y=qt(pt);e.texStorage2D(r.TEXTURE_2D,Et,$t,Y.width,Y.height)}F&&e.texSubImage2D(r.TEXTURE_2D,0,0,0,Rt,Ht,pt)}else e.texImage2D(r.TEXTURE_2D,0,$t,Rt,Ht,pt);m(v)&&g(ot),Lt.__version=it.version,v.onUpdate&&v.onUpdate(v)}N.__version=v.version}function et(N,v,G){if(v.image.length!==6)return;const ot=ie(N,v),ct=v.source;e.bindTexture(r.TEXTURE_CUBE_MAP,N.__webglTexture,r.TEXTURE0+G);const it=n.get(ct);if(ct.version!==it.__version||ot===!0){e.activeTexture(r.TEXTURE0+G);const Lt=be.getPrimaries(be.workingColorSpace),St=v.colorSpace===Tr?null:be.getPrimaries(v.colorSpace),Nt=v.colorSpace===Tr||Lt===St?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,v.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,v.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,v.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Nt);const ye=v.isCompressedTexture||v.image[0].isCompressedTexture,pt=v.image[0]&&v.image[0].isDataTexture,Rt=[];for(let lt=0;lt<6;lt++)!ye&&!pt?Rt[lt]=x(v.image[lt],!0,i.maxCubemapSize):Rt[lt]=pt?v.image[lt].image:v.image[lt],Rt[lt]=De(v,Rt[lt]);const Ht=Rt[0],$t=s.convert(v.format,v.colorSpace),Ct=s.convert(v.type),de=_(v.internalFormat,$t,Ct,v.colorSpace),Yt=v.isVideoTexture!==!0,Le=it.__version===void 0||ot===!0,F=ct.dataReady;let Et=S(v,Ht);yt(r.TEXTURE_CUBE_MAP,v);let Y;if(ye){Yt&&Le&&e.texStorage2D(r.TEXTURE_CUBE_MAP,Et,de,Ht.width,Ht.height);for(let lt=0;lt<6;lt++){Y=Rt[lt].mipmaps;for(let vt=0;vt<Y.length;vt++){const At=Y[vt];v.format!==ji?$t!==null?Yt?F&&e.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,vt,0,0,At.width,At.height,$t,At.data):e.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,vt,de,At.width,At.height,0,At.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,vt,0,0,At.width,At.height,$t,Ct,At.data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,vt,de,At.width,At.height,0,$t,Ct,At.data)}}}else{if(Y=v.mipmaps,Yt&&Le){Y.length>0&&Et++;const lt=qt(Rt[0]);e.texStorage2D(r.TEXTURE_CUBE_MAP,Et,de,lt.width,lt.height)}for(let lt=0;lt<6;lt++)if(pt){Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,0,0,0,Rt[lt].width,Rt[lt].height,$t,Ct,Rt[lt].data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,0,de,Rt[lt].width,Rt[lt].height,0,$t,Ct,Rt[lt].data);for(let vt=0;vt<Y.length;vt++){const me=Y[vt].image[lt].image;Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,vt+1,0,0,me.width,me.height,$t,Ct,me.data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,vt+1,de,me.width,me.height,0,$t,Ct,me.data)}}else{Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,0,0,0,$t,Ct,Rt[lt]):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,0,de,$t,Ct,Rt[lt]);for(let vt=0;vt<Y.length;vt++){const At=Y[vt];Yt?F&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,vt+1,0,0,$t,Ct,At.image[lt]):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+lt,vt+1,de,$t,Ct,At.image[lt])}}}m(v)&&g(r.TEXTURE_CUBE_MAP),it.__version=ct.version,v.onUpdate&&v.onUpdate(v)}N.__version=v.version}function ht(N,v,G,ot,ct,it){const Lt=s.convert(G.format,G.colorSpace),St=s.convert(G.type),Nt=_(G.internalFormat,Lt,St,G.colorSpace);if(!n.get(v).__hasExternalTextures){const pt=Math.max(1,v.width>>it),Rt=Math.max(1,v.height>>it);ct===r.TEXTURE_3D||ct===r.TEXTURE_2D_ARRAY?e.texImage3D(ct,it,Nt,pt,Rt,v.depth,0,Lt,St,null):e.texImage2D(ct,it,Nt,pt,Rt,0,Lt,St,null)}e.bindFramebuffer(r.FRAMEBUFFER,N),xe(v)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,ot,ct,n.get(G).__webglTexture,0,ue(v)):(ct===r.TEXTURE_2D||ct>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&ct<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,ot,ct,n.get(G).__webglTexture,it),e.bindFramebuffer(r.FRAMEBUFFER,null)}function Ft(N,v,G){if(r.bindRenderbuffer(r.RENDERBUFFER,N),v.depthBuffer){const ot=v.depthTexture,ct=ot&&ot.isDepthTexture?ot.type:null,it=y(v.stencilBuffer,ct),Lt=v.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,St=ue(v);xe(v)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,St,it,v.width,v.height):G?r.renderbufferStorageMultisample(r.RENDERBUFFER,St,it,v.width,v.height):r.renderbufferStorage(r.RENDERBUFFER,it,v.width,v.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,Lt,r.RENDERBUFFER,N)}else{const ot=v.textures;for(let ct=0;ct<ot.length;ct++){const it=ot[ct],Lt=s.convert(it.format,it.colorSpace),St=s.convert(it.type),Nt=_(it.internalFormat,Lt,St,it.colorSpace),ye=ue(v);G&&xe(v)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,ye,Nt,v.width,v.height):xe(v)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,ye,Nt,v.width,v.height):r.renderbufferStorage(r.RENDERBUFFER,Nt,v.width,v.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function wt(N,v){if(v&&v.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(r.FRAMEBUFFER,N),!(v.depthTexture&&v.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(v.depthTexture).__webglTexture||v.depthTexture.image.width!==v.width||v.depthTexture.image.height!==v.height)&&(v.depthTexture.image.width=v.width,v.depthTexture.image.height=v.height,v.depthTexture.needsUpdate=!0),Z(v.depthTexture,0);const ot=n.get(v.depthTexture).__webglTexture,ct=ue(v);if(v.depthTexture.format===Ga)xe(v)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,ot,0,ct):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,ot,0);else if(v.depthTexture.format===el)xe(v)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,ot,0,ct):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,ot,0);else throw new Error("Unknown depthTexture format")}function Xt(N){const v=n.get(N),G=N.isWebGLCubeRenderTarget===!0;if(v.__boundDepthTexture!==N.depthTexture){const ot=N.depthTexture;if(v.__depthDisposeCallback&&v.__depthDisposeCallback(),ot){const ct=()=>{delete v.__boundDepthTexture,delete v.__depthDisposeCallback,ot.removeEventListener("dispose",ct)};ot.addEventListener("dispose",ct),v.__depthDisposeCallback=ct}v.__boundDepthTexture=ot}if(N.depthTexture&&!v.__autoAllocateDepthBuffer){if(G)throw new Error("target.depthTexture not supported in Cube render targets");wt(v.__webglFramebuffer,N)}else if(G){v.__webglDepthbuffer=[];for(let ot=0;ot<6;ot++)if(e.bindFramebuffer(r.FRAMEBUFFER,v.__webglFramebuffer[ot]),v.__webglDepthbuffer[ot]===void 0)v.__webglDepthbuffer[ot]=r.createRenderbuffer(),Ft(v.__webglDepthbuffer[ot],N,!1);else{const ct=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,it=v.__webglDepthbuffer[ot];r.bindRenderbuffer(r.RENDERBUFFER,it),r.framebufferRenderbuffer(r.FRAMEBUFFER,ct,r.RENDERBUFFER,it)}}else if(e.bindFramebuffer(r.FRAMEBUFFER,v.__webglFramebuffer),v.__webglDepthbuffer===void 0)v.__webglDepthbuffer=r.createRenderbuffer(),Ft(v.__webglDepthbuffer,N,!1);else{const ot=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,ct=v.__webglDepthbuffer;r.bindRenderbuffer(r.RENDERBUFFER,ct),r.framebufferRenderbuffer(r.FRAMEBUFFER,ot,r.RENDERBUFFER,ct)}e.bindFramebuffer(r.FRAMEBUFFER,null)}function Gt(N,v,G){const ot=n.get(N);v!==void 0&&ht(ot.__webglFramebuffer,N,N.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),G!==void 0&&Xt(N)}function fe(N){const v=N.texture,G=n.get(N),ot=n.get(v);N.addEventListener("dispose",A);const ct=N.textures,it=N.isWebGLCubeRenderTarget===!0,Lt=ct.length>1;if(Lt||(ot.__webglTexture===void 0&&(ot.__webglTexture=r.createTexture()),ot.__version=v.version,o.memory.textures++),it){G.__webglFramebuffer=[];for(let St=0;St<6;St++)if(v.mipmaps&&v.mipmaps.length>0){G.__webglFramebuffer[St]=[];for(let Nt=0;Nt<v.mipmaps.length;Nt++)G.__webglFramebuffer[St][Nt]=r.createFramebuffer()}else G.__webglFramebuffer[St]=r.createFramebuffer()}else{if(v.mipmaps&&v.mipmaps.length>0){G.__webglFramebuffer=[];for(let St=0;St<v.mipmaps.length;St++)G.__webglFramebuffer[St]=r.createFramebuffer()}else G.__webglFramebuffer=r.createFramebuffer();if(Lt)for(let St=0,Nt=ct.length;St<Nt;St++){const ye=n.get(ct[St]);ye.__webglTexture===void 0&&(ye.__webglTexture=r.createTexture(),o.memory.textures++)}if(N.samples>0&&xe(N)===!1){G.__webglMultisampledFramebuffer=r.createFramebuffer(),G.__webglColorRenderbuffer=[],e.bindFramebuffer(r.FRAMEBUFFER,G.__webglMultisampledFramebuffer);for(let St=0;St<ct.length;St++){const Nt=ct[St];G.__webglColorRenderbuffer[St]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,G.__webglColorRenderbuffer[St]);const ye=s.convert(Nt.format,Nt.colorSpace),pt=s.convert(Nt.type),Rt=_(Nt.internalFormat,ye,pt,Nt.colorSpace,N.isXRRenderTarget===!0),Ht=ue(N);r.renderbufferStorageMultisample(r.RENDERBUFFER,Ht,Rt,N.width,N.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+St,r.RENDERBUFFER,G.__webglColorRenderbuffer[St])}r.bindRenderbuffer(r.RENDERBUFFER,null),N.depthBuffer&&(G.__webglDepthRenderbuffer=r.createRenderbuffer(),Ft(G.__webglDepthRenderbuffer,N,!0)),e.bindFramebuffer(r.FRAMEBUFFER,null)}}if(it){e.bindTexture(r.TEXTURE_CUBE_MAP,ot.__webglTexture),yt(r.TEXTURE_CUBE_MAP,v);for(let St=0;St<6;St++)if(v.mipmaps&&v.mipmaps.length>0)for(let Nt=0;Nt<v.mipmaps.length;Nt++)ht(G.__webglFramebuffer[St][Nt],N,v,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+St,Nt);else ht(G.__webglFramebuffer[St],N,v,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+St,0);m(v)&&g(r.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(Lt){for(let St=0,Nt=ct.length;St<Nt;St++){const ye=ct[St],pt=n.get(ye);e.bindTexture(r.TEXTURE_2D,pt.__webglTexture),yt(r.TEXTURE_2D,ye),ht(G.__webglFramebuffer,N,ye,r.COLOR_ATTACHMENT0+St,r.TEXTURE_2D,0),m(ye)&&g(r.TEXTURE_2D)}e.unbindTexture()}else{let St=r.TEXTURE_2D;if((N.isWebGL3DRenderTarget||N.isWebGLArrayRenderTarget)&&(St=N.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY),e.bindTexture(St,ot.__webglTexture),yt(St,v),v.mipmaps&&v.mipmaps.length>0)for(let Nt=0;Nt<v.mipmaps.length;Nt++)ht(G.__webglFramebuffer[Nt],N,v,r.COLOR_ATTACHMENT0,St,Nt);else ht(G.__webglFramebuffer,N,v,r.COLOR_ATTACHMENT0,St,0);m(v)&&g(St),e.unbindTexture()}N.depthBuffer&&Xt(N)}function Pe(N){const v=N.textures;for(let G=0,ot=v.length;G<ot;G++){const ct=v[G];if(m(ct)){const it=N.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:r.TEXTURE_2D,Lt=n.get(ct).__webglTexture;e.bindTexture(it,Lt),g(it),e.unbindTexture()}}}const pe=[],P=[];function ci(N){if(N.samples>0){if(xe(N)===!1){const v=N.textures,G=N.width,ot=N.height;let ct=r.COLOR_BUFFER_BIT;const it=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Lt=n.get(N),St=v.length>1;if(St)for(let Nt=0;Nt<v.length;Nt++)e.bindFramebuffer(r.FRAMEBUFFER,Lt.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Nt,r.RENDERBUFFER,null),e.bindFramebuffer(r.FRAMEBUFFER,Lt.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Nt,r.TEXTURE_2D,null,0);e.bindFramebuffer(r.READ_FRAMEBUFFER,Lt.__webglMultisampledFramebuffer),e.bindFramebuffer(r.DRAW_FRAMEBUFFER,Lt.__webglFramebuffer);for(let Nt=0;Nt<v.length;Nt++){if(N.resolveDepthBuffer&&(N.depthBuffer&&(ct|=r.DEPTH_BUFFER_BIT),N.stencilBuffer&&N.resolveStencilBuffer&&(ct|=r.STENCIL_BUFFER_BIT)),St){r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,Lt.__webglColorRenderbuffer[Nt]);const ye=n.get(v[Nt]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,ye,0)}r.blitFramebuffer(0,0,G,ot,0,0,G,ot,ct,r.NEAREST),l===!0&&(pe.length=0,P.length=0,pe.push(r.COLOR_ATTACHMENT0+Nt),N.depthBuffer&&N.resolveDepthBuffer===!1&&(pe.push(it),P.push(it),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,P)),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,pe))}if(e.bindFramebuffer(r.READ_FRAMEBUFFER,null),e.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),St)for(let Nt=0;Nt<v.length;Nt++){e.bindFramebuffer(r.FRAMEBUFFER,Lt.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Nt,r.RENDERBUFFER,Lt.__webglColorRenderbuffer[Nt]);const ye=n.get(v[Nt]).__webglTexture;e.bindFramebuffer(r.FRAMEBUFFER,Lt.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Nt,r.TEXTURE_2D,ye,0)}e.bindFramebuffer(r.DRAW_FRAMEBUFFER,Lt.__webglMultisampledFramebuffer)}else if(N.depthBuffer&&N.resolveDepthBuffer===!1&&l){const v=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[v])}}}function ue(N){return Math.min(i.maxSamples,N.samples)}function xe(N){const v=n.get(N);return N.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&v.__useRenderToTexture!==!1}function Vt(N){const v=o.render.frame;h.get(N)!==v&&(h.set(N,v),N.update())}function De(N,v){const G=N.colorSpace,ot=N.format,ct=N.type;return N.isCompressedTexture===!0||N.isVideoTexture===!0||G!==Br&&G!==Tr&&(be.getTransfer(G)===Be?(ot!==ji||ct!==Xs)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",G)),v}function qt(N){return typeof HTMLImageElement<"u"&&N instanceof HTMLImageElement?(c.width=N.naturalWidth||N.width,c.height=N.naturalHeight||N.height):typeof VideoFrame<"u"&&N instanceof VideoFrame?(c.width=N.displayWidth,c.height=N.displayHeight):(c.width=N.width,c.height=N.height),c}this.allocateTextureUnit=k,this.resetTextureUnits=b,this.setTexture2D=Z,this.setTexture2DArray=nt,this.setTexture3D=q,this.setTextureCube=rt,this.rebindTextures=Gt,this.setupRenderTarget=fe,this.updateRenderTargetMipmap=Pe,this.updateMultisampleRenderTarget=ci,this.setupDepthRenderbuffer=Xt,this.setupFrameBufferTexture=ht,this.useMultisampledRTT=xe}function MC(r,t){function e(n,i=Tr){let s;const o=be.getTransfer(i);if(n===Xs)return r.UNSIGNED_BYTE;if(n===Hg)return r.UNSIGNED_SHORT_4_4_4_4;if(n===$g)return r.UNSIGNED_SHORT_5_5_5_1;if(n===XM)return r.UNSIGNED_INT_5_9_9_9_REV;if(n===WM)return r.BYTE;if(n===qM)return r.SHORT;if(n===Mc)return r.UNSIGNED_SHORT;if(n===Vg)return r.INT;if(n===xo)return r.UNSIGNED_INT;if(n===cs)return r.FLOAT;if(n===Lc)return r.HALF_FLOAT;if(n===YM)return r.ALPHA;if(n===jM)return r.RGB;if(n===ji)return r.RGBA;if(n===KM)return r.LUMINANCE;if(n===ZM)return r.LUMINANCE_ALPHA;if(n===Ga)return r.DEPTH_COMPONENT;if(n===el)return r.DEPTH_STENCIL;if(n===Wg)return r.RED;if(n===qg)return r.RED_INTEGER;if(n===QM)return r.RG;if(n===Xg)return r.RG_INTEGER;if(n===Yg)return r.RGBA_INTEGER;if(n===xu||n===yu||n===_u||n===Mu)if(o===Be)if(s=t.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(n===xu)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===yu)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===_u)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Mu)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=t.get("WEBGL_compressed_texture_s3tc"),s!==null){if(n===xu)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===yu)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===_u)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Mu)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===um||n===dm||n===fm||n===pm)if(s=t.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(n===um)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===dm)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===fm)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===pm)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===mm||n===gm||n===xm)if(s=t.get("WEBGL_compressed_texture_etc"),s!==null){if(n===mm||n===gm)return o===Be?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(n===xm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===ym||n===_m||n===Mm||n===Sm||n===Tm||n===vm||n===bm||n===Em||n===Am||n===wm||n===Nm||n===Rm||n===Cm||n===Pm)if(s=t.get("WEBGL_compressed_texture_astc"),s!==null){if(n===ym)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===_m)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===Mm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Sm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Tm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===vm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===bm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Em)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===Am)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===wm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Nm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Rm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Cm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Pm)return o===Be?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===Su||n===Fm||n===Im)if(s=t.get("EXT_texture_compression_bptc"),s!==null){if(n===Su)return o===Be?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Fm)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Im)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===JM||n===Lm||n===Dm||n===Um)if(s=t.get("EXT_texture_compression_rgtc"),s!==null){if(n===Su)return s.COMPRESSED_RED_RGTC1_EXT;if(n===Lm)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Dm)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Um)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===tl?r.UNSIGNED_INT_24_8:r[n]!==void 0?r[n]:null}return{convert:e}}class SC extends Ni{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class sc extends Kn{constructor(){super(),this.isGroup=!0,this.type="Group"}}const TC={type:"move"};class If{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new sc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new sc,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new U,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new U),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new sc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new U,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new U),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,n){let i=null,s=null,o=null;const a=this._targetRay,l=this._grip,c=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(c&&t.hand){o=!0;for(const x of t.hand.values()){const m=e.getJointPose(x,n),g=this._getHandJoint(c,x);m!==null&&(g.matrix.fromArray(m.transform.matrix),g.matrix.decompose(g.position,g.rotation,g.scale),g.matrixWorldNeedsUpdate=!0,g.jointRadius=m.radius),g.visible=m!==null}const h=c.joints["index-finger-tip"],u=c.joints["thumb-tip"],d=h.position.distanceTo(u.position),f=.02,p=.005;c.inputState.pinching&&d>f+p?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!c.inputState.pinching&&d<=f-p&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,n),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));a!==null&&(i=e.getPose(t.targetRaySpace,n),i===null&&s!==null&&(i=s),i!==null&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(TC)))}return a!==null&&(a.visible=i!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=o!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const n=new sc;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}const vC=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,bC=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class EC{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(this.texture===null){const i=new is,s=t.properties.get(i);s.__webglTexture=e.texture,(e.depthNear!=n.depthNear||e.depthFar!=n.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=i}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,n=new Fr({vertexShader:vC,fragmentShader:bC,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new Dn(new Fo(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class AC extends Co{constructor(t,e){super();const n=this;let i=null,s=1,o=null,a="local-floor",l=1,c=null,h=null,u=null,d=null,f=null,p=null;const x=new EC,m=e.getContextAttributes();let g=null,_=null;const y=[],S=[],w=new ee;let A=null;const T=new Ni;T.layers.enable(1),T.viewport=new on;const R=new Ni;R.layers.enable(2),R.viewport=new on;const $=[T,R],M=new SC;M.layers.enable(1),M.layers.enable(2);let b=null,k=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(et){let ht=y[et];return ht===void 0&&(ht=new If,y[et]=ht),ht.getTargetRaySpace()},this.getControllerGrip=function(et){let ht=y[et];return ht===void 0&&(ht=new If,y[et]=ht),ht.getGripSpace()},this.getHand=function(et){let ht=y[et];return ht===void 0&&(ht=new If,y[et]=ht),ht.getHandSpace()};function z(et){const ht=S.indexOf(et.inputSource);if(ht===-1)return;const Ft=y[ht];Ft!==void 0&&(Ft.update(et.inputSource,et.frame,c||o),Ft.dispatchEvent({type:et.type,data:et.inputSource}))}function Z(){i.removeEventListener("select",z),i.removeEventListener("selectstart",z),i.removeEventListener("selectend",z),i.removeEventListener("squeeze",z),i.removeEventListener("squeezestart",z),i.removeEventListener("squeezeend",z),i.removeEventListener("end",Z),i.removeEventListener("inputsourceschange",nt);for(let et=0;et<y.length;et++){const ht=S[et];ht!==null&&(S[et]=null,y[et].disconnect(ht))}b=null,k=null,x.reset(),t.setRenderTarget(g),f=null,d=null,u=null,i=null,_=null,he.stop(),n.isPresenting=!1,t.setPixelRatio(A),t.setSize(w.width,w.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(et){s=et,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(et){a=et,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||o},this.setReferenceSpace=function(et){c=et},this.getBaseLayer=function(){return d!==null?d:f},this.getBinding=function(){return u},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=async function(et){if(i=et,i!==null){if(g=t.getRenderTarget(),i.addEventListener("select",z),i.addEventListener("selectstart",z),i.addEventListener("selectend",z),i.addEventListener("squeeze",z),i.addEventListener("squeezestart",z),i.addEventListener("squeezeend",z),i.addEventListener("end",Z),i.addEventListener("inputsourceschange",nt),m.xrCompatible!==!0&&await e.makeXRCompatible(),A=t.getPixelRatio(),t.getSize(w),i.renderState.layers===void 0){const ht={antialias:m.antialias,alpha:!0,depth:m.depth,stencil:m.stencil,framebufferScaleFactor:s};f=new XRWebGLLayer(i,e,ht),i.updateRenderState({baseLayer:f}),t.setPixelRatio(1),t.setSize(f.framebufferWidth,f.framebufferHeight,!1),_=new yo(f.framebufferWidth,f.framebufferHeight,{format:ji,type:Xs,colorSpace:t.outputColorSpace,stencilBuffer:m.stencil})}else{let ht=null,Ft=null,wt=null;m.depth&&(wt=m.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,ht=m.stencil?el:Ga,Ft=m.stencil?tl:xo);const Xt={colorFormat:e.RGBA8,depthFormat:wt,scaleFactor:s};u=new XRWebGLBinding(i,e),d=u.createProjectionLayer(Xt),i.updateRenderState({layers:[d]}),t.setPixelRatio(1),t.setSize(d.textureWidth,d.textureHeight,!1),_=new yo(d.textureWidth,d.textureHeight,{format:ji,type:Xs,depthTexture:new MS(d.textureWidth,d.textureHeight,Ft,void 0,void 0,void 0,void 0,void 0,void 0,ht),stencilBuffer:m.stencil,colorSpace:t.outputColorSpace,samples:m.antialias?4:0,resolveDepthBuffer:d.ignoreDepthValues===!1})}_.isXRRenderTarget=!0,this.setFoveation(l),c=null,o=await i.requestReferenceSpace(a),he.setContext(i),he.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode},this.getDepthTexture=function(){return x.getDepthTexture()};function nt(et){for(let ht=0;ht<et.removed.length;ht++){const Ft=et.removed[ht],wt=S.indexOf(Ft);wt>=0&&(S[wt]=null,y[wt].disconnect(Ft))}for(let ht=0;ht<et.added.length;ht++){const Ft=et.added[ht];let wt=S.indexOf(Ft);if(wt===-1){for(let Gt=0;Gt<y.length;Gt++)if(Gt>=S.length){S.push(Ft),wt=Gt;break}else if(S[Gt]===null){S[Gt]=Ft,wt=Gt;break}if(wt===-1)break}const Xt=y[wt];Xt&&Xt.connect(Ft)}}const q=new U,rt=new U;function W(et,ht,Ft){q.setFromMatrixPosition(ht.matrixWorld),rt.setFromMatrixPosition(Ft.matrixWorld);const wt=q.distanceTo(rt),Xt=ht.projectionMatrix.elements,Gt=Ft.projectionMatrix.elements,fe=Xt[14]/(Xt[10]-1),Pe=Xt[14]/(Xt[10]+1),pe=(Xt[9]+1)/Xt[5],P=(Xt[9]-1)/Xt[5],ci=(Xt[8]-1)/Xt[0],ue=(Gt[8]+1)/Gt[0],xe=fe*ci,Vt=fe*ue,De=wt/(-ci+ue),qt=De*-ci;if(ht.matrixWorld.decompose(et.position,et.quaternion,et.scale),et.translateX(qt),et.translateZ(De),et.matrixWorld.compose(et.position,et.quaternion,et.scale),et.matrixWorldInverse.copy(et.matrixWorld).invert(),Xt[10]===-1)et.projectionMatrix.copy(ht.projectionMatrix),et.projectionMatrixInverse.copy(ht.projectionMatrixInverse);else{const N=fe+De,v=Pe+De,G=xe-qt,ot=Vt+(wt-qt),ct=pe*Pe/v*N,it=P*Pe/v*N;et.projectionMatrix.makePerspective(G,ot,ct,it,N,v),et.projectionMatrixInverse.copy(et.projectionMatrix).invert()}}function dt(et,ht){ht===null?et.matrixWorld.copy(et.matrix):et.matrixWorld.multiplyMatrices(ht.matrixWorld,et.matrix),et.matrixWorldInverse.copy(et.matrixWorld).invert()}this.updateCamera=function(et){if(i===null)return;let ht=et.near,Ft=et.far;x.texture!==null&&(x.depthNear>0&&(ht=x.depthNear),x.depthFar>0&&(Ft=x.depthFar)),M.near=R.near=T.near=ht,M.far=R.far=T.far=Ft,(b!==M.near||k!==M.far)&&(i.updateRenderState({depthNear:M.near,depthFar:M.far}),b=M.near,k=M.far);const wt=et.parent,Xt=M.cameras;dt(M,wt);for(let Gt=0;Gt<Xt.length;Gt++)dt(Xt[Gt],wt);Xt.length===2?W(M,T,R):M.projectionMatrix.copy(T.projectionMatrix),ft(et,M,wt)};function ft(et,ht,Ft){Ft===null?et.matrix.copy(ht.matrixWorld):(et.matrix.copy(Ft.matrixWorld),et.matrix.invert(),et.matrix.multiply(ht.matrixWorld)),et.matrix.decompose(et.position,et.quaternion,et.scale),et.updateMatrixWorld(!0),et.projectionMatrix.copy(ht.projectionMatrix),et.projectionMatrixInverse.copy(ht.projectionMatrixInverse),et.isPerspectiveCamera&&(et.fov=Sc*2*Math.atan(1/et.projectionMatrix.elements[5]),et.zoom=1)}this.getCamera=function(){return M},this.getFoveation=function(){if(!(d===null&&f===null))return l},this.setFoveation=function(et){l=et,d!==null&&(d.fixedFoveation=et),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=et)},this.hasDepthSensing=function(){return x.texture!==null},this.getDepthSensingMesh=function(){return x.getMesh(M)};let yt=null;function ie(et,ht){if(h=ht.getViewerPose(c||o),p=ht,h!==null){const Ft=h.views;f!==null&&(t.setRenderTargetFramebuffer(_,f.framebuffer),t.setRenderTarget(_));let wt=!1;Ft.length!==M.cameras.length&&(M.cameras.length=0,wt=!0);for(let Gt=0;Gt<Ft.length;Gt++){const fe=Ft[Gt];let Pe=null;if(f!==null)Pe=f.getViewport(fe);else{const P=u.getViewSubImage(d,fe);Pe=P.viewport,Gt===0&&(t.setRenderTargetTextures(_,P.colorTexture,d.ignoreDepthValues?void 0:P.depthStencilTexture),t.setRenderTarget(_))}let pe=$[Gt];pe===void 0&&(pe=new Ni,pe.layers.enable(Gt),pe.viewport=new on,$[Gt]=pe),pe.matrix.fromArray(fe.transform.matrix),pe.matrix.decompose(pe.position,pe.quaternion,pe.scale),pe.projectionMatrix.fromArray(fe.projectionMatrix),pe.projectionMatrixInverse.copy(pe.projectionMatrix).invert(),pe.viewport.set(Pe.x,Pe.y,Pe.width,Pe.height),Gt===0&&(M.matrix.copy(pe.matrix),M.matrix.decompose(M.position,M.quaternion,M.scale)),wt===!0&&M.cameras.push(pe)}const Xt=i.enabledFeatures;if(Xt&&Xt.includes("depth-sensing")){const Gt=u.getDepthInformation(Ft[0]);Gt&&Gt.isValid&&Gt.texture&&x.init(t,Gt,i.renderState)}}for(let Ft=0;Ft<y.length;Ft++){const wt=S[Ft],Xt=y[Ft];wt!==null&&Xt!==void 0&&Xt.update(wt,ht,c||o)}yt&&yt(et,ht),ht.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:ht}),p=null}const he=new yS;he.setAnimationLoop(ie),this.setAnimationLoop=function(et){yt=et},this.dispose=function(){}}}const qr=new Pr,wC=new He;function NC(r,t){function e(m,g){m.matrixAutoUpdate===!0&&m.updateMatrix(),g.value.copy(m.matrix)}function n(m,g){g.color.getRGB(m.fogColor.value,mS(r)),g.isFog?(m.fogNear.value=g.near,m.fogFar.value=g.far):g.isFogExp2&&(m.fogDensity.value=g.density)}function i(m,g,_,y,S){g.isMeshBasicMaterial||g.isMeshLambertMaterial?s(m,g):g.isMeshToonMaterial?(s(m,g),u(m,g)):g.isMeshPhongMaterial?(s(m,g),h(m,g)):g.isMeshStandardMaterial?(s(m,g),d(m,g),g.isMeshPhysicalMaterial&&f(m,g,S)):g.isMeshMatcapMaterial?(s(m,g),p(m,g)):g.isMeshDepthMaterial?s(m,g):g.isMeshDistanceMaterial?(s(m,g),x(m,g)):g.isMeshNormalMaterial?s(m,g):g.isLineBasicMaterial?(o(m,g),g.isLineDashedMaterial&&a(m,g)):g.isPointsMaterial?l(m,g,_,y):g.isSpriteMaterial?c(m,g):g.isShadowMaterial?(m.color.value.copy(g.color),m.opacity.value=g.opacity):g.isShaderMaterial&&(g.uniformsNeedUpdate=!1)}function s(m,g){m.opacity.value=g.opacity,g.color&&m.diffuse.value.copy(g.color),g.emissive&&m.emissive.value.copy(g.emissive).multiplyScalar(g.emissiveIntensity),g.map&&(m.map.value=g.map,e(g.map,m.mapTransform)),g.alphaMap&&(m.alphaMap.value=g.alphaMap,e(g.alphaMap,m.alphaMapTransform)),g.bumpMap&&(m.bumpMap.value=g.bumpMap,e(g.bumpMap,m.bumpMapTransform),m.bumpScale.value=g.bumpScale,g.side===ii&&(m.bumpScale.value*=-1)),g.normalMap&&(m.normalMap.value=g.normalMap,e(g.normalMap,m.normalMapTransform),m.normalScale.value.copy(g.normalScale),g.side===ii&&m.normalScale.value.negate()),g.displacementMap&&(m.displacementMap.value=g.displacementMap,e(g.displacementMap,m.displacementMapTransform),m.displacementScale.value=g.displacementScale,m.displacementBias.value=g.displacementBias),g.emissiveMap&&(m.emissiveMap.value=g.emissiveMap,e(g.emissiveMap,m.emissiveMapTransform)),g.specularMap&&(m.specularMap.value=g.specularMap,e(g.specularMap,m.specularMapTransform)),g.alphaTest>0&&(m.alphaTest.value=g.alphaTest);const _=t.get(g),y=_.envMap,S=_.envMapRotation;y&&(m.envMap.value=y,qr.copy(S),qr.x*=-1,qr.y*=-1,qr.z*=-1,y.isCubeTexture&&y.isRenderTargetTexture===!1&&(qr.y*=-1,qr.z*=-1),m.envMapRotation.value.setFromMatrix4(wC.makeRotationFromEuler(qr)),m.flipEnvMap.value=y.isCubeTexture&&y.isRenderTargetTexture===!1?-1:1,m.reflectivity.value=g.reflectivity,m.ior.value=g.ior,m.refractionRatio.value=g.refractionRatio),g.lightMap&&(m.lightMap.value=g.lightMap,m.lightMapIntensity.value=g.lightMapIntensity,e(g.lightMap,m.lightMapTransform)),g.aoMap&&(m.aoMap.value=g.aoMap,m.aoMapIntensity.value=g.aoMapIntensity,e(g.aoMap,m.aoMapTransform))}function o(m,g){m.diffuse.value.copy(g.color),m.opacity.value=g.opacity,g.map&&(m.map.value=g.map,e(g.map,m.mapTransform))}function a(m,g){m.dashSize.value=g.dashSize,m.totalSize.value=g.dashSize+g.gapSize,m.scale.value=g.scale}function l(m,g,_,y){m.diffuse.value.copy(g.color),m.opacity.value=g.opacity,m.size.value=g.size*_,m.scale.value=y*.5,g.map&&(m.map.value=g.map,e(g.map,m.uvTransform)),g.alphaMap&&(m.alphaMap.value=g.alphaMap,e(g.alphaMap,m.alphaMapTransform)),g.alphaTest>0&&(m.alphaTest.value=g.alphaTest)}function c(m,g){m.diffuse.value.copy(g.color),m.opacity.value=g.opacity,m.rotation.value=g.rotation,g.map&&(m.map.value=g.map,e(g.map,m.mapTransform)),g.alphaMap&&(m.alphaMap.value=g.alphaMap,e(g.alphaMap,m.alphaMapTransform)),g.alphaTest>0&&(m.alphaTest.value=g.alphaTest)}function h(m,g){m.specular.value.copy(g.specular),m.shininess.value=Math.max(g.shininess,1e-4)}function u(m,g){g.gradientMap&&(m.gradientMap.value=g.gradientMap)}function d(m,g){m.metalness.value=g.metalness,g.metalnessMap&&(m.metalnessMap.value=g.metalnessMap,e(g.metalnessMap,m.metalnessMapTransform)),m.roughness.value=g.roughness,g.roughnessMap&&(m.roughnessMap.value=g.roughnessMap,e(g.roughnessMap,m.roughnessMapTransform)),g.envMap&&(m.envMapIntensity.value=g.envMapIntensity)}function f(m,g,_){m.ior.value=g.ior,g.sheen>0&&(m.sheenColor.value.copy(g.sheenColor).multiplyScalar(g.sheen),m.sheenRoughness.value=g.sheenRoughness,g.sheenColorMap&&(m.sheenColorMap.value=g.sheenColorMap,e(g.sheenColorMap,m.sheenColorMapTransform)),g.sheenRoughnessMap&&(m.sheenRoughnessMap.value=g.sheenRoughnessMap,e(g.sheenRoughnessMap,m.sheenRoughnessMapTransform))),g.clearcoat>0&&(m.clearcoat.value=g.clearcoat,m.clearcoatRoughness.value=g.clearcoatRoughness,g.clearcoatMap&&(m.clearcoatMap.value=g.clearcoatMap,e(g.clearcoatMap,m.clearcoatMapTransform)),g.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=g.clearcoatRoughnessMap,e(g.clearcoatRoughnessMap,m.clearcoatRoughnessMapTransform)),g.clearcoatNormalMap&&(m.clearcoatNormalMap.value=g.clearcoatNormalMap,e(g.clearcoatNormalMap,m.clearcoatNormalMapTransform),m.clearcoatNormalScale.value.copy(g.clearcoatNormalScale),g.side===ii&&m.clearcoatNormalScale.value.negate())),g.dispersion>0&&(m.dispersion.value=g.dispersion),g.iridescence>0&&(m.iridescence.value=g.iridescence,m.iridescenceIOR.value=g.iridescenceIOR,m.iridescenceThicknessMinimum.value=g.iridescenceThicknessRange[0],m.iridescenceThicknessMaximum.value=g.iridescenceThicknessRange[1],g.iridescenceMap&&(m.iridescenceMap.value=g.iridescenceMap,e(g.iridescenceMap,m.iridescenceMapTransform)),g.iridescenceThicknessMap&&(m.iridescenceThicknessMap.value=g.iridescenceThicknessMap,e(g.iridescenceThicknessMap,m.iridescenceThicknessMapTransform))),g.transmission>0&&(m.transmission.value=g.transmission,m.transmissionSamplerMap.value=_.texture,m.transmissionSamplerSize.value.set(_.width,_.height),g.transmissionMap&&(m.transmissionMap.value=g.transmissionMap,e(g.transmissionMap,m.transmissionMapTransform)),m.thickness.value=g.thickness,g.thicknessMap&&(m.thicknessMap.value=g.thicknessMap,e(g.thicknessMap,m.thicknessMapTransform)),m.attenuationDistance.value=g.attenuationDistance,m.attenuationColor.value.copy(g.attenuationColor)),g.anisotropy>0&&(m.anisotropyVector.value.set(g.anisotropy*Math.cos(g.anisotropyRotation),g.anisotropy*Math.sin(g.anisotropyRotation)),g.anisotropyMap&&(m.anisotropyMap.value=g.anisotropyMap,e(g.anisotropyMap,m.anisotropyMapTransform))),m.specularIntensity.value=g.specularIntensity,m.specularColor.value.copy(g.specularColor),g.specularColorMap&&(m.specularColorMap.value=g.specularColorMap,e(g.specularColorMap,m.specularColorMapTransform)),g.specularIntensityMap&&(m.specularIntensityMap.value=g.specularIntensityMap,e(g.specularIntensityMap,m.specularIntensityMapTransform))}function p(m,g){g.matcap&&(m.matcap.value=g.matcap)}function x(m,g){const _=t.get(g).light;m.referencePosition.value.setFromMatrixPosition(_.matrixWorld),m.nearDistance.value=_.shadow.camera.near,m.farDistance.value=_.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function RC(r,t,e,n){let i={},s={},o=[];const a=r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);function l(_,y){const S=y.program;n.uniformBlockBinding(_,S)}function c(_,y){let S=i[_.id];S===void 0&&(p(_),S=h(_),i[_.id]=S,_.addEventListener("dispose",m));const w=y.program;n.updateUBOMapping(_,w);const A=t.render.frame;s[_.id]!==A&&(d(_),s[_.id]=A)}function h(_){const y=u();_.__bindingPointIndex=y;const S=r.createBuffer(),w=_.__size,A=_.usage;return r.bindBuffer(r.UNIFORM_BUFFER,S),r.bufferData(r.UNIFORM_BUFFER,w,A),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,y,S),S}function u(){for(let _=0;_<a;_++)if(o.indexOf(_)===-1)return o.push(_),_;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function d(_){const y=i[_.id],S=_.uniforms,w=_.__cache;r.bindBuffer(r.UNIFORM_BUFFER,y);for(let A=0,T=S.length;A<T;A++){const R=Array.isArray(S[A])?S[A]:[S[A]];for(let $=0,M=R.length;$<M;$++){const b=R[$];if(f(b,A,$,w)===!0){const k=b.__offset,z=Array.isArray(b.value)?b.value:[b.value];let Z=0;for(let nt=0;nt<z.length;nt++){const q=z[nt],rt=x(q);typeof q=="number"||typeof q=="boolean"?(b.__data[0]=q,r.bufferSubData(r.UNIFORM_BUFFER,k+Z,b.__data)):q.isMatrix3?(b.__data[0]=q.elements[0],b.__data[1]=q.elements[1],b.__data[2]=q.elements[2],b.__data[3]=0,b.__data[4]=q.elements[3],b.__data[5]=q.elements[4],b.__data[6]=q.elements[5],b.__data[7]=0,b.__data[8]=q.elements[6],b.__data[9]=q.elements[7],b.__data[10]=q.elements[8],b.__data[11]=0):(q.toArray(b.__data,Z),Z+=rt.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,k,b.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function f(_,y,S,w){const A=_.value,T=y+"_"+S;if(w[T]===void 0)return typeof A=="number"||typeof A=="boolean"?w[T]=A:w[T]=A.clone(),!0;{const R=w[T];if(typeof A=="number"||typeof A=="boolean"){if(R!==A)return w[T]=A,!0}else if(R.equals(A)===!1)return R.copy(A),!0}return!1}function p(_){const y=_.uniforms;let S=0;const w=16;for(let T=0,R=y.length;T<R;T++){const $=Array.isArray(y[T])?y[T]:[y[T]];for(let M=0,b=$.length;M<b;M++){const k=$[M],z=Array.isArray(k.value)?k.value:[k.value];for(let Z=0,nt=z.length;Z<nt;Z++){const q=z[Z],rt=x(q),W=S%w,dt=W%rt.boundary,ft=W+dt;S+=dt,ft!==0&&w-ft<rt.storage&&(S+=w-ft),k.__data=new Float32Array(rt.storage/Float32Array.BYTES_PER_ELEMENT),k.__offset=S,S+=rt.storage}}}const A=S%w;return A>0&&(S+=w-A),_.__size=S,_.__cache={},this}function x(_){const y={boundary:0,storage:0};return typeof _=="number"||typeof _=="boolean"?(y.boundary=4,y.storage=4):_.isVector2?(y.boundary=8,y.storage=8):_.isVector3||_.isColor?(y.boundary=16,y.storage=12):_.isVector4?(y.boundary=16,y.storage=16):_.isMatrix3?(y.boundary=48,y.storage=48):_.isMatrix4?(y.boundary=64,y.storage=64):_.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",_),y}function m(_){const y=_.target;y.removeEventListener("dispose",m);const S=o.indexOf(y.__bindingPointIndex);o.splice(S,1),r.deleteBuffer(i[y.id]),delete i[y.id],delete s[y.id]}function g(){for(const _ in i)r.deleteBuffer(i[_]);o=[],i={},s={}}return{bind:l,update:c,dispose:g}}class CC{constructor(t={}){const{canvas:e=xE(),context:n=null,depth:i=!0,stencil:s=!1,alpha:o=!1,antialias:a=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:u=!1}=t;this.isWebGLRenderer=!0;let d;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");d=n.getContextAttributes().alpha}else d=o;const f=new Uint32Array(4),p=new Int32Array(4);let x=null,m=null;const g=[],_=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=os,this.toneMapping=Nr,this.toneMappingExposure=1;const y=this;let S=!1,w=0,A=0,T=null,R=-1,$=null;const M=new on,b=new on;let k=null;const z=new oe(0);let Z=0,nt=e.width,q=e.height,rt=1,W=null,dt=null;const ft=new on(0,0,nt,q),yt=new on(0,0,nt,q);let ie=!1;const he=new Jg;let et=!1,ht=!1;const Ft=new He,wt=new He,Xt=new U,Gt=new on,fe={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let Pe=!1;function pe(){return T===null?rt:1}let P=n;function ci(E,L){return e.getContext(E,L)}try{const E={alpha:!0,depth:i,stencil:s,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${Gg}`),e.addEventListener("webglcontextlost",lt,!1),e.addEventListener("webglcontextrestored",vt,!1),e.addEventListener("webglcontextcreationerror",At,!1),P===null){const L="webgl2";if(P=ci(L,E),P===null)throw ci(L)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(E){throw console.error("THREE.WebGLRenderer: "+E.message),E}let ue,xe,Vt,De,qt,N,v,G,ot,ct,it,Lt,St,Nt,ye,pt,Rt,Ht,$t,Ct,de,Yt,Le,F;function Et(){ue=new DN(P),ue.init(),Yt=new MC(P,ue),xe=new RN(P,ue,t,Yt),Vt=new xC(P),xe.reverseDepthBuffer&&Vt.buffers.depth.setReversed(!0),De=new ON(P),qt=new nC,N=new _C(P,ue,Vt,qt,xe,Yt,De),v=new PN(y),G=new LN(y),ot=new WE(P),Le=new wN(P,ot),ct=new UN(P,ot,De,Le),it=new GN(P,ct,ot,De),$t=new zN(P,xe,N),pt=new CN(qt),Lt=new eC(y,v,G,ue,xe,Le,pt),St=new NC(y,qt),Nt=new sC,ye=new hC(ue),Ht=new AN(y,v,G,Vt,it,d,l),Rt=new mC(y,it,xe),F=new RC(P,De,xe,Vt),Ct=new NN(P,ue,De),de=new BN(P,ue,De),De.programs=Lt.programs,y.capabilities=xe,y.extensions=ue,y.properties=qt,y.renderLists=Nt,y.shadowMap=Rt,y.state=Vt,y.info=De}Et();const Y=new AC(y,P);this.xr=Y,this.getContext=function(){return P},this.getContextAttributes=function(){return P.getContextAttributes()},this.forceContextLoss=function(){const E=ue.get("WEBGL_lose_context");E&&E.loseContext()},this.forceContextRestore=function(){const E=ue.get("WEBGL_lose_context");E&&E.restoreContext()},this.getPixelRatio=function(){return rt},this.setPixelRatio=function(E){E!==void 0&&(rt=E,this.setSize(nt,q,!1))},this.getSize=function(E){return E.set(nt,q)},this.setSize=function(E,L,V=!0){if(Y.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}nt=E,q=L,e.width=Math.floor(E*rt),e.height=Math.floor(L*rt),V===!0&&(e.style.width=E+"px",e.style.height=L+"px"),this.setViewport(0,0,E,L)},this.getDrawingBufferSize=function(E){return E.set(nt*rt,q*rt).floor()},this.setDrawingBufferSize=function(E,L,V){nt=E,q=L,rt=V,e.width=Math.floor(E*V),e.height=Math.floor(L*V),this.setViewport(0,0,E,L)},this.getCurrentViewport=function(E){return E.copy(M)},this.getViewport=function(E){return E.copy(ft)},this.setViewport=function(E,L,V,H){E.isVector4?ft.set(E.x,E.y,E.z,E.w):ft.set(E,L,V,H),Vt.viewport(M.copy(ft).multiplyScalar(rt).round())},this.getScissor=function(E){return E.copy(yt)},this.setScissor=function(E,L,V,H){E.isVector4?yt.set(E.x,E.y,E.z,E.w):yt.set(E,L,V,H),Vt.scissor(b.copy(yt).multiplyScalar(rt).round())},this.getScissorTest=function(){return ie},this.setScissorTest=function(E){Vt.setScissorTest(ie=E)},this.setOpaqueSort=function(E){W=E},this.setTransparentSort=function(E){dt=E},this.getClearColor=function(E){return E.copy(Ht.getClearColor())},this.setClearColor=function(){Ht.setClearColor.apply(Ht,arguments)},this.getClearAlpha=function(){return Ht.getClearAlpha()},this.setClearAlpha=function(){Ht.setClearAlpha.apply(Ht,arguments)},this.clear=function(E=!0,L=!0,V=!0){let H=0;if(E){let D=!1;if(T!==null){const mt=T.texture.format;D=mt===Yg||mt===Xg||mt===qg}if(D){const mt=T.texture.type,bt=mt===Xs||mt===xo||mt===Mc||mt===tl||mt===Hg||mt===$g,Pt=Ht.getClearColor(),It=Ht.getClearAlpha(),zt=Pt.r,kt=Pt.g,Dt=Pt.b;bt?(f[0]=zt,f[1]=kt,f[2]=Dt,f[3]=It,P.clearBufferuiv(P.COLOR,0,f)):(p[0]=zt,p[1]=kt,p[2]=Dt,p[3]=It,P.clearBufferiv(P.COLOR,0,p))}else H|=P.COLOR_BUFFER_BIT}L&&(H|=P.DEPTH_BUFFER_BIT,P.clearDepth(this.capabilities.reverseDepthBuffer?0:1)),V&&(H|=P.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),P.clear(H)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",lt,!1),e.removeEventListener("webglcontextrestored",vt,!1),e.removeEventListener("webglcontextcreationerror",At,!1),Nt.dispose(),ye.dispose(),qt.dispose(),v.dispose(),G.dispose(),it.dispose(),Le.dispose(),F.dispose(),Lt.dispose(),Y.dispose(),Y.removeEventListener("sessionstart",l0),Y.removeEventListener("sessionend",c0),Gr.stop()};function lt(E){E.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),S=!0}function vt(){console.log("THREE.WebGLRenderer: Context Restored."),S=!1;const E=De.autoReset,L=Rt.enabled,V=Rt.autoUpdate,H=Rt.needsUpdate,D=Rt.type;Et(),De.autoReset=E,Rt.enabled=L,Rt.autoUpdate=V,Rt.needsUpdate=H,Rt.type=D}function At(E){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",E.statusMessage)}function me(E){const L=E.target;L.removeEventListener("dispose",me),Ze(L)}function Ze(E){Zn(E),qt.remove(E)}function Zn(E){const L=qt.get(E).programs;L!==void 0&&(L.forEach(function(V){Lt.releaseProgram(V)}),E.isShaderMaterial&&Lt.releaseShaderCache(E))}this.renderBufferDirect=function(E,L,V,H,D,mt){L===null&&(L=fe);const bt=D.isMesh&&D.matrixWorld.determinant()<0,Pt=c1(E,L,V,H,D);Vt.setMaterial(H,bt);let It=V.index,zt=1;if(H.wireframe===!0){if(It=ct.getWireframeAttribute(V),It===void 0)return;zt=2}const kt=V.drawRange,Dt=V.attributes.position;let Ne=kt.start*zt,Ue=(kt.start+kt.count)*zt;mt!==null&&(Ne=Math.max(Ne,mt.start*zt),Ue=Math.min(Ue,(mt.start+mt.count)*zt)),It!==null?(Ne=Math.max(Ne,0),Ue=Math.min(Ue,It.count)):Dt!=null&&(Ne=Math.max(Ne,0),Ue=Math.min(Ue,Dt.count));const $e=Ue-Ne;if($e<0||$e===1/0)return;Le.setup(D,H,Pt,V,It);let hi,Te=Ct;if(It!==null&&(hi=ot.get(It),Te=de,Te.setIndex(hi)),D.isMesh)H.wireframe===!0?(Vt.setLineWidth(H.wireframeLinewidth*pe()),Te.setMode(P.LINES)):Te.setMode(P.TRIANGLES);else if(D.isLine){let Ut=H.linewidth;Ut===void 0&&(Ut=1),Vt.setLineWidth(Ut*pe()),D.isLineSegments?Te.setMode(P.LINES):D.isLineLoop?Te.setMode(P.LINE_LOOP):Te.setMode(P.LINE_STRIP)}else D.isPoints?Te.setMode(P.POINTS):D.isSprite&&Te.setMode(P.TRIANGLES);if(D.isBatchedMesh)if(D._multiDrawInstances!==null)Te.renderMultiDrawInstances(D._multiDrawStarts,D._multiDrawCounts,D._multiDrawCount,D._multiDrawInstances);else if(ue.get("WEBGL_multi_draw"))Te.renderMultiDraw(D._multiDrawStarts,D._multiDrawCounts,D._multiDrawCount);else{const Ut=D._multiDrawStarts,Mn=D._multiDrawCounts,ve=D._multiDrawCount,Di=It?ot.get(It).bytesPerElement:1,Bo=qt.get(H).currentProgram.getUniforms();for(let ui=0;ui<ve;ui++)Bo.setValue(P,"_gl_DrawID",ui),Te.render(Ut[ui]/Di,Mn[ui])}else if(D.isInstancedMesh)Te.renderInstances(Ne,$e,D.count);else if(V.isInstancedBufferGeometry){const Ut=V._maxInstanceCount!==void 0?V._maxInstanceCount:1/0,Mn=Math.min(V.instanceCount,Ut);Te.renderInstances(Ne,$e,Mn)}else Te.render(Ne,$e)};function Se(E,L,V){E.transparent===!0&&E.side===Wi&&E.forceSinglePass===!1?(E.side=ii,E.needsUpdate=!0,sh(E,L,V),E.side=Cr,E.needsUpdate=!0,sh(E,L,V),E.side=Wi):sh(E,L,V)}this.compile=function(E,L,V=null){V===null&&(V=E),m=ye.get(V),m.init(L),_.push(m),V.traverseVisible(function(D){D.isLight&&D.layers.test(L.layers)&&(m.pushLight(D),D.castShadow&&m.pushShadow(D))}),E!==V&&E.traverseVisible(function(D){D.isLight&&D.layers.test(L.layers)&&(m.pushLight(D),D.castShadow&&m.pushShadow(D))}),m.setupLights();const H=new Set;return E.traverse(function(D){if(!(D.isMesh||D.isPoints||D.isLine||D.isSprite))return;const mt=D.material;if(mt)if(Array.isArray(mt))for(let bt=0;bt<mt.length;bt++){const Pt=mt[bt];Se(Pt,V,D),H.add(Pt)}else Se(mt,V,D),H.add(mt)}),_.pop(),m=null,H},this.compileAsync=function(E,L,V=null){const H=this.compile(E,L,V);return new Promise(D=>{function mt(){if(H.forEach(function(bt){qt.get(bt).currentProgram.isReady()&&H.delete(bt)}),H.size===0){D(E);return}setTimeout(mt,10)}ue.get("KHR_parallel_shader_compile")!==null?mt():setTimeout(mt,10)})};let Qn=null;function _s(E){Qn&&Qn(E)}function l0(){Gr.stop()}function c0(){Gr.start()}const Gr=new yS;Gr.setAnimationLoop(_s),typeof self<"u"&&Gr.setContext(self),this.setAnimationLoop=function(E){Qn=E,Y.setAnimationLoop(E),E===null?Gr.stop():Gr.start()},Y.addEventListener("sessionstart",l0),Y.addEventListener("sessionend",c0),this.render=function(E,L){if(L!==void 0&&L.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(S===!0)return;if(E.matrixWorldAutoUpdate===!0&&E.updateMatrixWorld(),L.parent===null&&L.matrixWorldAutoUpdate===!0&&L.updateMatrixWorld(),Y.enabled===!0&&Y.isPresenting===!0&&(Y.cameraAutoUpdate===!0&&Y.updateCamera(L),L=Y.getCamera()),E.isScene===!0&&E.onBeforeRender(y,E,L,T),m=ye.get(E,_.length),m.init(L),_.push(m),wt.multiplyMatrices(L.projectionMatrix,L.matrixWorldInverse),he.setFromProjectionMatrix(wt),ht=this.localClippingEnabled,et=pt.init(this.clippingPlanes,ht),x=Nt.get(E,g.length),x.init(),g.push(x),Y.enabled===!0&&Y.isPresenting===!0){const mt=y.xr.getDepthSensingMesh();mt!==null&&tf(mt,L,-1/0,y.sortObjects)}tf(E,L,0,y.sortObjects),x.finish(),y.sortObjects===!0&&x.sort(W,dt),Pe=Y.enabled===!1||Y.isPresenting===!1||Y.hasDepthSensing()===!1,Pe&&Ht.addToRenderList(x,E),this.info.render.frame++,et===!0&&pt.beginShadows();const V=m.state.shadowsArray;Rt.render(V,E,L),et===!0&&pt.endShadows(),this.info.autoReset===!0&&this.info.reset();const H=x.opaque,D=x.transmissive;if(m.setupLights(),L.isArrayCamera){const mt=L.cameras;if(D.length>0)for(let bt=0,Pt=mt.length;bt<Pt;bt++){const It=mt[bt];u0(H,D,E,It)}Pe&&Ht.render(E);for(let bt=0,Pt=mt.length;bt<Pt;bt++){const It=mt[bt];h0(x,E,It,It.viewport)}}else D.length>0&&u0(H,D,E,L),Pe&&Ht.render(E),h0(x,E,L);T!==null&&(N.updateMultisampleRenderTarget(T),N.updateRenderTargetMipmap(T)),E.isScene===!0&&E.onAfterRender(y,E,L),Le.resetDefaultState(),R=-1,$=null,_.pop(),_.length>0?(m=_[_.length-1],et===!0&&pt.setGlobalState(y.clippingPlanes,m.state.camera)):m=null,g.pop(),g.length>0?x=g[g.length-1]:x=null};function tf(E,L,V,H){if(E.visible===!1)return;if(E.layers.test(L.layers)){if(E.isGroup)V=E.renderOrder;else if(E.isLOD)E.autoUpdate===!0&&E.update(L);else if(E.isLight)m.pushLight(E),E.castShadow&&m.pushShadow(E);else if(E.isSprite){if(!E.frustumCulled||he.intersectsSprite(E)){H&&Gt.setFromMatrixPosition(E.matrixWorld).applyMatrix4(wt);const bt=it.update(E),Pt=E.material;Pt.visible&&x.push(E,bt,Pt,V,Gt.z,null)}}else if((E.isMesh||E.isLine||E.isPoints)&&(!E.frustumCulled||he.intersectsObject(E))){const bt=it.update(E),Pt=E.material;if(H&&(E.boundingSphere!==void 0?(E.boundingSphere===null&&E.computeBoundingSphere(),Gt.copy(E.boundingSphere.center)):(bt.boundingSphere===null&&bt.computeBoundingSphere(),Gt.copy(bt.boundingSphere.center)),Gt.applyMatrix4(E.matrixWorld).applyMatrix4(wt)),Array.isArray(Pt)){const It=bt.groups;for(let zt=0,kt=It.length;zt<kt;zt++){const Dt=It[zt],Ne=Pt[Dt.materialIndex];Ne&&Ne.visible&&x.push(E,bt,Ne,V,Gt.z,Dt)}}else Pt.visible&&x.push(E,bt,Pt,V,Gt.z,null)}}const mt=E.children;for(let bt=0,Pt=mt.length;bt<Pt;bt++)tf(mt[bt],L,V,H)}function h0(E,L,V,H){const D=E.opaque,mt=E.transmissive,bt=E.transparent;m.setupLightsView(V),et===!0&&pt.setGlobalState(y.clippingPlanes,V),H&&Vt.viewport(M.copy(H)),D.length>0&&ih(D,L,V),mt.length>0&&ih(mt,L,V),bt.length>0&&ih(bt,L,V),Vt.buffers.depth.setTest(!0),Vt.buffers.depth.setMask(!0),Vt.buffers.color.setMask(!0),Vt.setPolygonOffset(!1)}function u0(E,L,V,H){if((V.isScene===!0?V.overrideMaterial:null)!==null)return;m.state.transmissionRenderTarget[H.id]===void 0&&(m.state.transmissionRenderTarget[H.id]=new yo(1,1,{generateMipmaps:!0,type:ue.has("EXT_color_buffer_half_float")||ue.has("EXT_color_buffer_float")?Lc:Xs,minFilter:ho,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:be.workingColorSpace}));const mt=m.state.transmissionRenderTarget[H.id],bt=H.viewport||M;mt.setSize(bt.z,bt.w);const Pt=y.getRenderTarget();y.setRenderTarget(mt),y.getClearColor(z),Z=y.getClearAlpha(),Z<1&&y.setClearColor(16777215,.5),y.clear(),Pe&&Ht.render(V);const It=y.toneMapping;y.toneMapping=Nr;const zt=H.viewport;if(H.viewport!==void 0&&(H.viewport=void 0),m.setupLightsView(H),et===!0&&pt.setGlobalState(y.clippingPlanes,H),ih(E,V,H),N.updateMultisampleRenderTarget(mt),N.updateRenderTargetMipmap(mt),ue.has("WEBGL_multisampled_render_to_texture")===!1){let kt=!1;for(let Dt=0,Ne=L.length;Dt<Ne;Dt++){const Ue=L[Dt],$e=Ue.object,hi=Ue.geometry,Te=Ue.material,Ut=Ue.group;if(Te.side===Wi&&$e.layers.test(H.layers)){const Mn=Te.side;Te.side=ii,Te.needsUpdate=!0,d0($e,V,H,hi,Te,Ut),Te.side=Mn,Te.needsUpdate=!0,kt=!0}}kt===!0&&(N.updateMultisampleRenderTarget(mt),N.updateRenderTargetMipmap(mt))}y.setRenderTarget(Pt),y.setClearColor(z,Z),zt!==void 0&&(H.viewport=zt),y.toneMapping=It}function ih(E,L,V){const H=L.isScene===!0?L.overrideMaterial:null;for(let D=0,mt=E.length;D<mt;D++){const bt=E[D],Pt=bt.object,It=bt.geometry,zt=H===null?bt.material:H,kt=bt.group;Pt.layers.test(V.layers)&&d0(Pt,L,V,It,zt,kt)}}function d0(E,L,V,H,D,mt){E.onBeforeRender(y,L,V,H,D,mt),E.modelViewMatrix.multiplyMatrices(V.matrixWorldInverse,E.matrixWorld),E.normalMatrix.getNormalMatrix(E.modelViewMatrix),D.onBeforeRender(y,L,V,H,E,mt),D.transparent===!0&&D.side===Wi&&D.forceSinglePass===!1?(D.side=ii,D.needsUpdate=!0,y.renderBufferDirect(V,L,H,D,E,mt),D.side=Cr,D.needsUpdate=!0,y.renderBufferDirect(V,L,H,D,E,mt),D.side=Wi):y.renderBufferDirect(V,L,H,D,E,mt),E.onAfterRender(y,L,V,H,D,mt)}function sh(E,L,V){L.isScene!==!0&&(L=fe);const H=qt.get(E),D=m.state.lights,mt=m.state.shadowsArray,bt=D.state.version,Pt=Lt.getParameters(E,D.state,mt,L,V),It=Lt.getProgramCacheKey(Pt);let zt=H.programs;H.environment=E.isMeshStandardMaterial?L.environment:null,H.fog=L.fog,H.envMap=(E.isMeshStandardMaterial?G:v).get(E.envMap||H.environment),H.envMapRotation=H.environment!==null&&E.envMap===null?L.environmentRotation:E.envMapRotation,zt===void 0&&(E.addEventListener("dispose",me),zt=new Map,H.programs=zt);let kt=zt.get(It);if(kt!==void 0){if(H.currentProgram===kt&&H.lightsStateVersion===bt)return p0(E,Pt),kt}else Pt.uniforms=Lt.getUniforms(E),E.onBeforeCompile(Pt,y),kt=Lt.acquireProgram(Pt,It),zt.set(It,kt),H.uniforms=Pt.uniforms;const Dt=H.uniforms;return(!E.isShaderMaterial&&!E.isRawShaderMaterial||E.clipping===!0)&&(Dt.clippingPlanes=pt.uniform),p0(E,Pt),H.needsLights=u1(E),H.lightsStateVersion=bt,H.needsLights&&(Dt.ambientLightColor.value=D.state.ambient,Dt.lightProbe.value=D.state.probe,Dt.directionalLights.value=D.state.directional,Dt.directionalLightShadows.value=D.state.directionalShadow,Dt.spotLights.value=D.state.spot,Dt.spotLightShadows.value=D.state.spotShadow,Dt.rectAreaLights.value=D.state.rectArea,Dt.ltc_1.value=D.state.rectAreaLTC1,Dt.ltc_2.value=D.state.rectAreaLTC2,Dt.pointLights.value=D.state.point,Dt.pointLightShadows.value=D.state.pointShadow,Dt.hemisphereLights.value=D.state.hemi,Dt.directionalShadowMap.value=D.state.directionalShadowMap,Dt.directionalShadowMatrix.value=D.state.directionalShadowMatrix,Dt.spotShadowMap.value=D.state.spotShadowMap,Dt.spotLightMatrix.value=D.state.spotLightMatrix,Dt.spotLightMap.value=D.state.spotLightMap,Dt.pointShadowMap.value=D.state.pointShadowMap,Dt.pointShadowMatrix.value=D.state.pointShadowMatrix),H.currentProgram=kt,H.uniformsList=null,kt}function f0(E){if(E.uniformsList===null){const L=E.currentProgram.getUniforms();E.uniformsList=Eu.seqWithValue(L.seq,E.uniforms)}return E.uniformsList}function p0(E,L){const V=qt.get(E);V.outputColorSpace=L.outputColorSpace,V.batching=L.batching,V.batchingColor=L.batchingColor,V.instancing=L.instancing,V.instancingColor=L.instancingColor,V.instancingMorph=L.instancingMorph,V.skinning=L.skinning,V.morphTargets=L.morphTargets,V.morphNormals=L.morphNormals,V.morphColors=L.morphColors,V.morphTargetsCount=L.morphTargetsCount,V.numClippingPlanes=L.numClippingPlanes,V.numIntersection=L.numClipIntersection,V.vertexAlphas=L.vertexAlphas,V.vertexTangents=L.vertexTangents,V.toneMapping=L.toneMapping}function c1(E,L,V,H,D){L.isScene!==!0&&(L=fe),N.resetTextureUnits();const mt=L.fog,bt=H.isMeshStandardMaterial?L.environment:null,Pt=T===null?y.outputColorSpace:T.isXRRenderTarget===!0?T.texture.colorSpace:Br,It=(H.isMeshStandardMaterial?G:v).get(H.envMap||bt),zt=H.vertexColors===!0&&!!V.attributes.color&&V.attributes.color.itemSize===4,kt=!!V.attributes.tangent&&(!!H.normalMap||H.anisotropy>0),Dt=!!V.morphAttributes.position,Ne=!!V.morphAttributes.normal,Ue=!!V.morphAttributes.color;let $e=Nr;H.toneMapped&&(T===null||T.isXRRenderTarget===!0)&&($e=y.toneMapping);const hi=V.morphAttributes.position||V.morphAttributes.normal||V.morphAttributes.color,Te=hi!==void 0?hi.length:0,Ut=qt.get(H),Mn=m.state.lights;if(et===!0&&(ht===!0||E!==$)){const bi=E===$&&H.id===R;pt.setState(H,E,bi)}let ve=!1;H.version===Ut.__version?(Ut.needsLights&&Ut.lightsStateVersion!==Mn.state.version||Ut.outputColorSpace!==Pt||D.isBatchedMesh&&Ut.batching===!1||!D.isBatchedMesh&&Ut.batching===!0||D.isBatchedMesh&&Ut.batchingColor===!0&&D.colorTexture===null||D.isBatchedMesh&&Ut.batchingColor===!1&&D.colorTexture!==null||D.isInstancedMesh&&Ut.instancing===!1||!D.isInstancedMesh&&Ut.instancing===!0||D.isSkinnedMesh&&Ut.skinning===!1||!D.isSkinnedMesh&&Ut.skinning===!0||D.isInstancedMesh&&Ut.instancingColor===!0&&D.instanceColor===null||D.isInstancedMesh&&Ut.instancingColor===!1&&D.instanceColor!==null||D.isInstancedMesh&&Ut.instancingMorph===!0&&D.morphTexture===null||D.isInstancedMesh&&Ut.instancingMorph===!1&&D.morphTexture!==null||Ut.envMap!==It||H.fog===!0&&Ut.fog!==mt||Ut.numClippingPlanes!==void 0&&(Ut.numClippingPlanes!==pt.numPlanes||Ut.numIntersection!==pt.numIntersection)||Ut.vertexAlphas!==zt||Ut.vertexTangents!==kt||Ut.morphTargets!==Dt||Ut.morphNormals!==Ne||Ut.morphColors!==Ue||Ut.toneMapping!==$e||Ut.morphTargetsCount!==Te)&&(ve=!0):(ve=!0,Ut.__version=H.version);let Di=Ut.currentProgram;ve===!0&&(Di=sh(H,L,D));let Bo=!1,ui=!1,ef=!1;const Ye=Di.getUniforms(),nr=Ut.uniforms;if(Vt.useProgram(Di.program)&&(Bo=!0,ui=!0,ef=!0),H.id!==R&&(R=H.id,ui=!0),Bo||$!==E){xe.reverseDepthBuffer?(Ft.copy(E.projectionMatrix),_E(Ft),ME(Ft),Ye.setValue(P,"projectionMatrix",Ft)):Ye.setValue(P,"projectionMatrix",E.projectionMatrix),Ye.setValue(P,"viewMatrix",E.matrixWorldInverse);const bi=Ye.map.cameraPosition;bi!==void 0&&bi.setValue(P,Xt.setFromMatrixPosition(E.matrixWorld)),xe.logarithmicDepthBuffer&&Ye.setValue(P,"logDepthBufFC",2/(Math.log(E.far+1)/Math.LN2)),(H.isMeshPhongMaterial||H.isMeshToonMaterial||H.isMeshLambertMaterial||H.isMeshBasicMaterial||H.isMeshStandardMaterial||H.isShaderMaterial)&&Ye.setValue(P,"isOrthographic",E.isOrthographicCamera===!0),$!==E&&($=E,ui=!0,ef=!0)}if(D.isSkinnedMesh){Ye.setOptional(P,D,"bindMatrix"),Ye.setOptional(P,D,"bindMatrixInverse");const bi=D.skeleton;bi&&(bi.boneTexture===null&&bi.computeBoneTexture(),Ye.setValue(P,"boneTexture",bi.boneTexture,N))}D.isBatchedMesh&&(Ye.setOptional(P,D,"batchingTexture"),Ye.setValue(P,"batchingTexture",D._matricesTexture,N),Ye.setOptional(P,D,"batchingIdTexture"),Ye.setValue(P,"batchingIdTexture",D._indirectTexture,N),Ye.setOptional(P,D,"batchingColorTexture"),D._colorsTexture!==null&&Ye.setValue(P,"batchingColorTexture",D._colorsTexture,N));const nf=V.morphAttributes;if((nf.position!==void 0||nf.normal!==void 0||nf.color!==void 0)&&$t.update(D,V,Di),(ui||Ut.receiveShadow!==D.receiveShadow)&&(Ut.receiveShadow=D.receiveShadow,Ye.setValue(P,"receiveShadow",D.receiveShadow)),H.isMeshGouraudMaterial&&H.envMap!==null&&(nr.envMap.value=It,nr.flipEnvMap.value=It.isCubeTexture&&It.isRenderTargetTexture===!1?-1:1),H.isMeshStandardMaterial&&H.envMap===null&&L.environment!==null&&(nr.envMapIntensity.value=L.environmentIntensity),ui&&(Ye.setValue(P,"toneMappingExposure",y.toneMappingExposure),Ut.needsLights&&h1(nr,ef),mt&&H.fog===!0&&St.refreshFogUniforms(nr,mt),St.refreshMaterialUniforms(nr,H,rt,q,m.state.transmissionRenderTarget[E.id]),Eu.upload(P,f0(Ut),nr,N)),H.isShaderMaterial&&H.uniformsNeedUpdate===!0&&(Eu.upload(P,f0(Ut),nr,N),H.uniformsNeedUpdate=!1),H.isSpriteMaterial&&Ye.setValue(P,"center",D.center),Ye.setValue(P,"modelViewMatrix",D.modelViewMatrix),Ye.setValue(P,"normalMatrix",D.normalMatrix),Ye.setValue(P,"modelMatrix",D.matrixWorld),H.isShaderMaterial||H.isRawShaderMaterial){const bi=H.uniformsGroups;for(let sf=0,d1=bi.length;sf<d1;sf++){const m0=bi[sf];F.update(m0,Di),F.bind(m0,Di)}}return Di}function h1(E,L){E.ambientLightColor.needsUpdate=L,E.lightProbe.needsUpdate=L,E.directionalLights.needsUpdate=L,E.directionalLightShadows.needsUpdate=L,E.pointLights.needsUpdate=L,E.pointLightShadows.needsUpdate=L,E.spotLights.needsUpdate=L,E.spotLightShadows.needsUpdate=L,E.rectAreaLights.needsUpdate=L,E.hemisphereLights.needsUpdate=L}function u1(E){return E.isMeshLambertMaterial||E.isMeshToonMaterial||E.isMeshPhongMaterial||E.isMeshStandardMaterial||E.isShadowMaterial||E.isShaderMaterial&&E.lights===!0}this.getActiveCubeFace=function(){return w},this.getActiveMipmapLevel=function(){return A},this.getRenderTarget=function(){return T},this.setRenderTargetTextures=function(E,L,V){qt.get(E.texture).__webglTexture=L,qt.get(E.depthTexture).__webglTexture=V;const H=qt.get(E);H.__hasExternalTextures=!0,H.__autoAllocateDepthBuffer=V===void 0,H.__autoAllocateDepthBuffer||ue.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),H.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(E,L){const V=qt.get(E);V.__webglFramebuffer=L,V.__useDefaultFramebuffer=L===void 0},this.setRenderTarget=function(E,L=0,V=0){T=E,w=L,A=V;let H=!0,D=null,mt=!1,bt=!1;if(E){const It=qt.get(E);if(It.__useDefaultFramebuffer!==void 0)Vt.bindFramebuffer(P.FRAMEBUFFER,null),H=!1;else if(It.__webglFramebuffer===void 0)N.setupRenderTarget(E);else if(It.__hasExternalTextures)N.rebindTextures(E,qt.get(E.texture).__webglTexture,qt.get(E.depthTexture).__webglTexture);else if(E.depthBuffer){const Dt=E.depthTexture;if(It.__boundDepthTexture!==Dt){if(Dt!==null&&qt.has(Dt)&&(E.width!==Dt.image.width||E.height!==Dt.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");N.setupDepthRenderbuffer(E)}}const zt=E.texture;(zt.isData3DTexture||zt.isDataArrayTexture||zt.isCompressedArrayTexture)&&(bt=!0);const kt=qt.get(E).__webglFramebuffer;E.isWebGLCubeRenderTarget?(Array.isArray(kt[L])?D=kt[L][V]:D=kt[L],mt=!0):E.samples>0&&N.useMultisampledRTT(E)===!1?D=qt.get(E).__webglMultisampledFramebuffer:Array.isArray(kt)?D=kt[V]:D=kt,M.copy(E.viewport),b.copy(E.scissor),k=E.scissorTest}else M.copy(ft).multiplyScalar(rt).floor(),b.copy(yt).multiplyScalar(rt).floor(),k=ie;if(Vt.bindFramebuffer(P.FRAMEBUFFER,D)&&H&&Vt.drawBuffers(E,D),Vt.viewport(M),Vt.scissor(b),Vt.setScissorTest(k),mt){const It=qt.get(E.texture);P.framebufferTexture2D(P.FRAMEBUFFER,P.COLOR_ATTACHMENT0,P.TEXTURE_CUBE_MAP_POSITIVE_X+L,It.__webglTexture,V)}else if(bt){const It=qt.get(E.texture),zt=L||0;P.framebufferTextureLayer(P.FRAMEBUFFER,P.COLOR_ATTACHMENT0,It.__webglTexture,V||0,zt)}R=-1},this.readRenderTargetPixels=function(E,L,V,H,D,mt,bt){if(!(E&&E.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Pt=qt.get(E).__webglFramebuffer;if(E.isWebGLCubeRenderTarget&&bt!==void 0&&(Pt=Pt[bt]),Pt){Vt.bindFramebuffer(P.FRAMEBUFFER,Pt);try{const It=E.texture,zt=It.format,kt=It.type;if(!xe.textureFormatReadable(zt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!xe.textureTypeReadable(kt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}L>=0&&L<=E.width-H&&V>=0&&V<=E.height-D&&P.readPixels(L,V,H,D,Yt.convert(zt),Yt.convert(kt),mt)}finally{const It=T!==null?qt.get(T).__webglFramebuffer:null;Vt.bindFramebuffer(P.FRAMEBUFFER,It)}}},this.readRenderTargetPixelsAsync=async function(E,L,V,H,D,mt,bt){if(!(E&&E.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let Pt=qt.get(E).__webglFramebuffer;if(E.isWebGLCubeRenderTarget&&bt!==void 0&&(Pt=Pt[bt]),Pt){const It=E.texture,zt=It.format,kt=It.type;if(!xe.textureFormatReadable(zt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!xe.textureTypeReadable(kt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(L>=0&&L<=E.width-H&&V>=0&&V<=E.height-D){Vt.bindFramebuffer(P.FRAMEBUFFER,Pt);const Dt=P.createBuffer();P.bindBuffer(P.PIXEL_PACK_BUFFER,Dt),P.bufferData(P.PIXEL_PACK_BUFFER,mt.byteLength,P.STREAM_READ),P.readPixels(L,V,H,D,Yt.convert(zt),Yt.convert(kt),0);const Ne=T!==null?qt.get(T).__webglFramebuffer:null;Vt.bindFramebuffer(P.FRAMEBUFFER,Ne);const Ue=P.fenceSync(P.SYNC_GPU_COMMANDS_COMPLETE,0);return P.flush(),await yE(P,Ue,4),P.bindBuffer(P.PIXEL_PACK_BUFFER,Dt),P.getBufferSubData(P.PIXEL_PACK_BUFFER,0,mt),P.deleteBuffer(Dt),P.deleteSync(Ue),mt}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(E,L=null,V=0){E.isTexture!==!0&&(Tu("WebGLRenderer: copyFramebufferToTexture function signature has changed."),L=arguments[0]||null,E=arguments[1]);const H=Math.pow(2,-V),D=Math.floor(E.image.width*H),mt=Math.floor(E.image.height*H),bt=L!==null?L.x:0,Pt=L!==null?L.y:0;N.setTexture2D(E,0),P.copyTexSubImage2D(P.TEXTURE_2D,V,0,0,bt,Pt,D,mt),Vt.unbindTexture()},this.copyTextureToTexture=function(E,L,V=null,H=null,D=0){E.isTexture!==!0&&(Tu("WebGLRenderer: copyTextureToTexture function signature has changed."),H=arguments[0]||null,E=arguments[1],L=arguments[2],D=arguments[3]||0,V=null);let mt,bt,Pt,It,zt,kt;V!==null?(mt=V.max.x-V.min.x,bt=V.max.y-V.min.y,Pt=V.min.x,It=V.min.y):(mt=E.image.width,bt=E.image.height,Pt=0,It=0),H!==null?(zt=H.x,kt=H.y):(zt=0,kt=0);const Dt=Yt.convert(L.format),Ne=Yt.convert(L.type);N.setTexture2D(L,0),P.pixelStorei(P.UNPACK_FLIP_Y_WEBGL,L.flipY),P.pixelStorei(P.UNPACK_PREMULTIPLY_ALPHA_WEBGL,L.premultiplyAlpha),P.pixelStorei(P.UNPACK_ALIGNMENT,L.unpackAlignment);const Ue=P.getParameter(P.UNPACK_ROW_LENGTH),$e=P.getParameter(P.UNPACK_IMAGE_HEIGHT),hi=P.getParameter(P.UNPACK_SKIP_PIXELS),Te=P.getParameter(P.UNPACK_SKIP_ROWS),Ut=P.getParameter(P.UNPACK_SKIP_IMAGES),Mn=E.isCompressedTexture?E.mipmaps[D]:E.image;P.pixelStorei(P.UNPACK_ROW_LENGTH,Mn.width),P.pixelStorei(P.UNPACK_IMAGE_HEIGHT,Mn.height),P.pixelStorei(P.UNPACK_SKIP_PIXELS,Pt),P.pixelStorei(P.UNPACK_SKIP_ROWS,It),E.isDataTexture?P.texSubImage2D(P.TEXTURE_2D,D,zt,kt,mt,bt,Dt,Ne,Mn.data):E.isCompressedTexture?P.compressedTexSubImage2D(P.TEXTURE_2D,D,zt,kt,Mn.width,Mn.height,Dt,Mn.data):P.texSubImage2D(P.TEXTURE_2D,D,zt,kt,mt,bt,Dt,Ne,Mn),P.pixelStorei(P.UNPACK_ROW_LENGTH,Ue),P.pixelStorei(P.UNPACK_IMAGE_HEIGHT,$e),P.pixelStorei(P.UNPACK_SKIP_PIXELS,hi),P.pixelStorei(P.UNPACK_SKIP_ROWS,Te),P.pixelStorei(P.UNPACK_SKIP_IMAGES,Ut),D===0&&L.generateMipmaps&&P.generateMipmap(P.TEXTURE_2D),Vt.unbindTexture()},this.copyTextureToTexture3D=function(E,L,V=null,H=null,D=0){E.isTexture!==!0&&(Tu("WebGLRenderer: copyTextureToTexture3D function signature has changed."),V=arguments[0]||null,H=arguments[1]||null,E=arguments[2],L=arguments[3],D=arguments[4]||0);let mt,bt,Pt,It,zt,kt,Dt,Ne,Ue;const $e=E.isCompressedTexture?E.mipmaps[D]:E.image;V!==null?(mt=V.max.x-V.min.x,bt=V.max.y-V.min.y,Pt=V.max.z-V.min.z,It=V.min.x,zt=V.min.y,kt=V.min.z):(mt=$e.width,bt=$e.height,Pt=$e.depth,It=0,zt=0,kt=0),H!==null?(Dt=H.x,Ne=H.y,Ue=H.z):(Dt=0,Ne=0,Ue=0);const hi=Yt.convert(L.format),Te=Yt.convert(L.type);let Ut;if(L.isData3DTexture)N.setTexture3D(L,0),Ut=P.TEXTURE_3D;else if(L.isDataArrayTexture||L.isCompressedArrayTexture)N.setTexture2DArray(L,0),Ut=P.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}P.pixelStorei(P.UNPACK_FLIP_Y_WEBGL,L.flipY),P.pixelStorei(P.UNPACK_PREMULTIPLY_ALPHA_WEBGL,L.premultiplyAlpha),P.pixelStorei(P.UNPACK_ALIGNMENT,L.unpackAlignment);const Mn=P.getParameter(P.UNPACK_ROW_LENGTH),ve=P.getParameter(P.UNPACK_IMAGE_HEIGHT),Di=P.getParameter(P.UNPACK_SKIP_PIXELS),Bo=P.getParameter(P.UNPACK_SKIP_ROWS),ui=P.getParameter(P.UNPACK_SKIP_IMAGES);P.pixelStorei(P.UNPACK_ROW_LENGTH,$e.width),P.pixelStorei(P.UNPACK_IMAGE_HEIGHT,$e.height),P.pixelStorei(P.UNPACK_SKIP_PIXELS,It),P.pixelStorei(P.UNPACK_SKIP_ROWS,zt),P.pixelStorei(P.UNPACK_SKIP_IMAGES,kt),E.isDataTexture||E.isData3DTexture?P.texSubImage3D(Ut,D,Dt,Ne,Ue,mt,bt,Pt,hi,Te,$e.data):L.isCompressedArrayTexture?P.compressedTexSubImage3D(Ut,D,Dt,Ne,Ue,mt,bt,Pt,hi,$e.data):P.texSubImage3D(Ut,D,Dt,Ne,Ue,mt,bt,Pt,hi,Te,$e),P.pixelStorei(P.UNPACK_ROW_LENGTH,Mn),P.pixelStorei(P.UNPACK_IMAGE_HEIGHT,ve),P.pixelStorei(P.UNPACK_SKIP_PIXELS,Di),P.pixelStorei(P.UNPACK_SKIP_ROWS,Bo),P.pixelStorei(P.UNPACK_SKIP_IMAGES,ui),D===0&&L.generateMipmaps&&P.generateMipmap(Ut),Vt.unbindTexture()},this.initRenderTarget=function(E){qt.get(E).__webglFramebuffer===void 0&&N.setupRenderTarget(E)},this.initTexture=function(E){E.isCubeTexture?N.setTextureCube(E,0):E.isData3DTexture?N.setTexture3D(E,0):E.isDataArrayTexture||E.isCompressedArrayTexture?N.setTexture2DArray(E,0):N.setTexture2D(E,0),Vt.unbindTexture()},this.resetState=function(){w=0,A=0,T=null,Vt.reset(),Le.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Gs}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=t===Kg?"display-p3":"srgb",e.unpackColorSpace=be.workingColorSpace===Md?"display-p3":"srgb"}}let PC=class extends Kn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Pr,this.environmentIntensity=1,this.environmentRotation=new Pr,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}},FC=class extends Or{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new oe(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}},IC=class extends is{constructor(t=null,e=1,n=1,i,s,o,a,l,c=ti,h=ti,u,d){super(null,o,a,l,c,h,i,s,u,d),this.isDataTexture=!0,this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},hy=class extends Qi{constructor(t,e,n,i=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}};const Qo=new He,uy=new He,Ah=[],dy=new Po,LC=new He,Pl=new Dn,Fl=new pl;class ES extends Dn{constructor(t,e,n){super(t,e),this.isInstancedMesh=!0,this.instanceMatrix=new hy(new Float32Array(n*16),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let i=0;i<n;i++)this.setMatrixAt(i,LC)}computeBoundingBox(){const t=this.geometry,e=this.count;this.boundingBox===null&&(this.boundingBox=new Po),t.boundingBox===null&&t.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<e;n++)this.getMatrixAt(n,Qo),dy.copy(t.boundingBox).applyMatrix4(Qo),this.boundingBox.union(dy)}computeBoundingSphere(){const t=this.geometry,e=this.count;this.boundingSphere===null&&(this.boundingSphere=new pl),t.boundingSphere===null&&t.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<e;n++)this.getMatrixAt(n,Qo),Fl.copy(t.boundingSphere).applyMatrix4(Qo),this.boundingSphere.union(Fl)}copy(t,e){return super.copy(t,e),this.instanceMatrix.copy(t.instanceMatrix),t.morphTexture!==null&&(this.morphTexture=t.morphTexture.clone()),t.instanceColor!==null&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,t.boundingBox!==null&&(this.boundingBox=t.boundingBox.clone()),t.boundingSphere!==null&&(this.boundingSphere=t.boundingSphere.clone()),this}getColorAt(t,e){e.fromArray(this.instanceColor.array,t*3)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,t*16)}getMorphAt(t,e){const n=e.morphTargetInfluences,i=this.morphTexture.source.data.data,s=n.length+1,o=t*s+1;for(let a=0;a<n.length;a++)n[a]=i[o+a]}raycast(t,e){const n=this.matrixWorld,i=this.count;if(Pl.geometry=this.geometry,Pl.material=this.material,Pl.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Fl.copy(this.boundingSphere),Fl.applyMatrix4(n),t.ray.intersectsSphere(Fl)!==!1))for(let s=0;s<i;s++){this.getMatrixAt(s,Qo),uy.multiplyMatrices(n,Qo),Pl.matrixWorld=uy,Pl.raycast(t,Ah);for(let o=0,a=Ah.length;o<a;o++){const l=Ah[o];l.instanceId=s,l.object=this,e.push(l)}Ah.length=0}}setColorAt(t,e){this.instanceColor===null&&(this.instanceColor=new hy(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),e.toArray(this.instanceColor.array,t*3)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,t*16)}setMorphAt(t,e){const n=e.morphTargetInfluences,i=n.length+1;this.morphTexture===null&&(this.morphTexture=new IC(new Float32Array(i*this.count),i,this.count,Wg,cs));const s=this.morphTexture.source.data.data;let o=0;for(let c=0;c<n.length;c++)o+=n[c];const a=this.geometry.morphTargetsRelative?1:1-o,l=i*t;s[l]=a,s.set(n,l+1)}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null),this}}let ex=class extends Or{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new oe(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}};const $u=new U,Wu=new U,fy=new He,Il=new Qg,wh=new pl,Lf=new U,py=new U;class zm extends Kn{constructor(t=new ts,e=new ex){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position,n=[0];for(let i=1,s=e.count;i<s;i++)$u.fromBufferAttribute(e,i-1),Wu.fromBufferAttribute(e,i),n[i]=n[i-1],n[i]+=$u.distanceTo(Wu);t.setAttribute("lineDistance",new Bn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,s=t.params.Line.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),wh.copy(n.boundingSphere),wh.applyMatrix4(i),wh.radius+=s,t.ray.intersectsSphere(wh)===!1)return;fy.copy(i).invert(),Il.copy(t.ray).applyMatrix4(fy);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,c=this.isLineSegments?2:1,h=n.index,d=n.attributes.position;if(h!==null){const f=Math.max(0,o.start),p=Math.min(h.count,o.start+o.count);for(let x=f,m=p-1;x<m;x+=c){const g=h.getX(x),_=h.getX(x+1),y=Nh(this,t,Il,l,g,_);y&&e.push(y)}if(this.isLineLoop){const x=h.getX(p-1),m=h.getX(f),g=Nh(this,t,Il,l,x,m);g&&e.push(g)}}else{const f=Math.max(0,o.start),p=Math.min(d.count,o.start+o.count);for(let x=f,m=p-1;x<m;x+=c){const g=Nh(this,t,Il,l,x,x+1);g&&e.push(g)}if(this.isLineLoop){const x=Nh(this,t,Il,l,p-1,f);x&&e.push(x)}}}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}}function Nh(r,t,e,n,i,s){const o=r.geometry.attributes.position;if($u.fromBufferAttribute(o,i),Wu.fromBufferAttribute(o,s),e.distanceSqToSegment($u,Wu,Lf,py)>n)return;Lf.applyMatrix4(r.matrixWorld);const l=t.ray.origin.distanceTo(Lf);if(!(l<t.near||l>t.far))return{distance:l,point:py.clone().applyMatrix4(r.matrixWorld),index:i,face:null,faceIndex:null,barycoord:null,object:r}}let DC=class AS extends ts{constructor(t=1,e=32,n=16,i=0,s=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:s,thetaStart:o,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new U,d=new U,f=[],p=[],x=[],m=[];for(let g=0;g<=n;g++){const _=[],y=g/n;let S=0;g===0&&o===0?S=.5/e:g===n&&l===Math.PI&&(S=-.5/e);for(let w=0;w<=e;w++){const A=w/e;u.x=-t*Math.cos(i+A*s)*Math.sin(o+y*a),u.y=t*Math.cos(o+y*a),u.z=t*Math.sin(i+A*s)*Math.sin(o+y*a),p.push(u.x,u.y,u.z),d.copy(u).normalize(),x.push(d.x,d.y,d.z),m.push(A+S,1-y),_.push(c++)}h.push(_)}for(let g=0;g<n;g++)for(let _=0;_<e;_++){const y=h[g][_+1],S=h[g][_],w=h[g+1][_],A=h[g+1][_+1];(g!==0||o>0)&&f.push(y,S,A),(g!==n-1||l<Math.PI)&&f.push(S,w,A)}this.setIndex(f),this.setAttribute("position",new Bn(p,3)),this.setAttribute("normal",new Bn(x,3)),this.setAttribute("uv",new Bn(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new AS(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}};class nx extends ts{constructor(t=1,e=.4,n=12,i=48,s=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:s},n=Math.floor(n),i=Math.floor(i);const o=[],a=[],l=[],c=[],h=new U,u=new U,d=new U;for(let f=0;f<=n;f++)for(let p=0;p<=i;p++){const x=p/i*s,m=f/n*Math.PI*2;u.x=(t+e*Math.cos(m))*Math.cos(x),u.y=(t+e*Math.cos(m))*Math.sin(x),u.z=e*Math.sin(m),a.push(u.x,u.y,u.z),h.x=t*Math.cos(x),h.y=t*Math.sin(x),d.subVectors(u,h).normalize(),l.push(d.x,d.y,d.z),c.push(p/i),c.push(f/n)}for(let f=1;f<=n;f++)for(let p=1;p<=i;p++){const x=(i+1)*f+p-1,m=(i+1)*(f-1)+p-1,g=(i+1)*(f-1)+p,_=(i+1)*f+p;o.push(x,m,_),o.push(m,g,_)}this.setIndex(o),this.setAttribute("position",new Bn(a,3)),this.setAttribute("normal",new Bn(l,3)),this.setAttribute("uv",new Bn(c,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new nx(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}let UC=class extends Or{constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new oe(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new oe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=jg,this.normalScale=new ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Pr,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}},my=class extends Or{constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new oe(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new oe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=jg,this.normalScale=new ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}},wS=class extends Kn{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new oe(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}};const Df=new He,gy=new U,xy=new U;let BC=class{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new ee(512,512),this.map=null,this.mapPass=null,this.matrix=new He,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Jg,this._frameExtents=new ee(1,1),this._viewportCount=1,this._viewports=[new on(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;gy.setFromMatrixPosition(t.matrixWorld),e.position.copy(gy),xy.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(xy),e.updateMatrixWorld(),Df.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Df),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(Df)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}},OC=class extends BC{constructor(){super(new _S(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}},zC=class extends wS{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Kn.DEFAULT_UP),this.updateMatrix(),this.target=new Kn,this.shadow=new OC}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}},GC=class extends wS{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}};class yy{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(Ln(e/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}const _y=new U,Rh=new U,My=new U;class kC extends Kn{constructor(t,e,n){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="DirectionalLightHelper",e===void 0&&(e=1);let i=new ts;i.setAttribute("position",new Bn([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const s=new ex({fog:!1,toneMapped:!1});this.lightPlane=new zm(i,s),this.add(this.lightPlane),i=new ts,i.setAttribute("position",new Bn([0,0,0,0,0,1],3)),this.targetLine=new zm(i,s),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),_y.setFromMatrixPosition(this.light.matrixWorld),Rh.setFromMatrixPosition(this.light.target.matrixWorld),My.subVectors(Rh,_y),this.lightPlane.lookAt(Rh),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Rh),this.targetLine.scale.z=My.length()}}class VC extends Co{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Gg}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Gg);function Bc(){return new PC}const Oc=()=>{const r=new Ni(75,2,.1,1e3);return r.position.z=2,r};function Td(r){const t=new CC({antialias:!0,canvas:r,alpha:!0});return t.shadowMap.enabled=!0,t.shadowMap.type=kg,t.setSize(r.clientWidth,r.clientHeight,!1),t.setPixelRatio(window.devicePixelRatio),t}const Sy={type:"change"},ix={type:"start"},NS={type:"end"},Ch=new Qg,Ty=new _r,HC=Math.cos(70*gE.DEG2RAD),fn=new U,Jn=2*Math.PI,Fe={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},Uf=1e-6;class RS extends VC{constructor(t,e=null){super(t,e),this.state=Fe.NONE,this.enabled=!0,this.target=new U,this.cursor=new U,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:Oa.ROTATE,MIDDLE:Oa.DOLLY,RIGHT:Oa.PAN},this.touches={ONE:wa.ROTATE,TWO:wa.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new U,this._lastQuaternion=new _o,this._lastTargetPosition=new U,this._quat=new _o().setFromUnitVectors(t.up,new U(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new yy,this._sphericalDelta=new yy,this._scale=1,this._panOffset=new U,this._rotateStart=new ee,this._rotateEnd=new ee,this._rotateDelta=new ee,this._panStart=new ee,this._panEnd=new ee,this._panDelta=new ee,this._dollyStart=new ee,this._dollyEnd=new ee,this._dollyDelta=new ee,this._dollyDirection=new U,this._mouse=new ee,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=WC.bind(this),this._onPointerDown=$C.bind(this),this._onPointerUp=qC.bind(this),this._onContextMenu=JC.bind(this),this._onMouseWheel=jC.bind(this),this._onKeyDown=KC.bind(this),this._onTouchStart=ZC.bind(this),this._onTouchMove=QC.bind(this),this._onMouseDown=XC.bind(this),this._onMouseMove=YC.bind(this),this._interceptControlDown=t2.bind(this),this._interceptControlUp=e2.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(Sy),this.update(),this.state=Fe.NONE}update(t=null){const e=this.object.position;fn.copy(e).sub(this.target),fn.applyQuaternion(this._quat),this._spherical.setFromVector3(fn),this.autoRotate&&this.state===Fe.NONE&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,i=this.maxAzimuthAngle;isFinite(n)&&isFinite(i)&&(n<-Math.PI?n+=Jn:n>Math.PI&&(n-=Jn),i<-Math.PI?i+=Jn:i>Math.PI&&(i-=Jn),n<=i?this._spherical.theta=Math.max(n,Math.min(i,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+i)/2?Math.max(n,this._spherical.theta):Math.min(i,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let s=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const o=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),s=o!=this._spherical.radius}if(fn.setFromSpherical(this._spherical),fn.applyQuaternion(this._quatInverse),e.copy(this.target).add(fn),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let o=null;if(this.object.isPerspectiveCamera){const a=fn.length();o=this._clampDistance(a*this._scale);const l=a-o;this.object.position.addScaledVector(this._dollyDirection,l),this.object.updateMatrixWorld(),s=!!l}else if(this.object.isOrthographicCamera){const a=new U(this._mouse.x,this._mouse.y,0);a.unproject(this.object);const l=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),s=l!==this.object.zoom;const c=new U(this._mouse.x,this._mouse.y,0);c.unproject(this.object),this.object.position.sub(c).add(a),this.object.updateMatrixWorld(),o=fn.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;o!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(o).add(this.object.position):(Ch.origin.copy(this.object.position),Ch.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(Ch.direction))<HC?this.object.lookAt(this.target):(Ty.setFromNormalAndCoplanarPoint(this.object.up,this.target),Ch.intersectPlane(Ty,this.target))))}else if(this.object.isOrthographicCamera){const o=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),o!==this.object.zoom&&(this.object.updateProjectionMatrix(),s=!0)}return this._scale=1,this._performCursorZoom=!1,s||this._lastPosition.distanceToSquared(this.object.position)>Uf||8*(1-this._lastQuaternion.dot(this.object.quaternion))>Uf||this._lastTargetPosition.distanceToSquared(this.target)>Uf?(this.dispatchEvent(Sy),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(t){return t!==null?Jn/60*this.autoRotateSpeed*t:Jn/60/60*this.autoRotateSpeed}_getZoomScale(t){const e=Math.abs(t*.01);return Math.pow(.95,this.zoomSpeed*e)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,e){fn.setFromMatrixColumn(e,0),fn.multiplyScalar(-t),this._panOffset.add(fn)}_panUp(t,e){this.screenSpacePanning===!0?fn.setFromMatrixColumn(e,1):(fn.setFromMatrixColumn(e,0),fn.crossVectors(this.object.up,fn)),fn.multiplyScalar(t),this._panOffset.add(fn)}_pan(t,e){const n=this.domElement;if(this.object.isPerspectiveCamera){const i=this.object.position;fn.copy(i).sub(this.target);let s=fn.length();s*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*s/n.clientHeight,this.object.matrix),this._panUp(2*e*s/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(e*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,e){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),i=t-n.left,s=e-n.top,o=n.width,a=n.height;this._mouse.x=i/o*2-1,this._mouse.y=-(s/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(Jn*this._rotateDelta.x/e.clientHeight),this._rotateUp(Jn*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let e=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateUp(Jn*this.rotateSpeed/this.domElement.clientHeight):this._pan(0,this.keyPanSpeed),e=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateUp(-Jn*this.rotateSpeed/this.domElement.clientHeight):this._pan(0,-this.keyPanSpeed),e=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateLeft(Jn*this.rotateSpeed/this.domElement.clientHeight):this._pan(this.keyPanSpeed,0),e=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateLeft(-Jn*this.rotateSpeed/this.domElement.clientHeight):this._pan(-this.keyPanSpeed,0),e=!0;break}e&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(this._pointers.length===1)this._rotateStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._rotateStart.set(n,i)}}_handleTouchStartPan(t){if(this._pointers.length===1)this._panStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._panStart.set(n,i)}}_handleTouchStartDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,i=t.pageY-e.y,s=Math.sqrt(n*n+i*i);this._dollyStart.set(0,s)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(this._pointers.length==1)this._rotateEnd.set(t.pageX,t.pageY);else{const n=this._getSecondPointerPosition(t),i=.5*(t.pageX+n.x),s=.5*(t.pageY+n.y);this._rotateEnd.set(i,s)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(Jn*this._rotateDelta.x/e.clientHeight),this._rotateUp(Jn*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(this._pointers.length===1)this._panEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._panEnd.set(n,i)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,i=t.pageY-e.y,s=Math.sqrt(n*n+i*i);this._dollyEnd.set(0,s),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const o=(t.pageX+e.x)*.5,a=(t.pageY+e.y)*.5;this._updateZoomParameters(o,a)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId){this._pointers.splice(e,1);return}}_isTrackingPointer(t){for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return!0;return!1}_trackPointer(t){let e=this._pointerPositions[t.pointerId];e===void 0&&(e=new ee,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[e]}_customWheelEvent(t){const e=t.deltaMode,n={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return t.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function $C(r){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(r.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(r)&&(this._addPointer(r),r.pointerType==="touch"?this._onTouchStart(r):this._onMouseDown(r)))}function WC(r){this.enabled!==!1&&(r.pointerType==="touch"?this._onTouchMove(r):this._onMouseMove(r))}function qC(r){switch(this._removePointer(r),this._pointers.length){case 0:this.domElement.releasePointerCapture(r.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(NS),this.state=Fe.NONE;break;case 1:const t=this._pointers[0],e=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:e.x,pageY:e.y});break}}function XC(r){let t;switch(r.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case Oa.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(r),this.state=Fe.DOLLY;break;case Oa.ROTATE:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=Fe.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=Fe.ROTATE}break;case Oa.PAN:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=Fe.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=Fe.PAN}break;default:this.state=Fe.NONE}this.state!==Fe.NONE&&this.dispatchEvent(ix)}function YC(r){switch(this.state){case Fe.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(r);break;case Fe.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(r);break;case Fe.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(r);break}}function jC(r){this.enabled===!1||this.enableZoom===!1||this.state!==Fe.NONE||(r.preventDefault(),this.dispatchEvent(ix),this._handleMouseWheel(this._customWheelEvent(r)),this.dispatchEvent(NS))}function KC(r){this.enabled===!1||this.enablePan===!1||this._handleKeyDown(r)}function ZC(r){switch(this._trackPointer(r),this._pointers.length){case 1:switch(this.touches.ONE){case wa.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(r),this.state=Fe.TOUCH_ROTATE;break;case wa.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(r),this.state=Fe.TOUCH_PAN;break;default:this.state=Fe.NONE}break;case 2:switch(this.touches.TWO){case wa.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(r),this.state=Fe.TOUCH_DOLLY_PAN;break;case wa.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(r),this.state=Fe.TOUCH_DOLLY_ROTATE;break;default:this.state=Fe.NONE}break;default:this.state=Fe.NONE}this.state!==Fe.NONE&&this.dispatchEvent(ix)}function QC(r){switch(this._trackPointer(r),this.state){case Fe.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(r),this.update();break;case Fe.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(r),this.update();break;case Fe.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(r),this.update();break;case Fe.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(r),this.update();break;default:this.state=Fe.NONE}}function JC(r){this.enabled!==!1&&r.preventDefault()}function t2(r){r.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function e2(r){r.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function sx(r,t){const e=new RS(r,t.domElement);return e.enableDamping=!0,e.enablePan=!1,e}function n2(r,t){const e=new RS(r,t.domElement);return e.enableDamping=!0,e.enablePan=!1,e}function CS(){return new GC(16777215,1)}function PS(){const r=new zC(16777215,2);return r.castShadow=!0,r.shadow.mapSize.set(1024,1024),r.shadow.camera.far=15,r.shadow.normalBias=.05,r.position.set(0,5,0),r}function vd(r,t){const e=r.domElement,n=e.clientWidth,i=e.clientHeight;(e.width!==n||e.height!==i)&&(r.setSize(n,i,!1),t.aspect=e.clientWidth/e.clientHeight,t.updateProjectionMatrix())}function i2(r,t){const e=r.domElement,n=e.clientWidth,i=e.clientHeight;(e.width!==n||e.height!==i)&&(r.setSize(n,i,!1),t.aspect=e.clientWidth/e.clientHeight,t.updateProjectionMatrix())}function zc({title:r,description:t}){const e=document.querySelector("section"),n=document.createElement("article"),i=document.createElement("canvas"),s=document.createElement("h2"),o=document.createElement("p");return s.innerHTML=r,o.innerText=t,n.append(s,i,o),e.appendChild(n),i}function s2(r){const t=new sc,e=new ex({color:16711680}),n=r.attributes.position.array,i=r.attributes.normal.array,s=.3;for(let o=0;o<n.length;o+=3){const a=n[o],l=n[o+1],c=n[o+2],h=new U(a,l,c),u=i[o],d=i[o+1],f=i[o+2],p=new U(a+u*s,l+d*s,c+f*s),x=new ts().setFromPoints([h,p]),m=new zm(x,e);t.add(m)}return t}function r2(){const t=zc({title:"Crear instancias de un objeto",description:"Sit enim deserunt ex ut minim et. Ut esse cillum esse labore adipisicing amet pariatur ad. Incididunt dolor nisi sit fugiat fugiat ex proident velit qui aute aliquip culpa consequat. Commodo dolor Lorem veniam consectetur. Proident et cupidatat veniam tempor."}),e=Bc(),n=Oc(),i=Td(t),s=sx(n,i),o=PS(),a=CS();s.enableZoom=!1,n.position.set(1,2,1),s.target.set(0,1,0),e.add(o),e.add(a),e.add(new kC(o));const l=new Uc(.5,.5,.5),c=new UC({color:65280,wireframe:!1}),h=new Dn(new Fo(20,20),new Dc({color:8750469,side:Wi})).rotateX(Math.PI/180*-90),u=2,d=1,f=u*u,p=new ES(l,c,f);e.add(p);const x=1,m=new Kn;let g=0;for(let y=0;y<u;y++)for(let S=0;S<u;S++){const w=(y-u/2)*d,A=(S-u/2)*d;m.position.set(w,x,A),m.updateMatrix(),p.setMatrixAt(g,m.matrix),g++}e.add(h);function _(){vd(i,n),requestAnimationFrame(_),i.render(e,n),s.update()}_()}function o2(){const t=zc({title:"Vectores normales",description:"Sit enim deserunt ex ut minim et. Ut esse cillum esse labore adipisicing amet pariatur ad. Incididunt dolor nisi sit fugiat fugiat ex proident velit qui aute aliquip culpa consequat. Commodo dolor Lorem veniam consectetur. Proident et cupidatat veniam tempor."}),e=Bc(),n=Oc(),i=Td(t),s=sx(n,i),o=CS(),a=PS();s.enableZoom=!1,e.add(o),e.add(a),n.position.set(-4.4,4.71,3.89).multiplyScalar(.4),s.enableZoom=!1;const l=new DC(1,32,32),c=new my({color:16578836,wireframe:!1}),h=new Dn(l,c);e.add(h);const u=s2(l);e.add(u);const d=new Dn(new Fo(20,20),new my({color:8750469,side:Wi})).rotateX(Math.PI/180*-90);d.position.y=-2,d.receiveShadow=!0,e.add(d);function f(){vd(i,n),requestAnimationFrame(f),i.render(e,n),s.update()}f()}class a2{constructor(t,e){this.nodes=t,this.info=e,this.animationLoop=null,this.requestId=null,this._init()}_init(){const t=(e,n)=>{this.requestId=self.requestAnimationFrame(t),this.info.autoReset===!0&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,this.animationLoop!==null&&this.animationLoop(e,n)};t()}dispose(){self.cancelAnimationFrame(this.requestId),this.requestId=null}setAnimationLoop(t){this.animationLoop=t}}class Ys{constructor(){this.weakMap=new WeakMap}get(t){let e=this.weakMap;for(let n=0;n<t.length;n++)if(e=e.get(t[n]),e===void 0)return;return e.get(t[t.length-1])}set(t,e){let n=this.weakMap;for(let i=0;i<t.length;i++){const s=t[i];n.has(s)===!1&&n.set(s,new WeakMap),n=n.get(s)}return n.set(t[t.length-1],e)}delete(t){let e=this.weakMap;for(let n=0;n<t.length;n++)if(e=e.get(t[n]),e===void 0)return!1;return e.delete(t[t.length-1])}}const Nn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let vy=1234567;const fc=Math.PI/180,Tc=180/Math.PI;function Hs(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Nn[r&255]+Nn[r>>8&255]+Nn[r>>16&255]+Nn[r>>24&255]+"-"+Nn[t&255]+Nn[t>>8&255]+"-"+Nn[t>>16&15|64]+Nn[t>>24&255]+"-"+Nn[e&63|128]+Nn[e>>8&255]+"-"+Nn[e>>16&255]+Nn[e>>24&255]+Nn[n&255]+Nn[n>>8&255]+Nn[n>>16&255]+Nn[n>>24&255]).toLowerCase()}function bn(r,t,e){return Math.max(t,Math.min(e,r))}function rx(r,t){return(r%t+t)%t}function l2(r,t,e,n,i){return n+(r-t)*(i-n)/(e-t)}function c2(r,t,e){return r!==t?(e-r)/(t-r):0}function pc(r,t,e){return(1-e)*r+e*t}function h2(r,t,e,n){return pc(r,t,1-Math.exp(-e*n))}function u2(r,t=1){return t-Math.abs(rx(r,t*2)-t)}function d2(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function f2(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function p2(r,t){return r+Math.floor(Math.random()*(t-r+1))}function m2(r,t){return r+Math.random()*(t-r)}function g2(r){return r*(.5-Math.random())}function x2(r){r!==void 0&&(vy=r);let t=vy+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function y2(r){return r*fc}function _2(r){return r*Tc}function M2(r){return(r&r-1)===0&&r!==0}function S2(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function T2(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function v2(r,t,e,n,i){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+n)/2),h=o((t+n)/2),u=s((t-n)/2),d=o((t-n)/2),f=s((n-t)/2),p=o((n-t)/2);switch(i){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*p,l*f,a*c);break;case"YXY":r.set(l*f,a*h,l*p,a*c);break;case"ZYZ":r.set(l*p,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function jn(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function jt(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const b2={DEG2RAD:fc,RAD2DEG:Tc,generateUUID:Hs,clamp:bn,euclideanModulo:rx,mapLinear:l2,inverseLerp:c2,lerp:pc,damp:h2,pingpong:u2,smoothstep:d2,smootherstep:f2,randInt:p2,randFloat:m2,randFloatSpread:g2,seededRandom:x2,degToRad:y2,radToDeg:_2,isPowerOfTwo:M2,ceilPowerOfTwo:S2,floorPowerOfTwo:T2,setQuaternionFromProperEuler:v2,normalize:jt,denormalize:jn},FS="169",E2=0,A2=1,w2=2,N2=1,Ph=3,vc=0,Zs=1,qu=2,il=0,Rr=1,Xu=2,Yu=3,ju=4,IS=5,vr=100,LS=101,DS=102,R2=103,C2=104,US=200,BS=201,OS=202,zS=203,Ku=204,Zu=205,GS=206,kS=207,VS=208,HS=209,$S=210,WS=0,qS=1,XS=2,Qu=3,YS=4,jS=5,KS=6,ZS=7,bd=0,P2=1,F2=2,Va=0,I2=1,L2=2,D2=3,U2=4,B2=6,O2=7,QS=300,Mo=301,sl=302,Gc=303,kc=304,Gm=306,Ju=1e3,Ra=1001,td=1002,En=1003,km=1004,Ha=1005,si=1006,Vm=1007,$s=1008,ks=1009,mc=1010,gc=1011,Ca=1012,Xn=1013,vn=1014,Ti=1015,Ws=1016,z2=1017,G2=1018,Vc=1020,JS=35902,k2=1021,ox=1022,gl=1023,V2=1024,H2=1025,uo=1026,rl=1027,ax=1028,lx=1029,bc=1030,cx=1031,$2=1032,hx=1033,Bf=33776,Au=33777,wu=33778,Nu=33779,by=35840,Ey=35841,Ay=35842,wy=35843,Ny=36196,Hm=37492,$m=37496,Wm=37808,qm=37809,Xm=37810,Ym=37811,jm=37812,Km=37813,Zm=37814,Qm=37815,Jm=37816,tg=37817,eg=37818,ng=37819,ig=37820,sg=37821,Of=36492,W2=36283,Ry=36284,Cy=36285,Py=36286,Ir=0,q2=1,So="",Ot="srgb",Ci="srgb-linear",X2="display-p3",tT="display-p3-linear",rg="linear",Fy="srgb",Iy="rec709",Ly="p3",Y2=0,no=7680,j2=7681,K2=7682,Z2=7683,Q2=34055,J2=34056,tP=5386,eP=512,nP=513,iP=514,sP=515,rP=516,oP=517,aP=518,og=519,eT=512,ux=513,nT=514,iT=515,sT=516,rT=517,oT=518,aT=519,ed=35044,Pa=35048,Ki=2e3,To=2001;let ss=class lT{constructor(t,e,n,i,s,o,a,l,c){lT.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c)}set(t,e,n,i,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=i,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=n,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],f=n[5],p=n[8],x=i[0],m=i[3],g=i[6],_=i[1],y=i[4],S=i[7],w=i[2],A=i[5],T=i[8];return s[0]=o*x+a*_+l*w,s[3]=o*m+a*y+l*A,s[6]=o*g+a*S+l*T,s[1]=c*x+h*_+u*w,s[4]=c*m+h*y+u*A,s[7]=c*g+h*S+u*T,s[2]=d*x+f*_+p*w,s[5]=d*m+f*y+p*A,s[8]=d*g+f*S+p*T,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-n*s*h+n*a*l+i*s*c-i*o*l}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,p=e*u+n*d+i*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/p;return t[0]=u*x,t[1]=(i*c-h*n)*x,t[2]=(a*n-i*o)*x,t[3]=d*x,t[4]=(h*e-i*l)*x,t[5]=(i*s-a*e)*x,t[6]=f*x,t[7]=(n*l-c*e)*x,t[8]=(o*e-n*s)*x,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*o+c*a)+o+t,-i*c,i*l,-i*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(zf.makeScale(t,e)),this}rotate(t){return this.premultiply(zf.makeRotation(-t)),this}translate(t,e){return this.premultiply(zf.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}};const zf=new ss,Dy=new ss().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),Uy=new ss().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),Ll={[Ci]:{transfer:rg,primaries:Iy,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r,fromReference:r=>r},[Ot]:{transfer:Fy,primaries:Iy,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r.convertSRGBToLinear(),fromReference:r=>r.convertLinearToSRGB()},[tT]:{transfer:rg,primaries:Ly,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.applyMatrix3(Uy),fromReference:r=>r.applyMatrix3(Dy)},[X2]:{transfer:Fy,primaries:Ly,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.convertSRGBToLinear().applyMatrix3(Uy),fromReference:r=>r.applyMatrix3(Dy).convertLinearToSRGB()}},lP=new Set([Ci,tT]),_i={enabled:!0,_workingColorSpace:Ci,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(r){if(!lP.has(r))throw new Error(`Unsupported working color space, "${r}".`);this._workingColorSpace=r},convert:function(r,t,e){if(this.enabled===!1||t===e||!t||!e)return r;const n=Ll[t].toReference,i=Ll[e].fromReference;return i(n(r))},fromWorkingColorSpace:function(r,t){return this.convert(r,this._workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this._workingColorSpace)},getPrimaries:function(r){return Ll[r].primaries},getTransfer:function(r){return r===So?rg:Ll[r].transfer},getLuminanceCoefficients:function(r,t=this._workingColorSpace){return r.fromArray(Ll[t].luminanceCoefficients)}};function $a(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Gf(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}const cT={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},cr={h:0,s:0,l:0},Fh={h:0,s:0,l:0};function kf(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}let Ae=class{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Ot){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,_i.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=_i.workingColorSpace){return this.r=t,this.g=e,this.b=n,_i.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=_i.workingColorSpace){if(t=rx(t,1),e=bn(e,0,1),n=bn(n,0,1),e===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+e):n+e-n*e,o=2*n-s;this.r=kf(o,s,t+1/3),this.g=kf(o,s,t),this.b=kf(o,s,t-1/3)}return _i.toWorkingColorSpace(this,i),this}setStyle(t,e=Ot){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=i[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Ot){const n=cT[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=$a(t.r),this.g=$a(t.g),this.b=$a(t.b),this}copyLinearToSRGB(t){return this.r=Gf(t.r),this.g=Gf(t.g),this.b=Gf(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Ot){return _i.fromWorkingColorSpace(Rn.copy(this),t),Math.round(bn(Rn.r*255,0,255))*65536+Math.round(bn(Rn.g*255,0,255))*256+Math.round(bn(Rn.b*255,0,255))}getHexString(t=Ot){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=_i.workingColorSpace){_i.fromWorkingColorSpace(Rn.copy(this),e);const n=Rn.r,i=Rn.g,s=Rn.b,o=Math.max(n,i,s),a=Math.min(n,i,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=_i.workingColorSpace){return _i.fromWorkingColorSpace(Rn.copy(this),e),t.r=Rn.r,t.g=Rn.g,t.b=Rn.b,t}getStyle(t=Ot){_i.fromWorkingColorSpace(Rn.copy(this),t);const e=Rn.r,n=Rn.g,i=Rn.b;return t!==Ot?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){return this.getHSL(cr),this.setHSL(cr.h+t,cr.s+e,cr.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(cr),t.getHSL(Fh);const n=pc(cr.h,Fh.h,e),i=pc(cr.s,Fh.s,e),s=pc(cr.l,Fh.l,e);return this.setHSL(n,i,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,s=t.elements;return this.r=s[0]*e+s[3]*n+s[6]*i,this.g=s[1]*e+s[4]*n+s[7]*i,this.b=s[2]*e+s[5]*n+s[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};const Rn=new Ae;Ae.NAMES=cT;let Hc=class{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,s,o,a){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[o+0],f=s[o+1],p=s[o+2],x=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=x;return}if(u!==x||l!==d||c!==f||h!==p){let m=1-a;const g=l*d+c*f+h*p+u*x,_=g>=0?1:-1,y=1-g*g;if(y>Number.EPSILON){const w=Math.sqrt(y),A=Math.atan2(w,g*_);m=Math.sin(m*A)/w,a=Math.sin(a*A)/w}const S=a*_;if(l=l*m+d*S,c=c*m+f*S,h=h*m+p*S,u=u*m+x*S,m===1-a){const w=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=w,c*=w,h*=w,u*=w}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,n,i,s,o){const a=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[o],d=s[o+1],f=s[o+2],p=s[o+3];return t[e]=a*p+h*u+l*f-c*d,t[e+1]=l*p+h*d+c*u-a*f,t[e+2]=c*p+h*f+a*d-l*u,t[e+3]=h*p-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(n/2),h=a(i/2),u=a(s/2),d=l(n/2),f=l(i/2),p=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"YXZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"ZXY":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"ZYX":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"YZX":this._x=d*h*u+c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u-d*f*p;break;case"XZY":this._x=d*h*u-c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=n+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-i)*f}else if(n>a&&n>u){const f=2*Math.sqrt(1+n-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(i+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-n-u);this._w=(s-c)/f,this._x=(i+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-n-a);this._w=(o-i)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(bn(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=n*h+o*a+i*c-s*l,this._y=i*h+o*l+s*a-n*c,this._z=s*h+o*c+n*l-i*a,this._w=o*h-n*a-i*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*t._w+n*t._x+i*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*n+e*this._x,this._y=f*i+e*this._y,this._z=f*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},O=class hT{constructor(t=0,e=0,n=0){hT.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(By.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(By.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*i,this.y=s[1]*e+s[4]*n+s[7]*i,this.z=s[2]*e+s[5]*n+s[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=t.elements,o=1/(s[3]*e+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*e+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*e+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=2*(o*i-a*n),h=2*(a*e-s*i),u=2*(s*n-o*e);return this.x=e+l*c+o*u-a*h,this.y=n+l*h+a*c-s*u,this.z=i+l*u+s*h-o*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i,this.y=s[1]*e+s[5]*n+s[9]*i,this.z=s[2]*e+s[6]*n+s[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=i*l-s*a,this.y=s*o-n*l,this.z=n*a-i*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return Vf.copy(this).projectOnVector(t),this.sub(Vf)}reflect(t){return this.sub(Vf.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(bn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const Vf=new O,By=new Hc;let an=class ag{constructor(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){ag.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m)}set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=s,g[5]=o,g[9]=a,g[13]=l,g[2]=c,g[6]=h,g[10]=u,g[14]=d,g[3]=f,g[7]=p,g[11]=x,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new ag().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Jo.setFromMatrixColumn(t,0).length(),s=1/Jo.setFromMatrixColumn(t,1).length(),o=1/Jo.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*o,e[9]=n[9]*o,e[10]=n[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,s=t.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+p*c,e[5]=d-x*c,e[9]=-a*l,e[2]=x-d*c,e[6]=p+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d+x*a,e[4]=p*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=x+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d-x*a,e[4]=-o*u,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=x-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=p*c-f,e[8]=d*c+x,e[1]=l*u,e[5]=x*c+d,e[9]=f*c-p,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=x-d*u,e[8]=p*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+p,e[10]=d-x*u}else if(t.order==="XZY"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+x,e[5]=o*h,e[9]=f*u-p,e[2]=p*u-f,e[6]=a*h,e[10]=x*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(cP,t,hP)}lookAt(t,e,n){const i=this.elements;return pi.subVectors(t,e),pi.lengthSq()===0&&(pi.z=1),pi.normalize(),hr.crossVectors(n,pi),hr.lengthSq()===0&&(Math.abs(n.z)===1?pi.x+=1e-4:pi.z+=1e-4,pi.normalize(),hr.crossVectors(n,pi)),hr.normalize(),Ih.crossVectors(pi,hr),i[0]=hr.x,i[4]=Ih.x,i[8]=pi.x,i[1]=hr.y,i[5]=Ih.y,i[9]=pi.y,i[2]=hr.z,i[6]=Ih.z,i[10]=pi.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],f=n[13],p=n[2],x=n[6],m=n[10],g=n[14],_=n[3],y=n[7],S=n[11],w=n[15],A=i[0],T=i[4],R=i[8],$=i[12],M=i[1],b=i[5],k=i[9],z=i[13],Z=i[2],nt=i[6],q=i[10],rt=i[14],W=i[3],dt=i[7],ft=i[11],yt=i[15];return s[0]=o*A+a*M+l*Z+c*W,s[4]=o*T+a*b+l*nt+c*dt,s[8]=o*R+a*k+l*q+c*ft,s[12]=o*$+a*z+l*rt+c*yt,s[1]=h*A+u*M+d*Z+f*W,s[5]=h*T+u*b+d*nt+f*dt,s[9]=h*R+u*k+d*q+f*ft,s[13]=h*$+u*z+d*rt+f*yt,s[2]=p*A+x*M+m*Z+g*W,s[6]=p*T+x*b+m*nt+g*dt,s[10]=p*R+x*k+m*q+g*ft,s[14]=p*$+x*z+m*rt+g*yt,s[3]=_*A+y*M+S*Z+w*W,s[7]=_*T+y*b+S*nt+w*dt,s[11]=_*R+y*k+S*q+w*ft,s[15]=_*$+y*z+S*rt+w*yt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],p=t[3],x=t[7],m=t[11],g=t[15];return p*(+s*l*u-i*c*u-s*a*d+n*c*d+i*a*f-n*l*f)+x*(+e*l*f-e*c*d+s*o*d-i*o*f+i*c*h-s*l*h)+m*(+e*c*u-e*a*f-s*o*u+n*o*f+s*a*h-n*c*h)+g*(-i*a*h-e*l*u+e*a*d+i*o*u-n*o*d+n*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],p=t[12],x=t[13],m=t[14],g=t[15],_=u*m*c-x*d*c+x*l*f-a*m*f-u*l*g+a*d*g,y=p*d*c-h*m*c-p*l*f+o*m*f+h*l*g-o*d*g,S=h*x*c-p*u*c+p*a*f-o*x*f-h*a*g+o*u*g,w=p*u*l-h*x*l-p*a*d+o*x*d+h*a*m-o*u*m,A=e*_+n*y+i*S+s*w;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const T=1/A;return t[0]=_*T,t[1]=(x*d*s-u*m*s-x*i*f+n*m*f+u*i*g-n*d*g)*T,t[2]=(a*m*s-x*l*s+x*i*c-n*m*c-a*i*g+n*l*g)*T,t[3]=(u*l*s-a*d*s-u*i*c+n*d*c+a*i*f-n*l*f)*T,t[4]=y*T,t[5]=(h*m*s-p*d*s+p*i*f-e*m*f-h*i*g+e*d*g)*T,t[6]=(p*l*s-o*m*s-p*i*c+e*m*c+o*i*g-e*l*g)*T,t[7]=(o*d*s-h*l*s+h*i*c-e*d*c-o*i*f+e*l*f)*T,t[8]=S*T,t[9]=(p*u*s-h*x*s-p*n*f+e*x*f+h*n*g-e*u*g)*T,t[10]=(o*x*s-p*a*s+p*n*c-e*x*c-o*n*g+e*a*g)*T,t[11]=(h*a*s-o*u*s-h*n*c+e*u*c+o*n*f-e*a*f)*T,t[12]=w*T,t[13]=(h*x*i-p*u*i+p*n*d-e*x*d-h*n*m+e*u*m)*T,t[14]=(p*a*i-o*x*i-p*n*l+e*x*l+o*n*m-e*a*m)*T,t[15]=(o*u*i-h*a*i+h*n*l-e*u*l-o*n*d+e*a*d)*T,this}scale(t){const e=this.elements,n=t.x,i=t.y,s=t.z;return e[0]*=n,e[4]*=i,e[8]*=s,e[1]*=n,e[5]*=i,e[9]*=s,e[2]*=n,e[6]*=i,e[10]*=s,e[3]*=n,e[7]*=i,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),s=1-n,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+n,c*a-i*l,c*l+i*a,0,c*a+i*l,h*a+n,h*l-i*o,0,c*l-i*a,h*l+i*o,s*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,s,o){return this.set(1,n,s,0,t,1,o,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,p=s*u,x=o*h,m=o*u,g=a*u,_=l*c,y=l*h,S=l*u,w=n.x,A=n.y,T=n.z;return i[0]=(1-(x+g))*w,i[1]=(f+S)*w,i[2]=(p-y)*w,i[3]=0,i[4]=(f-S)*A,i[5]=(1-(d+g))*A,i[6]=(m+_)*A,i[7]=0,i[8]=(p+y)*T,i[9]=(m-_)*T,i[10]=(1-(d+x))*T,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let s=Jo.set(i[0],i[1],i[2]).length();const o=Jo.set(i[4],i[5],i[6]).length(),a=Jo.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),t.x=i[12],t.y=i[13],t.z=i[14],zi.copy(this);const c=1/s,h=1/o,u=1/a;return zi.elements[0]*=c,zi.elements[1]*=c,zi.elements[2]*=c,zi.elements[4]*=h,zi.elements[5]*=h,zi.elements[6]*=h,zi.elements[8]*=u,zi.elements[9]*=u,zi.elements[10]*=u,e.setFromRotationMatrix(zi),n.x=s,n.y=o,n.z=a,this}makePerspective(t,e,n,i,s,o,a=Ki){const l=this.elements,c=2*s/(e-t),h=2*s/(n-i),u=(e+t)/(e-t),d=(n+i)/(n-i);let f,p;if(a===Ki)f=-(o+s)/(o-s),p=-2*o*s/(o-s);else if(a===To)f=-o/(o-s),p=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,i,s,o,a=Ki){const l=this.elements,c=1/(e-t),h=1/(n-i),u=1/(o-s),d=(e+t)*c,f=(n+i)*h;let p,x;if(a===Ki)p=(o+s)*u,x=-2*u;else if(a===To)p=s*u,x=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=x,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}};const Jo=new O,zi=new an,cP=new O(0,0,0),hP=new O(1,1,1),hr=new O,Ih=new O,pi=new O;let Me=class uT{constructor(t=0,e=0){uT.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(bn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*n-o*i+t.x,this.y=s*i+o*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},Ie=class dT{constructor(t=0,e=0,n=0,i=1){dT.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*e+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*e+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*e+o[7]*n+o[11]*i+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,s;const l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],p=l[9],x=l[2],m=l[6],g=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-x)<.01&&Math.abs(p-m)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+x)<.1&&Math.abs(p+m)<.1&&Math.abs(c+f+g-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const y=(c+1)/2,S=(f+1)/2,w=(g+1)/2,A=(h+d)/4,T=(u+x)/4,R=(p+m)/4;return y>S&&y>w?y<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(y),i=A/n,s=T/n):S>w?S<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(S),n=A/i,s=R/i):w<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(w),n=T/s,i=R/s),this.set(n,i,s,e),this}let _=Math.sqrt((m-p)*(m-p)+(u-x)*(u-x)+(d-h)*(d-h));return Math.abs(_)<.001&&(_=1),this.x=(m-p)/_,this.y=(u-x)/_,this.z=(d-h)/_,this.w=Math.acos((c+f+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}};function Ec(r,t=0){let e=3735928559^t,n=1103547991^t;if(r instanceof Array)for(let i=0,s;i<r.length;i++)s=r[i],e=Math.imul(e^s,2654435761),n=Math.imul(n^s,1597334677);else for(let i=0,s;i<r.length;i++)s=r.charCodeAt(i),e=Math.imul(e^s,2654435761),n=Math.imul(n^s,1597334677);return e=Math.imul(e^e>>>16,2246822507),e^=Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(e^e>>>13,3266489909),4294967296*(2097151&n)+(e>>>0)}const uP=r=>Ec(r),fT=r=>Ec(r),nd=(...r)=>Ec(r);function pT(r,t=!1){const e=[];r.isNode===!0&&(e.push(r.id),r=r.getSelf());for(const{property:n,childNode:i}of id(r))e.push(e,Ec(n.slice(0,-4)),i.getCacheKey(t));return Ec(e)}function*id(r,t=!1){for(const e in r){if(e.startsWith("_")===!0)continue;const n=r[e];if(Array.isArray(n)===!0)for(let i=0;i<n.length;i++){const s=n[i];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:i,childNode:s})}else if(n&&n.isNode===!0)yield{property:e,childNode:n};else if(typeof n=="object")for(const i in n){const s=n[i];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:i,childNode:s})}}}function sd(r){if(r==null)return null;const t=typeof r;return r.isNode===!0?"node":t==="number"?"float":t==="boolean"?"bool":t==="string"?"string":t==="function"?"shader":r.isVector2===!0?"vec2":r.isVector3===!0?"vec3":r.isVector4===!0?"vec4":r.isMatrix3===!0?"mat3":r.isMatrix4===!0?"mat4":r.isColor===!0?"color":r instanceof ArrayBuffer?"ArrayBuffer":null}function mT(r,...t){const e=r?r.slice(-4):void 0;return t.length===1&&(e==="vec2"?t=[t[0],t[0]]:e==="vec3"?t=[t[0],t[0],t[0]]:e==="vec4"&&(t=[t[0],t[0],t[0],t[0]])),r==="color"?new Ae(...t):e==="vec2"?new Me(...t):e==="vec3"?new O(...t):e==="vec4"?new Ie(...t):e==="mat3"?new ss(...t):e==="mat4"?new an(...t):r==="bool"?t[0]||!1:r==="float"||r==="int"||r==="uint"?t[0]||0:r==="string"?t[0]||"":r==="ArrayBuffer"?fP(t[0]):null}function dP(r){let t="";const e=new Uint8Array(r);for(let n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return btoa(t)}function fP(r){return Uint8Array.from(atob(r),t=>t.charCodeAt(0)).buffer}const Hf=new O,pP=new O,mP=new ss;let Mr=class{constructor(t=new O(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Hf.subVectors(n,e).cross(pP.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(Hf),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:e.copy(t.start).addScaledVector(n,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||mP.getNormalMatrix(t),i=this.coplanarPoint(Hf).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}};const $f=new Mr;class lg{constructor(){this.version=0,this.globalClippingCount=0,this.localClippingCount=0,this.localClippingEnabled=!1,this.localClipIntersection=!1,this.planes=[],this.parentVersion=0,this.viewNormalMatrix=new ss,this.cacheKey=0}projectPlanes(t,e){const n=t.length,i=this.planes;for(let s=0;s<n;s++){$f.copy(t[s]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const o=i[e+s],a=$f.normal;o.x=-a.x,o.y=-a.y,o.z=-a.z,o.w=$f.constant}}updateGlobal(t,e){const n=t.clippingPlanes;this.viewMatrix=e.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix);let i=!1;if(Array.isArray(n)&&n.length!==0){const s=n.length;if(s!==this.globalClippingCount){const o=[];for(let a=0;a<s;a++)o.push(new Ie);this.globalClippingCount=s,this.planes=o,i=!0}this.projectPlanes(n,0)}else this.globalClippingCount!==0&&(this.globalClippingCount=0,this.planes=[],i=!0);t.localClippingEnabled!==this.localClippingEnabled&&(this.localClippingEnabled=t.localClippingEnabled,i=!0),i&&(this.version++,this.cacheKey=nd(this.globalClippingCount,this.localClippingEnabled===!0?1:0))}update(t,e){let n=!1;if(this!==t&&t.version!==this.parentVersion&&(this.globalClippingCount=e.isShadowNodeMaterial?0:t.globalClippingCount,this.localClippingEnabled=t.localClippingEnabled,this.planes=Array.from(t.planes),this.parentVersion=t.version,this.viewMatrix=t.viewMatrix,this.viewNormalMatrix=t.viewNormalMatrix,n=!0),this.localClippingEnabled){const i=e.clippingPlanes;if(Array.isArray(i)&&i.length!==0){const s=i.length,o=this.planes,a=this.globalClippingCount;if(n||s!==this.localClippingCount){o.length=a+s;for(let l=0;l<s;l++)o[a+l]=new Ie;this.localClippingCount=s,n=!0}this.projectPlanes(i,a)}else this.localClippingCount!==0&&(this.localClippingCount=0,n=!0);this.localClipIntersection!==e.clipIntersection&&(this.localClipIntersection=e.clipIntersection,n=!0)}n&&(this.version+=t.version,this.cacheKey=nd(t.cacheKey,this.localClippingCount,this.localClipIntersection===!0?1:0))}}let gP=0;function xP(r){const t=Object.keys(r);let e=Object.getPrototypeOf(r);for(;e;){const n=Object.getOwnPropertyDescriptors(e);for(const i in n)if(n[i]!==void 0){const s=n[i];s&&typeof s.get=="function"&&t.push(i)}e=Object.getPrototypeOf(e)}return t}class yP{constructor(t,e,n,i,s,o,a,l,c){this._nodes=t,this._geometries=e,this.id=gP++,this.renderer=n,this.object=i,this.material=s,this.scene=o,this.camera=a,this.lightsNode=l,this.context=c,this.geometry=i.geometry,this.version=s.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.updateClipping(c.clippingContext),this.clippingContextVersion=this.clippingContext.version,this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(t){const e=this.material;let n=this.clippingContext;Array.isArray(e.clippingPlanes)?((n===t||!n)&&(n=new lg,this.clippingContext=n),n.update(t,e)):this.clippingContext!==t&&(this.clippingContext=t)}get clippingNeedsUpdate(){return this.clippingContext.version===this.clippingContextVersion?!1:(this.clippingContextVersion=this.clippingContext.version,!0)}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().monitor)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getIndex(){return this._geometries.getIndex(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}getAttributes(){if(this.attributes!==null)return this.attributes;const t=this.getNodeBuilderState().nodeAttributes,e=this.geometry,n=[],i=new Set;for(const s of t){const o=s.node&&s.node.attribute?s.node.attribute:e.getAttribute(s.name);if(o===void 0)continue;n.push(o);const a=o.isInterleavedBufferAttribute?o.data:o;i.add(a)}return this.attributes=n,this.vertexBuffers=Array.from(i.values()),n}getVertexBuffers(){return this.vertexBuffers===null&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:t,material:e,geometry:n,group:i,drawRange:s}=this,o=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),a=this.getIndex(),l=a!==null,c=n.isInstancedBufferGeometry?n.instanceCount:t.count>1?t.count:1;if(c===0)return null;if(o.instanceCount=c,t.isBatchedMesh===!0)return o;let h=1;e.wireframe===!0&&!t.isPoints&&!t.isLineSegments&&!t.isLine&&!t.isLineLoop&&(h=2);let u=s.start*h,d=(s.start+s.count)*h;i!==null&&(u=Math.max(u,i.start*h),d=Math.min(d,(i.start+i.count)*h));const f=l===!0?a.count:n.attributes.position.count;u=Math.max(u,0),d=Math.min(d,f);const p=d-u;return p<0||p===1/0?null:(o.vertexCount=p,o.firstVertex=u,o)}getGeometryCacheKey(){const{geometry:t}=this;let e="";for(const n of Object.keys(t.attributes).sort()){const i=t.attributes[n];e+=n+",",i.data&&(e+=i.data.stride+","),i.offset&&(e+=i.offset+","),i.itemSize&&(e+=i.itemSize+","),i.normalized&&(e+="n,")}return t.index&&(e+="index,"),e}getMaterialCacheKey(){const{object:t,material:e}=this;let n=e.customProgramCacheKey();for(const i of xP(e)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(i))continue;const s=e[i];let o;if(s!==null){const a=typeof s;a==="number"?o=s!==0?"1":"0":a==="object"?(o="{",s.isTexture&&(o+=s.mapping),o+="}"):o=String(s)}else o=String(s);n+=o+","}return n+=this.clippingContext.cacheKey+",",t.geometry&&(n+=this.getGeometryCacheKey()),t.skeleton&&(n+=t.skeleton.bones.length+","),t.morphTargetInfluences&&(n+=t.morphTargetInfluences.length+","),t.isBatchedMesh&&(n+=t._matricesTexture.uuid+",",t._colorsTexture!==null&&(n+=t._colorsTexture.uuid+",")),t.count>1&&(n+=t.uuid+","),uP(n)}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let t=this._nodes.getCacheKey(this.scene,this.lightsNode);return this.object.receiveShadow&&(t+=1),t}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const ta=[];class _P{constructor(t,e,n,i,s,o){this.renderer=t,this.nodes=e,this.geometries=n,this.pipelines=i,this.bindings=s,this.info=o,this.chainMaps={}}get(t,e,n,i,s,o,a){const l=this.getChainMap(a);ta[0]=t,ta[1]=e,ta[2]=o,ta[3]=s;let c=l.get(ta);return c===void 0?(c=this.createRenderObject(this.nodes,this.geometries,this.renderer,t,e,n,i,s,o,a),l.set(ta,c)):(c.updateClipping(o.clippingContext),(c.version!==e.version||c.needsUpdate)&&(c.initialCacheKey!==c.getCacheKey()?(c.dispose(),c=this.get(t,e,n,i,s,o,a)):c.version=e.version)),c}getChainMap(t="default"){return this.chainMaps[t]||(this.chainMaps[t]=new Ys)}dispose(){this.chainMaps={}}createRenderObject(t,e,n,i,s,o,a,l,c,h){const u=this.getChainMap(h),d=new yP(t,e,n,i,s,o,a,l,c);return d.onDispose=()=>{this.pipelines.delete(d),this.bindings.delete(d),this.nodes.delete(d),u.delete(d.getChainArray())},d}}class zr{constructor(){this.data=new WeakMap}get(t){let e=this.data.get(t);return e===void 0&&(e={},this.data.set(t,e)),e}delete(t){let e;return this.data.has(t)&&(e=this.data.get(t),this.data.delete(t)),e}has(t){return this.data.has(t)}dispose(){this.data=new WeakMap}}const fo={VERTEX:1,INDEX:2,STORAGE:4},br=16,MP=211,SP=212;class TP extends zr{constructor(t){super(),this.backend=t}delete(t){const e=super.delete(t);return e!==void 0&&this.backend.destroyAttribute(t),e}update(t,e){const n=this.get(t);if(n.version===void 0)e===fo.VERTEX?this.backend.createAttribute(t):e===fo.INDEX?this.backend.createIndexAttribute(t):e===fo.STORAGE&&this.backend.createStorageAttribute(t),n.version=this._getBufferAttribute(t).version;else{const i=this._getBufferAttribute(t);(n.version<i.version||i.usage===Pa)&&(this.backend.updateAttribute(t),n.version=i.version)}}_getBufferAttribute(t){return t.isInterleavedBufferAttribute&&(t=t.data),t}}const Os=vP();function vP(){const r=new ArrayBuffer(4),t=new Float32Array(r),e=new Uint32Array(r),n=new Uint32Array(512),i=new Uint32Array(512);for(let l=0;l<256;++l){const c=l-127;c<-27?(n[l]=0,n[l|256]=32768,i[l]=24,i[l|256]=24):c<-14?(n[l]=1024>>-c-14,n[l|256]=1024>>-c-14|32768,i[l]=-c-1,i[l|256]=-c-1):c<=15?(n[l]=c+15<<10,n[l|256]=c+15<<10|32768,i[l]=13,i[l|256]=13):c<128?(n[l]=31744,n[l|256]=64512,i[l]=24,i[l|256]=24):(n[l]=31744,n[l|256]=64512,i[l]=13,i[l|256]=13)}const s=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64);for(let l=1;l<1024;++l){let c=l<<13,h=0;for(;!(c&8388608);)c<<=1,h-=8388608;c&=-8388609,h+=947912704,s[l]=c|h}for(let l=1024;l<2048;++l)s[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)o[l]=l<<23;o[31]=1199570944,o[32]=2147483648;for(let l=33;l<63;++l)o[l]=2147483648+(l-32<<23);o[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(a[l]=1024);return{floatView:t,uint32View:e,baseTable:n,shiftTable:i,mantissaTable:s,exponentTable:o,offsetTable:a}}function mi(r){Math.abs(r)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),r=bn(r,-65504,65504),Os.floatView[0]=r;const t=Os.uint32View[0],e=t>>23&511;return Os.baseTable[e]+((t&8388607)>>Os.shiftTable[e])}function Lh(r){const t=r>>10;return Os.uint32View[0]=Os.mantissaTable[Os.offsetTable[t]+(r&1023)]+Os.exponentTable[t],Os.floatView[0]}const Je=new O,Dh=new Me;let Pi=class{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=ed,this.updateRanges=[],this.gpuType=Ti,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)Dh.fromBufferAttribute(this,e),Dh.applyMatrix3(t),this.setXY(e,Dh.x,Dh.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)Je.fromBufferAttribute(this,e),Je.applyMatrix3(t),this.setXYZ(e,Je.x,Je.y,Je.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)Je.fromBufferAttribute(this,e),Je.applyMatrix4(t),this.setXYZ(e,Je.x,Je.y,Je.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Je.fromBufferAttribute(this,e),Je.applyNormalMatrix(t),this.setXYZ(e,Je.x,Je.y,Je.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Je.fromBufferAttribute(this,e),Je.transformDirection(t),this.setXYZ(e,Je.x,Je.y,Je.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=jn(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=jt(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=jn(e,this.array)),e}setX(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=jn(e,this.array)),e}setY(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=jn(e,this.array)),e}setZ(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=jn(e,this.array)),e}setW(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array),s=jt(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==ed&&(t.usage=this.usage),t}};class gT extends Pi{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class xT extends Pi{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class yT extends Pi{constructor(t,e,n){super(new Uint16Array(t),e,n),this.isFloat16BufferAttribute=!0}getX(t){let e=Lh(this.array[t*this.itemSize]);return this.normalized&&(e=jn(e,this.array)),e}setX(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize]=mi(e),this}getY(t){let e=Lh(this.array[t*this.itemSize+1]);return this.normalized&&(e=jn(e,this.array)),e}setY(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+1]=mi(e),this}getZ(t){let e=Lh(this.array[t*this.itemSize+2]);return this.normalized&&(e=jn(e,this.array)),e}setZ(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+2]=mi(e),this}getW(t){let e=Lh(this.array[t*this.itemSize+3]);return this.normalized&&(e=jn(e,this.array)),e}setW(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+3]=mi(e),this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array)),this.array[t+0]=mi(e),this.array[t+1]=mi(n),this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array)),this.array[t+0]=mi(e),this.array[t+1]=mi(n),this.array[t+2]=mi(i),this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array),s=jt(s,this.array)),this.array[t+0]=mi(e),this.array[t+1]=mi(n),this.array[t+2]=mi(i),this.array[t+3]=mi(s),this}}class qs extends Pi{constructor(t,e,n){super(new Float32Array(t),e,n)}}function bP(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function _T(r){return r.index!==null?r.index.version:r.attributes.position.version}function Oy(r){const t=[],e=r.index,n=r.attributes.position;if(e!==null){const s=e.array;for(let o=0,a=s.length;o<a;o+=3){const l=s[o+0],c=s[o+1],h=s[o+2];t.push(l,c,c,h,h,l)}}else{const s=n.array;for(let o=0,a=s.length/3-1;o<a;o+=3){const l=o+0,c=o+1,h=o+2;t.push(l,c,c,h,h,l)}}const i=new(bP(t)?xT:gT)(t,1);return i.version=_T(r),i}class EP extends zr{constructor(t,e){super(),this.attributes=t,this.info=e,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(t){const e=t.geometry;return super.has(e)&&this.get(e).initialized===!0}updateForRender(t){this.has(t)===!1&&this.initGeometry(t),this.updateAttributes(t)}initGeometry(t){const e=t.geometry,n=this.get(e);n.initialized=!0,this.info.memory.geometries++;const i=()=>{this.info.memory.geometries--;const s=e.index,o=t.getAttributes();s!==null&&this.attributes.delete(s);for(const l of o)this.attributes.delete(l);const a=this.wireframes.get(e);a!==void 0&&this.attributes.delete(a),e.removeEventListener("dispose",i)};e.addEventListener("dispose",i)}updateAttributes(t){const e=t.getAttributes();for(const i of e)i.isStorageBufferAttribute||i.isStorageInstancedBufferAttribute?this.updateAttribute(i,fo.STORAGE):this.updateAttribute(i,fo.VERTEX);const n=this.getIndex(t);n!==null&&this.updateAttribute(n,fo.INDEX)}updateAttribute(t,e){const n=this.info.render.calls;t.isInterleavedBufferAttribute?this.attributeCall.get(t)===void 0?(this.attributes.update(t,e),this.attributeCall.set(t,n)):this.attributeCall.get(t.data)!==n&&(this.attributes.update(t,e),this.attributeCall.set(t.data,n),this.attributeCall.set(t,n)):this.attributeCall.get(t)!==n&&(this.attributes.update(t,e),this.attributeCall.set(t,n))}getIndex(t){const{geometry:e,material:n}=t;let i=e.index;if(n.wireframe===!0){const s=this.wireframes;let o=s.get(e);o===void 0?(o=Oy(e),s.set(e,o)):o.version!==_T(e)&&(this.attributes.delete(o),o=Oy(e),s.set(e,o)),i=o}return i}}class AP{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.compute={calls:0,frameCalls:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.memory={geometries:0,textures:0}}update(t,e,n){this.render.drawCalls++,t.isMesh||t.isSprite?this.render.triangles+=n*(e/3):t.isPoints?this.render.points+=n*e:t.isLineSegments?this.render.lines+=n*(e/2):t.isLine?this.render.lines+=n*(e-1):console.error("THREE.WebGPUInfo: Unknown object type.")}updateTimestamp(t,e){this[t].timestampCalls===0&&(this[t].timestamp=0),this[t].timestamp+=e,this[t].timestampCalls++,this[t].timestampCalls>=this[t].previousFrameCalls&&(this[t].timestampCalls=0)}reset(){const t=this.render.frameCalls;this.render.previousFrameCalls=t;const e=this.compute.frameCalls;this.compute.previousFrameCalls=e,this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class MT{constructor(t){this.cacheKey=t,this.usedTimes=0}}class wP extends MT{constructor(t,e,n){super(t),this.vertexProgram=e,this.fragmentProgram=n}}class NP extends MT{constructor(t,e){super(t),this.computeProgram=e,this.isComputePipeline=!0}}let RP=0;class Wf{constructor(t,e,n=null,i=null){this.id=RP++,this.code=t,this.stage=e,this.transforms=n,this.attributes=i,this.usedTimes=0}}class CP extends zr{constructor(t,e){super(),this.backend=t,this.nodes=e,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(t,e){const{backend:n}=this,i=this.get(t);if(this._needsComputeUpdate(t)){const s=i.pipeline;s&&(s.usedTimes--,s.computeProgram.usedTimes--);const o=this.nodes.getForCompute(t);let a=this.programs.compute.get(o.computeShader);a===void 0&&(s&&s.computeProgram.usedTimes===0&&this._releaseProgram(s.computeProgram),a=new Wf(o.computeShader,"compute",o.transforms,o.nodeAttributes),this.programs.compute.set(o.computeShader,a),n.createProgram(a));const l=this._getComputeCacheKey(t,a);let c=this.caches.get(l);c===void 0&&(s&&s.usedTimes===0&&this._releasePipeline(s),c=this._getComputePipeline(t,a,l,e)),c.usedTimes++,a.usedTimes++,i.version=t.version,i.pipeline=c}return i.pipeline}getForRender(t,e=null){const{backend:n}=this,i=this.get(t);if(this._needsRenderUpdate(t)){const s=i.pipeline;s&&(s.usedTimes--,s.vertexProgram.usedTimes--,s.fragmentProgram.usedTimes--);const o=t.getNodeBuilderState();let a=this.programs.vertex.get(o.vertexShader);a===void 0&&(s&&s.vertexProgram.usedTimes===0&&this._releaseProgram(s.vertexProgram),a=new Wf(o.vertexShader,"vertex"),this.programs.vertex.set(o.vertexShader,a),n.createProgram(a));let l=this.programs.fragment.get(o.fragmentShader);l===void 0&&(s&&s.fragmentProgram.usedTimes===0&&this._releaseProgram(s.fragmentProgram),l=new Wf(o.fragmentShader,"fragment"),this.programs.fragment.set(o.fragmentShader,l),n.createProgram(l));const c=this._getRenderCacheKey(t,a,l);let h=this.caches.get(c);h===void 0?(s&&s.usedTimes===0&&this._releasePipeline(s),h=this._getRenderPipeline(t,a,l,c,e)):t.pipeline=h,h.usedTimes++,a.usedTimes++,l.usedTimes++,i.pipeline=h}return i.pipeline}delete(t){const e=this.get(t).pipeline;return e&&(e.usedTimes--,e.usedTimes===0&&this._releasePipeline(e),e.isComputePipeline?(e.computeProgram.usedTimes--,e.computeProgram.usedTimes===0&&this._releaseProgram(e.computeProgram)):(e.fragmentProgram.usedTimes--,e.vertexProgram.usedTimes--,e.vertexProgram.usedTimes===0&&this._releaseProgram(e.vertexProgram),e.fragmentProgram.usedTimes===0&&this._releaseProgram(e.fragmentProgram))),super.delete(t)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(t){this.getForRender(t)}_getComputePipeline(t,e,n,i){n=n||this._getComputeCacheKey(t,e);let s=this.caches.get(n);return s===void 0&&(s=new NP(n,e),this.caches.set(n,s),this.backend.createComputePipeline(s,i)),s}_getRenderPipeline(t,e,n,i,s){i=i||this._getRenderCacheKey(t,e,n);let o=this.caches.get(i);return o===void 0&&(o=new wP(i,e,n),this.caches.set(i,o),t.pipeline=o,this.backend.createRenderPipeline(t,s)),o}_getComputeCacheKey(t,e){return t.id+","+e.id}_getRenderCacheKey(t,e,n){return e.id+","+n.id+","+this.backend.getRenderCacheKey(t)}_releasePipeline(t){this.caches.delete(t.cacheKey)}_releaseProgram(t){const e=t.code,n=t.stage;this.programs[n].delete(e)}_needsComputeUpdate(t){const e=this.get(t);return e.pipeline===void 0||e.version!==t.version}_needsRenderUpdate(t){return this.get(t).pipeline===void 0||this.backend.needsRenderUpdate(t)}}class PP extends zr{constructor(t,e,n,i,s,o){super(),this.backend=t,this.textures=n,this.pipelines=s,this.attributes=i,this.nodes=e,this.info=o,this.pipelines.bindings=this}getForRender(t){const e=t.getBindings();for(const n of e){const i=this.get(n);i.bindGroup===void 0&&(this._init(n),this.backend.createBindings(n,e),i.bindGroup=n)}return e}getForCompute(t){const e=this.nodes.getForCompute(t).bindings;for(const n of e){const i=this.get(n);i.bindGroup===void 0&&(this._init(n),this.backend.createBindings(n,e),i.bindGroup=n)}return e}updateForCompute(t){this._updateBindings(this.getForCompute(t))}updateForRender(t){this._updateBindings(this.getForRender(t))}_updateBindings(t){for(const e of t)this._update(e,t)}_init(t){for(const e of t.bindings)if(e.isSampledTexture)this.textures.updateTexture(e.texture);else if(e.isStorageBuffer){const n=e.attribute;this.attributes.update(n,fo.STORAGE)}}_update(t,e){const{backend:n}=this;let i=!1;for(const s of t.bindings)if(!(s.isNodeUniformsGroup&&!this.nodes.updateGroup(s))){if(s.isUniformBuffer)s.update()&&n.updateBinding(s);else if(s.isSampler)s.update();else if(s.isSampledTexture){s.needsBindingsUpdate(this.textures.get(s.texture).generation)&&(i=!0);const o=s.update(),a=s.texture;o&&this.textures.updateTexture(a);const l=n.get(a);if(n.isWebGPUBackend===!0&&l.texture===void 0&&l.externalTexture===void 0&&(console.error("Bindings._update: binding should be available:",s,o,a,s.textureNode.value,i),this.textures.updateTexture(a),i=!0),a.isStorageTexture===!0){const c=this.get(a);s.store===!0?c.needsMipmap=!0:a.generateMipmaps===!0&&this.textures.needsMipmaps(a)&&c.needsMipmap===!0&&(this.backend.generateMipmaps(a),c.needsMipmap=!1)}}}i===!0&&this.backend.updateBindings(t,e)}}const zy={VERTEX:"vertex",FRAGMENT:"fragment"},ne={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},FP=["fragment","vertex"],Gy=["setup","analyze","generate"],ky=[...FP,"compute"],xl=["x","y","z","w"];let yl=class{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const i=this._listeners[t];if(i!==void 0){const s=i.indexOf(e);s!==-1&&i.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,t);t.target=null}}},IP=0,Kt=class extends yl{static get type(){return"Node"}constructor(t=null){super(),this.nodeType=t,this.updateType=ne.NONE,this.updateBeforeType=ne.NONE,this.updateAfterType=ne.NONE,this.uuid=b2.generateUUID(),this.version=0,this._cacheKey=null,this._cacheKeyVersion=0,this.global=!1,this.isNode=!0,Object.defineProperty(this,"id",{value:IP++})}set needsUpdate(t){t===!0&&this.version++}get type(){return this.constructor.type}onUpdate(t,e){return this.updateType=e,this.update=t.bind(this.getSelf()),this}onFrameUpdate(t){return this.onUpdate(t,ne.FRAME)}onRenderUpdate(t){return this.onUpdate(t,ne.RENDER)}onObjectUpdate(t){return this.onUpdate(t,ne.OBJECT)}onReference(t){return this.updateReference=t.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:t}of id(this))yield t}dispose(){this.dispatchEvent({type:"dispose"})}traverse(t){t(this);for(const e of this.getChildren())e.traverse(t)}getCacheKey(t=!1){return t=t||this.version!==this._cacheKeyVersion,(t===!0||this._cacheKey===null)&&(this._cacheKey=pT(this,t),this._cacheKeyVersion=this.version),this._cacheKey}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(t){const e=this.getNodeType(t);return t.getElementType(e)}getNodeType(t){const e=t.getNodeProperties(this);return e.outputNode?e.outputNode.getNodeType(t):this.nodeType}getShared(t){const e=this.getHash(t);return t.getNodeFromHash(e)||this}setup(t){const e=t.getNodeProperties(this);let n=0;for(const i of this.getChildren())e["node"+n++]=i;return null}analyze(t){if(t.increaseUsage(this)===1){const n=t.getNodeProperties(this);for(const i of Object.values(n))i&&i.isNode===!0&&i.build(t)}}generate(t,e){const{outputNode:n}=t.getNodeProperties(this);if(n&&n.isNode===!0)return n.build(t,e)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(t,e=null){const n=this.getShared(t);if(this!==n)return n.build(t,e);t.addNode(this),t.addChain(this);let i=null;const s=t.getBuildStage();if(s==="setup"){this.updateReference(t);const o=t.getNodeProperties(this);if(o.initialized!==!0){const a=t.stack.nodes.length;o.initialized=!0,o.outputNode=this.setup(t),o.outputNode!==null&&t.stack.nodes.length;for(const l of Object.values(o))l&&l.isNode===!0&&l.build(t)}}else if(s==="analyze")this.analyze(t);else if(s==="generate")if(this.generate.length===1){const a=this.getNodeType(t),l=t.getDataFromNode(this);i=l.snippet,i===void 0?(i=this.generate(t)||"",l.snippet=i):l.flowCodes!==void 0&&t.context.nodeBlock!==void 0&&t.addFlowCodeHierarchy(this,t.context.nodeBlock),i=t.format(i,a,e)}else i=this.generate(t,e)||"";return t.removeChain(this),i}getSerializeChildren(){return id(this)}serialize(t){const e=this.getSerializeChildren(),n={};for(const{property:i,index:s,childNode:o}of e)s!==void 0?(n[i]===void 0&&(n[i]=Number.isInteger(s)?[]:{}),n[i][s]=o.toJSON(t.meta).uuid):n[i]=o.toJSON(t.meta).uuid;Object.keys(n).length>0&&(t.inputNodes=n)}deserialize(t){if(t.inputNodes!==void 0){const e=t.meta.nodes;for(const n in t.inputNodes)if(Array.isArray(t.inputNodes[n])){const i=[];for(const s of t.inputNodes[n])i.push(e[s]);this[n]=i}else if(typeof t.inputNodes[n]=="object"){const i={};for(const s in t.inputNodes[n]){const o=t.inputNodes[n][s];i[s]=e[o]}this[n]=i}else{const i=t.inputNodes[n];this[n]=e[i]}}}toJSON(t){const{uuid:e,type:n}=this,i=t===void 0||typeof t=="string";i&&(t={textures:{},images:{},nodes:{}});let s=t.nodes[e];s===void 0&&(s={uuid:e,type:n,meta:t,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},i!==!0&&(t.nodes[s.uuid]=s),this.serialize(s),delete s.meta);function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}if(i){const a=o(t.textures),l=o(t.images),c=o(t.nodes);a.length>0&&(s.textures=a),l.length>0&&(s.images=l),c.length>0&&(s.nodes=c)}return s}},hn=class extends Kt{static get type(){return"TempNode"}constructor(t){super(t),this.isTempNode=!0}hasDependencies(t){return t.getDataFromNode(this).usageCount>1}build(t,e){if(t.getBuildStage()==="generate"){const i=t.getVectorType(this.getNodeType(t,e)),s=t.getDataFromNode(this);if(s.propertyName!==void 0)return t.format(s.propertyName,i,e);if(i!=="void"&&e!=="void"&&this.hasDependencies(t)){const o=super.build(t,i),a=t.getVarFromNode(this,null,i),l=t.getPropertyName(a);return t.addLineFlowCode(`${l} = ${o}`,this),s.snippet=o,s.propertyName=l,t.format(s.propertyName,i,e)}}return super.build(t,e)}},$c=class extends Kt{static get type(){return"ArrayElementNode"}constructor(t,e){super(),this.node=t,this.indexNode=e,this.isArrayElementNode=!0}getNodeType(t){return this.node.getElementType(t)}generate(t){const e=this.node.build(t),n=this.indexNode.build(t,"uint");return`${e}[ ${n} ]`}},ST=class extends Kt{static get type(){return"ConvertNode"}constructor(t,e){super(),this.node=t,this.convertTo=e}getNodeType(t){const e=this.node.getNodeType(t);let n=null;for(const i of this.convertTo.split("|"))(n===null||t.getTypeLength(e)===t.getTypeLength(i))&&(n=i);return n}serialize(t){super.serialize(t),t.convertTo=this.convertTo}deserialize(t){super.deserialize(t),this.convertTo=t.convertTo}generate(t,e){const n=this.node,i=this.getNodeType(t),s=n.build(t,i);return t.format(s,i,e)}},LP=class extends hn{static get type(){return"JoinNode"}constructor(t=[],e=null){super(e),this.nodes=t}getNodeType(t){return this.nodeType!==null?t.getVectorType(this.nodeType):t.getTypeFromLength(this.nodes.reduce((e,n)=>e+t.getTypeLength(n.getNodeType(t)),0))}generate(t,e){const n=this.getNodeType(t),i=this.nodes,s=t.getComponentType(n),o=[];for(const l of i){let c=l.build(t);const h=t.getComponentType(l.getNodeType(t));h!==s&&(c=t.format(c,h,s)),o.push(c)}const a=`${t.getType(n)}( ${o.join(", ")} )`;return t.format(a,n,e)}};const DP=xl.join("");let Vy=class extends Kt{static get type(){return"SplitNode"}constructor(t,e="x"){super(),this.node=t,this.components=e,this.isSplitNode=!0}getVectorLength(){let t=this.components.length;for(const e of this.components)t=Math.max(xl.indexOf(e)+1,t);return t}getComponentType(t){return t.getComponentType(this.node.getNodeType(t))}getNodeType(t){return t.getTypeFromLength(this.components.length,this.getComponentType(t))}generate(t,e){const n=this.node,i=t.getTypeLength(n.getNodeType(t));let s=null;if(i>1){let o=null;this.getVectorLength()>=i&&(o=t.getTypeFromLength(this.getVectorLength(),this.getComponentType(t)));const l=n.build(t,o);this.components.length===i&&this.components===DP.slice(0,this.components.length)?s=t.format(l,o,e):s=t.format(`${l}.${this.components}`,this.getNodeType(t),e)}else s=n.build(t,e);return s}serialize(t){super.serialize(t),t.components=this.components}deserialize(t){super.deserialize(t),this.components=t.components}},UP=class extends hn{static get type(){return"SetNode"}constructor(t,e,n){super(),this.sourceNode=t,this.components=e,this.targetNode=n}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{sourceNode:e,components:n,targetNode:i}=this,s=this.getNodeType(t),o=t.getTypeFromLength(n.length,i.getNodeType(t)),a=i.build(t,o),l=e.build(t,s),c=t.getTypeLength(s),h=[];for(let u=0;u<c;u++){const d=xl[u];d===n[0]?(h.push(a),u+=n.length-1):h.push(l+"."+d)}return`${t.getType(s)}( ${h.join(", ")} )`}},BP=class extends hn{static get type(){return"FlipNode"}constructor(t,e){super(),this.sourceNode=t,this.components=e}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{components:e,sourceNode:n}=this,i=this.getNodeType(t),s=n.build(t),o=t.getVarFromNode(this),a=t.getPropertyName(o);t.addLineFlowCode(a+" = "+s,this);const l=t.getTypeLength(i),c=[];let h=0;for(let u=0;u<l;u++){const d=xl[u];d===e[h]?(c.push("1.0 - "+(a+"."+d)),h++):c.push(a+"."+d)}return`${t.getType(i)}( ${c.join(", ")} )`}},dx=class extends Kt{static get type(){return"InputNode"}constructor(t,e=null){super(e),this.isInputNode=!0,this.value=t,this.precision=null}getNodeType(){return this.nodeType===null?sd(this.value):this.nodeType}getInputType(t){return this.getNodeType(t)}setPrecision(t){return this.precision=t,this}serialize(t){super.serialize(t),t.value=this.value,this.value&&this.value.toArray&&(t.value=this.value.toArray()),t.valueType=sd(this.value),t.nodeType=this.nodeType,t.valueType==="ArrayBuffer"&&(t.value=dP(t.value)),t.precision=this.precision}deserialize(t){super.deserialize(t),this.nodeType=t.nodeType,this.value=Array.isArray(t.value)?mT(t.valueType,...t.value):t.value,this.precision=t.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(t.value))}generate(){console.warn("Abstract function.")}},Qs=class extends dx{static get type(){return"ConstNode"}constructor(t,e=null){super(t,e),this.isConstNode=!0}generateConst(t){return t.generateConst(this.getNodeType(t),this.value)}generate(t,e){const n=this.getNodeType(t);return t.format(this.generateConst(t),n,e)}},ol=null;const Fa=new Map;function j(r,t){if(Fa.has(r)){console.warn(`Redefinition of method chaining ${r}`);return}if(typeof t!="function")throw new Error(`Node element ${r} is not a function`);Fa.set(r,t)}const TT=r=>r.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),Hy=r=>TT(r).split("").sort().join(""),vT={setup(r,t){const e=t.shift();return r(wd(e),...t)},get(r,t,e){if(typeof t=="string"&&r[t]===void 0){if(r.isStackNode!==!0&&t==="assign")return(...n)=>(ol.assign(e,...n),e);if(Fa.has(t)){const n=Fa.get(t);return r.isStackNode?(...i)=>e.add(n(...i)):(...i)=>n(e,...i)}else{if(t==="self")return r;if(t.endsWith("Assign")&&Fa.has(t.slice(0,t.length-6))){const n=Fa.get(t.slice(0,t.length-6));return r.isStackNode?(...i)=>e.assign(i[0],n(...i)):(...i)=>e.assign(n(e,...i))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0)return t=TT(t),ut(new Vy(e,t));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=Hy(t.slice(3).toLowerCase()),n=>ut(new UP(r,t,n));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=Hy(t.slice(4).toLowerCase()),()=>ut(new BP(ut(r),t));if(t==="width"||t==="height"||t==="depth")return t==="width"?t="x":t==="height"?t="y":t==="depth"&&(t="z"),ut(new Vy(r,t));if(/^\d+$/.test(t)===!0)return ut(new $c(e,new Qs(Number(t),"uint")))}}}return Reflect.get(r,t,e)},set(r,t,e,n){return typeof t=="string"&&r[t]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0||t==="width"||t==="height"||t==="depth"||/^\d+$/.test(t)===!0)?(n[t].assign(e),!0):Reflect.set(r,t,e,n)}},qf=new WeakMap,$y=new WeakMap,OP=function(r,t=null){const e=sd(r);if(e==="node"){let n=qf.get(r);return n===void 0&&(n=new Proxy(r,vT),qf.set(r,n),qf.set(n,n)),n}else{if(t===null&&(e==="float"||e==="boolean")||e&&e!=="shader"&&e!=="string")return ut(cg(r,t));if(e==="shader")return Mt(r)}return r},zP=function(r,t=null){for(const e in r)r[e]=ut(r[e],t);return r},GP=function(r,t=null){const e=r.length;for(let n=0;n<e;n++)r[n]=ut(r[n],t);return r},kP=function(r,t=null,e=null,n=null){const i=s=>ut(n!==null?Object.assign(s,n):s);return t===null?(...s)=>i(new r(...Wa(s))):e!==null?(e=ut(e),(...s)=>i(new r(t,...Wa(s),e))):(...s)=>i(new r(t,...Wa(s)))},VP=function(r,...t){return ut(new r(...Wa(t)))};let HP=class extends Kt{constructor(t,e){super(),this.shaderNode=t,this.inputNodes=e}getNodeType(t){return this.shaderNode.nodeType||this.getOutputNode(t).getNodeType(t)}call(t){const{shaderNode:e,inputNodes:n}=this,i=t.getNodeProperties(e);if(i.onceOutput)return i.onceOutput;let s=null;if(e.layout){let o=$y.get(t.constructor);o===void 0&&(o=new WeakMap,$y.set(t.constructor,o));let a=o.get(e);a===void 0&&(a=ut(t.buildFunctionNode(e)),o.set(e,a)),t.currentFunctionNode!==null&&t.currentFunctionNode.includes.push(a),s=ut(a.call(n))}else{const o=e.jsFunc,a=n!==null?o(n,t):o(t);s=ut(a)}return e.once&&(i.onceOutput=s),s}getOutputNode(t){const e=t.getNodeProperties(this);return e.outputNode===null&&(e.outputNode=this.setupOutput(t)),e.outputNode}setup(t){return this.getOutputNode(t)}setupOutput(t){return t.addStack(),t.stack.outputNode=this.call(t),t.removeStack()}generate(t,e){return this.getOutputNode(t).build(t,e)}},$P=class extends Kt{constructor(t,e){super(e),this.jsFunc=t,this.layout=null,this.global=!0,this.once=!1}setLayout(t){return this.layout=t,this}call(t=null){return wd(t),ut(new HP(this,t))}setup(){return this.call()}};const WP=[!1,!0],qP=[0,1,2,3],XP=[-1,-2],bT=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],fx=new Map;for(const r of WP)fx.set(r,new Qs(r));const px=new Map;for(const r of qP)px.set(r,new Qs(r,"uint"));const mx=new Map([...px].map(r=>new Qs(r.value,"int")));for(const r of XP)mx.set(r,new Qs(r,"int"));const Ed=new Map([...mx].map(r=>new Qs(r.value)));for(const r of bT)Ed.set(r,new Qs(r));for(const r of bT)Ed.set(-r,new Qs(-r));const Ad={bool:fx,uint:px,ints:mx,float:Ed},Wy=new Map([...fx,...Ed]),cg=(r,t)=>Wy.has(r)?Wy.get(r):r.isNode===!0?r:new Qs(r,t),YP=r=>{try{return r.getNodeType()}catch{return}},un=function(r,t=null){return(...e)=>{if((e.length===0||!["bool","float","int","uint"].includes(r)&&e.every(i=>typeof i!="object"))&&(e=[mT(r,...e)]),e.length===1&&t!==null&&t.has(e[0]))return ut(t.get(e[0]));if(e.length===1){const i=cg(e[0],r);return YP(i)===r?ut(i):ut(new ST(i,r))}const n=e.map(i=>cg(i));return ut(new LP(n,r))}},qy=r=>typeof r=="object"&&r!==null?r.value:r,jP=r=>r!=null?r.nodeType||r.convertTo||(typeof r=="string"?r:null):null;function Ru(r,t){return new Proxy(new $P(r,t),vT)}const ut=(r,t=null)=>OP(r,t),wd=(r,t=null)=>new zP(r,t),Wa=(r,t=null)=>new GP(r,t),tt=(...r)=>new kP(...r),gt=(...r)=>new VP(...r),Mt=(r,t)=>{const e=new Ru(r,t),n=(...i)=>{let s;return wd(i),i[0]&&i[0].isNode?s=[...i]:s=i[0],e.call(s)};return n.shaderNode=e,n.setLayout=i=>(e.setLayout(i),n),n.once=()=>(e.once=!0,n),n};j("toGlobal",r=>(r.global=!0,r));const rd=r=>{ol=r},ET=()=>ol,On=(...r)=>ol.If(...r);function KP(r){return ol&&ol.add(r),r}j("append",KP);const ZP=new un("color"),J=new un("float",Ad.float),qe=new un("int",Ad.ints),QP=new un("uint",Ad.uint),JP=new un("bool",Ad.bool),Tt=new un("vec2"),Ds=new un("ivec2"),tF=new un("uvec2"),eF=new un("bvec2"),Q=new un("vec3"),nF=new un("ivec3"),iF=new un("uvec3"),sF=new un("bvec3"),Qt=new un("vec4"),rF=new un("ivec4"),oF=new un("uvec4"),aF=new un("bvec4"),gx=new un("mat2"),ri=new un("mat3"),qa=new un("mat4");j("toColor",ZP);j("toFloat",J);j("toInt",qe);j("toUint",QP);j("toBool",JP);j("toVec2",Tt);j("toIVec2",Ds);j("toUVec2",tF);j("toBVec2",eF);j("toVec3",Q);j("toIVec3",nF);j("toUVec3",iF);j("toBVec3",sF);j("toVec4",Qt);j("toIVec4",rF);j("toUVec4",oF);j("toBVec4",aF);j("toMat2",gx);j("toMat3",ri);j("toMat4",qa);const lF=tt($c),cF=(r,t)=>ut(new ST(ut(r),t));j("element",lF);j("convert",cF);let hF=class extends hn{static get type(){return"AssignNode"}constructor(t,e){super(),this.targetNode=t,this.sourceNode=e}hasDependencies(){return!1}getNodeType(t,e){return e!=="void"?this.targetNode.getNodeType(t):"void"}needsSplitAssign(t){const{targetNode:e}=this;if(t.isAvailable("swizzleAssign")===!1&&e.isSplitNode&&e.components.length>1){const n=t.getTypeLength(e.node.getNodeType(t));return xl.join("").slice(0,n)!==e.components}return!1}generate(t,e){const{targetNode:n,sourceNode:i}=this,s=this.needsSplitAssign(t),o=n.getNodeType(t),a=n.context({assign:!0}).build(t),l=i.build(t,o),c=i.getNodeType(t),h=t.getDataFromNode(this);let u;if(h.initialized===!0)e!=="void"&&(u=a);else if(s){const d=t.getVarFromNode(this,null,o),f=t.getPropertyName(d);t.addLineFlowCode(`${f} = ${l}`,this);const p=n.node.context({assign:!0}).build(t);for(let x=0;x<n.components.length;x++){const m=n.components[x];t.addLineFlowCode(`${p}.${m} = ${f}[ ${x} ]`,this)}e!=="void"&&(u=a)}else u=`${a} = ${l}`,(e==="void"||c==="void")&&(t.addLineFlowCode(u,this),e!=="void"&&(u=a));return h.initialized=!0,t.format(u,o,e)}};const uF=tt(hF);j("assign",uF);let AT=class extends Kt{static get type(){return"UniformGroupNode"}constructor(t,e=!1,n=1){super("string"),this.name=t,this.version=0,this.shared=e,this.order=n,this.isUniformGroup=!0}set needsUpdate(t){t===!0&&this.version++}serialize(t){super.serialize(t),t.name=this.name,t.version=this.version,t.shared=this.shared}deserialize(t){super.deserialize(t),this.name=t.name,this.version=t.version,this.shared=t.shared}};const dF=r=>new AT(r),wT=(r,t=0)=>new AT(r,!0,t),fF=wT("frame"),re=wT("render"),NT=dF("object");let _l=class extends dx{static get type(){return"UniformNode"}constructor(t,e=null){super(t,e),this.isUniformNode=!0,this.name="",this.groupNode=NT}label(t){return this.name=t,this}setGroup(t){return this.groupNode=t,this}getGroup(){return this.groupNode}getUniformHash(t){return this.getHash(t)}onUpdate(t,e){const n=this.getSelf();return t=t.bind(n),super.onUpdate(i=>{const s=t(i,n);s!==void 0&&(this.value=s)},e)}generate(t,e){const n=this.getNodeType(t),i=this.getUniformHash(t);let s=t.getNodeFromHash(i);s===void 0&&(t.setHashNode(this,i),s=this);const o=s.getInputType(t),a=t.getUniformFromNode(s,o,t.shaderStage,this.name||t.context.label),l=t.getPropertyName(a);return t.context.label!==void 0&&delete t.context.label,t.format(l,n,e)}};const Jt=(r,t)=>{const e=jP(t||r),n=r&&r.isNode===!0?r.node&&r.node.value||r.value:r;return ut(new _l(n,e))};let we=class extends Kt{static get type(){return"PropertyNode"}constructor(t,e=null,n=!1){super(t),this.name=e,this.varying=n,this.isPropertyNode=!0}getHash(t){return this.name||super.getHash(t)}isGlobal(){return!0}generate(t){let e;return this.varying===!0?(e=t.getVaryingFromNode(this,this.name),e.needsInterpolation=!0):e=t.getVarFromNode(this,this.name),t.getPropertyName(e)}};const ba=(r,t)=>ut(new we(r,t)),od=(r,t)=>ut(new we(r,t,!0)),Ee=gt(we,"vec4","DiffuseColor"),Xy=gt(we,"vec3","EmissiveColor"),zs=gt(we,"float","Roughness"),ad=gt(we,"float","Metalness"),hg=gt(we,"float","Clearcoat"),ld=gt(we,"float","ClearcoatRoughness"),Ia=gt(we,"vec3","Sheen"),xx=gt(we,"float","SheenRoughness"),yx=gt(we,"float","Iridescence"),RT=gt(we,"float","IridescenceIOR"),CT=gt(we,"float","IridescenceThickness"),ug=gt(we,"float","AlphaT"),io=gt(we,"float","Anisotropy"),Cu=gt(we,"vec3","AnisotropyT"),Xa=gt(we,"vec3","AnisotropyB"),Si=gt(we,"color","SpecularColor"),cd=gt(we,"float","SpecularF90"),dg=gt(we,"float","Shininess"),pF=gt(we,"vec4","Output"),Xf=gt(we,"float","dashSize"),Yy=gt(we,"float","gapSize"),Pu=gt(we,"float","IOR"),fg=gt(we,"float","Transmission"),PT=gt(we,"float","Thickness"),FT=gt(we,"float","AttenuationDistance"),IT=gt(we,"color","AttenuationColor"),LT=gt(we,"float","Dispersion");let mF=class extends hn{static get type(){return"FunctionCallNode"}constructor(t=null,e={}){super(),this.functionNode=t,this.parameters=e}setParameters(t){return this.parameters=t,this}getParameters(){return this.parameters}getNodeType(t){return this.functionNode.getNodeType(t)}generate(t){const e=[],n=this.functionNode,i=n.getInputs(t),s=this.parameters;if(Array.isArray(s))for(let a=0;a<s.length;a++){const l=i[a],c=s[a];e.push(c.build(t,l.type))}else for(const a of i){const l=s[a.name];if(l!==void 0)e.push(l.build(t,a.type));else throw new Error(`FunctionCallNode: Input '${a.name}' not found in FunctionNode.`)}return`${n.build(t,"property")}( ${e.join(", ")} )`}};const gF=(r,...t)=>(t=t.length>1||t[0]&&t[0].isNode===!0?Wa(t):wd(t[0]),ut(new mF(ut(r),t)));j("call",gF);let Ke=class pg extends hn{static get type(){return"OperatorNode"}constructor(t,e,n,...i){if(super(),i.length>0){let s=new pg(t,e,n);for(let o=0;o<i.length-1;o++)s=new pg(t,s,i[o]);e=s,n=i[i.length-1]}this.op=t,this.aNode=e,this.bNode=n}getNodeType(t,e){const n=this.op,i=this.aNode,s=this.bNode,o=i.getNodeType(t),a=typeof s<"u"?s.getNodeType(t):null;if(o==="void"||a==="void")return"void";if(n==="%")return o;if(n==="~"||n==="&"||n==="|"||n==="^"||n===">>"||n==="<<")return t.getIntegerType(o);if(n==="!"||n==="=="||n==="&&"||n==="||"||n==="^^")return"bool";if(n==="<"||n===">"||n==="<="||n===">="){const l=e?t.getTypeLength(e):Math.max(t.getTypeLength(o),t.getTypeLength(a));return l>1?`bvec${l}`:"bool"}else return o==="float"&&t.isMatrix(a)?a:t.isMatrix(o)&&t.isVector(a)?t.getVectorFromMatrix(o):t.isVector(o)&&t.isMatrix(a)?t.getVectorFromMatrix(a):t.getTypeLength(a)>t.getTypeLength(o)?a:o}generate(t,e){const n=this.op,i=this.aNode,s=this.bNode,o=this.getNodeType(t,e);let a=null,l=null;o!=="void"?(a=i.getNodeType(t),l=typeof s<"u"?s.getNodeType(t):null,n==="<"||n===">"||n==="<="||n===">="||n==="=="?t.isVector(a)?l=a:a!==l&&(a=l="float"):n===">>"||n==="<<"?(a=o,l=t.changeComponentType(l,"uint")):t.isMatrix(a)&&t.isVector(l)?l=t.getVectorFromMatrix(a):t.isVector(a)&&t.isMatrix(l)?a=t.getVectorFromMatrix(l):a=l=o):a=l=o;const c=i.build(t,a),h=typeof s<"u"?s.build(t,l):null,u=t.getTypeLength(e),d=t.getFunctionOperator(n);if(e!=="void")return n==="<"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} < ${h} )`,o,e):n==="<="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} <= ${h} )`,o,e):n===">"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} > ${h} )`,o,e):n===">="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} >= ${h} )`,o,e):n==="!"||n==="~"?t.format(`(${n}${c})`,a,e):d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`( ${c} ${n} ${h} )`,o,e);if(a!=="void")return d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`${c} ${n} ${h}`,o,e)}serialize(t){super.serialize(t),t.op=this.op}deserialize(t){super.deserialize(t),this.op=t.op}};const vi=tt(Ke,"+"),po=tt(Ke,"-"),Ce=tt(Ke,"*"),Lr=tt(Ke,"/"),DT=tt(Ke,"%"),xF=tt(Ke,"=="),yF=tt(Ke,"!="),_F=tt(Ke,"<"),MF=tt(Ke,">"),SF=tt(Ke,"<="),TF=tt(Ke,">="),vF=tt(Ke,"&&"),bF=tt(Ke,"||"),EF=tt(Ke,"!"),AF=tt(Ke,"^^"),wF=tt(Ke,"&"),NF=tt(Ke,"~"),RF=tt(Ke,"|"),CF=tt(Ke,"^"),PF=tt(Ke,"<<"),FF=tt(Ke,">>");j("add",vi);j("sub",po);j("mul",Ce);j("div",Lr);j("modInt",DT);j("equal",xF);j("notEqual",yF);j("lessThan",_F);j("greaterThan",MF);j("lessThanEqual",SF);j("greaterThanEqual",TF);j("and",vF);j("or",bF);j("not",EF);j("xor",AF);j("bitAnd",wF);j("bitNot",NF);j("bitOr",RF);j("bitXor",CF);j("shiftLeft",PF);j("shiftRight",FF);const IF=(...r)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),DT(...r));j("remainder",IF);let B=class je extends hn{static get type(){return"MathNode"}constructor(t,e,n=null,i=null){super(),this.method=t,this.aNode=e,this.bNode=n,this.cNode=i}getInputType(t){const e=this.aNode.getNodeType(t),n=this.bNode?this.bNode.getNodeType(t):null,i=this.cNode?this.cNode.getNodeType(t):null,s=t.isMatrix(e)?0:t.getTypeLength(e),o=t.isMatrix(n)?0:t.getTypeLength(n),a=t.isMatrix(i)?0:t.getTypeLength(i);return s>o&&s>a?e:o>a?n:a>s?i:e}getNodeType(t){const e=this.method;return e===je.LENGTH||e===je.DISTANCE||e===je.DOT?"float":e===je.CROSS?"vec3":e===je.ALL?"bool":e===je.EQUALS?t.changeComponentType(this.aNode.getNodeType(t),"bool"):e===je.MOD?this.aNode.getNodeType(t):this.getInputType(t)}generate(t,e){const n=this.method,i=this.getNodeType(t),s=this.getInputType(t),o=this.aNode,a=this.bNode,l=this.cNode,c=t.renderer.isWebGLRenderer===!0;if(n===je.TRANSFORM_DIRECTION){let h=o,u=a;t.isMatrix(h.getNodeType(t))?u=Qt(Q(u),0):h=Qt(Q(h),0);const d=Ce(h,u).xyz;return Ac(d).build(t,e)}else{if(n===je.NEGATE)return t.format("( - "+o.build(t,s)+" )",i,e);if(n===je.ONE_MINUS)return po(1,o).build(t,e);if(n===je.RECIPROCAL)return Lr(1,o).build(t,e);if(n===je.DIFFERENCE)return ls(po(o,a)).build(t,e);{const h=[];return n===je.CROSS||n===je.MOD?h.push(o.build(t,i),a.build(t,i)):c&&n===je.STEP?h.push(o.build(t,t.getTypeLength(o.getNodeType(t))===1?"float":s),a.build(t,s)):c&&(n===je.MIN||n===je.MAX)||n===je.MOD?h.push(o.build(t,s),a.build(t,t.getTypeLength(a.getNodeType(t))===1?"float":s)):n===je.REFRACT?h.push(o.build(t,s),a.build(t,s),l.build(t,"float")):n===je.MIX?h.push(o.build(t,s),a.build(t,s),l.build(t,t.getTypeLength(l.getNodeType(t))===1?"float":s)):(h.push(o.build(t,s)),a!==null&&h.push(a.build(t,s)),l!==null&&h.push(l.build(t,s))),t.format(`${t.getMethod(n,i)}( ${h.join(", ")} )`,i,e)}}}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}};B.ALL="all";B.ANY="any";B.EQUALS="equals";B.RADIANS="radians";B.DEGREES="degrees";B.EXP="exp";B.EXP2="exp2";B.LOG="log";B.LOG2="log2";B.SQRT="sqrt";B.INVERSE_SQRT="inversesqrt";B.FLOOR="floor";B.CEIL="ceil";B.NORMALIZE="normalize";B.FRACT="fract";B.SIN="sin";B.COS="cos";B.TAN="tan";B.ASIN="asin";B.ACOS="acos";B.ATAN="atan";B.ABS="abs";B.SIGN="sign";B.LENGTH="length";B.NEGATE="negate";B.ONE_MINUS="oneMinus";B.DFDX="dFdx";B.DFDY="dFdy";B.ROUND="round";B.RECIPROCAL="reciprocal";B.TRUNC="trunc";B.FWIDTH="fwidth";B.BITCAST="bitcast";B.TRANSPOSE="transpose";B.ATAN2="atan2";B.MIN="min";B.MAX="max";B.MOD="mod";B.STEP="step";B.REFLECT="reflect";B.DISTANCE="distance";B.DIFFERENCE="difference";B.DOT="dot";B.CROSS="cross";B.POW="pow";B.TRANSFORM_DIRECTION="transformDirection";B.MIX="mix";B.CLAMP="clamp";B.REFRACT="refract";B.SMOOTHSTEP="smoothstep";B.FACEFORWARD="faceforward";const LF=J(1e-6),DF=J(Math.PI),UT=tt(B,B.ALL),UF=tt(B,B.ANY),BF=tt(B,B.EQUALS),OF=tt(B,B.RADIANS),zF=tt(B,B.DEGREES),BT=tt(B,B.EXP),mg=tt(B,B.EXP2),OT=tt(B,B.LOG),Nd=tt(B,B.LOG2),_x=tt(B,B.SQRT),GF=tt(B,B.INVERSE_SQRT),Rd=tt(B,B.FLOOR),zT=tt(B,B.CEIL),Ac=tt(B,B.NORMALIZE),Ml=tt(B,B.FRACT),Us=tt(B,B.SIN),Sr=tt(B,B.COS),kF=tt(B,B.TAN),VF=tt(B,B.ASIN),HF=tt(B,B.ACOS),$F=tt(B,B.ATAN),ls=tt(B,B.ABS),GT=tt(B,B.SIGN),Ya=tt(B,B.LENGTH),WF=tt(B,B.NEGATE),qF=tt(B,B.ONE_MINUS),XF=tt(B,B.DFDX),YF=tt(B,B.DFDY),jF=tt(B,B.ROUND),KF=tt(B,B.RECIPROCAL),ZF=tt(B,B.TRUNC),QF=tt(B,B.FWIDTH);B.BITCAST;const JF=tt(B,B.TRANSPOSE),tI=tt(B,B.ATAN2),hd=tt(B,B.MIN),es=tt(B,B.MAX),kT=tt(B,B.MOD),VT=tt(B,B.STEP),eI=tt(B,B.REFLECT),nI=tt(B,B.DISTANCE),iI=tt(B,B.DIFFERENCE),Mx=tt(B,B.DOT),HT=tt(B,B.CROSS),Cd=tt(B,B.POW),$T=tt(B,B.POW,2),sI=tt(B,B.POW,3),rI=tt(B,B.POW,4),oI=tt(B,B.TRANSFORM_DIRECTION),aI=r=>Ce(GT(r),Cd(ls(r),1/3)),lI=r=>Mx(r,r),Oe=tt(B,B.MIX),Dr=(r,t=0,e=1)=>ut(new B(B.CLAMP,ut(r),ut(t),ut(e))),cI=r=>Dr(r),WT=tt(B,B.REFRACT),vo=tt(B,B.SMOOTHSTEP),hI=tt(B,B.FACEFORWARD),uI=Mt(([r])=>{const n=43758.5453,i=Mx(r.xy,Tt(12.9898,78.233)),s=kT(i,DF);return Ml(Us(s).mul(n))}),dI=(r,t,e)=>Oe(t,e,r),fI=(r,t,e)=>vo(t,e,r);j("all",UT);j("any",UF);j("equals",BF);j("radians",OF);j("degrees",zF);j("exp",BT);j("exp2",mg);j("log",OT);j("log2",Nd);j("sqrt",_x);j("inverseSqrt",GF);j("floor",Rd);j("ceil",zT);j("normalize",Ac);j("fract",Ml);j("sin",Us);j("cos",Sr);j("tan",kF);j("asin",VF);j("acos",HF);j("atan",$F);j("abs",ls);j("sign",GT);j("length",Ya);j("lengthSq",lI);j("negate",WF);j("oneMinus",qF);j("dFdx",XF);j("dFdy",YF);j("round",jF);j("reciprocal",KF);j("trunc",ZF);j("fwidth",QF);j("atan2",tI);j("min",hd);j("max",es);j("mod",kT);j("step",VT);j("reflect",eI);j("distance",nI);j("dot",Mx);j("cross",HT);j("pow",Cd);j("pow2",$T);j("pow3",sI);j("pow4",rI);j("transformDirection",oI);j("mix",dI);j("clamp",Dr);j("refract",WT);j("smoothstep",fI);j("faceForward",hI);j("difference",iI);j("saturate",cI);j("cbrt",aI);j("transpose",JF);j("rand",uI);let pI=class extends Kt{static get type(){return"ConditionalNode"}constructor(t,e,n=null){super(),this.condNode=t,this.ifNode=e,this.elseNode=n}getNodeType(t){const e=this.ifNode.getNodeType(t);if(this.elseNode!==null){const n=this.elseNode.getNodeType(t);if(t.getTypeLength(n)>t.getTypeLength(e))return n}return e}setup(t){const e=this.condNode.cache(),n=this.ifNode.cache(),i=this.elseNode?this.elseNode.cache():null,s=t.context.nodeBlock;t.getDataFromNode(n).parentNodeBlock=s,i!==null&&(t.getDataFromNode(i).parentNodeBlock=s);const o=t.getNodeProperties(this);o.condNode=e,o.ifNode=n.context({nodeBlock:n}),o.elseNode=i?i.context({nodeBlock:i}):null}generate(t,e){const n=this.getNodeType(t),i=t.getDataFromNode(this);if(i.nodeProperty!==void 0)return i.nodeProperty;const{condNode:s,ifNode:o,elseNode:a}=t.getNodeProperties(this),l=e!=="void",c=l?ba(n).build(t):"";i.nodeProperty=c;const h=s.build(t,"bool");t.addFlowCode(`
${t.tab}if ( ${h} ) {

`).addFlowTab();let u=o.build(t,n);if(u&&(l?u=c+" = "+u+";":u="return "+u+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+u+`

`+t.tab+"}"),a!==null){t.addFlowCode(` else {

`).addFlowTab();let d=a.build(t,n);d&&(l?d=c+" = "+d+";":d="return "+d+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+d+`

`+t.tab+`}

`)}else t.addFlowCode(`

`);return t.format(c,n,e)}};const ei=tt(pI);j("select",ei);const mI=(...r)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),ei(...r));j("cond",mI);let qT=class extends Kt{static get type(){return"ContextNode"}constructor(t,e={}){super(),this.isContextNode=!0,this.node=t,this.value=e}getScope(){return this.node.getScope()}getNodeType(t){return this.node.getNodeType(t)}analyze(t){this.node.build(t)}setup(t){const e=t.getContext();t.setContext({...t.context,...this.value});const n=this.node.build(t);return t.setContext(e),n}generate(t,e){const n=t.getContext();t.setContext({...t.context,...this.value});const i=this.node.build(t,e);return t.setContext(n),i}};const Sx=tt(qT),gI=(r,t)=>Sx(r,{label:t});j("context",Sx);j("label",gI);let xI=class extends Kt{static get type(){return"VarNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.global=!0,this.isVarNode=!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}generate(t){const{node:e,name:n}=this,i=t.getVarFromNode(this,n,t.getVectorType(this.getNodeType(t))),s=t.getPropertyName(i),o=e.build(t,i.type);return t.addLineFlowCode(`${s} = ${o}`,this),s}};const XT=tt(xI);j("temp",XT);j("toVar",(...r)=>XT(...r).append());let yI=class extends Kt{static get type(){return"VaryingNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.isVaryingNode=!0}isGlobal(){return!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}setupVarying(t){const e=t.getNodeProperties(this);let n=e.varying;if(n===void 0){const i=this.name,s=this.getNodeType(t);e.varying=n=t.getVaryingFromNode(this,i,s),e.node=this.node}return n.needsInterpolation||(n.needsInterpolation=t.shaderStage==="fragment"),n}setup(t){this.setupVarying(t)}analyze(t){return this.setupVarying(t),this.node.analyze(t)}generate(t){const e=t.getNodeProperties(this),n=this.setupVarying(t);if(e.propertyName===void 0){const i=this.getNodeType(t),s=t.getPropertyName(n,zy.VERTEX);t.flowNodeFromShaderStage(zy.VERTEX,this.node,i,s),e.propertyName=s}return t.getPropertyName(n)}};const Js=tt(yI);j("varying",Js);const Wc="WorkingColorSpace",Tx="OutputColorSpace";function jy(r){let t=null;return r===Ci?t="Linear":r===Ot&&(t="sRGB"),t}function gg(r,t){return jy(r)+"To"+jy(t)}let Pd=class extends hn{static get type(){return"ColorSpaceNode"}constructor(t,e,n){super("vec4"),this.colorNode=t,this.source=e,this.target=n}getColorSpace(t,e){return e===Wc?_i.workingColorSpace:e===Tx?t.context.outputColorSpace||t.renderer.outputColorSpace:e}setup(t){const{renderer:e}=t,{colorNode:n}=this,i=this.getColorSpace(t,this.source),s=this.getColorSpace(t,this.target);if(i===s)return n;const o=gg(i,s);let a=null;const l=e.nodes.library.getColorSpaceFunction(o);return l!==null?a=Qt(l(n.rgb),n.a):(console.error("ColorSpaceNode: Unsupported Color Space configuration.",o),a=n),a}};const _I=r=>ut(new Pd(ut(r),Wc,Tx)),MI=r=>ut(new Pd(ut(r),Tx,Wc)),SI=(r,t)=>ut(new Pd(ut(r),Wc,t)),YT=(r,t)=>ut(new Pd(ut(r),t,Wc));j("toOutputColorSpace",_I);j("toWorkingColorSpace",MI);j("workingToColorSpace",SI);j("colorSpaceToWorking",YT);let TI=class extends $c{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),n=this.referenceNode.getNodeType(),i=this.getNodeType();return t.format(e,n,i)}},jT=class extends Kt{static get type(){return"ReferenceBaseNode"}constructor(t,e,n=null,i=null){super(),this.property=t,this.uniformType=e,this.object=n,this.count=i,this.properties=t.split("."),this.reference=n,this.node=null,this.group=null,this.updateType=ne.OBJECT}setGroup(t){return this.group=t,this}element(t){return ut(new TI(this,ut(t)))}setNodeType(t){const e=Jt(null,t).getSelf();this.group!==null&&e.setGroup(this.group),this.node=e}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let n=t[e[0]];for(let i=1;i<e.length;i++)n=n[e[i]];return n}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}};const vI=(r,t,e)=>ut(new jT(r,t,e));let bI=class extends jT{static get type(){return"RendererReferenceNode"}constructor(t,e,n=null){super(t,e,n),this.renderer=n,this.setGroup(re)}updateReference(t){return this.reference=this.renderer!==null?this.renderer:t.renderer,this.reference}};const EI=(r,t,e)=>ut(new bI(r,t,e));let AI=class extends hn{static get type(){return"ToneMappingNode"}constructor(t,e=NI,n=null){super("vec3"),this.toneMapping=t,this.exposureNode=e,this.colorNode=n}getCacheKey(){return nd(super.getCacheKey(),this.toneMapping)}setup(t){const e=this.colorNode||t.context.color,n=this.toneMapping;if(n===Va)return e;let i=null;const s=t.renderer.nodes.library.getToneMappingFunction(n);return s!==null?i=Qt(s(e.rgb,this.exposureNode),e.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",n),i=e),i}};const wI=(r,t,e)=>ut(new AI(r,ut(t),ut(e))),NI=EI("toneMappingExposure","float");j("toneMapping",(r,t,e)=>wI(t,e,r));const Vn=new O;let RI=class KT{constructor(t,e,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)Vn.fromBufferAttribute(this,e),Vn.applyMatrix4(t),this.setXYZ(e,Vn.x,Vn.y,Vn.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Vn.fromBufferAttribute(this,e),Vn.applyNormalMatrix(t),this.setXYZ(e,Vn.x,Vn.y,Vn.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Vn.fromBufferAttribute(this,e),Vn.transformDirection(t),this.setXYZ(e,Vn.x,Vn.y,Vn.z);return this}getComponent(t,e){let n=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(n=jn(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=jt(n,this.array)),this.data.array[t*this.data.stride+this.offset+e]=n,this}setX(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=jn(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=jn(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=jn(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=jn(e,this.array)),e}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),n=jt(n,this.array),i=jt(i,this.array),s=jt(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[i+s])}return new Pi(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new KT(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}},ZT=class{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=ed,this.updateRanges=[],this.version=0,this.uuid=Hs()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,s=this.stride;i<s;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Hs()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Hs()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}},CI=class extends dx{static get type(){return"BufferAttributeNode"}constructor(t,e=null,n=0,i=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferStride=n,this.bufferOffset=i,this.usage=ed,this.instanced=!1,this.attribute=null,this.global=!0,t&&t.isBufferAttribute===!0&&(this.attribute=t,this.usage=t.usage,this.instanced=t.isInstancedBufferAttribute)}getHash(t){if(this.bufferStride===0&&this.bufferOffset===0){let e=t.globalCache.getData(this.value);return e===void 0&&(e={node:this},t.globalCache.setData(this.value,e)),e.node.uuid}return this.uuid}getNodeType(t){return this.bufferType===null&&(this.bufferType=t.getTypeFromAttribute(this.attribute)),this.bufferType}setup(t){if(this.attribute!==null)return;const e=this.getNodeType(t),n=this.value,i=t.getTypeLength(e),s=this.bufferStride||i,o=this.bufferOffset,a=n.isInterleavedBuffer===!0?n:new ZT(n,s),l=new RI(a,i,o);a.setUsage(this.usage),this.attribute=l,this.attribute.isInstancedBufferAttribute=this.instanced}generate(t){const e=this.getNodeType(t),n=t.getBufferAttributeFromNode(this,e),i=t.getPropertyName(n);let s=null;return t.shaderStage==="vertex"||t.shaderStage==="compute"?(this.name=i,s=i):s=Js(this).build(t,e),s}getInputType(){return"bufferAttribute"}setUsage(t){return this.usage=t,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=t),this}setInstanced(t){return this.instanced=t,this}};const vx=(r,t,e,n)=>ut(new CI(r,t,e,n)),PI=(r,t,e,n)=>vx(r,t,e,n).setUsage(Pa),Ky=(r,t,e,n)=>vx(r,t,e,n).setInstanced(!0),Zy=(r,t,e,n)=>PI(r,t,e,n).setInstanced(!0);j("toAttribute",r=>vx(r.value));let FI=class extends Kt{static get type(){return"ComputeNode"}constructor(t,e,n=[64]){super("void"),this.isComputeNode=!0,this.computeNode=t,this.count=e,this.workgroupSize=n,this.dispatchCount=0,this.version=1,this.updateBeforeType=ne.OBJECT,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}updateDispatchCount(){const{count:t,workgroupSize:e}=this;let n=e[0];for(let i=1;i<e.length;i++)n*=e[i];this.dispatchCount=Math.ceil(t/n)}onInit(){}updateBefore({renderer:t}){t.compute(this)}generate(t){const{shaderStage:e}=t;if(e==="compute"){const n=this.computeNode.build(t,"void");n!==""&&t.addLineFlowCode(n,this)}}};const II=(r,t,e)=>ut(new FI(ut(r),t,e));j("compute",II);let LI=class extends Kt{static get type(){return"CacheNode"}constructor(t,e=!0){super(),this.node=t,this.parent=e,this.isCacheNode=!0}getNodeType(t){return this.node.getNodeType(t)}build(t,...e){const n=t.getCache(),i=t.getCacheFromNode(this,this.parent);t.setCache(i);const s=this.node.build(t,...e);return t.setCache(n),s}};const Fu=(r,...t)=>ut(new LI(ut(r),...t));j("cache",Fu);let DI=class extends Kt{static get type(){return"BypassNode"}constructor(t,e){super(),this.isBypassNode=!0,this.outputNode=t,this.callNode=e}getNodeType(t){return this.outputNode.getNodeType(t)}generate(t){const e=this.callNode.build(t,"void");return e!==""&&t.addLineFlowCode(e,this),this.outputNode.build(t)}};const UI=tt(DI);j("bypass",UI);let QT=class extends Kt{static get type(){return"RemapNode"}constructor(t,e,n,i=J(0),s=J(1)){super(),this.node=t,this.inLowNode=e,this.inHighNode=n,this.outLowNode=i,this.outHighNode=s,this.doClamp=!0}setup(){const{node:t,inLowNode:e,inHighNode:n,outLowNode:i,outHighNode:s,doClamp:o}=this;let a=t.sub(e).div(n.sub(e));return o===!0&&(a=a.clamp()),a.mul(s.sub(i)).add(i)}};const BI=tt(QT,null,null,{doClamp:!1}),OI=tt(QT);j("remap",BI);j("remapClamp",OI);let zI=class extends Kt{static get type(){return"ExpressionNode"}constructor(t="",e="void"){super(e),this.snippet=t}generate(t,e){const n=this.getNodeType(t),i=this.snippet;if(n==="void")t.addLineFlowCode(i,this);else return t.format(`( ${i} )`,n,e)}};const wc=tt(zI),GI=r=>(r?ei(r,wc("discard")):wc("discard")).append();j("discard",GI);let kI=class extends hn{static get type(){return"RenderOutputNode"}constructor(t,e,n){super("vec4"),this.colorNode=t,this.toneMapping=e,this.outputColorSpace=n,this.isRenderOutput=!0}setup({context:t}){let e=this.colorNode||t.color;const n=(this.toneMapping!==null?this.toneMapping:t.toneMapping)||Va,i=(this.outputColorSpace!==null?this.outputColorSpace:t.outputColorSpace)||So;return n!==Va&&(e=e.toneMapping(n)),i!==So&&i!==_i.workingColorSpace&&(e=e.workingToColorSpace(i)),e}};const VI=(r,t=null,e=null)=>ut(new kI(ut(r),t,e));j("renderOutput",VI);let HI=class extends Kt{static get type(){return"AttributeNode"}constructor(t,e=null){super(e),this.global=!0,this._attributeName=t}getHash(t){return this.getAttributeName(t)}getNodeType(t){let e=this.nodeType;if(e===null){const n=this.getAttributeName(t);if(t.hasGeometryAttribute(n)){const i=t.geometry.getAttribute(n);e=t.getTypeFromAttribute(i)}else e="float"}return e}setAttributeName(t){return this._attributeName=t,this}getAttributeName(){return this._attributeName}generate(t){const e=this.getAttributeName(t),n=this.getNodeType(t);if(t.hasGeometryAttribute(e)===!0){const s=t.geometry.getAttribute(e),o=t.getTypeFromAttribute(s),a=t.getAttribute(e,o);return t.shaderStage==="vertex"?t.format(a.name,o,n):Js(this).build(t,n)}else return console.warn(`AttributeNode: Vertex attribute "${e}" not found on geometry.`),t.generateConst(n)}serialize(t){super.serialize(t),t.global=this.global,t._attributeName=this._attributeName}deserialize(t){super.deserialize(t),this.global=t.global,this._attributeName=t._attributeName}};const js=(r,t)=>ut(new HI(r,t));let _n=class so extends Kt{static get type(){return"IndexNode"}constructor(t){super("uint"),this.scope=t,this.isInstanceIndexNode=!0}generate(t){const e=this.getNodeType(t),n=this.scope;let i;if(n===so.VERTEX)i=t.getVertexIndex();else if(n===so.INSTANCE)i=t.getInstanceIndex();else if(n===so.DRAW)i=t.getDrawIndex();else if(n===so.INVOCATION_LOCAL)i=t.getInvocationLocalIndex();else if(n===so.INVOCATION_SUBGROUP)i=t.getInvocationSubgroupIndex();else if(n===so.SUBGROUP)i=t.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+n);let s;return t.shaderStage==="vertex"||t.shaderStage==="compute"?s=i:s=Js(this).build(t,e),s}};_n.VERTEX="vertex";_n.INSTANCE="instance";_n.SUBGROUP="subgroup";_n.INVOCATION_LOCAL="invocationLocal";_n.INVOCATION_SUBGROUP="invocationSubgroup";_n.DRAW="draw";const $I=gt(_n,_n.VERTEX),bx=gt(_n,_n.INSTANCE);_n.SUBGROUP;_n.INVOCATION_SUBGROUP;_n.INVOCATION_LOCAL;const WI=gt(_n,_n.DRAW);class Fd{start(){}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class Qy{constructor(t,e,n=null){this.isNodeAttribute=!0,this.name=t,this.type=e,this.node=n}}class qI{constructor(t,e,n){this.isNodeUniform=!0,this.name=t,this.type=e,this.node=n.getSelf()}get value(){return this.node.value}set value(t){this.node.value=t}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class JT{constructor(t,e){this.isNodeVar=!0,this.name=t,this.type=e}}class XI extends JT{constructor(t,e){super(t,e),this.needsInterpolation=!1,this.isNodeVarying=!0}}class YI{constructor(t,e,n=""){this.name=t,this.type=e,this.code=n,Object.defineProperty(this,"isNodeCode",{value:!0})}}let jI=0;class Yf{constructor(t=null){this.id=jI++,this.nodesData=new WeakMap,this.parent=t}getData(t){let e=this.nodesData.get(t);return e===void 0&&this.parent!==null&&(e=this.parent.getData(t)),e}setData(t,e){this.nodesData.set(t,e)}}class KI extends we{static get type(){return"ParameterNode"}constructor(t,e=null){super(t,e),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}let In=class extends Kt{static get type(){return"CodeNode"}constructor(t="",e=[],n=""){super("code"),this.isCodeNode=!0,this.code=t,this.language=n,this.includes=e}isGlobal(){return!0}setIncludes(t){return this.includes=t,this}getIncludes(){return this.includes}generate(t){const e=this.getIncludes(t);for(const i of e)i.build(t);const n=t.getCodeFromNode(this,this.getNodeType(t));return n.code=this.code,n.code}serialize(t){super.serialize(t),t.code=this.code,t.language=this.language}deserialize(t){super.deserialize(t),this.code=t.code,this.language=t.language}};class ZI extends In{static get type(){return"FunctionNode"}constructor(t="",e=[],n=""){super(t,e,n)}getNodeType(t){return this.getNodeFunction(t).type}getInputs(t){return this.getNodeFunction(t).inputs}getNodeFunction(t){const e=t.getDataFromNode(this);let n=e.nodeFunction;return n===void 0&&(n=t.parser.parseFunction(this.code),e.nodeFunction=n),n}generate(t,e){super.generate(t);const n=this.getNodeFunction(t),i=n.name,s=n.type,o=t.getCodeFromNode(this,s);i!==""&&(o.name=i);const a=t.getPropertyName(o),l=this.getNodeFunction(t).getCode(a);return o.code=l+`
`,e==="property"?a:t.format(`${a}()`,s,e)}}let QI=0;class oi extends yl{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:QI++}),this.uuid=Hs(),this.name="",this.type="Material",this.blending=Rr,this.side=vc,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Ku,this.blendDst=Zu,this.blendEquation=vr,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Ae(0,0,0),this.blendAlpha=0,this.depthFunc=Qu,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=og,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=no,this.stencilZFail=no,this.stencilZPass=no,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Rr&&(n.blending=this.blending),this.side!==vc&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==Ku&&(n.blendSrc=this.blendSrc),this.blendDst!==Zu&&(n.blendDst=this.blendDst),this.blendEquation!==vr&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==Qu&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==og&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==no&&(n.stencilFail=this.stencilFail),this.stencilZFail!==no&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==no&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(e){const s=i(t.textures),o=i(t.images);s.length>0&&(n.textures=s),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const i=e.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=e[s].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}const Id=r=>js("uv"+(r>0?r:""),"vec2");let JI=class extends Kt{static get type(){return"TextureSizeNode"}constructor(t,e=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=t,this.levelNode=e}generate(t,e){const n=this.textureNode.build(t,"property"),i=this.levelNode===null?"0":this.levelNode.build(t,"int");return t.format(`${t.getMethod("textureDimensions")}( ${n}, ${i} )`,this.getNodeType(t),e)}};const xc=tt(JI);let tL=class extends _l{static get type(){return"MaxMipLevelNode"}constructor(t){super(0),this._textureNode=t,this.updateType=ne.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const t=this.texture,e=t.images,n=e&&e.length>0?e[0]&&e[0].image||e[0]:t.image;if(n&&n.width!==void 0){const{width:i,height:s}=n;this.value=Math.log2(Math.max(i,s))}}};const eL=tt(tL);let qc=class extends _l{static get type(){return"TextureNode"}constructor(t,e=null,n=null,i=null){super(t),this.isTextureNode=!0,this.uvNode=e,this.levelNode=n,this.biasNode=i,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=ne.NONE,this.referenceNode=null,this._value=t,this._matrixUniform=null,this.setUpdateMatrix(e===null)}set value(t){this.referenceNode?this.referenceNode.value=t:this._value=t}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===vn?"uvec4":this.value.type===Xn?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Id(this.value.channel)}updateReference(){return this.value}getTransformedUV(t){return this._matrixUniform===null&&(this._matrixUniform=Jt(this.value.matrix)),this._matrixUniform.mul(Q(t,1)).xy}setUpdateMatrix(t){return this.updateMatrix=t,this.updateType=t?ne.FRAME:ne.NONE,this}setupUV(t,e){const n=this.value;return t.isFlipY()&&(n.isRenderTargetTexture===!0||n.isFramebufferTexture===!0||n.isDepthTexture===!0)&&(this.sampler?e=e.flipY():e=e.setY(qe(xc(this,this.levelNode).y).sub(e.y).sub(1))),e}setup(t){const e=t.getNodeProperties(this);e.referenceNode=this.referenceNode;let n=this.uvNode;(n===null||t.context.forceUVContext===!0)&&t.context.getUV&&(n=t.context.getUV(this)),n||(n=this.getDefaultUV()),this.updateMatrix===!0&&(n=this.getTransformedUV(n)),n=this.setupUV(t,n);let i=this.levelNode;i===null&&t.context.getTextureLevel&&(i=t.context.getTextureLevel(this)),e.uvNode=n,e.levelNode=i,e.biasNode=this.biasNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e.depthNode=this.depthNode}generateUV(t,e){return e.build(t,this.sampler===!0?"vec2":"ivec2")}generateSnippet(t,e,n,i,s,o,a,l){const c=this.value;let h;return i?h=t.generateTextureLevel(c,e,n,i,o):s?h=t.generateTextureBias(c,e,n,s,o):l?h=t.generateTextureGrad(c,e,n,l,o):a?h=t.generateTextureCompare(c,e,n,a,o):this.sampler===!1?h=t.generateTextureLoad(c,e,n,o):h=t.generateTexture(c,e,n,o),h}generate(t,e){const n=t.getNodeProperties(this),i=this.value;if(!i||i.isTexture!==!0)throw new Error("TextureNode: Need a three.js texture.");const s=super.generate(t,"property");if(e==="sampler")return s+"_sampler";if(t.isReference(e))return s;{const o=t.getDataFromNode(this);let a=o.propertyName;if(a===void 0){const{uvNode:h,levelNode:u,biasNode:d,compareNode:f,depthNode:p,gradNode:x}=n,m=this.generateUV(t,h),g=u?u.build(t,"float"):null,_=d?d.build(t,"float"):null,y=p?p.build(t,"int"):null,S=f?f.build(t,"float"):null,w=x?[x[0].build(t,"vec2"),x[1].build(t,"vec2")]:null,A=t.getVarFromNode(this);a=t.getPropertyName(A);const T=this.generateSnippet(t,s,m,g,_,y,S,w);t.addLineFlowCode(`${a} = ${T}`,this),o.snippet=T,o.propertyName=a}let l=a;const c=this.getNodeType(t);return t.needsToWorkingColorSpace(i)&&(l=YT(wc(l,c),i.colorSpace).setup(t).build(t,c)),t.format(l,c,e)}}setSampler(t){return this.sampler=t,this}getSampler(){return this.sampler}uv(t){const e=this.clone();return e.uvNode=ut(t),e.referenceNode=this.getSelf(),ut(e)}blur(t){const e=this.clone();return e.biasNode=ut(t).mul(eL(e)),e.referenceNode=this.getSelf(),ut(e)}level(t){const e=this.clone();return e.levelNode=ut(t),e.referenceNode=this.getSelf(),ut(e)}size(t){return xc(this,t)}bias(t){const e=this.clone();return e.biasNode=ut(t),e.referenceNode=this.getSelf(),ut(e)}compare(t){const e=this.clone();return e.compareNode=ut(t),e.referenceNode=this.getSelf(),ut(e)}grad(t,e){const n=this.clone();return n.gradNode=[ut(t),ut(e)],n.referenceNode=this.getSelf(),ut(n)}depth(t){const e=this.clone();return e.depthNode=ut(t),e.referenceNode=this.getSelf(),ut(e)}serialize(t){super.serialize(t),t.value=this.value.toJSON(t.meta).uuid,t.sampler=this.sampler,t.updateMatrix=this.updateMatrix,t.updateType=this.updateType}deserialize(t){super.deserialize(t),this.value=t.meta.textures[t.value],this.sampler=t.sampler,this.updateMatrix=t.updateMatrix,this.updateType=t.updateType}update(){const t=this.value,e=this._matrixUniform;e!==null&&(e.value=t.matrix),t.matrixAutoUpdate===!0&&t.updateMatrix()}clone(){const t=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return t.sampler=this.sampler,t}};const Xe=tt(qc),$i=(...r)=>Xe(...r).setSampler(!1),Dl=Jt("float").label("cameraNear").setGroup(re).onRenderUpdate(({camera:r})=>r.near),Ul=Jt("float").label("cameraFar").setGroup(re).onRenderUpdate(({camera:r})=>r.far),nL=Jt("float").label("cameraLogDepth").setGroup(re).onRenderUpdate(({camera:r})=>2/(Math.log(r.far+1)/Math.LN2)),Ex=Jt("mat4").label("cameraProjectionMatrix").setGroup(re).onRenderUpdate(({camera:r})=>r.projectionMatrix),tr=Jt("mat4").label("cameraViewMatrix").setGroup(re).onRenderUpdate(({camera:r})=>r.matrixWorldInverse),iL=Jt(new O).label("cameraPosition").setGroup(re).onRenderUpdate(({camera:r},t)=>t.value.setFromMatrixPosition(r.matrixWorld));let kn=class Fn extends Kt{static get type(){return"Object3DNode"}constructor(t,e=null){super(),this.scope=t,this.object3d=e,this.updateType=ne.OBJECT,this._uniformNode=new _l(null)}getNodeType(){const t=this.scope;if(t===Fn.WORLD_MATRIX)return"mat4";if(t===Fn.POSITION||t===Fn.VIEW_POSITION||t===Fn.DIRECTION||t===Fn.SCALE)return"vec3"}update(t){const e=this.object3d,n=this._uniformNode,i=this.scope;if(i===Fn.WORLD_MATRIX)n.value=e.matrixWorld;else if(i===Fn.POSITION)n.value=n.value||new O,n.value.setFromMatrixPosition(e.matrixWorld);else if(i===Fn.SCALE)n.value=n.value||new O,n.value.setFromMatrixScale(e.matrixWorld);else if(i===Fn.DIRECTION)n.value=n.value||new O,e.getWorldDirection(n.value);else if(i===Fn.VIEW_POSITION){const s=t.camera;n.value=n.value||new O,n.value.setFromMatrixPosition(e.matrixWorld),n.value.applyMatrix4(s.matrixWorldInverse)}}generate(t){const e=this.scope;return e===Fn.WORLD_MATRIX?this._uniformNode.nodeType="mat4":(e===Fn.POSITION||e===Fn.VIEW_POSITION||e===Fn.DIRECTION||e===Fn.SCALE)&&(this._uniformNode.nodeType="vec3"),this._uniformNode.build(t)}serialize(t){super.serialize(t),t.scope=this.scope}deserialize(t){super.deserialize(t),this.scope=t.scope}};kn.WORLD_MATRIX="worldMatrix";kn.POSITION="position";kn.SCALE="scale";kn.VIEW_POSITION="viewPosition";kn.DIRECTION="direction";kn.DIRECTION;kn.WORLD_MATRIX;kn.POSITION;kn.SCALE;kn.VIEW_POSITION;let ds=class extends kn{static get type(){return"ModelNode"}constructor(t){super(t)}update(t){this.object3d=t.object,super.update(t)}};ds.DIRECTION;const bo=gt(ds,ds.WORLD_MATRIX);ds.POSITION;ds.SCALE;ds.VIEW_POSITION;const sL=Jt(new ss).onObjectUpdate(({object:r},t)=>t.value.getNormalMatrix(r.matrixWorld)),Ld=tr.mul(bo).toVar("modelViewMatrix"),tv=js("position","vec3"),zn=tv.varying("positionLocal"),Jy=tv.varying("positionPrevious"),xg=bo.mul(zn).xyz.varying("v_positionWorld"),ev=zn.transformDirection(bo).varying("v_positionWorldDirection").normalize().toVar("positionWorldDirection"),Un=Ld.mul(zn).xyz.varying("v_positionView"),ke=Un.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");let rL=class extends Kt{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(t){const{renderer:e,material:n}=t;return e.coordinateSystem===Ki&&n.side===Zs?"false":t.getFrontFacing()}};const oL=gt(rL),Dd=J(oL).mul(2).sub(1),nv=js("normal","vec3"),fs=Mt(r=>r.geometry.hasAttribute("normal")===!1?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),Q(0,1,0)):nv,"vec3").once()().toVar("normalLocal"),aL=Un.dFdx().cross(Un.dFdy()).normalize().toVar("normalFlat"),ns=Mt(r=>{let t;return r.material.flatShading===!0?t=aL:t=Js(sv(fs),"v_normalView").normalize(),t},"vec3").once()().toVar("normalView"),Ud=Js(ns.transformDirection(tr),"v_normalWorld").normalize().toVar("normalWorld"),sn=Mt(r=>r.context.setupNormal(),"vec3").once()().mul(Dd).toVar("transformedNormalView"),iv=sn.transformDirection(tr).toVar("transformedNormalWorld"),rc=Mt(r=>r.context.setupClearcoatNormal(),"vec3").once()().mul(Dd).toVar("transformedClearcoatNormalView"),lL=Mt(([r,t=bo])=>{const e=ri(t),n=r.div(Q(e[0].dot(e[0]),e[1].dot(e[1]),e[2].dot(e[2])));return e.mul(n).xyz}),sv=Mt(([r],t)=>{const e=t.renderer.nodes.modelNormalViewMatrix;if(e!==null)return e.transformDirection(r);const n=sL.mul(r);return tr.transformDirection(n)}),cL=Jt(0).onReference(({material:r})=>r).onRenderUpdate(({material:r})=>r.refractionRatio),hL=ke.negate().reflect(sn),uL=ke.negate().refract(sn,cL),dL=hL.transformDirection(tr).toVar("reflectVector"),fL=uL.transformDirection(tr).toVar("reflectVector");let pL=class extends qc{static get type(){return"CubeTextureNode"}constructor(t,e=null,n=null,i=null){super(t,e,n,i),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const t=this.value;return t.mapping===Mo?dL:t.mapping===sl?fL:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',t.mapping),Q(0,0,0))}setUpdateMatrix(){}setupUV(t,e){const n=this.value;return t.renderer.coordinateSystem===To||!n.isRenderTargetTexture?Q(e.x.negate(),e.yz):e}generateUV(t,e){return e.build(t,"vec3")}};const Nc=tt(pL);let rv=class extends _l{static get type(){return"BufferNode"}constructor(t,e,n=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferCount=n}getElementType(t){return this.getNodeType(t)}getInputType(){return"buffer"}};const Ax=(r,t,e)=>ut(new rv(r,t,e));let mL=class extends $c{static get type(){return"UniformArrayElementNode"}constructor(t,e){super(t,e),this.isArrayBufferElementNode=!0}generate(t){const e=super.generate(t),n=this.getNodeType();return t.format(e,"vec4",n)}},gL=class extends rv{static get type(){return"UniformArrayNode"}constructor(t,e=null){super(null,"vec4"),this.array=t,this.elementType=e,this._elementType=null,this._elementLength=0,this.updateType=ne.RENDER,this.isArrayBufferNode=!0}getElementType(){return this.elementType||this._elementType}getElementLength(){return this._elementLength}update(){const{array:t,value:e}=this,n=this.getElementLength(),i=this.getElementType();if(n===1)for(let s=0;s<t.length;s++){const o=s*4;e[o]=t[s]}else if(i==="color")for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.r,e[o+1]=a.g,e[o+2]=a.b||0}else for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.x,e[o+1]=a.y,e[o+2]=a.z||0,e[o+3]=a.w||0}}setup(t){const e=this.array.length;this._elementType=this.elementType===null?sd(this.array[0]):this.elementType,this._elementLength=t.getTypeLength(this._elementType);let n=Float32Array;return this._elementType.charAt(0)==="i"?n=Int32Array:this._elementType.charAt(0)==="u"&&(n=Uint32Array),this.value=new n(e*4),this.bufferCount=e,this.bufferType=t.changeComponentType("vec4",t.getComponentType(this._elementType)),super.setup(t)}element(t){return ut(new mL(this,ut(t)))}};const Rc=(r,t)=>ut(new gL(r,t));let xL=class extends $c{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),n=this.referenceNode.getNodeType(),i=this.getNodeType();return t.format(e,n,i)}},wx=class extends Kt{static get type(){return"ReferenceNode"}constructor(t,e,n=null,i=null){super(),this.property=t,this.uniformType=e,this.object=n,this.count=i,this.properties=t.split("."),this.reference=n,this.node=null,this.group=null,this.name=null,this.updateType=ne.OBJECT}element(t){return ut(new xL(this,ut(t)))}setGroup(t){return this.group=t,this}label(t){return this.name=t,this}setNodeType(t){let e=null;this.count!==null?e=Ax(null,t,this.count):Array.isArray(this.getValueFromReference())?e=Rc(null,t):t==="texture"?e=Xe(null):t==="cubeTexture"?e=Nc(null):e=Jt(null,t),this.group!==null&&e.setGroup(this.group),this.name!==null&&e.label(this.name),this.node=e.getSelf()}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let n=t[e[0]];for(let i=1;i<e.length;i++)n=n[e[i]];return n}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}};const Ve=(r,t,e)=>ut(new wx(r,t,e)),t_=(r,t,e,n)=>ut(new wx(r,t,n,e));let yL=class extends wx{static get type(){return"MaterialReferenceNode"}constructor(t,e,n=null){super(t,e,n),this.material=n,this.isMaterialReferenceNode=!0}updateReference(t){return this.reference=this.material!==null?this.material:t.material,this.reference}};const Er=(r,t,e)=>ut(new yL(r,t,e)),ov=Mt(r=>(r.geometry.hasAttribute("tangent")===!1&&r.geometry.computeTangents(),js("tangent","vec4")))(),Nx=ov.xyz.toVar("tangentLocal"),av=Ld.mul(Qt(Nx,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),_L=r=>r.mul(ov.w).xyz,ML=Js(_L(ns.cross(av)),"v_bitangentView").normalize().toVar("bitangentView"),oc=ri(av,ML,ns),SL=(()=>{let r=Xa.cross(ke);return r=r.cross(Xa).normalize(),r=Oe(r,sn,io.mul(zs.oneMinus()).oneMinus().pow2().pow2()).normalize(),r})(),TL=Mt(r=>{const{eye_pos:t,surf_norm:e,mapN:n,uv:i}=r,s=t.dFdx(),o=t.dFdy(),a=i.dFdx(),l=i.dFdy(),c=e,h=o.cross(c),u=c.cross(s),d=h.mul(a.x).add(u.mul(l.x)),f=h.mul(a.y).add(u.mul(l.y)),p=d.dot(d).max(f.dot(f)),x=Dd.mul(p.inverseSqrt());return vi(d.mul(n.x,x),f.mul(n.y,x),c.mul(n.z)).normalize()});let vL=class extends hn{static get type(){return"NormalMapNode"}constructor(t,e=null){super("vec3"),this.node=t,this.scaleNode=e,this.normalMapType=Ir}setup(t){const{normalMapType:e,scaleNode:n}=this;let i=this.node.mul(2).sub(1);n!==null&&(i=Q(i.xy.mul(n),i.z));let s=null;return e===q2?s=sv(i):e===Ir&&(t.hasGeometryAttribute("tangent")===!0?s=oc.mul(i).normalize():s=TL({eye_pos:Un,surf_norm:ns,mapN:i,uv:Id()})),s}};const e_=tt(vL),bL=Mt(({textureNode:r,bumpScale:t})=>{const e=i=>r.cache().context({getUV:s=>i(s.uvNode||Id()),forceUVContext:!0}),n=J(e(i=>i));return Tt(J(e(i=>i.add(i.dFdx()))).sub(n),J(e(i=>i.add(i.dFdy()))).sub(n)).mul(t)}),EL=Mt(r=>{const{surf_pos:t,surf_norm:e,dHdxy:n}=r,i=t.dFdx().normalize(),s=t.dFdy().normalize(),o=e,a=s.cross(o),l=o.cross(i),c=i.dot(a).mul(Dd),h=c.sign().mul(n.x.mul(a).add(n.y.mul(l)));return c.abs().mul(e).sub(h).normalize()});let AL=class extends hn{static get type(){return"BumpMapNode"}constructor(t,e=null){super("vec3"),this.textureNode=t,this.scaleNode=e}setup(){const t=this.scaleNode!==null?this.scaleNode:1,e=bL({textureNode:this.textureNode,bumpScale:t});return EL({surf_pos:Un,surf_norm:ns,dHdxy:e})}};const wL=tt(AL),n_=new Map;let st=class We extends Kt{static get type(){return"MaterialNode"}constructor(t){super(),this.scope=t}getCache(t,e){let n=n_.get(t);return n===void 0&&(n=Er(t,e),n_.set(t,n)),n}getFloat(t){return this.getCache(t,"float")}getColor(t){return this.getCache(t,"color")}getTexture(t){return this.getCache(t==="map"?"map":t+"Map","texture")}setup(t){const e=t.context.material,n=this.scope;let i=null;if(n===We.COLOR){const s=e.color!==void 0?this.getColor(n):Q();e.map&&e.map.isTexture===!0?i=s.mul(this.getTexture("map")):i=s}else if(n===We.OPACITY){const s=this.getFloat(n);e.alphaMap&&e.alphaMap.isTexture===!0?i=s.mul(this.getTexture("alpha")):i=s}else if(n===We.SPECULAR_STRENGTH)e.specularMap&&e.specularMap.isTexture===!0?i=this.getTexture("specular").r:i=J(1);else if(n===We.SPECULAR_INTENSITY){const s=this.getFloat(n);e.specularMap?i=s.mul(this.getTexture(n).a):i=s}else if(n===We.SPECULAR_COLOR){const s=this.getColor(n);e.specularColorMap&&e.specularColorMap.isTexture===!0?i=s.mul(this.getTexture(n).rgb):i=s}else if(n===We.ROUGHNESS){const s=this.getFloat(n);e.roughnessMap&&e.roughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).g):i=s}else if(n===We.METALNESS){const s=this.getFloat(n);e.metalnessMap&&e.metalnessMap.isTexture===!0?i=s.mul(this.getTexture(n).b):i=s}else if(n===We.EMISSIVE){const s=this.getFloat("emissiveIntensity"),o=this.getColor(n).mul(s);e.emissiveMap&&e.emissiveMap.isTexture===!0?i=o.mul(this.getTexture(n)):i=o}else if(n===We.NORMAL)e.normalMap?(i=e_(this.getTexture("normal"),this.getCache("normalScale","vec2")),i.normalMapType=e.normalMapType):e.bumpMap?i=wL(this.getTexture("bump").r,this.getFloat("bumpScale")):i=ns;else if(n===We.CLEARCOAT){const s=this.getFloat(n);e.clearcoatMap&&e.clearcoatMap.isTexture===!0?i=s.mul(this.getTexture(n).r):i=s}else if(n===We.CLEARCOAT_ROUGHNESS){const s=this.getFloat(n);e.clearcoatRoughnessMap&&e.clearcoatRoughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).r):i=s}else if(n===We.CLEARCOAT_NORMAL)e.clearcoatNormalMap?i=e_(this.getTexture(n),this.getCache(n+"Scale","vec2")):i=ns;else if(n===We.SHEEN){const s=this.getColor("sheenColor").mul(this.getFloat("sheen"));e.sheenColorMap&&e.sheenColorMap.isTexture===!0?i=s.mul(this.getTexture("sheenColor").rgb):i=s}else if(n===We.SHEEN_ROUGHNESS){const s=this.getFloat(n);e.sheenRoughnessMap&&e.sheenRoughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).a):i=s,i=i.clamp(.07,1)}else if(n===We.ANISOTROPY)if(e.anisotropyMap&&e.anisotropyMap.isTexture===!0){const s=this.getTexture(n);i=gx(Bl.x,Bl.y,Bl.y.negate(),Bl.x).mul(s.rg.mul(2).sub(Tt(1)).normalize().mul(s.b))}else i=Bl;else if(n===We.IRIDESCENCE_THICKNESS){const s=Ve("1","float",e.iridescenceThicknessRange);if(e.iridescenceThicknessMap){const o=Ve("0","float",e.iridescenceThicknessRange);i=s.sub(o).mul(this.getTexture(n).g).add(o)}else i=s}else if(n===We.TRANSMISSION){const s=this.getFloat(n);e.transmissionMap?i=s.mul(this.getTexture(n).r):i=s}else if(n===We.THICKNESS){const s=this.getFloat(n);e.thicknessMap?i=s.mul(this.getTexture(n).g):i=s}else if(n===We.IOR)i=this.getFloat(n);else if(n===We.LIGHT_MAP)i=this.getTexture(n).rgb.mul(this.getFloat("lightMapIntensity"));else if(n===We.AO_MAP)i=this.getTexture(n).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const s=this.getNodeType(t);i=this.getCache(n,s)}return i}};st.ALPHA_TEST="alphaTest";st.COLOR="color";st.OPACITY="opacity";st.SHININESS="shininess";st.SPECULAR="specular";st.SPECULAR_STRENGTH="specularStrength";st.SPECULAR_INTENSITY="specularIntensity";st.SPECULAR_COLOR="specularColor";st.REFLECTIVITY="reflectivity";st.ROUGHNESS="roughness";st.METALNESS="metalness";st.NORMAL="normal";st.CLEARCOAT="clearcoat";st.CLEARCOAT_ROUGHNESS="clearcoatRoughness";st.CLEARCOAT_NORMAL="clearcoatNormal";st.EMISSIVE="emissive";st.ROTATION="rotation";st.SHEEN="sheen";st.SHEEN_ROUGHNESS="sheenRoughness";st.ANISOTROPY="anisotropy";st.IRIDESCENCE="iridescence";st.IRIDESCENCE_IOR="iridescenceIOR";st.IRIDESCENCE_THICKNESS="iridescenceThickness";st.IOR="ior";st.TRANSMISSION="transmission";st.THICKNESS="thickness";st.ATTENUATION_DISTANCE="attenuationDistance";st.ATTENUATION_COLOR="attenuationColor";st.LINE_SCALE="scale";st.LINE_DASH_SIZE="dashSize";st.LINE_GAP_SIZE="gapSize";st.LINE_WIDTH="linewidth";st.LINE_DASH_OFFSET="dashOffset";st.POINT_WIDTH="pointWidth";st.DISPERSION="dispersion";st.LIGHT_MAP="light";st.AO_MAP="ao";const NL=gt(st,st.ALPHA_TEST),RL=gt(st,st.COLOR),CL=gt(st,st.SHININESS),PL=gt(st,st.EMISSIVE),lv=gt(st,st.OPACITY),FL=gt(st,st.SPECULAR),i_=gt(st,st.SPECULAR_INTENSITY),IL=gt(st,st.SPECULAR_COLOR),Iu=gt(st,st.SPECULAR_STRENGTH),jf=gt(st,st.REFLECTIVITY),LL=gt(st,st.ROUGHNESS),DL=gt(st,st.METALNESS),UL=gt(st,st.NORMAL).context({getUV:null}),BL=gt(st,st.CLEARCOAT),OL=gt(st,st.CLEARCOAT_ROUGHNESS),zL=gt(st,st.CLEARCOAT_NORMAL).context({getUV:null}),GL=gt(st,st.ROTATION),kL=gt(st,st.SHEEN),VL=gt(st,st.SHEEN_ROUGHNESS),HL=gt(st,st.ANISOTROPY),$L=gt(st,st.IRIDESCENCE),WL=gt(st,st.IRIDESCENCE_IOR),qL=gt(st,st.IRIDESCENCE_THICKNESS),XL=gt(st,st.TRANSMISSION),YL=gt(st,st.THICKNESS),jL=gt(st,st.IOR),KL=gt(st,st.ATTENUATION_DISTANCE),ZL=gt(st,st.ATTENUATION_COLOR),QL=gt(st,st.LINE_SCALE),JL=gt(st,st.LINE_DASH_SIZE),tD=gt(st,st.LINE_GAP_SIZE);st.LINE_WIDTH;st.LINE_DASH_OFFSET;st.POINT_WIDTH;const eD=gt(st,st.DISPERSION),cv=gt(st,st.LIGHT_MAP),nD=gt(st,st.AO_MAP),Bl=Jt(new Me).onReference(function(r){return r.material}).onRenderUpdate(function({material:r}){this.value.set(r.anisotropy*Math.cos(r.anisotropyRotation),r.anisotropy*Math.sin(r.anisotropyRotation))});class iD extends hn{static get type(){return"ModelViewProjectionNode"}constructor(t=null){super("vec4"),this.positionNode=t}setup(t){if(t.shaderStage==="fragment")return Js(t.context.mvp);const e=this.positionNode||zn,n=t.renderer.nodes.modelViewMatrix||Ld;return Ex.mul(n).mul(e)}}const yg=tt(iD);class sD extends ZT{constructor(t,e,n=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}let rD=class extends Pi{constructor(t,e,n,i=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}};class oD extends Kt{static get type(){return"InstanceNode"}constructor(t){super("void"),this.instanceMesh=t,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=ne.FRAME,this.buffer=null,this.bufferColor=null}setup(t){let e=this.instanceMatrixNode,n=this.instanceColorNode;const i=this.instanceMesh;if(e===null){const a=i.instanceMatrix;if(i.count<=1e3)e=Ax(a.array,"mat4",Math.max(i.count,1)).element(bx);else{const l=new sD(a.array,16,1);this.buffer=l;const c=a.usage===Pa?Zy:Ky,h=[c(l,"vec4",16,0),c(l,"vec4",16,4),c(l,"vec4",16,8),c(l,"vec4",16,12)];e=qa(...h)}this.instanceMatrixNode=e}const s=i.instanceColor;if(s&&n===null){const a=new rD(s.array,3),l=s.usage===Pa?Zy:Ky;this.bufferColor=a,n=Q(l(a,"vec3",3,0)),this.instanceColorNode=n}const o=e.mul(zn).xyz;if(zn.assign(o),t.hasGeometryAttribute("normal")){const a=lL(fs,e);fs.assign(a)}this.instanceColorNode!==null&&od("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMesh.instanceMatrix.usage!==Pa&&this.buffer!=null&&this.instanceMesh.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMesh.instanceMatrix.version),this.instanceMesh.instanceColor&&this.instanceMesh.instanceColor.usage!==Pa&&this.bufferColor!=null&&this.instanceMesh.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceMesh.instanceColor.version)}}const aD=tt(oD);class lD extends Kt{static get type(){return"BatchNode"}constructor(t){super("void"),this.batchMesh=t,this.batchingIdNode=null}setup(t){this.batchingIdNode===null&&(t.getDrawIndex()===null?this.batchingIdNode=bx:this.batchingIdNode=WI);const n=Mt(([p])=>{const x=xc($i(this.batchMesh._indirectTexture),0),m=qe(p).modInt(qe(x)),g=qe(p).div(qe(x));return $i(this.batchMesh._indirectTexture,Ds(m,g)).x}).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]})(qe(this.batchingIdNode)),i=this.batchMesh._matricesTexture,s=xc($i(i),0),o=J(n).mul(4).toInt().toVar(),a=o.modInt(s),l=o.div(qe(s)),c=qa($i(i,Ds(a,l)),$i(i,Ds(a.add(1),l)),$i(i,Ds(a.add(2),l)),$i(i,Ds(a.add(3),l))),h=this.batchMesh._colorsTexture;if(h!==null){const x=Mt(([m])=>{const g=xc($i(h),0).x,_=m,y=_.modInt(g),S=_.div(g);return $i(h,Ds(y,S)).rgb}).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]})(n);od("vec3","vBatchColor").assign(x)}const u=ri(c);zn.assign(c.mul(zn));const d=fs.div(Q(u[0].dot(u[0]),u[1].dot(u[1]),u[2].dot(u[2]))),f=u.mul(d).xyz;fs.assign(f),t.hasGeometryAttribute("tangent")&&Nx.mulAssign(u)}}const cD=tt(lD),s_=new WeakMap;class hD extends Kt{static get type(){return"SkinningNode"}constructor(t,e=!1){super("void"),this.skinnedMesh=t,this.useReference=e,this.updateType=ne.OBJECT,this.skinIndexNode=js("skinIndex","uvec4"),this.skinWeightNode=js("skinWeight","vec4");let n,i,s;e?(n=Ve("bindMatrix","mat4"),i=Ve("bindMatrixInverse","mat4"),s=t_("skeleton.boneMatrices","mat4",t.skeleton.bones.length)):(n=Jt(t.bindMatrix,"mat4"),i=Jt(t.bindMatrixInverse,"mat4"),s=Ax(t.skeleton.boneMatrices,"mat4",t.skeleton.bones.length)),this.bindMatrixNode=n,this.bindMatrixInverseNode=i,this.boneMatricesNode=s,this.previousBoneMatricesNode=null}getSkinnedPosition(t=this.boneMatricesNode,e=zn){const{skinIndexNode:n,skinWeightNode:i,bindMatrixNode:s,bindMatrixInverseNode:o}=this,a=t.element(n.x),l=t.element(n.y),c=t.element(n.z),h=t.element(n.w),u=s.mul(e),d=vi(a.mul(i.x).mul(u),l.mul(i.y).mul(u),c.mul(i.z).mul(u),h.mul(i.w).mul(u));return o.mul(d).xyz}getSkinnedNormal(t=this.boneMatricesNode,e=fs){const{skinIndexNode:n,skinWeightNode:i,bindMatrixNode:s,bindMatrixInverseNode:o}=this,a=t.element(n.x),l=t.element(n.y),c=t.element(n.z),h=t.element(n.w);let u=vi(i.x.mul(a),i.y.mul(l),i.z.mul(c),i.w.mul(h));return u=o.mul(u).mul(s),u.transformDirection(e).xyz}getPreviousSkinnedPosition(t){const e=t.object;return this.previousBoneMatricesNode===null&&(e.skeleton.previousBoneMatrices=new Float32Array(e.skeleton.boneMatrices),this.previousBoneMatricesNode=t_("skeleton.previousBoneMatrices","mat4",e.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,Jy)}needsPreviousBoneMatrices(t){const e=t.renderer.getMRT();return e&&e.has("velocity")}setup(t){this.needsPreviousBoneMatrices(t)&&Jy.assign(this.getPreviousSkinnedPosition(t));const e=this.getSkinnedPosition();if(zn.assign(e),t.hasGeometryAttribute("normal")){const n=this.getSkinnedNormal();fs.assign(n),t.hasGeometryAttribute("tangent")&&Nx.assign(n)}}generate(t,e){if(e!=="void")return zn.build(t,e)}update(t){const n=(this.useReference?t.object:this.skinnedMesh).skeleton;s_.get(n)!==t.frameId&&(s_.set(n,t.frameId),this.previousBoneMatricesNode!==null&&n.previousBoneMatrices.set(n.boneMatrices),n.update())}}const uD=r=>ut(new hD(r,!0));let dD=class extends Kt{static get type(){return"LoopNode"}constructor(t=[]){super(),this.params=t}getVarName(t){return String.fromCharCode(105+t)}getProperties(t){const e=t.getNodeProperties(this);if(e.stackNode!==void 0)return e;const n={};for(let s=0,o=this.params.length-1;s<o;s++){const a=this.params[s],l=a.isNode!==!0&&a.name||this.getVarName(s),c=a.isNode!==!0&&a.type||"int";n[l]=wc(l,c)}const i=t.addStack();return e.returnsNode=this.params[this.params.length-1](n,i,t),e.stackNode=i,t.removeStack(),e}getNodeType(t){const{returnsNode:e}=this.getProperties(t);return e?e.getNodeType(t):"void"}setup(t){this.getProperties(t)}generate(t){const e=this.getProperties(t),n=this.params,i=e.stackNode;for(let a=0,l=n.length-1;a<l;a++){const c=n[a];let h=null,u=null,d=null,f=null,p=null,x=null;c.isNode?(f="int",d=this.getVarName(a),h="0",u=c.build(t,f),p="<"):(f=c.type||"int",d=c.name||this.getVarName(a),h=c.start,u=c.end,p=c.condition,x=c.update,typeof h=="number"?h=h.toString():h&&h.isNode&&(h=h.build(t,f)),typeof u=="number"?u=u.toString():u&&u.isNode&&(u=u.build(t,f)),h!==void 0&&u===void 0?(h=h+" - 1",u="0",p=">="):u!==void 0&&h===void 0&&(h="0",p="<"),p===void 0&&(Number(h)>Number(u)?p=">=":p="<"));const m={start:h,end:u,condition:p},g=m.start,_=m.end;let y="",S="",w="";x||(f==="int"||f==="uint"?p.includes("<")?x="++":x="--":p.includes("<")?x="+= 1.":x="-= 1."),y+=t.getVar(f,d)+" = "+g,S+=d+" "+p+" "+_,w+=d+" "+x;const A=`for ( ${y}; ${S}; ${w} )`;t.addFlowCode((a===0?`
`:"")+t.tab+A+` {

`).addFlowTab()}const s=i.build(t,"void"),o=e.returnsNode?e.returnsNode.build(t):"";t.removeFlowTab().addFlowCode(`
`+t.tab+s);for(let a=0,l=this.params.length-1;a<l;a++)t.addFlowCode((a===0?"":t.tab)+`}

`).removeFlowTab();return t.addFlowTab(),o}};const Vs=(...r)=>ut(new dD(Wa(r,"int"))).append(),fD=()=>wc("break").append();function pD(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function _g(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function mD(){const r=_g("canvas");return r.style.display="block",r}const r_={};function gD(r){r in r_||(r_[r]=!0,console.warn(r))}let ea,xD=class{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{ea===void 0&&(ea=_g("canvas")),ea.width=t.width,ea.height=t.height;const n=ea.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=ea}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=_g("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),s=i.data;for(let o=0;o<s.length;o++)s[o]=$a(s[o]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor($a(e[n]/255)*255):e[n]=$a(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}},yD=0,hv=class{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:yD++}),this.uuid=Hs(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?s.push(Kf(i[o].image)):s.push(Kf(i[o]))}else s=Kf(i);n.url=s}return e||(t.images[this.uuid]=n),n}};function Kf(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?xD.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let _D=0,rs=class Lu extends yl{constructor(t=Lu.DEFAULT_IMAGE,e=Lu.DEFAULT_MAPPING,n=Ra,i=Ra,s=si,o=$s,a=gl,l=ks,c=Lu.DEFAULT_ANISOTROPY,h=So){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:_D++}),this.uuid=Hs(),this.name="",this.source=new hv(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new Me(0,0),this.repeat=new Me(1,1),this.center=new Me(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ss,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==QS)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Ju:t.x=t.x-Math.floor(t.x);break;case Ra:t.x=t.x<0?0:1;break;case td:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case Ju:t.y=t.y-Math.floor(t.y);break;case Ra:t.y=t.y<0?0:1;break;case td:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}};rs.DEFAULT_IMAGE=null;rs.DEFAULT_MAPPING=QS;rs.DEFAULT_ANISOTROPY=1;class MD extends rs{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=En,this.minFilter=En,this.wrapR=Ra,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}const Zf=new WeakMap,gi=new Ie,o_=Mt(({bufferMap:r,influence:t,stride:e,width:n,depth:i,offset:s})=>{const o=qe($I).mul(e).add(s),a=o.div(n),l=o.sub(a.mul(n));return $i(r,Ds(l,a)).depth(i).mul(t)});function SD(r){const t=r.morphAttributes.position!==void 0,e=r.morphAttributes.normal!==void 0,n=r.morphAttributes.color!==void 0,i=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,s=i!==void 0?i.length:0;let o=Zf.get(r);if(o===void 0||o.count!==s){let _=function(){m.dispose(),Zf.delete(r),r.removeEventListener("dispose",_)};var a=_;o!==void 0&&o.texture.dispose();const l=r.morphAttributes.position||[],c=r.morphAttributes.normal||[],h=r.morphAttributes.color||[];let u=0;t===!0&&(u=1),e===!0&&(u=2),n===!0&&(u=3);let d=r.attributes.position.count*u,f=1;const p=4096;d>p&&(f=Math.ceil(d/p),d=p);const x=new Float32Array(d*f*4*s),m=new MD(x,d,f,s);m.type=Ti,m.needsUpdate=!0;const g=u*4;for(let y=0;y<s;y++){const S=l[y],w=c[y],A=h[y],T=d*f*4*y;for(let R=0;R<S.count;R++){const $=R*g;t===!0&&(gi.fromBufferAttribute(S,R),x[T+$+0]=gi.x,x[T+$+1]=gi.y,x[T+$+2]=gi.z,x[T+$+3]=0),e===!0&&(gi.fromBufferAttribute(w,R),x[T+$+4]=gi.x,x[T+$+5]=gi.y,x[T+$+6]=gi.z,x[T+$+7]=0),n===!0&&(gi.fromBufferAttribute(A,R),x[T+$+8]=gi.x,x[T+$+9]=gi.y,x[T+$+10]=gi.z,x[T+$+11]=A.itemSize===4?gi.w:1)}}o={count:s,texture:m,stride:u,size:new Me(d,f)},Zf.set(r,o),r.addEventListener("dispose",_)}return o}class TD extends Kt{static get type(){return"MorphNode"}constructor(t){super("void"),this.mesh=t,this.morphBaseInfluence=Jt(1),this.updateType=ne.OBJECT}setup(t){const{geometry:e}=t,n=e.morphAttributes.position!==void 0,i=e.hasAttribute("normal")&&e.morphAttributes.normal!==void 0,s=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=s!==void 0?s.length:0,{texture:a,stride:l,size:c}=SD(e);n===!0&&zn.mulAssign(this.morphBaseInfluence),i===!0&&fs.mulAssign(this.morphBaseInfluence);const h=qe(c.width);Vs(o,({i:u})=>{const d=J(0).toVar();this.mesh.count>1&&this.mesh.morphTexture!==null&&this.mesh.morphTexture!==void 0?d.assign($i(this.mesh.morphTexture,Ds(qe(u).add(1),qe(bx))).r):d.assign(Ve("morphTargetInfluences","float").element(u).toVar()),n===!0&&zn.addAssign(o_({bufferMap:a,influence:d,stride:l,width:h,depth:u,offset:qe(0)})),i===!0&&fs.addAssign(o_({bufferMap:a,influence:d,stride:l,width:h,depth:u,offset:qe(1)}))})}update(){const t=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?t.value=1:t.value=1-this.mesh.morphTargetInfluences.reduce((e,n)=>e+n,0)}}const vD=tt(TD),bD=r=>r.sort((t,e)=>t.id-e.id),ED=(r,t)=>{for(const e of t)if(e.isAnalyticLightNode&&e.light.id===r)return e;return null},Qf=new WeakMap;class uv extends Kt{static get type(){return"LightsNode"}constructor(t=[]){super("vec3"),this.totalDiffuseNode=Q().toVar("totalDiffuse"),this.totalSpecularNode=Q().toVar("totalSpecular"),this.outgoingLightNode=Q().toVar("outgoingLight"),this._lights=t,this._lightNodes=null,this._lightNodesHash=null,this.global=!0}getHash(t){if(this._lightNodesHash===null){this._lightNodes===null&&this.setupLightsNode(t);const e=[];for(const n of this._lightNodes)e.push(n.getHash());this._lightNodesHash="lights-"+e.join(",")}return this._lightNodesHash}analyze(t){const e=t.getDataFromNode(this);for(const n of e.nodes)n.build(t)}setupLightsNode(t){const e=[],n=this._lightNodes,i=bD(this._lights),s=t.renderer.nodes.library;for(const o of i)if(o.isNode)e.push(ut(o));else{let a=null;if(n!==null&&(a=ED(o.id,n)),a===null){const l=s.getLightNodeClass(o.constructor);if(l===null){console.warn(`LightsNode.setupNodeLights: Light node not found for ${o.constructor.name}`);continue}let c=null;Qf.has(o)?c=Qf.get(o):(c=new l(o),Qf.set(o,c)),e.push(c)}}this._lightNodes=e}setup(t){this._lightNodes===null&&this.setupLightsNode(t);const e=t.context,n=e.lightingModel;let i=this.outgoingLightNode;if(n){const{_lightNodes:s,totalDiffuseNode:o,totalSpecularNode:a}=this;e.outgoingLight=i;const l=t.addStack(),c=t.getDataFromNode(this);c.nodes=l.nodes,n.start(e,l,t);for(const g of s)g.build(t);n.indirect(e,l,t);const{backdrop:h,backdropAlpha:u}=e,{directDiffuse:d,directSpecular:f,indirectDiffuse:p,indirectSpecular:x}=e.reflectedLight;let m=d.add(p);h!==null&&(u!==null?m=Q(u.mix(m,h)):m=Q(h),e.material.transparent=!0),o.assign(m),a.assign(f.add(x)),i.assign(o.add(a)),n.finish(e,l,t),i=i.bypass(t.removeStack())}return i}setLights(t){return this._lights=t,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}}const AD=tt(uv);class Sl extends Kt{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}generate(){console.warn("Abstract function.")}}class wD extends Sl{static get type(){return"AONode"}constructor(t=null){super(),this.aoNode=t}setup(t){t.context.ambientOcclusion.mulAssign(this.aoNode)}}class ND extends qT{static get type(){return"LightingContextNode"}constructor(t,e=null,n=null,i=null){super(t),this.lightingModel=e,this.backdropNode=n,this.backdropAlphaNode=i,this._value=null}getContext(){const{backdropNode:t,backdropAlphaNode:e}=this,n=Q().toVar("directDiffuse"),i=Q().toVar("directSpecular"),s=Q().toVar("indirectDiffuse"),o=Q().toVar("indirectSpecular"),a={directDiffuse:n,directSpecular:i,indirectDiffuse:s,indirectSpecular:o};return{radiance:Q().toVar("radiance"),irradiance:Q().toVar("irradiance"),iblIrradiance:Q().toVar("iblIrradiance"),ambientOcclusion:J(1).toVar("ambientOcclusion"),reflectedLight:a,backdrop:t,backdropAlpha:e}}setup(t){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||t.context.lightingModel,super.setup(t)}}const RD=tt(ND);class CD extends Sl{static get type(){return"IrradianceNode"}constructor(t){super(),this.node=t}setup(t){t.context.irradiance.addAssign(this.node)}}let Ol,zl,Ii=class yr extends Kt{static get type(){return"ScreenNode"}constructor(t){super(),this.scope=t,this.isViewportNode=!0}getNodeType(){return this.scope===yr.VIEWPORT?"vec4":"vec2"}getUpdateType(){let t=ne.NONE;return(this.scope===yr.SIZE||this.scope===yr.VIEWPORT)&&(t=ne.RENDER),this.updateType=t,t}update({renderer:t}){const e=t.getRenderTarget();this.scope===yr.VIEWPORT?e!==null?zl.copy(e.viewport):(t.getViewport(zl),zl.multiplyScalar(t.getPixelRatio())):e!==null?(Ol.width=e.width,Ol.height=e.height):t.getDrawingBufferSize(Ol)}setup(){const t=this.scope;let e=null;return t===yr.SIZE?e=Jt(Ol||(Ol=new Me)):t===yr.VIEWPORT?e=Jt(zl||(zl=new Ie)):e=Tt(Bd.div(Mg)),e}generate(t){if(this.scope===yr.COORDINATE){let e=t.getFragCoord();if(t.isFlipY()){const n=t.getNodeProperties(Mg).outputNode.build(t);e=`${t.getType("vec2")}( ${e}.x, ${n}.y - ${e}.y )`}return e}return super.generate(t)}};Ii.COORDINATE="coordinate";Ii.VIEWPORT="viewport";Ii.SIZE="size";Ii.UV="uv";const Cc=gt(Ii,Ii.UV),Mg=gt(Ii,Ii.SIZE),Bd=gt(Ii,Ii.COORDINATE),dv=gt(Ii,Ii.VIEWPORT);dv.zw;dv.xy;let PD=class extends rs{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=En,this.minFilter=En,this.generateMipmaps=!1,this.needsUpdate=!0}};const Gl=new Me;let fv=class extends qc{static get type(){return"ViewportTextureNode"}constructor(t=Cc,e=null,n=null){n===null&&(n=new PD,n.minFilter=$s),super(n,t,e),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=ne.FRAME}updateBefore(t){const e=t.renderer;e.getDrawingBufferSize(Gl);const n=this.value;(n.image.width!==Gl.width||n.image.height!==Gl.height)&&(n.image.width=Gl.width,n.image.height=Gl.height,n.needsUpdate=!0);const i=n.generateMipmaps;n.generateMipmaps=this.generateMipmaps,e.copyFramebufferToTexture(n),n.generateMipmaps=i}clone(){const t=new this.constructor(this.uvNode,this.levelNode,this.value);return t.generateMipmaps=this.generateMipmaps,t}};const FD=tt(fv,null,null,{generateMipmaps:!0});let Xc=class extends rs{constructor(t,e,n,i,s,o,a,l,c,h=uo){if(h!==uo&&h!==rl)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===uo&&(n=vn),n===void 0&&h===rl&&(n=Vc),super(null,i,s,o,a,l,h,n,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:En,this.minFilter=l!==void 0?l:En,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}},Jf=null,ID=class extends fv{static get type(){return"ViewportDepthTextureNode"}constructor(t=Cc,e=null){Jf===null&&(Jf=new Xc),super(t,e,Jf)}};const LD=tt(ID);let Ks=class ac extends Kt{static get type(){return"ViewportDepthNode"}constructor(t,e=null){super("float"),this.scope=t,this.valueNode=e,this.isViewportDepthNode=!0}generate(t){const{scope:e}=this;return e===ac.DEPTH_BASE?t.getFragDepth():super.generate(t)}setup({camera:t}){const{scope:e}=this,n=this.valueNode;let i=null;if(e===ac.DEPTH_BASE)n!==null&&(i=mv().assign(n));else if(e===ac.DEPTH)t.isPerspectiveCamera?i=DD(Un.z,Dl,Ul):i=Du(Un.z,Dl,Ul);else if(e===ac.LINEAR_DEPTH)if(n!==null)if(t.isPerspectiveCamera){const s=pv(n,Dl,Ul);i=Du(s,Dl,Ul)}else i=n;else i=Du(Un.z,Dl,Ul);return i}};Ks.DEPTH_BASE="depthBase";Ks.DEPTH="depth";Ks.LINEAR_DEPTH="linearDepth";const Du=(r,t,e)=>r.add(t).div(t.sub(e)),DD=(r,t,e)=>t.add(r).mul(e).div(e.sub(t).mul(r)),pv=(r,t,e)=>t.mul(e).div(e.sub(t).mul(r).sub(e)),mv=tt(Ks,Ks.DEPTH_BASE),gv=gt(Ks,Ks.DEPTH),UD=tt(Ks,Ks.LINEAR_DEPTH);LD();gv.assign=r=>mv(r);let Pc=class Sg extends Kt{static get type(){return"ClippingNode"}constructor(t=Sg.DEFAULT){super(),this.scope=t}setup(t){super.setup(t);const e=t.clippingContext,{localClipIntersection:n,localClippingCount:i,globalClippingCount:s}=e,o=s+i,a=n?o-i:o;return this.scope===Sg.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(e.planes,o,a):this.setupDefault(e.planes,o,a)}setupAlphaToCoverage(t,e,n){return Mt(()=>{const i=Rc(t),s=ba("float","distanceToPlane"),o=ba("float","distanceToGradient"),a=ba("float","clipOpacity");a.assign(1);let l;if(Vs(n,({i:c})=>{l=i.element(c),s.assign(Un.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),a.mulAssign(vo(o.negate(),o,s)),a.equal(0).discard()}),n<e){const c=ba("float","unionclipOpacity");c.assign(1),Vs({start:n,end:e},({i:h})=>{l=i.element(h),s.assign(Un.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),c.mulAssign(vo(o.negate(),o,s).oneMinus())}),a.mulAssign(c.oneMinus())}Ee.a.mulAssign(a),Ee.a.equal(0).discard()})()}setupDefault(t,e,n){return Mt(()=>{const i=Rc(t);let s;if(Vs(n,({i:o})=>{s=i.element(o),Un.dot(s.xyz).greaterThan(s.w).discard()}),n<e){const o=ba("bool","clipped");o.assign(!0),Vs({start:n,end:e},({i:a})=>{s=i.element(a),o.assign(Un.dot(s.xyz).greaterThan(s.w).and(o))}),o.discard()}})()}};Pc.ALPHA_TO_COVERAGE="alphaToCoverage";Pc.DEFAULT="default";const BD=()=>ut(new Pc),OD=()=>ut(new Pc(Pc.ALPHA_TO_COVERAGE)),zD=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class GD{constructor(t){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(t),this.hasAnimation=t.object.isSkinnedMesh===!0,this.refreshUniforms=zD,this.renderId=0}firstInitialization(t){return this.renderObjects.has(t)===!1?(this.getRenderObjectData(t),!0):!1}getRenderObjectData(t){let e=this.renderObjects.get(t);return e===void 0&&(e={material:this.getMaterialData(t.material),worldMatrix:t.object.matrixWorld.clone()},t.object.center&&(e.center=t.object.center.clone()),t.object.morphTargetInfluences&&(e.morphTargetInfluences=t.object.morphTargetInfluences.slice()),t.bundle!==null&&(e.version=t.bundle.version),this.renderObjects.set(t,e)),e}containsNode(t){const e=t.material;for(const n in e)if(e[n]&&e[n].isNode)return!0;return t.renderer.nodes.modelViewMatrix!==null||t.renderer.nodes.modelNormalViewMatrix!==null}getMaterialData(t){const e={};for(const n of this.refreshUniforms){const i=t[n];i!=null&&(typeof i=="object"&&i.clone!==void 0?i.isTexture===!0?e[n]={id:i.id,version:i.version}:e[n]=i.clone():e[n]=i)}return e}equals(t){const{object:e,material:n}=t,i=this.getRenderObjectData(t);if(i.worldMatrix.equals(e.matrixWorld)!==!0)return i.worldMatrix.copy(e.matrixWorld),!1;const s=i.material;for(const o in s){const a=s[o],l=n[o];if(a.equals!==void 0){if(a.equals(l)===!1)return a.copy(l),!1}else if(l.isTexture===!0){if(a.id!==l.id||a.version!==l.version)return a.id=l.id,a.version=l.version,!1}else if(a!==l)return s[o]=l,!1}if(i.morphTargetInfluences){let o=!1;for(let a=0;a<i.morphTargetInfluences.length;a++)i.morphTargetInfluences[a]!==e.morphTargetInfluences[a]&&(o=!0);if(o)return!0}return i.center&&i.center.equals(e.center)===!1?(i.center.copy(e.center),!0):(t.bundle!==null&&(i.version=t.bundle.version),!0)}needsRefresh(t,e){if(this.hasNode||this.hasAnimation||this.firstInitialization(t))return!0;const{renderId:n}=e;if(this.renderId!==n)return this.renderId=n,!0;const i=t.object.static===!0,s=t.bundle!==null&&t.bundle.static===!0&&this.getRenderObjectData(t).version===t.bundle.version;return i||s?!1:this.equals(t)!==!0}}class ln extends oi{static get type(){return"NodeMaterial"}constructor(){super(),this.isNodeMaterial=!0,this.type=this.constructor.type,this.forceSinglePass=!1,this.fog=!0,this.lights=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.depthNode=null,this.shadowNode=null,this.shadowPositionNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+pT(this)}build(t){this.setup(t)}setupObserver(t){return new GD(t)}setup(t){t.context.setupNormal=()=>this.setupNormal(t),t.addStack(),t.stack.outputNode=this.vertexNode||this.setupPosition(t),t.addFlow("vertex",t.removeStack()),t.addStack();let e;const n=this.setupClipping(t);if(this.depthWrite===!0&&this.setupDepth(t),this.fragmentNode===null){this.setupDiffuseColor(t),this.setupVariants(t);const i=this.setupLighting(t);n!==null&&t.stack.add(n);const s=Qt(i,Ee.a).max(0);if(e=this.setupOutput(t,s),pF.assign(e),this.outputNode!==null&&(e=this.outputNode),t.renderer.getRenderTarget()!==null){const a=t.renderer.getMRT(),l=this.mrtNode;a!==null?(e=a,l!==null&&(e=a.merge(l))):l!==null&&(e=l)}}else{let i=this.fragmentNode;i.isOutputStructNode!==!0&&(i=Qt(i)),e=this.setupOutput(t,i)}t.stack.outputNode=e,t.addFlow("fragment",t.removeStack()),t.monitor=this.setupObserver(t)}setupClipping(t){if(t.clippingContext===null)return null;const{globalClippingCount:e,localClippingCount:n}=t.clippingContext;let i=null;if(e||n){const s=t.renderer.samples;this.alphaToCoverage&&s>1?i=OD():t.stack.add(BD())}return i}setupDepth(t){const{renderer:e}=t;let n=this.depthNode;if(n===null){const i=e.getMRT();i&&i.has("depth")?n=i.get("depth"):e.logarithmicDepthBuffer===!0&&(n=yg().w.add(1).log2().mul(nL).mul(.5))}n!==null&&gv.assign(n).append()}setupPosition(t){const{object:e}=t,n=e.geometry;if(t.addStack(),(n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color)&&vD(e).append(),e.isSkinnedMesh===!0&&uD(e).append(),this.displacementMap){const s=Er("displacementMap","texture"),o=Er("displacementScale","float"),a=Er("displacementBias","float");zn.addAssign(fs.normalize().mul(s.x.mul(o).add(a)))}e.isBatchedMesh&&cD(e).append(),e.instanceMatrix&&e.instanceMatrix.isInstancedBufferAttribute===!0&&aD(e).append(),this.positionNode!==null&&zn.assign(this.positionNode);const i=yg();return t.context.vertex=t.removeStack(),t.context.mvp=i,i}setupDiffuseColor({object:t,geometry:e}){let n=this.colorNode?Qt(this.colorNode):RL;this.vertexColors===!0&&e.hasAttribute("color")&&(n=Qt(n.xyz.mul(js("color","vec3")),n.a)),t.instanceColor&&(n=od("vec3","vInstanceColor").mul(n)),t.isBatchedMesh&&t._colorsTexture&&(n=od("vec3","vBatchColor").mul(n)),Ee.assign(n);const i=this.opacityNode?J(this.opacityNode):lv;if(Ee.a.assign(Ee.a.mul(i)),this.alphaTestNode!==null||this.alphaTest>0){const s=this.alphaTestNode!==null?J(this.alphaTestNode):NL;Ee.a.lessThanEqual(s).discard()}this.transparent===!1&&this.blending===Rr&&this.alphaToCoverage===!1&&Ee.a.assign(1)}setupVariants(){}setupOutgoingLight(){return this.lights===!0?Q(0):Ee.rgb}setupNormal(){return this.normalNode?Q(this.normalNode):UL}setupEnvironment(){let t=null;return this.envNode?t=this.envNode:this.envMap&&(t=this.envMap.isCubeTexture?Er("envMap","cubeTexture"):Er("envMap","texture")),t}setupLightMap(t){let e=null;return t.material.lightMap&&(e=new CD(cv)),e}setupLights(t){const e=[],n=this.setupEnvironment(t);n&&n.isLightingNode&&e.push(n);const i=this.setupLightMap(t);if(i&&i.isLightingNode&&e.push(i),this.aoNode!==null||t.material.aoMap){const o=this.aoNode!==null?this.aoNode:nD;e.push(new wD(o))}let s=this.lightsNode||t.lightsNode;return e.length>0&&(s=AD([...s.getLights(),...e])),s}setupLightingModel(){}setupLighting(t){const{material:e}=t,{backdropNode:n,backdropAlphaNode:i,emissiveNode:s}=this,a=this.lights===!0||this.lightsNode!==null?this.setupLights(t):null;let l=this.setupOutgoingLight(t);if(a&&a.getScope().getLights().length>0){const c=this.setupLightingModel(t);l=RD(a,c,n,i)}else n!==null&&(l=Q(i!==null?Oe(l,n,i):n));return(s&&s.isNode===!0||e.emissive&&e.emissive.isColor===!0)&&(Xy.assign(Q(s||PL)),l=l.add(Xy)),l}setupOutput(t,e){if(this.fog===!0){const n=t.fogNode;n&&(e=Qt(n.mix(e.rgb,n.colorNode),e.a))}return e}setDefaultValues(t){for(const n in t){const i=t[n];this[n]===void 0&&(this[n]=i,i&&i.clone&&(this[n]=i.clone()))}const e=Object.getOwnPropertyDescriptors(t.constructor.prototype);for(const n in e)Object.getOwnPropertyDescriptor(this.constructor.prototype,n)===void 0&&e[n].get!==void 0&&Object.defineProperty(this.constructor.prototype,n,e[n])}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{},nodes:{}});const n=oi.prototype.toJSON.call(this,t),i=id(this);n.inputNodes={};for(const{property:o,childNode:a}of i)n.inputNodes[o]=a.toJSON(t).uuid;function s(o){const a=[];for(const l in o){const c=o[l];delete c.metadata,a.push(c)}return a}if(e){const o=s(t.textures),a=s(t.images),l=s(t.nodes);o.length>0&&(n.textures=o),a.length>0&&(n.images=a),l.length>0&&(n.nodes=l)}return n}copy(t){return this.lightsNode=t.lightsNode,this.envNode=t.envNode,this.colorNode=t.colorNode,this.normalNode=t.normalNode,this.opacityNode=t.opacityNode,this.backdropNode=t.backdropNode,this.backdropAlphaNode=t.backdropAlphaNode,this.alphaTestNode=t.alphaTestNode,this.positionNode=t.positionNode,this.depthNode=t.depthNode,this.shadowNode=t.shadowNode,this.shadowPositionNode=t.shadowPositionNode,this.outputNode=t.outputNode,this.mrtNode=t.mrtNode,this.fragmentNode=t.fragmentNode,this.vertexNode=t.vertexNode,super.copy(t)}}class Io{constructor(t,e){this.name=t,this.value=e,this.boundary=0,this.itemSize=0,this.offset=0}setValue(t){this.value=t}getValue(){return this.value}}class kD extends Io{constructor(t,e=0){super(t,e),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class VD extends Io{constructor(t,e=new Me){super(t,e),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class HD extends Io{constructor(t,e=new O){super(t,e),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class $D extends Io{constructor(t,e=new Ie){super(t,e),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class WD extends Io{constructor(t,e=new Ae){super(t,e),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class qD extends Io{constructor(t,e=new ss){super(t,e),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class XD extends Io{constructor(t,e=new an){super(t,e),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class YD extends kD{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class jD extends VD{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class KD extends HD{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class ZD extends $D{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class QD extends WD{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class JD extends qD{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class tU extends XD{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class eU extends Kt{static get type(){return"StackNode"}constructor(t=null){super(),this.nodes=[],this.outputNode=null,this.parent=t,this._currentCond=null,this.isStackNode=!0}getNodeType(t){return this.outputNode?this.outputNode.getNodeType(t):"void"}add(t){return this.nodes.push(t),this}If(t,e){const n=new Ru(e);return this._currentCond=ei(t,n),this.add(this._currentCond)}ElseIf(t,e){const n=new Ru(e),i=ei(t,n);return this._currentCond.elseNode=i,this._currentCond=i,this}Else(t){return this._currentCond.elseNode=new Ru(t),this}build(t,...e){const n=ET();rd(this);for(const i of this.nodes)i.build(t,"void");return rd(n),this.outputNode?this.outputNode.build(t,...e):super.build(t,...e)}else(...t){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...t)}elseif(...t){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...t)}}const tp=tt(eU);class nU extends hn{static get type(){return"EquirectUVNode"}constructor(t=ev){super("vec2"),this.dirNode=t}setup(){const t=this.dirNode,e=t.z.atan2(t.x).mul(1/(Math.PI*2)).add(.5),n=t.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return Tt(e,n)}}const xv=tt(nU);class Yc{constructor(t=new O(1/0,1/0,1/0),e=new O(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(Gi.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(Gi.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Gi.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const s=n.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let o=0,a=s.count;o<a;o++)t.isMesh===!0?t.getVertexPosition(o,Gi):Gi.fromBufferAttribute(s,o),Gi.applyMatrix4(t.matrixWorld),this.expandByPoint(Gi);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),Uh.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),Uh.copy(n.boundingBox)),Uh.applyMatrix4(t.matrixWorld),this.union(Uh)}const i=t.children;for(let s=0,o=i.length;s<o;s++)this.expandByObject(i[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Gi),Gi.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(kl),Bh.subVectors(this.max,kl),na.subVectors(t.a,kl),ia.subVectors(t.b,kl),sa.subVectors(t.c,kl),ur.subVectors(ia,na),dr.subVectors(sa,ia),Xr.subVectors(na,sa);let e=[0,-ur.z,ur.y,0,-dr.z,dr.y,0,-Xr.z,Xr.y,ur.z,0,-ur.x,dr.z,0,-dr.x,Xr.z,0,-Xr.x,-ur.y,ur.x,0,-dr.y,dr.x,0,-Xr.y,Xr.x,0];return!ep(e,na,ia,sa,Bh)||(e=[1,0,0,0,1,0,0,0,1],!ep(e,na,ia,sa,Bh))?!1:(Oh.crossVectors(ur,dr),e=[Oh.x,Oh.y,Oh.z],ep(e,na,ia,sa,Bh))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Gi).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Gi).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(Es[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Es[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Es[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Es[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Es[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Es[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Es[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Es[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Es),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Es=[new O,new O,new O,new O,new O,new O,new O,new O],Gi=new O,Uh=new Yc,na=new O,ia=new O,sa=new O,ur=new O,dr=new O,Xr=new O,kl=new O,Bh=new O,Oh=new O,Yr=new O;function ep(r,t,e,n,i){for(let s=0,o=r.length-3;s<=o;s+=3){Yr.fromArray(r,s);const a=i.x*Math.abs(Yr.x)+i.y*Math.abs(Yr.y)+i.z*Math.abs(Yr.z),l=t.dot(Yr),c=e.dot(Yr),h=n.dot(Yr);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const iU=new Yc,Vl=new O,np=new O;class Rx{constructor(t=new O,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):iU.setFromPoints(t).getCenter(n);let i=0;for(let s=0,o=t.length;s<o;s++)i=Math.max(i,n.distanceToSquared(t[s]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Vl.subVectors(t,this.center);const e=Vl.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),i=(n-this.radius)*.5;this.center.addScaledVector(Vl,i/n),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(np.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Vl.copy(t.center).add(np)),this.expandByPoint(Vl.copy(t.center).sub(np))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const As=new O,ip=new O,zh=new O,fr=new O,sp=new O,Gh=new O,rp=new O;class sU{constructor(t=new O,e=new O(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,As)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=As.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(As.copy(this.origin).addScaledVector(this.direction,e),As.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){ip.copy(t).add(e).multiplyScalar(.5),zh.copy(e).sub(t).normalize(),fr.copy(this.origin).sub(ip);const s=t.distanceTo(e)*.5,o=-this.direction.dot(zh),a=fr.dot(this.direction),l=-fr.dot(zh),c=fr.lengthSq(),h=Math.abs(1-o*o);let u,d,f,p;if(h>0)if(u=o*l-a,d=o*a-l,p=s*h,u>=0)if(d>=-p)if(d<=p){const x=1/h;u*=x,d*=x,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-p?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c):d<=p?(u=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,u),i&&i.copy(ip).addScaledVector(zh,d),f}intersectSphere(t,e){As.subVectors(t.center,this.origin);const n=As.dot(this.direction),i=As.dot(As)-n*n,s=t.radius*t.radius;if(i>s)return null;const o=Math.sqrt(s-i),a=n-o,l=n+o;return l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(n=(t.min.x-d.x)*c,i=(t.max.x-d.x)*c):(n=(t.max.x-d.x)*c,i=(t.min.x-d.x)*c),h>=0?(s=(t.min.y-d.y)*h,o=(t.max.y-d.y)*h):(s=(t.max.y-d.y)*h,o=(t.min.y-d.y)*h),n>o||s>i||((s>n||isNaN(n))&&(n=s),(o<i||isNaN(i))&&(i=o),u>=0?(a=(t.min.z-d.z)*u,l=(t.max.z-d.z)*u):(a=(t.max.z-d.z)*u,l=(t.min.z-d.z)*u),n>l||a>i)||((a>n||n!==n)&&(n=a),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,As)!==null}intersectTriangle(t,e,n,i,s){sp.subVectors(e,t),Gh.subVectors(n,t),rp.crossVectors(sp,Gh);let o=this.direction.dot(rp),a;if(o>0){if(i)return null;a=1}else if(o<0)a=-1,o=-o;else return null;fr.subVectors(this.origin,t);const l=a*this.direction.dot(Gh.crossVectors(fr,Gh));if(l<0)return null;const c=a*this.direction.dot(sp.cross(fr));if(c<0||l+c>o)return null;const h=-a*fr.dot(rp);return h<0?null:this.at(h/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}const a_=new an,l_=new Hc;let Ur=class yv{constructor(t=0,e=0,n=0,i=yv.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,s=i[0],o=i[4],a=i[8],l=i[1],c=i[5],h=i[9],u=i[2],d=i[6],f=i[10];switch(e){case"XYZ":this._y=Math.asin(bn(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-bn(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(bn(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-bn(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(bn(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-bn(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return a_.makeRotationFromQuaternion(t),this.setFromRotationMatrix(a_,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return l_.setFromEuler(this),this.setFromQuaternion(l_,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}};Ur.DEFAULT_ORDER="XYZ";let rU=class{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}},oU=0;const c_=new O,ra=new Hc,ws=new an,kh=new O,Hl=new O,aU=new O,lU=new Hc,h_=new O(1,0,0),u_=new O(0,1,0),d_=new O(0,0,1),f_={type:"added"},cU={type:"removed"},oa={type:"childadded",child:null},op={type:"childremoved",child:null};let ai=class Uu extends yl{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:oU++}),this.uuid=Hs(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Uu.DEFAULT_UP.clone();const t=new O,e=new Ur,n=new Hc,i=new O(1,1,1);function s(){n.setFromEuler(e,!1)}function o(){e.setFromQuaternion(n,void 0,!1)}e._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new an},normalMatrix:{value:new ss}}),this.matrix=new an,this.matrixWorld=new an,this.matrixAutoUpdate=Uu.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Uu.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new rU,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return ra.setFromAxisAngle(t,e),this.quaternion.multiply(ra),this}rotateOnWorldAxis(t,e){return ra.setFromAxisAngle(t,e),this.quaternion.premultiply(ra),this}rotateX(t){return this.rotateOnAxis(h_,t)}rotateY(t){return this.rotateOnAxis(u_,t)}rotateZ(t){return this.rotateOnAxis(d_,t)}translateOnAxis(t,e){return c_.copy(t).applyQuaternion(this.quaternion),this.position.add(c_.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(h_,t)}translateY(t){return this.translateOnAxis(u_,t)}translateZ(t){return this.translateOnAxis(d_,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(ws.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?kh.copy(t):kh.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Hl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ws.lookAt(Hl,kh,this.up):ws.lookAt(kh,Hl,this.up),this.quaternion.setFromRotationMatrix(ws),i&&(ws.extractRotation(i.matrixWorld),ra.setFromRotationMatrix(ws),this.quaternion.premultiply(ra.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(f_),oa.child=t,this.dispatchEvent(oa),oa.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(cU),op.child=t,this.dispatchEvent(op),op.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),ws.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),ws.multiply(t.parent.matrixWorld)),t.applyMatrix4(ws),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(f_),oa.child=t,this.dispatchEvent(oa),oa.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Hl,t,aU),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Hl,lU,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));i.material=a}else i.material=s(t.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];i.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(n.geometries=a),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f),p.length>0&&(n.nodes=p)}return n.object=i,n;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}};ai.DEFAULT_UP=new O(0,1,0);ai.DEFAULT_MATRIX_AUTO_UPDATE=!0;ai.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const ki=new O,Ns=new O,ap=new O,Rs=new O,aa=new O,la=new O,p_=new O,lp=new O,cp=new O,hp=new O,up=new Ie,dp=new Ie,fp=new Ie;class Xi{constructor(t=new O,e=new O,n=new O){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),ki.subVectors(t,e),i.cross(ki);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(t,e,n,i,s){ki.subVectors(i,e),Ns.subVectors(n,e),ap.subVectors(t,e);const o=ki.dot(ki),a=ki.dot(Ns),l=ki.dot(ap),c=Ns.dot(Ns),h=Ns.dot(ap),u=o*c-a*a;if(u===0)return s.set(0,0,0),null;const d=1/u,f=(c*l-a*h)*d,p=(o*h-a*l)*d;return s.set(1-f-p,p,f)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,Rs)===null?!1:Rs.x>=0&&Rs.y>=0&&Rs.x+Rs.y<=1}static getInterpolation(t,e,n,i,s,o,a,l){return this.getBarycoord(t,e,n,i,Rs)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,Rs.x),l.addScaledVector(o,Rs.y),l.addScaledVector(a,Rs.z),l)}static getInterpolatedAttribute(t,e,n,i,s,o){return up.setScalar(0),dp.setScalar(0),fp.setScalar(0),up.fromBufferAttribute(t,e),dp.fromBufferAttribute(t,n),fp.fromBufferAttribute(t,i),o.setScalar(0),o.addScaledVector(up,s.x),o.addScaledVector(dp,s.y),o.addScaledVector(fp,s.z),o}static isFrontFacing(t,e,n,i){return ki.subVectors(n,e),Ns.subVectors(t,e),ki.cross(Ns).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return ki.subVectors(this.c,this.b),Ns.subVectors(this.a,this.b),ki.cross(Ns).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Xi.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Xi.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,s){return Xi.getInterpolation(t,this.a,this.b,this.c,e,n,i,s)}containsPoint(t){return Xi.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Xi.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,s=this.c;let o,a;aa.subVectors(i,n),la.subVectors(s,n),lp.subVectors(t,n);const l=aa.dot(lp),c=la.dot(lp);if(l<=0&&c<=0)return e.copy(n);cp.subVectors(t,i);const h=aa.dot(cp),u=la.dot(cp);if(h>=0&&u<=h)return e.copy(i);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),e.copy(n).addScaledVector(aa,o);hp.subVectors(t,s);const f=aa.dot(hp),p=la.dot(hp);if(p>=0&&f<=p)return e.copy(s);const x=f*c-l*p;if(x<=0&&c>=0&&p<=0)return a=c/(c-p),e.copy(n).addScaledVector(la,a);const m=h*p-f*u;if(m<=0&&u-h>=0&&f-p>=0)return p_.subVectors(s,i),a=(u-h)/(u-h+(f-p)),e.copy(i).addScaledVector(p_,a);const g=1/(m+x+d);return o=x*g,a=d*g,e.copy(n).addScaledVector(aa,o).addScaledVector(la,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}class Od extends oi{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Ae(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ur,this.combine=bd,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}let hU=0;const Ai=new an,pp=new ai,ca=new O,xi=new Yc,$l=new Yc,xn=new O;class Lo extends yl{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:hU++}),this.uuid=Hs(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(pD(t)?xT:gT)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new ss().getNormalMatrix(t);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(t),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ai.makeRotationFromQuaternion(t),this.applyMatrix4(Ai),this}rotateX(t){return Ai.makeRotationX(t),this.applyMatrix4(Ai),this}rotateY(t){return Ai.makeRotationY(t),this.applyMatrix4(Ai),this}rotateZ(t){return Ai.makeRotationZ(t),this.applyMatrix4(Ai),this}translate(t,e,n){return Ai.makeTranslation(t,e,n),this.applyMatrix4(Ai),this}scale(t,e,n){return Ai.makeScale(t,e,n),this.applyMatrix4(Ai),this}lookAt(t){return pp.lookAt(t),pp.updateMatrix(),this.applyMatrix4(pp.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(ca).negate(),this.translate(ca.x,ca.y,ca.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const s=t[n];e.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new qs(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Yc);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new O(-1/0,-1/0,-1/0),new O(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,i=e.length;n<i;n++){const s=e[n];xi.setFromBufferAttribute(s),this.morphTargetsRelative?(xn.addVectors(this.boundingBox.min,xi.min),this.boundingBox.expandByPoint(xn),xn.addVectors(this.boundingBox.max,xi.max),this.boundingBox.expandByPoint(xn)):(this.boundingBox.expandByPoint(xi.min),this.boundingBox.expandByPoint(xi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Rx);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new O,1/0);return}if(t){const n=this.boundingSphere.center;if(xi.setFromBufferAttribute(t),e)for(let s=0,o=e.length;s<o;s++){const a=e[s];$l.setFromBufferAttribute(a),this.morphTargetsRelative?(xn.addVectors(xi.min,$l.min),xi.expandByPoint(xn),xn.addVectors(xi.max,$l.max),xi.expandByPoint(xn)):(xi.expandByPoint($l.min),xi.expandByPoint($l.max))}xi.getCenter(n);let i=0;for(let s=0,o=t.count;s<o;s++)xn.fromBufferAttribute(t,s),i=Math.max(i,n.distanceToSquared(xn));if(e)for(let s=0,o=e.length;s<o;s++){const a=e[s],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)xn.fromBufferAttribute(a,c),l&&(ca.fromBufferAttribute(t,c),xn.add(ca)),i=Math.max(i,n.distanceToSquared(xn))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position,i=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Pi(new Float32Array(4*n.count),4));const o=this.getAttribute("tangent"),a=[],l=[];for(let R=0;R<n.count;R++)a[R]=new O,l[R]=new O;const c=new O,h=new O,u=new O,d=new Me,f=new Me,p=new Me,x=new O,m=new O;function g(R,$,M){c.fromBufferAttribute(n,R),h.fromBufferAttribute(n,$),u.fromBufferAttribute(n,M),d.fromBufferAttribute(s,R),f.fromBufferAttribute(s,$),p.fromBufferAttribute(s,M),h.sub(c),u.sub(c),f.sub(d),p.sub(d);const b=1/(f.x*p.y-p.x*f.y);isFinite(b)&&(x.copy(h).multiplyScalar(p.y).addScaledVector(u,-f.y).multiplyScalar(b),m.copy(u).multiplyScalar(f.x).addScaledVector(h,-p.x).multiplyScalar(b),a[R].add(x),a[$].add(x),a[M].add(x),l[R].add(m),l[$].add(m),l[M].add(m))}let _=this.groups;_.length===0&&(_=[{start:0,count:t.count}]);for(let R=0,$=_.length;R<$;++R){const M=_[R],b=M.start,k=M.count;for(let z=b,Z=b+k;z<Z;z+=3)g(t.getX(z+0),t.getX(z+1),t.getX(z+2))}const y=new O,S=new O,w=new O,A=new O;function T(R){w.fromBufferAttribute(i,R),A.copy(w);const $=a[R];y.copy($),y.sub(w.multiplyScalar(w.dot($))).normalize(),S.crossVectors(A,$);const b=S.dot(l[R])<0?-1:1;o.setXYZW(R,y.x,y.y,y.z,b)}for(let R=0,$=_.length;R<$;++R){const M=_[R],b=M.start,k=M.count;for(let z=b,Z=b+k;z<Z;z+=3)T(t.getX(z+0)),T(t.getX(z+1)),T(t.getX(z+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Pi(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let d=0,f=n.count;d<f;d++)n.setXYZ(d,0,0,0);const i=new O,s=new O,o=new O,a=new O,l=new O,c=new O,h=new O,u=new O;if(t)for(let d=0,f=t.count;d<f;d+=3){const p=t.getX(d+0),x=t.getX(d+1),m=t.getX(d+2);i.fromBufferAttribute(e,p),s.fromBufferAttribute(e,x),o.fromBufferAttribute(e,m),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),a.fromBufferAttribute(n,p),l.fromBufferAttribute(n,x),c.fromBufferAttribute(n,m),a.add(h),l.add(h),c.add(h),n.setXYZ(p,a.x,a.y,a.z),n.setXYZ(x,l.x,l.y,l.z),n.setXYZ(m,c.x,c.y,c.z)}else for(let d=0,f=e.count;d<f;d+=3)i.fromBufferAttribute(e,d+0),s.fromBufferAttribute(e,d+1),o.fromBufferAttribute(e,d+2),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),n.setXYZ(d+0,h.x,h.y,h.z),n.setXYZ(d+1,h.x,h.y,h.z),n.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)xn.fromBufferAttribute(t,e),xn.normalize(),t.setXYZ(e,xn.x,xn.y,xn.z)}toNonIndexed(){function t(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let f=0,p=0;for(let x=0,m=l.length;x<m;x++){a.isInterleavedBufferAttribute?f=l[x]*a.data.stride+a.offset:f=l[x]*h;for(let g=0;g<h;g++)d[p++]=c[f++]}return new Pi(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Lo,n=this.index.array,i=this.attributes;for(const a in i){const l=i[a],c=t(l,n);e.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[],c=s[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],f=t(d,n);l.push(f)}e.morphAttributes[a]=l}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const l in n){const c=n[l];t.data.attributes[l]=c.toJSON(t.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u];h.push(f.toJSON(t.data))}h.length>0&&(i[l]=h,s=!0)}s&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone(e));const i=t.attributes;for(const c in i){const h=i[c];this.setAttribute(c,h.clone(e))}const s=t.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,f=u.length;d<f;d++)h.push(u[d].clone(e));this.morphAttributes[c]=h}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const m_=new an,jr=new sU,Vh=new Rx,g_=new O,Hh=new O,$h=new O,Wh=new O,mp=new O,qh=new O,x_=new O,Xh=new O;class Eo extends ai{constructor(t=new Lo,e=new Od){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,o=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const a=this.morphTargetInfluences;if(s&&a){qh.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const h=a[l],u=s[l];h!==0&&(mp.fromBufferAttribute(u,t),o?qh.addScaledVector(mp,h):qh.addScaledVector(mp.sub(e),h))}e.add(qh)}return e}raycast(t,e){const n=this.geometry,i=this.material,s=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),Vh.copy(n.boundingSphere),Vh.applyMatrix4(s),jr.copy(t.ray).recast(t.near),!(Vh.containsPoint(jr.origin)===!1&&(jr.intersectSphere(Vh,g_)===null||jr.origin.distanceToSquared(g_)>(t.far-t.near)**2))&&(m_.copy(s).invert(),jr.copy(t.ray).applyMatrix4(m_),!(n.boundingBox!==null&&jr.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,jr)))}_computeIntersections(t,e,n){let i;const s=this.geometry,o=this.material,a=s.index,l=s.attributes.position,c=s.attributes.uv,h=s.attributes.uv1,u=s.attributes.normal,d=s.groups,f=s.drawRange;if(a!==null)if(Array.isArray(o))for(let p=0,x=d.length;p<x;p++){const m=d[p],g=o[m.materialIndex],_=Math.max(m.start,f.start),y=Math.min(a.count,Math.min(m.start+m.count,f.start+f.count));for(let S=_,w=y;S<w;S+=3){const A=a.getX(S),T=a.getX(S+1),R=a.getX(S+2);i=Yh(this,g,t,n,c,h,u,A,T,R),i&&(i.faceIndex=Math.floor(S/3),i.face.materialIndex=m.materialIndex,e.push(i))}}else{const p=Math.max(0,f.start),x=Math.min(a.count,f.start+f.count);for(let m=p,g=x;m<g;m+=3){const _=a.getX(m),y=a.getX(m+1),S=a.getX(m+2);i=Yh(this,o,t,n,c,h,u,_,y,S),i&&(i.faceIndex=Math.floor(m/3),e.push(i))}}else if(l!==void 0)if(Array.isArray(o))for(let p=0,x=d.length;p<x;p++){const m=d[p],g=o[m.materialIndex],_=Math.max(m.start,f.start),y=Math.min(l.count,Math.min(m.start+m.count,f.start+f.count));for(let S=_,w=y;S<w;S+=3){const A=S,T=S+1,R=S+2;i=Yh(this,g,t,n,c,h,u,A,T,R),i&&(i.faceIndex=Math.floor(S/3),i.face.materialIndex=m.materialIndex,e.push(i))}}else{const p=Math.max(0,f.start),x=Math.min(l.count,f.start+f.count);for(let m=p,g=x;m<g;m+=3){const _=m,y=m+1,S=m+2;i=Yh(this,o,t,n,c,h,u,_,y,S),i&&(i.faceIndex=Math.floor(m/3),e.push(i))}}}}function uU(r,t,e,n,i,s,o,a){let l;if(t.side===Zs?l=n.intersectTriangle(o,s,i,!0,a):l=n.intersectTriangle(i,s,o,t.side===vc,a),l===null)return null;Xh.copy(a),Xh.applyMatrix4(r.matrixWorld);const c=e.ray.origin.distanceTo(Xh);return c<e.near||c>e.far?null:{distance:c,point:Xh.clone(),object:r}}function Yh(r,t,e,n,i,s,o,a,l,c){r.getVertexPosition(a,Hh),r.getVertexPosition(l,$h),r.getVertexPosition(c,Wh);const h=uU(r,t,e,n,Hh,$h,Wh,x_);if(h){const u=new O;Xi.getBarycoord(x_,Hh,$h,Wh,u),i&&(h.uv=Xi.getInterpolatedAttribute(i,a,l,c,u,new Me)),s&&(h.uv1=Xi.getInterpolatedAttribute(s,a,l,c,u,new Me)),o&&(h.normal=Xi.getInterpolatedAttribute(o,a,l,c,u,new O),h.normal.dot(n.direction)>0&&h.normal.multiplyScalar(-1));const d={a,b:l,c,normal:new O,materialIndex:0};Xi.getNormal(Hh,$h,Wh,d.normal),h.face=d,h.barycoord=u}return h}class jc extends Lo{constructor(t=1,e=1,n=1,i=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:s,depthSegments:o};const a=this;i=Math.floor(i),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;p("z","y","x",-1,-1,n,e,t,o,s,0),p("z","y","x",1,-1,n,e,-t,o,s,1),p("x","z","y",1,1,t,n,e,i,o,2),p("x","z","y",1,-1,t,n,-e,i,o,3),p("x","y","z",1,-1,t,e,n,i,s,4),p("x","y","z",-1,-1,t,e,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new qs(c,3)),this.setAttribute("normal",new qs(h,3)),this.setAttribute("uv",new qs(u,2));function p(x,m,g,_,y,S,w,A,T,R,$){const M=S/T,b=w/R,k=S/2,z=w/2,Z=A/2,nt=T+1,q=R+1;let rt=0,W=0;const dt=new O;for(let ft=0;ft<q;ft++){const yt=ft*b-z;for(let ie=0;ie<nt;ie++){const he=ie*M-k;dt[x]=he*_,dt[m]=yt*y,dt[g]=Z,c.push(dt.x,dt.y,dt.z),dt[x]=0,dt[m]=0,dt[g]=A>0?1:-1,h.push(dt.x,dt.y,dt.z),u.push(ie/T),u.push(1-ft/R),rt+=1}}for(let ft=0;ft<R;ft++)for(let yt=0;yt<T;yt++){const ie=d+yt+nt*ft,he=d+yt+nt*(ft+1),et=d+(yt+1)+nt*(ft+1),ht=d+(yt+1)+nt*ft;l.push(ie,he,ht),l.push(he,et,ht),W+=6}a.addGroup(f,W,$),f+=W,d+=rt}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new jc(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function _v(r){const t={};for(const e in r){t[e]={};for(const n in r[e]){const i=r[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function dU(r){const t=[];for(let e=0;e<r.length;e++)t.push(r[e].clone());return t}const fU=`
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`,pU=`
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`;class mU extends oi{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=fU,this.fragmentShader=pU,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=_v(t.uniforms),this.uniformsGroups=dU(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const o=this.uniforms[i].value;o&&o.isTexture?e.uniforms[i]={type:"t",value:o.toJSON(t).uuid}:o&&o.isColor?e.uniforms[i]={type:"c",value:o.getHex()}:o&&o.isVector2?e.uniforms[i]={type:"v2",value:o.toArray()}:o&&o.isVector3?e.uniforms[i]={type:"v3",value:o.toArray()}:o&&o.isVector4?e.uniforms[i]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?e.uniforms[i]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?e.uniforms[i]={type:"m4",value:o.toArray()}:e.uniforms[i]={value:o}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}let Tl=class extends yl{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Ie(0,0,t,e),this.scissorTest=!1,this.viewport=new Ie(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:si,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const s=new rs(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let n=0,i=t.textures.length;n<i;n++)this.textures[n]=t.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new hv(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}};class gU extends Tl{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class Mv extends ai{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new an,this.projectionMatrix=new an,this.projectionMatrixInverse=new an,this.coordinateSystem=Ki}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const pr=new O,y_=new Me,__=new Me;class Bs extends Mv{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=Tc*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(fc*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return Tc*2*Math.atan(Math.tan(fc*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){pr.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(pr.x,pr.y).multiplyScalar(-t/pr.z),pr.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(pr.x,pr.y).multiplyScalar(-t/pr.z)}getViewSize(t,e){return this.getViewBounds(t,y_,__),e.subVectors(__,y_)}setViewOffset(t,e,n,i,s,o){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(fc*.5*this.fov)/this.zoom,n=2*e,i=this.aspect*n,s=-.5*i;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*i/l,e-=o.offsetY*n/c,i*=o.width/l,n*=o.height/c}const a=this.filmOffset;a!==0&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const ha=-90,ua=1;class Sv extends ai{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Bs(ha,ua,t,e);i.layers=this.layers,this.add(i);const s=new Bs(ha,ua,t,e);s.layers=this.layers,this.add(s);const o=new Bs(ha,ua,t,e);o.layers=this.layers,this.add(o);const a=new Bs(ha,ua,t,e);a.layers=this.layers,this.add(a);const l=new Bs(ha,ua,t,e);l.layers=this.layers,this.add(l);const c=new Bs(ha,ua,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,s,o,a,l]=e;for(const c of e)this.remove(c);if(t===Ki)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===To)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,o,a,l,c,h]=this.children,u=t.getRenderTarget(),d=t.getActiveCubeFace(),f=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const x=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,s),t.setRenderTarget(n,1,i),t.render(e,o),t.setRenderTarget(n,2,i),t.render(e,a),t.setRenderTarget(n,3,i),t.render(e,l),t.setRenderTarget(n,4,i),t.render(e,c),n.texture.generateMipmaps=x,t.setRenderTarget(n,5,i),t.render(e,h),t.setRenderTarget(u,d,f),t.xr.enabled=p,n.texture.needsPMREMUpdate=!0}}class Cx extends rs{constructor(t,e,n,i,s,o,a,l,c,h){t=t!==void 0?t:[],e=e!==void 0?e:Mo,super(t,e,n,i,s,o,a,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class xU extends gU{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new Cx(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:si}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new jc(5,5,5),s=new mU({name:"CubemapFromEquirect",uniforms:_v(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Zs,blending:il});s.uniforms.tEquirect.value=e;const o=new Eo(i,s),a=e.minFilter;return e.minFilter===$s&&(e.minFilter=si),new Sv(1,10,this).update(t,o),e.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,i){const s=t.getRenderTarget();for(let o=0;o<6;o++)t.setRenderTarget(this,o),t.clear(e,n,i);t.setRenderTarget(s)}}class Tv extends ai{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Ur,this.environmentIntensity=1,this.environmentRotation=new Ur,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class vv extends xU{constructor(t=1,e={}){super(t,e),this.isCubeRenderTarget=!0}fromEquirectangularTexture(t,e){const n=e.minFilter,i=e.generateMipmaps;e.generateMipmaps=!0,this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const s=new jc(5,5,5),o=xv(ev),a=new ln;a.colorNode=Xe(e,o,0),a.side=Zs,a.blending=il;const l=new Eo(s,a),c=new Tv;c.add(l),e.minFilter===$s&&(e.minFilter=si);const h=new Sv(1,10,this),u=t.getMRT();return t.setMRT(null),h.update(t,c),t.setMRT(u),e.minFilter=n,e.currentGenerateMipmaps=i,l.geometry.dispose(),l.material.dispose(),this}}const M_=J(1),Tg=J(-2),jh=J(.8),gp=J(-1),Kh=J(.4),xp=J(2),Zh=J(.305),yp=J(3),S_=J(.21),yU=J(4),T_=J(4),_U=J(16),MU=Mt(([r])=>{const t=Q(ls(r)).toVar(),e=J(-1).toVar();return On(t.x.greaterThan(t.z),()=>{On(t.x.greaterThan(t.y),()=>{e.assign(ei(r.x.greaterThan(0),0,3))}).Else(()=>{e.assign(ei(r.y.greaterThan(0),1,4))})}).Else(()=>{On(t.z.greaterThan(t.y),()=>{e.assign(ei(r.z.greaterThan(0),2,5))}).Else(()=>{e.assign(ei(r.y.greaterThan(0),1,4))})}),e}).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),SU=Mt(([r,t])=>{const e=Tt().toVar();return On(t.equal(0),()=>{e.assign(Tt(r.z,r.y).div(ls(r.x)))}).ElseIf(t.equal(1),()=>{e.assign(Tt(r.x.negate(),r.z.negate()).div(ls(r.y)))}).ElseIf(t.equal(2),()=>{e.assign(Tt(r.x.negate(),r.y).div(ls(r.z)))}).ElseIf(t.equal(3),()=>{e.assign(Tt(r.z.negate(),r.y).div(ls(r.x)))}).ElseIf(t.equal(4),()=>{e.assign(Tt(r.x.negate(),r.z).div(ls(r.y)))}).Else(()=>{e.assign(Tt(r.x,r.y).div(ls(r.z)))}),Ce(.5,e.add(1))}).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),TU=Mt(([r])=>{const t=J(0).toVar();return On(r.greaterThanEqual(jh),()=>{t.assign(M_.sub(r).mul(gp.sub(Tg)).div(M_.sub(jh)).add(Tg))}).ElseIf(r.greaterThanEqual(Kh),()=>{t.assign(jh.sub(r).mul(xp.sub(gp)).div(jh.sub(Kh)).add(gp))}).ElseIf(r.greaterThanEqual(Zh),()=>{t.assign(Kh.sub(r).mul(yp.sub(xp)).div(Kh.sub(Zh)).add(xp))}).ElseIf(r.greaterThanEqual(S_),()=>{t.assign(Zh.sub(r).mul(yU.sub(yp)).div(Zh.sub(S_)).add(yp))}).Else(()=>{t.assign(J(-2).mul(Nd(Ce(1.16,r))))}),t}).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),vU=Mt(([r,t])=>{const e=r.toVar();e.assign(Ce(2,e).sub(1));const n=Q(e,1).toVar();return On(t.equal(0),()=>{n.assign(n.zyx)}).ElseIf(t.equal(1),()=>{n.assign(n.xzy),n.xz.mulAssign(-1)}).ElseIf(t.equal(2),()=>{n.x.mulAssign(-1)}).ElseIf(t.equal(3),()=>{n.assign(n.zyx),n.xz.mulAssign(-1)}).ElseIf(t.equal(4),()=>{n.assign(n.xzy),n.xy.mulAssign(-1)}).ElseIf(t.equal(5),()=>{n.z.mulAssign(-1)}),n}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),bU=Mt(([r,t,e,n,i,s])=>{const o=J(e),a=Q(t),l=Dr(TU(o),Tg,s),c=Ml(l),h=Rd(l),u=Q(vg(r,a,h,n,i,s)).toVar();return On(c.notEqual(0),()=>{const d=Q(vg(r,a,h.add(1),n,i,s)).toVar();u.assign(Oe(u,d,c))}),u}),vg=Mt(([r,t,e,n,i,s])=>{const o=J(e).toVar(),a=Q(t),l=J(MU(a)).toVar(),c=J(es(T_.sub(o),0)).toVar();o.assign(es(o,T_));const h=J(mg(o)).toVar(),u=Tt(SU(a,l).mul(h.sub(2)).add(1)).toVar();return On(l.greaterThan(2),()=>{u.y.addAssign(h),l.subAssign(3)}),u.x.addAssign(l.mul(h)),u.x.addAssign(c.mul(Ce(3,_U))),u.y.addAssign(Ce(4,mg(s).sub(h))),u.x.mulAssign(n),u.y.mulAssign(i),r.uv(u).grad(Tt(),Tt())}),_p=Mt(({envMap:r,mipInt:t,outputDirection:e,theta:n,axis:i,CUBEUV_TEXEL_WIDTH:s,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const l=Sr(n),c=e.mul(l).add(i.cross(e).mul(Us(n))).add(i.mul(i.dot(e).mul(l.oneMinus())));return vg(r,c,t,s,o,a)}),EU=Mt(({n:r,latitudinal:t,poleAxis:e,outputDirection:n,weights:i,samples:s,dTheta:o,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u})=>{const d=Q(ei(t,e,HT(e,n))).toVar();On(UT(d.equals(Q(0))),()=>{d.assign(Q(n.z,0,n.x.negate()))}),d.assign(Ac(d));const f=Q().toVar();return f.addAssign(i.element(qe(0)).mul(_p({theta:0,axis:d,outputDirection:n,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u}))),Vs({start:qe(1),end:r},({i:p})=>{On(p.greaterThanEqual(s),()=>{fD()});const x=J(o.mul(J(p))).toVar();f.addAssign(i.element(p).mul(_p({theta:x.mul(-1),axis:d,outputDirection:n,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u}))),f.addAssign(i.element(p).mul(_p({theta:x,axis:d,outputDirection:n,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u})))}),Qt(f,1)});class Px extends Mv{constructor(t=-1,e=1,n=1,i=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-t,o=n+t,a=i+e,l=i-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,o=s+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}const La=4,v_=[.125,.215,.35,.446,.526,.582],lo=20,Mp=new Px(-1,1,1,-1,0,1),AU=new Bs(90,1),b_=new Ae;let Sp=null,Tp=0,vp=0;const ro=(1+Math.sqrt(5))/2,da=1/ro,E_=[new O(-ro,da,0),new O(ro,da,0),new O(-da,0,ro),new O(da,0,ro),new O(0,ro,-da),new O(0,ro,da),new O(-1,1,-1),new O(1,1,-1),new O(-1,1,1),new O(1,1,1)],wU=[3,1,5,0,4,2],bp=vU(Id(),js("faceIndex")).normalize(),Fx=Q(bp.x,bp.y.negate(),bp.z);class NU{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}fromScene(t,e=0,n=.1,i=100){Sp=this._renderer.getRenderTarget(),Tp=this._renderer.getActiveCubeFace(),vp=this._renderer.getActiveMipmapLevel(),this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(t,n,i,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}async compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=w_(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=N_(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose(),this._backgroundBox!==null&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Sp,Tp,vp),t.scissorTest=!1,Qh(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===Mo||t.mapping===sl?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Sp=this._renderer.getRenderTarget(),Tp=this._renderer.getActiveCubeFace(),vp=this._renderer.getActiveMipmapLevel();const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:si,minFilter:si,generateMipmaps:!1,type:Ws,format:gl,colorSpace:Ci},i=A_(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=A_(t,e,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=RU(s)),this._blurMaterial=CU(s,t,e)}return i}async _compileMaterial(t){const e=new Eo(this._lodPlanes[0],t);await this._renderer.compile(e,Mp)}_sceneToCubeUV(t,e,n,i){const s=AU;s.near=e,s.far=n;const o=[-1,1,-1,-1,-1,-1],a=[1,1,1,-1,-1,-1],l=this._renderer,c=l.autoClear;l.getClearColor(b_),l.autoClear=!1;let h=this._backgroundBox;if(h===null){const f=new Od({name:"PMREM.Background",side:Zs,depthWrite:!1,depthTest:!1});h=new Eo(new jc,f)}let u=!1;const d=t.background;d?d.isColor&&(h.material.color.copy(d),t.background=null,u=!0):(h.material.color.copy(b_),u=!0),l.setRenderTarget(i),l.clear(),u&&l.render(h,s);for(let f=0;f<6;f++){const p=f%3;p===0?(s.up.set(0,o[f],0),s.lookAt(a[f],0,0)):p===1?(s.up.set(0,0,o[f]),s.lookAt(0,a[f],0)):(s.up.set(0,o[f],0),s.lookAt(0,0,a[f]));const x=this._cubeSize;Qh(i,p*x,f>2?x:0,x,x),l.render(t,s)}l.autoClear=c,t.background=d}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===Mo||t.mapping===sl;i?this._cubemapMaterial===null&&(this._cubemapMaterial=w_(t)):this._equirectMaterial===null&&(this._equirectMaterial=N_(t));const s=i?this._cubemapMaterial:this._equirectMaterial;s.fragmentNode.value=t;const o=this._lodMeshes[0];o.material=s;const a=this._cubeSize;Qh(e,0,0,3*a,2*a),n.setRenderTarget(e),n.render(o,Mp)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const i=this._lodPlanes.length;for(let s=1;s<i;s++){const o=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),a=E_[(i-s-1)%E_.length];this._blur(t,s-1,s,o,a)}e.autoClear=n}_blur(t,e,n,i,s){const o=this._pingPongRenderTarget;this._halfBlur(t,o,e,n,i,"latitudinal",s),this._halfBlur(o,t,n,n,i,"longitudinal",s)}_halfBlur(t,e,n,i,s,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=this._lodMeshes[i];u.material=c;const d=c.uniforms,f=this._sizeLods[n]-1,p=isFinite(s)?Math.PI/(2*f):2*Math.PI/(2*lo-1),x=s/p,m=isFinite(s)?1+Math.floor(h*x):lo;m>lo&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${lo}`);const g=[];let _=0;for(let T=0;T<lo;++T){const R=T/x,$=Math.exp(-R*R/2);g.push($),T===0?_+=$:T<m&&(_+=2*$)}for(let T=0;T<g.length;T++)g[T]=g[T]/_;t.texture.frame=(t.texture.frame||0)+1,d.envMap.value=t.texture,d.samples.value=m,d.weights.array=g,d.latitudinal.value=o==="latitudinal"?1:0,a&&(d.poleAxis.value=a);const{_lodMax:y}=this;d.dTheta.value=p,d.mipInt.value=y-n;const S=this._sizeLods[i],w=3*S*(i>y-La?i-y+La:0),A=4*(this._cubeSize-S);Qh(e,w,A,3*S,2*S),l.setRenderTarget(e),l.render(u,Mp)}}function RU(r){const t=[],e=[],n=[],i=[];let s=r;const o=r-La+1+v_.length;for(let a=0;a<o;a++){const l=Math.pow(2,s);e.push(l);let c=1/l;a>r-La?c=v_[a-r+La-1]:a===0&&(c=0),n.push(c);const h=1/(l-2),u=-h,d=1+h,f=[u,u,d,u,d,d,u,u,d,d,u,d],p=6,x=6,m=3,g=2,_=1,y=new Float32Array(m*x*p),S=new Float32Array(g*x*p),w=new Float32Array(_*x*p);for(let T=0;T<p;T++){const R=T%3*2/3-1,$=T>2?0:-1,M=[R,$,0,R+2/3,$,0,R+2/3,$+1,0,R,$,0,R+2/3,$+1,0,R,$+1,0],b=wU[T];y.set(M,m*x*b),S.set(f,g*x*b);const k=[b,b,b,b,b,b];w.set(k,_*x*b)}const A=new Lo;A.setAttribute("position",new Pi(y,m)),A.setAttribute("uv",new Pi(S,g)),A.setAttribute("faceIndex",new Pi(w,_)),t.push(A),i.push(new Eo(A,null)),s>La&&s--}return{lodPlanes:t,sizeLods:e,sigmas:n,lodMeshes:i}}function A_(r,t,e){const n=new Tl(r,t,e);return n.texture.mapping=Gm,n.texture.name="PMREM.cubeUv",n.texture.isPMREMTexture=!0,n.scissorTest=!0,n}function Qh(r,t,e,n,i){r.viewport.set(t,e,n,i),r.scissor.set(t,e,n,i)}function Ix(r){const t=new ln;return t.depthTest=!1,t.depthWrite=!1,t.blending=il,t.name=`PMREM_${r}`,t}function CU(r,t,e){const n=Rc(new Array(lo).fill(0)),i=Jt(new O(0,1,0)),s=Jt(0),o=J(lo),a=Jt(0),l=Jt(1),c=Xe(null),h=Jt(0),u=J(1/t),d=J(1/e),f=J(r),p={n:o,latitudinal:a,weights:n,poleAxis:i,outputDirection:Fx,dTheta:s,samples:l,envMap:c,mipInt:h,CUBEUV_TEXEL_WIDTH:u,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:f},x=Ix("blur");return x.uniforms=p,x.fragmentNode=EU({...p,latitudinal:a.equal(1)}),x}function w_(r){const t=Ix("cubemap");return t.fragmentNode=Nc(r,Fx),t}function N_(r){const t=Ix("equirect");return t.fragmentNode=Xe(r,xv(Fx),0),t}let PU=0;class bg{constructor(t="",e=[],n=0,i=[]){this.name=t,this.bindings=e,this.index=n,this.bindingsReference=i,this.id=PU++}}const R_=new WeakMap,FU=new Map([[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),IU=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),Jh=r=>(r=Number(r),r+(r%1?"":".0"));class bv{constructor(t,e,n){this.object=t,this.material=t&&t.material||null,this.geometry=t&&t.geometry||null,this.renderer=e,this.parser=n,this.scene=null,this.camera=null,this.nodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.monitor=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=tp(),this.stacks=[],this.tab="	",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new Yf,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let t=R_.get(this.renderer);return t===void 0&&(t=new Ys,R_.set(this.renderer,t)),t}createRenderTarget(t,e,n){return new Tl(t,e,n)}createCubeRenderTarget(t,e){return new vv(t,e)}createPMREMGenerator(){return new NU(this.renderer)}includes(t){return this.nodes.includes(t)}_getBindGroup(t,e){const n=this.getBindGroupsCache(),i=[];let s=!0;for(const a of e)i.push(a),s=s&&a.groupNode.shared!==!0;let o;return s?(o=n.get(i),o===void 0&&(o=new bg(t,i,this.bindingsIndexes[t].group,i),n.set(i,o))):o=new bg(t,i,this.bindingsIndexes[t].group,i),o}getBindGroupArray(t,e){const n=this.bindings[e];let i=n[t];return i===void 0&&(this.bindingsIndexes[t]===void 0&&(this.bindingsIndexes[t]={binding:0,group:Object.keys(this.bindingsIndexes).length}),n[t]=i=[]),i}getBindings(){let t=this.bindGroups;if(t===null){const e={},n=this.bindings;for(const i of ky)for(const s in n[i]){const o=n[i][s];(e[s]||(e[s]=[])).push(...o)}t=[];for(const i in e){const s=e[i],o=this._getBindGroup(i,s);t.push(o)}this.bindGroups=t}return t}sortBindingGroups(){const t=this.getBindings();t.sort((e,n)=>e.bindings[0].groupNode.order-n.bindings[0].groupNode.order);for(let e=0;e<t.length;e++){const n=t[e];this.bindingsIndexes[n.name].group=e,n.index=e}}setHashNode(t,e){this.hashNodes[e]=t}addNode(t){this.nodes.includes(t)===!1&&(this.nodes.push(t),this.setHashNode(t,t.getHash(this)))}buildUpdateNodes(){for(const t of this.nodes){const e=t.getUpdateType(),n=t.getUpdateBeforeType(),i=t.getUpdateAfterType();e!==ne.NONE&&this.updateNodes.push(t.getSelf()),n!==ne.NONE&&this.updateBeforeNodes.push(t.getSelf()),i!==ne.NONE&&this.updateAfterNodes.push(t.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(t){return t.magFilter===si||t.magFilter===Vm||t.magFilter===Ha||t.magFilter===$s||t.minFilter===si||t.minFilter===Vm||t.minFilter===Ha||t.minFilter===$s}addChain(t){this.chaining.push(t)}removeChain(t){if(this.chaining.pop()!==t)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(t){return t}getNodeFromHash(t){return this.hashNodes[t]}addFlow(t,e){return this.flowNodes[t].push(e),e}setContext(t){this.context=t}getContext(){return this.context}getSharedContext(){return{...this.context},this.context}setCache(t){this.cache=t}getCache(){return this.cache}getCacheFromNode(t,e=!0){const n=this.getDataFromNode(t);return n.cache===void 0&&(n.cache=new Yf(e?this.getCache():null)),n.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(t){const e=this.getDataFromNode(t);return e.usageCount=e.usageCount===void 0?1:e.usageCount+1,e.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateConst(t,e=null){if(e===null&&(t==="float"||t==="int"||t==="uint"?e=0:t==="bool"?e=!1:t==="color"?e=new Ae:t==="vec2"?e=new Me:t==="vec3"?e=new O:t==="vec4"&&(e=new Ie)),t==="float")return Jh(e);if(t==="int")return`${Math.round(e)}`;if(t==="uint")return e>=0?`${Math.round(e)}u`:"0u";if(t==="bool")return e?"true":"false";if(t==="color")return`${this.getType("vec3")}( ${Jh(e.r)}, ${Jh(e.g)}, ${Jh(e.b)} )`;const n=this.getTypeLength(t),i=this.getComponentType(t),s=o=>this.generateConst(i,o);if(n===2)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)} )`;if(n===3)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)}, ${s(e.z)} )`;if(n===4)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)}, ${s(e.z)}, ${s(e.w)} )`;if(n>4&&e&&(e.isMatrix3||e.isMatrix4))return`${this.getType(t)}( ${e.elements.map(s).join(", ")} )`;if(n>4)return`${this.getType(t)}()`;throw new Error(`NodeBuilder: Type '${t}' not found in generate constant attempt.`)}getType(t){return t==="color"?"vec3":t}hasGeometryAttribute(t){return this.geometry&&this.geometry.getAttribute(t)!==void 0}getAttribute(t,e){const n=this.attributes;for(const s of n)if(s.name===t)return s;const i=new Qy(t,e);return n.push(i),i}getPropertyName(t){return t.name}isVector(t){return/vec\d/.test(t)}isMatrix(t){return/mat\d/.test(t)}isReference(t){return t==="void"||t==="property"||t==="sampler"||t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="depthTexture"||t==="texture3D"}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(t){const e=t.type;if(t.isDataTexture){if(e===Xn)return"int";if(e===vn)return"uint"}return"float"}getElementType(t){return t==="mat2"?"vec2":t==="mat3"?"vec3":t==="mat4"?"vec4":this.getComponentType(t)}getComponentType(t){if(t=this.getVectorType(t),t==="float"||t==="bool"||t==="int"||t==="uint")return t;const e=/(b|i|u|)(vec|mat)([2-4])/.exec(t);return e===null?null:e[1]==="b"?"bool":e[1]==="i"?"int":e[1]==="u"?"uint":"float"}getVectorType(t){return t==="color"?"vec3":t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="texture3D"?"vec4":t}getTypeFromLength(t,e="float"){if(t===1)return e;const n=FU.get(t);return(e==="float"?"":e[0])+n}getTypeFromArray(t){return IU.get(t.constructor)}getTypeFromAttribute(t){let e=t;t.isInterleavedBufferAttribute&&(e=t.data);const n=e.array,i=t.itemSize,s=t.normalized;let o;return!(t instanceof yT)&&s!==!0&&(o=this.getTypeFromArray(n)),this.getTypeFromLength(i,o)}getTypeLength(t){const e=this.getVectorType(t),n=/vec([2-4])/.exec(e);return n!==null?Number(n[1]):e==="float"||e==="bool"||e==="int"||e==="uint"?1:/mat2/.test(t)===!0?4:/mat3/.test(t)===!0?9:/mat4/.test(t)===!0?16:0}getVectorFromMatrix(t){return t.replace("mat","vec")}changeComponentType(t,e){return this.getTypeFromLength(this.getTypeLength(t),e)}getIntegerType(t){const e=this.getComponentType(t);return e==="int"||e==="uint"?t:this.changeComponentType(t,"int")}addStack(){return this.stack=tp(this.stack),this.stacks.push(ET()||this.stack),rd(this.stack),this.stack}removeStack(){const t=this.stack;return this.stack=t.parent,rd(this.stacks.pop()),t}getDataFromNode(t,e=this.shaderStage,n=null){n=n===null?t.isGlobal(this)?this.globalCache:this.cache:n;let i=n.getData(t);return i===void 0&&(i={},n.setData(t,i)),i[e]===void 0&&(i[e]={}),i[e]}getNodeProperties(t,e="any"){const n=this.getDataFromNode(t,e);return n.properties||(n.properties={outputNode:null})}getBufferAttributeFromNode(t,e){const n=this.getDataFromNode(t);let i=n.bufferAttribute;if(i===void 0){const s=this.uniforms.index++;i=new Qy("nodeAttribute"+s,e,t),this.bufferAttributes.push(i),n.bufferAttribute=i}return i}getStructTypeFromNode(t,e=this.shaderStage){const n=this.getDataFromNode(t,e);if(n.structType===void 0){const i=this.structs.index++;t.name=`StructType${i}`,this.structs[e].push(t),n.structType=t}return t}getUniformFromNode(t,e,n=this.shaderStage,i=null){const s=this.getDataFromNode(t,n,this.globalCache);let o=s.uniform;if(o===void 0){const a=this.uniforms.index++;o=new qI(i||"nodeUniform"+a,e,t),this.uniforms[n].push(o),s.uniform=o}return o}getVarFromNode(t,e=null,n=t.getNodeType(this),i=this.shaderStage){const s=this.getDataFromNode(t,i);let o=s.variable;if(o===void 0){const a=this.vars[i]||(this.vars[i]=[]);e===null&&(e="nodeVar"+a.length),o=new JT(e,n),a.push(o),s.variable=o}return o}getVaryingFromNode(t,e=null,n=t.getNodeType(this)){const i=this.getDataFromNode(t,"any");let s=i.varying;if(s===void 0){const o=this.varyings,a=o.length;e===null&&(e="nodeVarying"+a),s=new XI(e,n),o.push(s),i.varying=s}return s}getCodeFromNode(t,e,n=this.shaderStage){const i=this.getDataFromNode(t);let s=i.code;if(s===void 0){const o=this.codes[n]||(this.codes[n]=[]),a=o.length;s=new YI("nodeCode"+a,e),o.push(s),i.code=s}return s}addFlowCodeHierarchy(t,e){const{flowCodes:n,flowCodeBlock:i}=this.getDataFromNode(t);let s=!0,o=e;for(;o;){if(i.get(o)===!0){s=!1;break}o=this.getDataFromNode(o).parentNodeBlock}if(s)for(const a of n)this.addLineFlowCode(a)}addLineFlowCodeBlock(t,e,n){const i=this.getDataFromNode(t),s=i.flowCodes||(i.flowCodes=[]),o=i.flowCodeBlock||(i.flowCodeBlock=new WeakMap);s.push(e),o.set(n,!0)}addLineFlowCode(t,e=null){return t===""?this:(e!==null&&this.context.nodeBlock&&this.addLineFlowCodeBlock(e,t,this.context.nodeBlock),t=this.tab+t,/;\s*$/.test(t)||(t=t+`;
`),this.flow.code+=t,this)}addFlowCode(t){return this.flow.code+=t,this}addFlowTab(){return this.tab+="	",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(t){return this.flowsData.get(t)}flowNode(t){const e=t.getNodeType(this),n=this.flowChildNode(t,e);return this.flowsData.set(t,n),n}buildFunctionNode(t){const e=new ZI,n=this.currentFunctionNode;return this.currentFunctionNode=e,e.code=this.buildFunctionCode(t),this.currentFunctionNode=n,e}flowShaderNode(t){const e=t.layout,n={[Symbol.iterator](){let o=0;const a=Object.values(this);return{next:()=>({value:a[o],done:o++>=a.length})}}};for(const o of e.inputs)n[o.name]=new KI(o.type,o.name);t.layout=null;const i=t.call(n),s=this.flowStagesNode(i,e.type);return t.layout=e,s}flowStagesNode(t,e=null){const n=this.flow,i=this.vars,s=this.cache,o=this.buildStage,a=this.stack,l={code:""};this.flow=l,this.vars={},this.cache=new Yf,this.stack=tp();for(const c of Gy)this.setBuildStage(c),l.result=t.build(this,e);return l.vars=this.getVars(this.shaderStage),this.flow=n,this.vars=i,this.cache=s,this.stack=a,this.setBuildStage(o),l}getFunctionOperator(){return null}flowChildNode(t,e=null){const n=this.flow,i={code:""};return this.flow=i,i.result=t.build(this,e),this.flow=n,i}flowNodeFromShaderStage(t,e,n=null,i=null){const s=this.shaderStage;this.setShaderStage(t);const o=this.flowChildNode(e,n);return i!==null&&(o.code+=`${this.tab+i} = ${o.result};
`),this.flowCode[t]=this.flowCode[t]+o.code,this.setShaderStage(s),o}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(t,e){return`${this.getType(t)} ${e}`}getVars(t){let e="";const n=this.vars[t];if(n!==void 0)for(const i of n)e+=`${this.getVar(i.type,i.name)}; `;return e}getUniforms(){console.warn("Abstract function.")}getCodes(t){const e=this.codes[t];let n="";if(e!==void 0)for(const i of e)n+=i.code+`
`;return n}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(t){this.shaderStage=t}getShaderStage(){return this.shaderStage}setBuildStage(t){this.buildStage=t}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:t,material:e,renderer:n}=this;if(e!==null){let i=n.nodes.library.fromMaterial(e);i===null&&(console.error(`NodeMaterial: Material "${e.type}" is not compatible.`),i=new ln),i.build(this)}else this.addFlow("compute",t);for(const i of Gy){this.setBuildStage(i),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const s of ky){this.setShaderStage(s);const o=this.flowNodes[s];for(const a of o)i==="generate"?this.flowNode(a):a.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(t,e){if(e==="float"||e==="int"||e==="uint")return new YD(t);if(e==="vec2"||e==="ivec2"||e==="uvec2")return new jD(t);if(e==="vec3"||e==="ivec3"||e==="uvec3")return new KD(t);if(e==="vec4"||e==="ivec4"||e==="uvec4")return new ZD(t);if(e==="color")return new QD(t);if(e==="mat3")return new JD(t);if(e==="mat4")return new tU(t);throw new Error(`Uniform "${e}" not declared.`)}createNodeMaterial(t="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${t}() instead.`)}format(t,e,n){if(e=this.getVectorType(e),n=this.getVectorType(n),e===n||n===null||this.isReference(n))return t;const i=this.getTypeLength(e),s=this.getTypeLength(n);return i===16&&s===9?`${this.getType(n)}(${t}[0].xyz, ${t}[1].xyz, ${t}[2].xyz)`:i===9&&s===4?`${this.getType(n)}(${t}[0].xy, ${t}[1].xy)`:i>4||s>4||s===0?t:i===s?`${this.getType(n)}( ${t} )`:i>s?this.format(`${t}.${"xyz".slice(0,s)}`,this.getTypeFromLength(s,this.getComponentType(e)),n):s===4&&i>1?`${this.getType(n)}( ${this.format(t,e,"vec3")}, 1.0 )`:i===2?`${this.getType(n)}( ${this.format(t,e,"vec2")}, 0.0 )`:(i===1&&s>1&&e!==this.getComponentType(n)&&(t=`${this.getType(this.getComponentType(n))}( ${t} )`),`${this.getType(n)}( ${t} )`)}getSignature(){return`// Three.js r${FS} - Node System
`}}class C_{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.startTime=null,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(t,e){let n=t.get(e);return n===void 0&&(n={renderMap:new WeakMap,frameMap:new WeakMap},t.set(e,n)),n}updateBeforeNode(t){const e=t.getUpdateBeforeType(),n=t.updateReference(this);if(e===ne.FRAME){const{frameMap:i}=this._getMaps(this.updateBeforeMap,n);i.get(n)!==this.frameId&&t.updateBefore(this)!==!1&&i.set(n,this.frameId)}else if(e===ne.RENDER){const{renderMap:i}=this._getMaps(this.updateBeforeMap,n);i.get(n)!==this.renderId&&t.updateBefore(this)!==!1&&i.set(n,this.renderId)}else e===ne.OBJECT&&t.updateBefore(this)}updateAfterNode(t){const e=t.getUpdateAfterType(),n=t.updateReference(this);if(e===ne.FRAME){const{frameMap:i}=this._getMaps(this.updateAfterMap,n);i.get(n)!==this.frameId&&t.updateAfter(this)!==!1&&i.set(n,this.frameId)}else if(e===ne.RENDER){const{renderMap:i}=this._getMaps(this.updateAfterMap,n);i.get(n)!==this.renderId&&t.updateAfter(this)!==!1&&i.set(n,this.renderId)}else e===ne.OBJECT&&t.updateAfter(this)}updateNode(t){const e=t.getUpdateType(),n=t.updateReference(this);if(e===ne.FRAME){const{frameMap:i}=this._getMaps(this.updateMap,n);i.get(n)!==this.frameId&&t.update(this)!==!1&&i.set(n,this.frameId)}else if(e===ne.RENDER){const{renderMap:i}=this._getMaps(this.updateMap,n);i.get(n)!==this.renderId&&t.update(this)!==!1&&i.set(n,this.renderId)}else e===ne.OBJECT&&t.update(this)}update(){this.frameId++,this.lastTime===void 0&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class Lx{constructor(t,e,n=null,i="",s=!1){this.type=t,this.name=e,this.count=n,this.qualifier=i,this.isConst=s}}Lx.isNodeFunctionInput=!0;class LU extends hn{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const t=Q(ke.z,0,ke.x.negate()).normalize(),e=ke.cross(t);return Tt(t.dot(sn),e.dot(sn)).mul(.495).add(.5)}}const DU=gt(LU);let al=class lc extends _l{static get type(){return"TimerNode"}constructor(t=lc.LOCAL,e=1,n=0){super(n),this.scope=t,this.scale=e,this.updateType=ne.FRAME}update(t){const e=this.scope,n=this.scale;e===lc.LOCAL?this.value+=t.deltaTime*n:e===lc.DELTA?this.value=t.deltaTime*n:e===lc.FRAME?this.value=t.frameId:this.value=t.time*n}serialize(t){super.serialize(t),t.scope=this.scope,t.scale=this.scale}deserialize(t){super.deserialize(t),this.scope=t.scope,this.scale=t.scale}};al.LOCAL="local";al.GLOBAL="global";al.DELTA="delta";al.FRAME="frame";const UU=(r,t=0)=>ut(new al(al.LOCAL,r,t));let Li=class Ea extends Kt{static get type(){return"OscNode"}constructor(t=Ea.SINE,e=UU()){super(),this.method=t,this.timeNode=e}getNodeType(t){return this.timeNode.getNodeType(t)}setup(){const t=this.method,e=ut(this.timeNode);let n=null;return t===Ea.SINE?n=e.add(.75).mul(Math.PI*2).sin().mul(.5).add(.5):t===Ea.SQUARE?n=e.fract().round():t===Ea.TRIANGLE?n=e.add(.5).fract().mul(2).sub(1).abs():t===Ea.SAWTOOTH&&(n=e.fract()),n}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}};Li.SINE="sine";Li.SQUARE="square";Li.TRIANGLE="triangle";Li.SAWTOOTH="sawtooth";Li.SINE;Li.SQUARE;Li.TRIANGLE;Li.SAWTOOTH;class BU extends hn{static get type(){return"RotateNode"}constructor(t,e){super(),this.positionNode=t,this.rotationNode=e}getNodeType(t){return this.positionNode.getNodeType(t)}setup(t){const{rotationNode:e,positionNode:n}=this;if(this.getNodeType(t)==="vec2"){const s=e.cos(),o=e.sin();return gx(s,o,o.negate(),s).mul(n)}else{const s=e,o=qa(Qt(1,0,0,0),Qt(0,Sr(s.x),Us(s.x).negate(),0),Qt(0,Us(s.x),Sr(s.x),0),Qt(0,0,0,1)),a=qa(Qt(Sr(s.y),0,Us(s.y),0),Qt(0,1,0,0),Qt(Us(s.y).negate(),0,Sr(s.y),0),Qt(0,0,0,1)),l=qa(Qt(Sr(s.z),Us(s.z).negate(),0,0),Qt(Us(s.z),Sr(s.z),0,0),Qt(0,0,1,0),Qt(0,0,0,1));return o.mul(a).mul(l).mul(Qt(n,1)).xyz}}}const OU=tt(BU);new Mr;new O;new O;new O;new an;new O(0,0,-1);new Ie;new O;new O;new Ie;new Me;new Tl;Cc.flipX();const Ep=new Px(-1,1,1,-1,0,1);class zU extends Lo{constructor(t=!1){super();const e=t===!1?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new qs([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new qs(e,2))}}const GU=new zU;class Ev extends Eo{constructor(t=null){super(GU,t),this.camera=Ep,this.isQuadMesh=!0}renderAsync(t){return t.renderAsync(this,Ep)}render(t){t.render(this,Ep)}}let ll=class Bu extends Kt{static get type(){return"SceneNode"}constructor(t=Bu.BACKGROUND_BLURRINESS,e=null){super(),this.scope=t,this.scene=e}setup(t){const e=this.scope,n=this.scene!==null?this.scene:t.scene;let i;return e===Bu.BACKGROUND_BLURRINESS?i=Ve("backgroundBlurriness","float",n):e===Bu.BACKGROUND_INTENSITY?i=Ve("backgroundIntensity","float",n):console.error("THREE.SceneNode: Unknown scope:",e),i}};ll.BACKGROUND_BLURRINESS="backgroundBlurriness";ll.BACKGROUND_INTENSITY="backgroundIntensity";const kU=gt(ll,ll.BACKGROUND_BLURRINESS),P_=gt(ll,ll.BACKGROUND_INTENSITY),Da={PointList:"point-list",LineList:"line-list",LineStrip:"line-strip",TriangleList:"triangle-list",TriangleStrip:"triangle-strip"},Sn={Never:"never",Less:"less",Equal:"equal",LessEqual:"less-equal",Greater:"greater",NotEqual:"not-equal",GreaterEqual:"greater-equal",Always:"always"},Tn={Store:"store",Discard:"discard"},en={Load:"load",Clear:"clear"},Ap={CCW:"ccw",CW:"cw"},wp={None:"none",Front:"front",Back:"back"},cl={Uint16:"uint16",Uint32:"uint32"},C={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10uFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},Np={ClampToEdge:"clamp-to-edge",Repeat:"repeat",MirrorRepeat:"mirror-repeat"},ud={Linear:"linear",Nearest:"nearest"},Wt={Zero:"zero",One:"one",Src:"src",OneMinusSrc:"one-minus-src",SrcAlpha:"src-alpha",OneMinusSrcAlpha:"one-minus-src-alpha",Dst:"dst",OneMinusDstColor:"one-minus-dst",DstAlpha:"dst-alpha",OneMinusDstAlpha:"one-minus-dst-alpha",SrcAlphaSaturated:"src-alpha-saturated",Constant:"constant",OneMinusConstant:"one-minus-constant"},Kr={Add:"add",Subtract:"subtract",ReverseSubtract:"reverse-subtract",Min:"min",Max:"max"},F_={None:0,Red:1,Green:2,Blue:4,Alpha:8,All:15},mr={Keep:"keep",Zero:"zero",Replace:"replace",Invert:"invert",IncrementClamp:"increment-clamp",DecrementClamp:"decrement-clamp",IncrementWrap:"increment-wrap",DecrementWrap:"decrement-wrap"},Eg={Uniform:"uniform",Storage:"storage",ReadOnlyStorage:"read-only-storage"},I_={WriteOnly:"write-only",ReadOnly:"read-only",ReadWrite:"read-write"},Wl={Float:"float",UnfilterableFloat:"unfilterable-float",Depth:"depth",SInt:"sint",UInt:"uint"},L_={OneD:"1d",TwoD:"2d",ThreeD:"3d"},wi={OneD:"1d",TwoD:"2d",TwoDArray:"2d-array",Cube:"cube",CubeArray:"cube-array",ThreeD:"3d"},VU={All:"all",StencilOnly:"stencil-only",DepthOnly:"depth-only"},tu={Vertex:"vertex",Instance:"instance"},Ag={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};Mt(({texture:r,uv:t})=>{const n=Q().toVar();return On(t.x.lessThan(1e-4),()=>{n.assign(Q(1,0,0))}).ElseIf(t.y.lessThan(1e-4),()=>{n.assign(Q(0,1,0))}).ElseIf(t.z.lessThan(1e-4),()=>{n.assign(Q(0,0,1))}).ElseIf(t.x.greaterThan(1-1e-4),()=>{n.assign(Q(-1,0,0))}).ElseIf(t.y.greaterThan(1-1e-4),()=>{n.assign(Q(0,-1,0))}).ElseIf(t.z.greaterThan(1-1e-4),()=>{n.assign(Q(0,0,-1))}).Else(()=>{const s=r.uv(t.add(Q(-.01,0,0))).r.sub(r.uv(t.add(Q(.01,0,0))).r),o=r.uv(t.add(Q(0,-.01,0))).r.sub(r.uv(t.add(Q(0,.01,0))).r),a=r.uv(t.add(Q(0,0,-.01))).r.sub(r.uv(t.add(Q(0,0,.01))).r);n.assign(Q(s,o,a))}),n.normalize()});const HU=new Me;let $U=class extends qc{static get type(){return"PassTextureNode"}constructor(t,e){super(e),this.passNode=t,this.setUpdateMatrix(!1)}setup(t){return t.object.isQuadMesh&&this.passNode.build(t),super.setup(t)}clone(){return new this.constructor(this.passNode,this.value)}},D_=class extends $U{static get type(){return"PassMultipleTextureNode"}constructor(t,e,n=!1){super(t,null),this.textureName=e,this.previousTexture=n}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(t){return this.updateTexture(),super.setup(t)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}},Av=class wv extends hn{static get type(){return"PassNode"}constructor(t,e,n,i={}){super("vec4"),this.scope=t,this.scene=e,this.camera=n,this.options=i,this._pixelRatio=1,this._width=1,this._height=1;const s=new Xc;s.isRenderTargetTexture=!0,s.name="depth";const o=new Tl(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:Ws,...i});o.texture.name="output",o.depthTexture=s,this.renderTarget=o,this.updateBeforeType=ne.FRAME,this._textures={output:o.texture,depth:s},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=Jt(0),this._cameraFar=Jt(0),this._mrt=null,this.isPassNode=!0}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(t){let e=this._textures[t];return e===void 0&&(e=this.renderTarget.texture.clone(),e.isRenderTargetTexture=!0,e.name=t,this._textures[t]=e,this.renderTarget.textures.push(e)),e}getPreviousTexture(t){let e=this._previousTextures[t];return e===void 0&&(e=this.getTexture(t).clone(),e.isRenderTargetTexture=!0,this._previousTextures[t]=e),e}toggleTexture(t){const e=this._previousTextures[t];if(e!==void 0){const n=this._textures[t],i=this.renderTarget.textures.indexOf(n);this.renderTarget.textures[i]=e,this._textures[t]=e,this._previousTextures[t]=n,this._textureNodes[t].updateTexture(),this._previousTextureNodes[t].updateTexture()}}getTextureNode(t="output"){let e=this._textureNodes[t];return e===void 0&&(this._textureNodes[t]=e=ut(new D_(this,t)),this._textureNodes[t].updateTexture()),e}getPreviousTextureNode(t="output"){let e=this._previousTextureNodes[t];return e===void 0&&(this._textureNodes[t]===void 0&&this.getTextureNode(t),this._previousTextureNodes[t]=e=ut(new D_(this,t,!0)),this._previousTextureNodes[t].updateTexture()),e}getViewZNode(t="depth"){let e=this._viewZNodes[t];if(e===void 0){const n=this._cameraNear,i=this._cameraFar;this._viewZNodes[t]=e=pv(this.getTextureNode(t),n,i)}return e}getLinearDepthNode(t="depth"){let e=this._linearDepthNodes[t];if(e===void 0){const n=this._cameraNear,i=this._cameraFar,s=this.getViewZNode(t);this._linearDepthNodes[t]=e=Du(s,n,i)}return e}setup({renderer:t}){return this.renderTarget.samples=this.options.samples===void 0?t.samples:this.options.samples,t.backend.isWebGLBackend===!0&&(this.renderTarget.samples=0),this.renderTarget.depthTexture.isMultisampleRenderTargetTexture=this.renderTarget.samples>1,this.scope===wv.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(t){const{renderer:e}=t,{scene:n,camera:i}=this;this._pixelRatio=e.getPixelRatio();const s=e.getSize(HU);this.setSize(s.width,s.height);const o=e.getRenderTarget(),a=e.getMRT();this._cameraNear.value=i.near,this._cameraFar.value=i.far;for(const l in this._previousTextures)this.toggleTexture(l);e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),e.render(n,i),e.setRenderTarget(o),e.setMRT(a)}setSize(t,e){this._width=t,this._height=e;const n=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget.setSize(n,i)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}};Av.COLOR="color";Av.DEPTH="depth";class WU extends rs{constructor(t=null,e=1,n=1,i,s,o,a,l,c=En,h=En,u,d){super(null,o,a,l,c,h,i,s,u,d),this.isDataTexture=!0,this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Nv extends Kt{static get type(){return"FogNode"}constructor(t,e){super("float"),this.isFogNode=!0,this.colorNode=t,this.factorNode=e}getViewZNode(t){let e;const n=t.context.getViewZ;return n!==void 0&&(e=n(this)),(e||Un.z).negate()}setup(){return this.factorNode}}class qU extends Nv{static get type(){return"FogRangeNode"}constructor(t,e,n){super(t),this.isFogRangeNode=!0,this.nearNode=e,this.farNode=n}setup(t){const e=this.getViewZNode(t);return vo(this.nearNode,this.farNode,e)}}const XU=tt(qU);class YU extends Nv{static get type(){return"FogExp2Node"}constructor(t,e){super(t),this.isFogExp2Node=!0,this.densityNode=e}setup(t){const e=this.getViewZNode(t),n=this.densityNode;return n.mul(n,e,e).negate().exp().oneMinus()}}const jU=tt(YU),KU=Mt(({depthTexture:r,shadowCoord:t})=>Xe(r,t.xy).compare(t.z)),ZU=Mt(({depthTexture:r,shadowCoord:t,shadow:e})=>{const n=(x,m)=>Xe(r,x).compare(m),i=Ve("mapSize","vec2",e).setGroup(re),s=Ve("radius","float",e).setGroup(re),o=Tt(1).div(i),a=o.x.negate().mul(s),l=o.y.negate().mul(s),c=o.x.mul(s),h=o.y.mul(s),u=a.div(2),d=l.div(2),f=c.div(2),p=h.div(2);return vi(n(t.xy.add(Tt(a,l)),t.z),n(t.xy.add(Tt(0,l)),t.z),n(t.xy.add(Tt(c,l)),t.z),n(t.xy.add(Tt(u,d)),t.z),n(t.xy.add(Tt(0,d)),t.z),n(t.xy.add(Tt(f,d)),t.z),n(t.xy.add(Tt(a,0)),t.z),n(t.xy.add(Tt(u,0)),t.z),n(t.xy,t.z),n(t.xy.add(Tt(f,0)),t.z),n(t.xy.add(Tt(c,0)),t.z),n(t.xy.add(Tt(u,p)),t.z),n(t.xy.add(Tt(0,p)),t.z),n(t.xy.add(Tt(f,p)),t.z),n(t.xy.add(Tt(a,h)),t.z),n(t.xy.add(Tt(0,h)),t.z),n(t.xy.add(Tt(c,h)),t.z)).mul(1/17)}),QU=Mt(({depthTexture:r,shadowCoord:t,shadow:e})=>{const n=(h,u)=>Xe(r,h).compare(u),i=Ve("mapSize","vec2",e).setGroup(re),s=Tt(1).div(i),o=s.x,a=s.y,l=t.xy,c=Ml(l.mul(i).add(.5));return l.subAssign(c.mul(s)),vi(n(l,t.z),n(l.add(Tt(o,0)),t.z),n(l.add(Tt(0,a)),t.z),n(l.add(s),t.z),Oe(n(l.add(Tt(o.negate(),0)),t.z),n(l.add(Tt(o.mul(2),0)),t.z),c.x),Oe(n(l.add(Tt(o.negate(),a)),t.z),n(l.add(Tt(o.mul(2),a)),t.z),c.x),Oe(n(l.add(Tt(0,a.negate())),t.z),n(l.add(Tt(0,a.mul(2))),t.z),c.y),Oe(n(l.add(Tt(o,a.negate())),t.z),n(l.add(Tt(o,a.mul(2))),t.z),c.y),Oe(Oe(n(l.add(Tt(o.negate(),a.negate())),t.z),n(l.add(Tt(o.mul(2),a.negate())),t.z),c.x),Oe(n(l.add(Tt(o.negate(),a.mul(2))),t.z),n(l.add(Tt(o.mul(2),a.mul(2))),t.z),c.x),c.y)).mul(1/9)}),JU=Mt(({depthTexture:r,shadowCoord:t})=>{const e=J(1).toVar(),n=Xe(r).uv(t.xy).rg,i=VT(t.z,n.x);return On(i.notEqual(J(1)),()=>{const s=t.z.sub(n.x),o=es(0,n.y.mul(n.y));let a=o.div(o.add(s.mul(s)));a=Dr(po(a,.3).div(.95-.3)),e.assign(Dr(es(i,a)))}),e}),t3=Mt(({samples:r,radius:t,size:e,shadowPass:n})=>{const i=J(0).toVar(),s=J(0).toVar(),o=r.lessThanEqual(J(1)).select(J(0),J(2).div(r.sub(1))),a=r.lessThanEqual(J(1)).select(J(0),J(-1));Vs({start:qe(0),end:qe(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(J(c).mul(o)),u=n.uv(vi(Bd.xy,Tt(0,h).mul(t)).div(e)).x;i.addAssign(u),s.addAssign(u.mul(u))}),i.divAssign(r),s.divAssign(r);const l=_x(s.sub(i.mul(i)));return Tt(i,l)}),e3=Mt(({samples:r,radius:t,size:e,shadowPass:n})=>{const i=J(0).toVar(),s=J(0).toVar(),o=r.lessThanEqual(J(1)).select(J(0),J(2).div(r.sub(1))),a=r.lessThanEqual(J(1)).select(J(0),J(-1));Vs({start:qe(0),end:qe(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(J(c).mul(o)),u=n.uv(vi(Bd.xy,Tt(h,0).mul(t)).div(e));i.addAssign(u.x),s.addAssign(vi(u.y.mul(u.y),u.x.mul(u.x)))}),i.divAssign(r),s.divAssign(r);const l=_x(s.sub(i.mul(i)));return Tt(i,l)}),n3=[KU,ZU,QU,JU];let fa=null;const eu=new Ev;class Do extends Sl{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.updateType=ne.FRAME,this.light=t,this.color=new Ae,this.colorNode=Jt(this.color).setGroup(re),this.baseColorNode=null,this.shadowMap=null,this.shadowNode=null,this.shadowColorNode=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this.isAnalyticLightNode=!0}getCacheKey(){return nd(super.getCacheKey(),this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadow(t){const{object:e,renderer:n}=t;if(n.shadowMap.enabled===!1)return;let i=this.shadowColorNode;if(i===null){fa===null&&(fa=new ln,fa.fragmentNode=Qt(0,0,0,1),fa.isShadowNodeMaterial=!0,fa.name="ShadowMaterial");const s=n.shadowMap.type,o=this.light.shadow,a=new Xc;a.compareFunction=ux;const l=t.createRenderTarget(o.mapSize.width,o.mapSize.height);if(l.depthTexture=a,o.camera.updateProjectionMatrix(),s===Ph){a.compareFunction=null,this.vsmShadowMapVertical=t.createRenderTarget(o.mapSize.width,o.mapSize.height,{format:bc,type:Ws}),this.vsmShadowMapHorizontal=t.createRenderTarget(o.mapSize.width,o.mapSize.height,{format:bc,type:Ws});const y=Xe(a),S=Xe(this.vsmShadowMapVertical.texture),w=Ve("blurSamples","float",o).setGroup(re),A=Ve("radius","float",o).setGroup(re),T=Ve("mapSize","vec2",o).setGroup(re);let R=this.vsmMaterialVertical||(this.vsmMaterialVertical=new ln);R.fragmentNode=t3({samples:w,radius:A,size:T,shadowPass:y}).context(t.getSharedContext()),R.name="VSMVertical",R=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new ln),R.fragmentNode=e3({samples:w,radius:A,size:T,shadowPass:S}).context(t.getSharedContext()),R.name="VSMHorizontal"}const c=Ve("intensity","float",o).setGroup(re),h=Ve("bias","float",o).setGroup(re),u=Ve("normalBias","float",o).setGroup(re),d=e.material.shadowPositionNode||xg;let f=Jt(o.matrix).setGroup(re).mul(d.add(Ud.mul(u)));f=f.xyz.div(f.w);let p=f.z.add(h);n.coordinateSystem===To&&(p=p.mul(2).sub(1)),f=Q(f.x,f.y.oneMinus(),p);const x=f.x.greaterThanEqual(0).and(f.x.lessThanEqual(1)).and(f.y.greaterThanEqual(0)).and(f.y.lessThanEqual(1)).and(f.z.lessThanEqual(1)),m=o.filterNode||n3[n.shadowMap.type]||null;if(m===null)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const g=Xe(l.texture,f),_=x.select(m({depthTexture:s===Ph?this.vsmShadowMapHorizontal.texture:a,shadowCoord:f,shadow:o}),J(1));this.shadowMap=l,this.light.shadow.map=l,this.shadowNode=_,this.shadowColorNode=i=this.colorNode.mul(Oe(1,_.rgb.mix(g,1),c.mul(g.a))),this.baseColorNode=this.colorNode}this.colorNode=i,this.updateBeforeType=ne.RENDER}setup(t){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?t.object.receiveShadow&&this.setupShadow(t):this.shadowNode!==null&&this.disposeShadow()}updateShadow(t){const{shadowMap:e,light:n}=this,{renderer:i,scene:s,camera:o}=t,a=i.shadowMap.type,l=e.depthTexture.version;this._depthVersionCached=l;const c=s.overrideMaterial;s.overrideMaterial=fa,e.setSize(n.shadow.mapSize.width,n.shadow.mapSize.height),n.shadow.updateMatrices(n),n.shadow.camera.layers.mask=o.layers.mask;const h=i.getRenderTarget(),u=i.getRenderObjectFunction();i.setRenderObjectFunction((d,...f)=>{(d.castShadow===!0||d.receiveShadow&&a===Ph)&&i.renderObject(d,...f)}),i.setRenderTarget(e),i.render(s,n.shadow.camera),i.setRenderObjectFunction(u),n.isPointLight!==!0&&a===Ph&&this.vsmPass(t,n),i.setRenderTarget(h),s.overrideMaterial=c}vsmPass(t,e){const{renderer:n}=t;this.vsmShadowMapVertical.setSize(e.shadow.mapSize.width,e.shadow.mapSize.height),this.vsmShadowMapHorizontal.setSize(e.shadow.mapSize.width,e.shadow.mapSize.height),n.setRenderTarget(this.vsmShadowMapVertical),eu.material=this.vsmMaterialVertical,eu.render(n),n.setRenderTarget(this.vsmShadowMapHorizontal),eu.material=this.vsmMaterialHorizontal,eu.render(n)}disposeShadow(){this.shadowMap.dispose(),this.shadowMap=null,this.vsmShadowMapVertical!==null&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),this.vsmShadowMapHorizontal!==null&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),this.shadowNode=null,this.shadowColorNode=null,this.baseColorNode=null,this.updateBeforeType=ne.NONE}updateBefore(t){const e=this.light.shadow;(e.needsUpdate||e.autoUpdate)&&(this.updateShadow(t),this.shadowMap.depthTexture.version===this._depthVersionCached&&(e.needsUpdate=!1))}update(){const{light:t}=this;this.color.copy(t.color).multiplyScalar(t.intensity)}}const Rv=Mt(r=>{const{lightDistance:t,cutoffDistance:e,decayExponent:n}=r,i=t.pow(n).max(.01).reciprocal();return e.greaterThan(0).select(i.mul(t.div(e).pow4().oneMinus().clamp().pow2()),i)});let nu;function Dx(r){nu=nu||new WeakMap;let t=nu.get(r);return t===void 0&&nu.set(r,t={}),t}function Cv(r){const t=Dx(r);return t.position||(t.position=Jt(new O).setGroup(re).onRenderUpdate((e,n)=>n.value.setFromMatrixPosition(r.matrixWorld)))}function i3(r){const t=Dx(r);return t.targetPosition||(t.targetPosition=Jt(new O).setGroup(re).onRenderUpdate((e,n)=>n.value.setFromMatrixPosition(r.target.matrixWorld)))}function Ux(r){const t=Dx(r);return t.viewPosition||(t.viewPosition=Jt(new O).setGroup(re).onRenderUpdate(({camera:e},n)=>{n.value=n.value||new O,n.value.setFromMatrixPosition(r.matrixWorld),n.value.applyMatrix4(e.matrixWorldInverse)}))}const Pv=r=>tr.transformDirection(Cv(r).sub(i3(r))),s3=r=>ut(r).mul(.5).add(.5),zd=1/6,Fv=r=>Ce(zd,Ce(r,Ce(r,r.negate().add(3)).sub(3)).add(1)),wg=r=>Ce(zd,Ce(r,Ce(r,Ce(3,r).sub(6))).add(4)),Iv=r=>Ce(zd,Ce(r,Ce(r,Ce(-3,r).add(3)).add(3)).add(1)),Ng=r=>Ce(zd,Cd(r,3)),U_=r=>Fv(r).add(wg(r)),B_=r=>Iv(r).add(Ng(r)),O_=r=>vi(-1,wg(r).div(Fv(r).add(wg(r)))),z_=r=>vi(1,Ng(r).div(Iv(r).add(Ng(r)))),G_=(r,t,e)=>{const n=r.uvNode,i=Ce(n,t.zw).add(.5),s=Rd(i),o=Ml(i),a=U_(o.x),l=B_(o.x),c=O_(o.x),h=z_(o.x),u=O_(o.y),d=z_(o.y),f=Tt(s.x.add(c),s.y.add(u)).sub(.5).mul(t.xy),p=Tt(s.x.add(h),s.y.add(u)).sub(.5).mul(t.xy),x=Tt(s.x.add(c),s.y.add(d)).sub(.5).mul(t.xy),m=Tt(s.x.add(h),s.y.add(d)).sub(.5).mul(t.xy),g=U_(o.y).mul(vi(a.mul(r.uv(f).level(e)),l.mul(r.uv(p).level(e)))),_=B_(o.y).mul(vi(a.mul(r.uv(x).level(e)),l.mul(r.uv(m).level(e))));return g.add(_)},r3=Mt(([r,t=J(3)])=>{const e=Tt(r.size(qe(t))),n=Tt(r.size(qe(t.add(1)))),i=Lr(1,e),s=Lr(1,n),o=G_(r,Qt(i,e),Rd(t)),a=G_(r,Qt(s,n),zT(t));return Ml(t).mix(o,a)}),o3=Mt(([r])=>{const t=r.mul(.9478672986).add(.0521327014).pow(2.4),e=r.mul(.0773993808),n=r.lessThanEqual(.04045);return Oe(t,e,n)}).setLayout({name:"sRGBToLinearSRGB",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),a3=Mt(([r])=>{const t=r.pow(.41666).mul(1.055).sub(.055),e=r.mul(12.92),n=r.lessThanEqual(.0031308);return Oe(t,e,n)}).setLayout({name:"linearSRGBTosRGB",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),l3=Mt(([r,t])=>r.mul(t).clamp()).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),c3=Mt(([r,t])=>(r=r.mul(t),r.div(r.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),h3=Mt(([r,t])=>{r=r.mul(t),r=r.sub(.004).max(0);const e=r.mul(r.mul(6.2).add(.5)),n=r.mul(r.mul(6.2).add(1.7)).add(.06);return e.div(n).pow(2.2)}).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),u3=Mt(([r])=>{const t=r.mul(r.add(.0245786)).sub(90537e-9),e=r.mul(r.add(.432951).mul(.983729)).add(.238081);return t.div(e)}),d3=Mt(([r,t])=>{const e=ri(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),n=ri(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return r=r.mul(t).div(.6),r=e.mul(r),r=u3(r),r=n.mul(r),r.clamp()}).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),f3=ri(Q(1.6605,-.1246,-.0182),Q(-.5876,1.1329,-.1006),Q(-.0728,-.0083,1.1187)),p3=ri(Q(.6274,.0691,.0164),Q(.3293,.9195,.088),Q(.0433,.0113,.8956)),m3=Mt(([r])=>{const t=Q(r).toVar(),e=Q(t.mul(t)).toVar(),n=Q(e.mul(e)).toVar();return J(15.5).mul(n.mul(e)).sub(Ce(40.14,n.mul(t))).add(Ce(31.96,n).sub(Ce(6.868,e.mul(t))).add(Ce(.4298,e).add(Ce(.1191,t).sub(.00232))))}),g3=Mt(([r,t])=>{const e=Q(r).toVar(),n=ri(Q(.856627153315983,.137318972929847,.11189821299995),Q(.0951212405381588,.761241990602591,.0767994186031903),Q(.0482516061458583,.101439036467562,.811302368396859)),i=ri(Q(1.1271005818144368,-.1413297634984383,-.14132976349843826),Q(-.11060664309660323,1.157823702216272,-.11060664309660294),Q(-.016493938717834573,-.016493938717834257,1.2519364065950405)),s=J(-12.47393),o=J(4.026069);return e.mulAssign(t),e.assign(p3.mul(e)),e.assign(n.mul(e)),e.assign(es(e,1e-10)),e.assign(Nd(e)),e.assign(e.sub(s).div(o.sub(s))),e.assign(Dr(e,0,1)),e.assign(m3(e)),e.assign(i.mul(e)),e.assign(Cd(es(Q(0),e),Q(2.2))),e.assign(f3.mul(e)),e.assign(Dr(e,0,1)),e}).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),x3=Mt(([r,t])=>{const e=J(.76),n=J(.15);r=r.mul(t);const i=hd(r.r,hd(r.g,r.b)),s=ei(i.lessThan(.08),i.sub(Ce(6.25,i.mul(i))),.04);r.subAssign(s);const o=es(r.r,es(r.g,r.b));On(o.lessThan(e),()=>r);const a=po(1,e),l=po(1,a.mul(a).div(o.add(a.sub(e))));r.mulAssign(l.div(o));const c=po(1,Lr(1,n.mul(o.sub(l)).add(1)));return Oe(r,Q(l),c)}).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});let y3=class extends Kt{constructor(t){super(),this.scope=t}generate(t){const{scope:e}=this,{renderer:n}=t;n.backend.isWebGLBackend===!0?t.addFlowCode(`	// ${e}Barrier 
`):t.addLineFlowCode(`${e}Barrier()`,this)}};tt(y3);let gs=class extends hn{static get type(){return"AtomicFunctionNode"}constructor(t,e,n,i=null){super("uint"),this.method=t,this.pointerNode=e,this.valueNode=n,this.storeNode=i}getInputType(t){return this.pointerNode.getNodeType(t)}getNodeType(t){return this.getInputType(t)}generate(t){const e=this.method,n=this.getNodeType(t),i=this.getInputType(t),s=this.pointerNode,o=this.valueNode,a=[];a.push(`&${s.build(t,i)}`),a.push(o.build(t,i));const l=`${t.getMethod(e,n)}( ${a.join(", ")} )`;if(this.storeNode!==null){const c=this.storeNode.build(t,i);t.addLineFlowCode(`${c} = ${l}`,this)}else t.addLineFlowCode(l,this)}};gs.ATOMIC_LOAD="atomicLoad";gs.ATOMIC_STORE="atomicStore";gs.ATOMIC_ADD="atomicAdd";gs.ATOMIC_SUB="atomicSub";gs.ATOMIC_MAX="atomicMax";gs.ATOMIC_MIN="atomicMin";gs.ATOMIC_AND="atomicAnd";gs.ATOMIC_OR="atomicOr";gs.ATOMIC_XOR="atomicXor";tt(gs);let dd=null;const k_=new WeakMap;function _3(r){const t=Math.log2(r)-2,e=1/r;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:e,maxMip:t}}function M3(r){let t=k_.get(r);if((t!==void 0?t.pmremVersion:-1)!==r.pmremVersion){const n=r.image;if(r.isCubeTexture)if(T3(n))t=dd.fromCubemap(r,t);else return null;else if(v3(n))t=dd.fromEquirectangular(r,t);else return null;t.pmremVersion=r.pmremVersion,k_.set(r,t)}return t.texture}class S3 extends hn{static get type(){return"PMREMNode"}constructor(t,e=null,n=null){super("vec3"),this._value=t,this._pmrem=null,this.uvNode=e,this.levelNode=n,this._generator=null;const i=new rs;i.isRenderTargetTexture=!0,this._texture=Xe(i),this._width=Jt(0),this._height=Jt(0),this._maxMip=Jt(0),this.updateBeforeType=ne.RENDER}set value(t){this._value=t,this._pmrem=null}get value(){return this._value}updateFromTexture(t){const e=_3(t.image.height);this._texture.value=t,this._width.value=e.texelWidth,this._height.value=e.texelHeight,this._maxMip.value=e.maxMip}updateBefore(){let t=this._pmrem;const e=t?t.pmremVersion:-1,n=this._value;e!==n.pmremVersion&&(n.isPMREMTexture===!0?t=n:t=M3(n),t!==null&&(this._pmrem=t,this.updateFromTexture(t)))}setup(t){dd===null&&(dd=t.createPMREMGenerator()),this.updateBefore(t);let e=this.uvNode;e===null&&t.context.getUV&&(e=t.context.getUV(this));const n=this.value;t.renderer.coordinateSystem===Ki&&n.isPMREMTexture!==!0&&n.isRenderTargetTexture===!0&&(e=Q(e.x.negate(),e.yz));let i=this.levelNode;return i===null&&t.context.getTextureLevel&&(i=t.context.getTextureLevel(this)),bU(this._texture,e,i,this._width,this._height,this._maxMip)}}function T3(r){if(r==null)return!1;let t=0;const e=6;for(let n=0;n<e;n++)r[n]!==void 0&&t++;return t===e}function v3(r){return r==null?!1:r.height>0}const Lv=tt(S3),Fc=Mt(({f0:r,f90:t,dotVH:e})=>{const n=e.mul(-5.55473).sub(6.98316).mul(e).exp2();return r.mul(n.oneMinus()).add(t.mul(n))}),b3=Mt(({alpha:r,dotNL:t,dotNV:e})=>{const n=r.pow2(),i=t.mul(n.add(n.oneMinus().mul(e.pow2())).sqrt()),s=e.mul(n.add(n.oneMinus().mul(t.pow2())).sqrt());return Lr(.5,i.add(s).max(LF))}).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),E3=Mt(({alphaT:r,alphaB:t,dotTV:e,dotBV:n,dotTL:i,dotBL:s,dotNV:o,dotNL:a})=>{const l=a.mul(Q(r.mul(e),t.mul(n),o).length()),c=o.mul(Q(r.mul(i),t.mul(s),a).length());return Lr(.5,l.add(c)).saturate()}).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),A3=Mt(({alpha:r,dotNH:t})=>{const e=r.pow2(),n=t.pow2().mul(e.oneMinus()).oneMinus();return e.div(n.pow2()).mul(1/Math.PI)}).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),w3=J(1/Math.PI),N3=Mt(({alphaT:r,alphaB:t,dotNH:e,dotTH:n,dotBH:i})=>{const s=r.mul(t),o=Q(t.mul(n),r.mul(i),s.mul(e)),a=o.dot(o),l=s.div(a);return w3.mul(s.mul(l.pow2()))}).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),V_=Mt(r=>{const{lightDirection:t,f0:e,f90:n,roughness:i,f:s,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=r,l=r.normalView||sn,c=i.pow2(),h=t.add(ke).normalize(),u=l.dot(t).clamp(),d=l.dot(ke).clamp(),f=l.dot(h).clamp(),p=ke.dot(h).clamp();let x=Fc({f0:e,f90:n,dotVH:p}),m,g;if(qy(o)&&(x=yx.mix(x,s)),qy(a)){const _=Cu.dot(t),y=Cu.dot(ke),S=Cu.dot(h),w=Xa.dot(t),A=Xa.dot(ke),T=Xa.dot(h);m=E3({alphaT:ug,alphaB:c,dotTV:y,dotBV:A,dotTL:_,dotBL:w,dotNV:d,dotNL:u}),g=N3({alphaT:ug,alphaB:c,dotNH:f,dotTH:S,dotBH:T})}else m=b3({alpha:c,dotNL:u,dotNV:d}),g=A3({alpha:c,dotNH:f});return x.mul(m).mul(g)}),hl=Mt(r=>r.diffuseColor.mul(1/Math.PI)),Dv=Mt(({roughness:r,dotNV:t})=>{const e=Qt(-1,-.0275,-.572,.022),n=Qt(1,.0425,1.04,-.04),i=r.mul(e).add(n),s=i.x.mul(i.x).min(t.mul(-9.28).exp2()).mul(i.x).add(i.y);return Tt(-1.04,1.04).mul(s).add(i.zw)}).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),R3=Mt(({f:r,f90:t,dotVH:e})=>{const n=e.oneMinus().saturate(),i=n.mul(n),s=n.mul(i,i).clamp(0,.9999);return r.sub(Q(t).mul(s)).div(s.oneMinus())}).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),C3=Mt(()=>{const r=ns.dFdx().abs().max(ns.dFdy().abs());return r.x.max(r.y).max(r.z)}),Uv=Mt(r=>{const{roughness:t}=r,e=C3();let n=t.max(.0525);return n=n.add(e),n=n.min(1),n}),P3=Mt(([r,t])=>{const e=r.x,n=r.y,i=r.z;let s=t.element(0).mul(.886227);return s=s.add(t.element(1).mul(2*.511664).mul(n)),s=s.add(t.element(2).mul(2*.511664).mul(i)),s=s.add(t.element(3).mul(2*.511664).mul(e)),s=s.add(t.element(4).mul(2*.429043).mul(e).mul(n)),s=s.add(t.element(5).mul(2*.429043).mul(n).mul(i)),s=s.add(t.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),s=s.add(t.element(7).mul(2*.429043).mul(e).mul(i)),s=s.add(t.element(8).mul(.429043).mul(Ce(e,e).sub(Ce(n,n)))),s});class F3 extends Do{static get type(){return"PointLightNode"}constructor(t=null){super(t),this.cutoffDistanceNode=Jt(0).setGroup(re),this.decayExponentNode=Jt(0).setGroup(re)}update(t){const{light:e}=this;super.update(t),this.cutoffDistanceNode.value=e.distance,this.decayExponentNode.value=e.decay}setup(t){const{colorNode:e,cutoffDistanceNode:n,decayExponentNode:i,light:s}=this,o=t.context.lightingModel,a=Ux(s).sub(Un),l=a.normalize(),c=a.length(),h=Rv({lightDistance:c,cutoffDistance:n,decayExponent:i}),u=e.mul(h),d=t.context.reflectedLight;o.direct({lightDirection:l,lightColor:u,reflectedLight:d},t.stack,t)}}class I3 extends Do{static get type(){return"DirectionalLightNode"}constructor(t=null){super(t)}setup(t){super.setup(t);const e=t.context.lightingModel,n=this.colorNode,i=Pv(this.light),s=t.context.reflectedLight;e.direct({lightDirection:i,lightColor:n,reflectedLight:s},t.stack,t)}}const Rp=new an,iu=new an;let ql=null;class L3 extends Do{static get type(){return"RectAreaLightNode"}constructor(t=null){super(t),this.halfHeight=Jt(new O).setGroup(re),this.halfWidth=Jt(new O).setGroup(re)}update(t){super.update(t);const{light:e}=this,n=t.camera.matrixWorldInverse;iu.identity(),Rp.copy(e.matrixWorld),Rp.premultiply(n),iu.extractRotation(Rp),this.halfWidth.value.set(e.width*.5,0,0),this.halfHeight.value.set(0,e.height*.5,0),this.halfWidth.value.applyMatrix4(iu),this.halfHeight.value.applyMatrix4(iu)}setup(t){super.setup(t);let e,n;t.isAvailable("float32Filterable")?(e=Xe(ql.LTC_FLOAT_1),n=Xe(ql.LTC_FLOAT_2)):(e=Xe(ql.LTC_HALF_1),n=Xe(ql.LTC_HALF_2));const{colorNode:i,light:s}=this,o=t.context.lightingModel,a=Ux(s),l=t.context.reflectedLight;o.directRectArea({lightColor:i,lightPosition:a,halfWidth:this.halfWidth,halfHeight:this.halfHeight,reflectedLight:l,ltc_1:e,ltc_2:n},t.stack,t)}static setLTC(t){ql=t}}class Bv extends Do{static get type(){return"SpotLightNode"}constructor(t=null){super(t),this.coneCosNode=Jt(0).setGroup(re),this.penumbraCosNode=Jt(0).setGroup(re),this.cutoffDistanceNode=Jt(0).setGroup(re),this.decayExponentNode=Jt(0).setGroup(re)}update(t){super.update(t);const{light:e}=this;this.coneCosNode.value=Math.cos(e.angle),this.penumbraCosNode.value=Math.cos(e.angle*(1-e.penumbra)),this.cutoffDistanceNode.value=e.distance,this.decayExponentNode.value=e.decay}getSpotAttenuation(t){const{coneCosNode:e,penumbraCosNode:n}=this;return vo(e,n,t)}setup(t){super.setup(t);const e=t.context.lightingModel,{colorNode:n,cutoffDistanceNode:i,decayExponentNode:s,light:o}=this,a=Ux(o).sub(Un),l=a.normalize(),c=l.dot(Pv(o)),h=this.getSpotAttenuation(c),u=a.length(),d=Rv({lightDistance:u,cutoffDistance:i,decayExponent:s}),f=n.mul(h).mul(d),p=t.context.reflectedLight;e.direct({lightDirection:l,lightColor:f,reflectedLight:p},t.stack,t)}}class D3 extends Bv{static get type(){return"IESSpotLightNode"}getSpotAttenuation(t){const e=this.light.iesMap;let n=null;if(e&&e.isTexture===!0){const i=t.acos().mul(1/Math.PI);n=Xe(e,Tt(i,0),0).r}else n=super.getSpotAttenuation(t);return n}}class U3 extends Do{static get type(){return"AmbientLightNode"}constructor(t=null){super(t)}setup({context:t}){t.irradiance.addAssign(this.colorNode)}}class B3 extends Do{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=Cv(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=Jt(new Ae).setGroup(re)}update(t){const{light:e}=this;super.update(t),this.lightPositionNode.object3d=e,this.groundColorNode.value.copy(e.groundColor).multiplyScalar(e.intensity)}setup(t){const{colorNode:e,groundColorNode:n,lightDirectionNode:i}=this,o=ns.dot(i).mul(.5).add(.5),a=Oe(n,e,o);t.context.irradiance.addAssign(a)}}class O3 extends Do{static get type(){return"LightProbeNode"}constructor(t=null){super(t);const e=[];for(let n=0;n<9;n++)e.push(new O);this.lightProbe=Rc(e)}update(t){const{light:e}=this;super.update(t);for(let n=0;n<9;n++)this.lightProbe.array[n].copy(e.sh.coefficients[n]).multiplyScalar(e.intensity)}setup(t){const e=P3(Ud,this.lightProbe);t.context.irradiance.addAssign(e)}}const H_=new WeakMap;class z3 extends Sl{static get type(){return"EnvironmentNode"}constructor(t=null){super(),this.envNode=t}setup(t){const{material:e}=t;let n=this.envNode;if(n.isTextureNode||n.isMaterialReferenceNode){const f=n.isTextureNode?n.value:e[n.property];let p=H_.get(f);p===void 0&&(p=Lv(f),H_.set(f,p)),n=p}const s=e.envMap?Ve("envMapIntensity","float",t.material):Ve("environmentIntensity","float",t.scene),a=e.useAnisotropy===!0||e.anisotropy>0?SL:sn,l=n.context($_(zs,a)).mul(s),c=n.context(G3(iv)).mul(Math.PI).mul(s),h=Fu(l),u=Fu(c);t.context.radiance.addAssign(h),t.context.iblIrradiance.addAssign(u);const d=t.context.lightingModel.clearcoatRadiance;if(d){const f=n.context($_(ld,rc)).mul(s),p=Fu(f);d.addAssign(p)}}}const $_=(r,t)=>{let e=null;return{getUV:()=>(e===null&&(e=ke.negate().reflect(t),e=r.mul(r).mix(e,t).normalize(),e=e.transformDirection(tr)),e),getTextureLevel:()=>r}},G3=r=>({getUV:()=>r,getTextureLevel:()=>J(1)}),yc=new WeakMap;class k3 extends hn{static get type(){return"CubeMapNode"}constructor(t){super("vec3"),this.envNode=t,this._cubeTexture=null,this._cubeTextureNode=Nc();const e=new Cx;e.isRenderTargetTexture=!0,this._defaultTexture=e,this.updateBeforeType=ne.RENDER}updateBefore(t){const{renderer:e,material:n}=t,i=this.envNode;if(i.isTextureNode||i.isMaterialReferenceNode){const s=i.isTextureNode?i.value:n[i.property];if(s&&s.isTexture){const o=s.mapping;if(o===Gc||o===kc){if(yc.has(s)){const a=yc.get(s);W_(a,s.mapping),this._cubeTexture=a}else{const a=s.image;if(V3(a)){const l=new vv(a.height);l.fromEquirectangularTexture(e,s),W_(l.texture,s.mapping),this._cubeTexture=l.texture,yc.set(s,l.texture),s.addEventListener("dispose",Ov)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(t){return this.updateBefore(t),this._cubeTextureNode}}function V3(r){return r==null?!1:r.height>0}function Ov(r){const t=r.target;t.removeEventListener("dispose",Ov);const e=yc.get(t);e!==void 0&&(yc.delete(t),e.dispose())}function W_(r,t){t===Gc?r.mapping=Mo:t===kc&&(r.mapping=sl)}const zv=tt(k3);class Bx extends Sl{static get type(){return"BasicEnvironmentNode"}constructor(t=null){super(),this.envNode=t}setup(t){t.context.environment=zv(this.envNode)}}class Gv{parseFunction(){console.warn("Abstract function.")}}class Ox{constructor(t,e,n="",i=""){this.type=t,this.inputs=e,this.name=n,this.precision=i}getCode(){console.warn("Abstract function.")}}Ox.isNodeFunction=!0;const H3=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,$3=/[a-z_0-9]+/ig,q_="#pragma main",W3=r=>{r=r.trim();const t=r.indexOf(q_),e=t!==-1?r.slice(t+q_.length):r,n=e.match(H3);if(n!==null&&n.length===5){const i=n[4],s=[];let o=null;for(;(o=$3.exec(i))!==null;)s.push(o);const a=[];let l=0;for(;l<s.length;){const p=s[l][0]==="const";p===!0&&l++;let x=s[l][0];x==="in"||x==="out"||x==="inout"?l++:x="";const m=s[l++][0];let g=Number.parseInt(s[l][0]);Number.isNaN(g)===!1?l++:g=null;const _=s[l++][0];a.push(new Lx(m,_,g,x,p))}const c=e.substring(n[0].length),h=n[3]!==void 0?n[3]:"",u=n[2],d=n[1]!==void 0?n[1]:"",f=t!==-1?r.slice(0,t):"";return{type:u,inputs:a,name:h,precision:d,inputsCode:i,blockCode:c,headerCode:f}}else throw new Error("FunctionNode: Function is not a GLSL code.")};class q3 extends Ox{constructor(t){const{type:e,inputs:n,name:i,precision:s,inputsCode:o,blockCode:a,headerCode:l}=W3(t);super(e,n,i,s),this.inputsCode=o,this.blockCode=a,this.headerCode=l}getCode(t=this.name){let e;const n=this.blockCode;if(n!==""){const{type:i,inputsCode:s,headerCode:o,precision:a}=this;let l=`${i} ${t} ( ${s.trim()} )`;a!==""&&(l=`${a} ${l}`),e=o+l+n}else e="";return e}}class X3 extends Gv{parseFunction(t){return new q3(t)}}class kv extends Fd{constructor(){super()}indirect(t,e,n){const i=t.ambientOcclusion,s=t.reflectedLight,o=n.context.irradianceLightMap;s.indirectDiffuse.assign(Qt(0)),o?s.indirectDiffuse.addAssign(o):s.indirectDiffuse.addAssign(Qt(1,1,1,0)),s.indirectDiffuse.mulAssign(i),s.indirectDiffuse.mulAssign(Ee.rgb)}finish(t,e,n){const i=n.material,s=t.outgoingLight,o=n.context.environment;if(o)switch(i.combine){case bd:s.rgb.assign(Oe(s.rgb,s.rgb.mul(o.rgb),Iu.mul(jf)));break;case P2:s.rgb.assign(Oe(s.rgb,o.rgb,Iu.mul(jf)));break;case F2:s.rgb.addAssign(o.rgb.mul(Iu.mul(jf)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",i.combine);break}}}const Y3=()=>J(.25),j3=Mt(({dotNH:r})=>dg.mul(J(.5)).add(1).mul(J(1/Math.PI)).mul(r.pow(dg))),K3=Mt(({lightDirection:r})=>{const t=r.add(ke).normalize(),e=sn.dot(t).clamp(),n=ke.dot(t).clamp(),i=Fc({f0:Si,f90:1,dotVH:n}),s=Y3(),o=j3({dotNH:e});return i.mul(s).mul(o)});class Vv extends kv{constructor(t=!0){super(),this.specular=t}direct({lightDirection:t,lightColor:e,reflectedLight:n}){const s=sn.dot(t).clamp().mul(e);n.directDiffuse.addAssign(s.mul(hl({diffuseColor:Ee.rgb}))),this.specular===!0&&n.directSpecular.addAssign(s.mul(K3({lightDirection:t})).mul(Iu))}indirect({ambientOcclusion:t,irradiance:e,reflectedLight:n}){n.indirectDiffuse.addAssign(e.mul(hl({diffuseColor:Ee}))),n.indirectDiffuse.mulAssign(t)}}const Hv=Mt(r=>{const{dotNV:t,specularColor:e,specularF90:n,roughness:i}=r,s=Dv({dotNV:t,roughness:i});return e.mul(s.x).add(n.mul(s.y))}),Z3=Mt(({roughness:r,dotNH:t})=>{const e=r.pow2(),n=J(1).div(e),s=t.pow2().oneMinus().max(.0078125);return J(2).add(n).mul(s.pow(n.mul(.5))).div(2*Math.PI)}).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),Q3=Mt(({dotNV:r,dotNL:t})=>J(1).div(J(4).mul(t.add(r).sub(t.mul(r))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),J3=Mt(({lightDirection:r})=>{const t=r.add(ke).normalize(),e=sn.dot(r).clamp(),n=sn.dot(ke).clamp(),i=sn.dot(t).clamp(),s=Z3({roughness:xx,dotNH:i}),o=Q3({dotNV:n,dotNL:e});return Ia.mul(s).mul(o)}),tB=Mt(({N:r,V:t,roughness:e})=>{const s=.0078125,o=r.dot(t).saturate(),a=Tt(e,o.oneMinus().sqrt());return a.assign(a.mul(.984375).add(s)),a}).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),eB=Mt(({f:r})=>{const t=r.length();return es(t.mul(t).add(r.z).div(t.add(1)),0)}).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),su=Mt(({v1:r,v2:t})=>{const e=r.dot(t),n=e.abs().toVar(),i=n.mul(.0145206).add(.4965155).mul(n).add(.8543985).toVar(),s=n.add(4.1616724).mul(n).add(3.417594).toVar(),o=i.div(s),a=e.greaterThan(0).select(o,es(e.mul(e).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return r.cross(t).mul(a)}).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),X_=Mt(({N:r,V:t,P:e,mInv:n,p0:i,p1:s,p2:o,p3:a})=>{const l=s.sub(i).toVar(),c=a.sub(i).toVar(),h=l.cross(c),u=Q().toVar();return On(h.dot(e.sub(i)).greaterThanEqual(0),()=>{const d=t.sub(r.mul(t.dot(r))).normalize(),f=r.cross(d).negate(),p=n.mul(ri(d,f,r).transpose()).toVar(),x=p.mul(i.sub(e)).normalize().toVar(),m=p.mul(s.sub(e)).normalize().toVar(),g=p.mul(o.sub(e)).normalize().toVar(),_=p.mul(a.sub(e)).normalize().toVar(),y=Q(0).toVar();y.addAssign(su({v1:x,v2:m})),y.addAssign(su({v1:m,v2:g})),y.addAssign(su({v1:g,v2:_})),y.addAssign(su({v1:_,v2:x})),u.assign(Q(eB({f:y})))}),u}).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),Y_=Mt(([r,t,e,n,i])=>{const s=Q(WT(t.negate(),Ac(r),Lr(1,n))),o=Q(Ya(i[0].xyz),Ya(i[1].xyz),Ya(i[2].xyz));return Ac(s).mul(e.mul(o))}).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),nB=Mt(([r,t])=>r.mul(Dr(t.mul(2).sub(2),0,1))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),iB=FD(),j_=Mt(([r,t,e])=>{const n=iB.uv(r),i=Nd(J(Mg.x)).mul(nB(t,e));return r3(n,i)}),K_=Mt(([r,t,e])=>(On(e.notEqual(0),()=>{const n=OT(t).negate().div(e);return BT(n.negate().mul(r))}),Q(1))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),sB=Mt(([r,t,e,n,i,s,o,a,l,c,h,u,d,f,p])=>{let x,m;if(p){x=Qt().toVar(),m=Q().toVar();const w=h.sub(1).mul(p.mul(.025)),A=Q(h.sub(w),h,h.add(w));Vs({start:0,end:3},({i:T})=>{const R=A.element(T),$=Y_(r,t,u,R,a),M=o.add($),b=c.mul(l.mul(Qt(M,1))),k=Tt(b.xy.div(b.w)).toVar();k.addAssign(1),k.divAssign(2),k.assign(Tt(k.x,k.y.oneMinus()));const z=j_(k,e,R);x.element(T).assign(z.element(T)),x.a.addAssign(z.a),m.element(T).assign(n.element(T).mul(K_(Ya($),d,f).element(T)))}),x.a.divAssign(3)}else{const w=Y_(r,t,u,h,a),A=o.add(w),T=c.mul(l.mul(Qt(A,1))),R=Tt(T.xy.div(T.w)).toVar();R.addAssign(1),R.divAssign(2),R.assign(Tt(R.x,R.y.oneMinus())),x=j_(R,e,h),m=n.mul(K_(Ya(w),d,f))}const g=m.rgb.mul(x.rgb),_=r.dot(t).clamp(),y=Q(Hv({dotNV:_,specularColor:i,specularF90:s,roughness:e})),S=m.r.add(m.g,m.b).div(3);return Qt(y.oneMinus().mul(g),x.a.oneMinus().mul(S).oneMinus())}),rB=ri(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),oB=r=>{const t=r.sqrt();return Q(1).add(t).div(Q(1).sub(t))},Z_=(r,t)=>r.sub(t).div(r.add(t)).pow2(),aB=(r,t)=>{const e=r.mul(2*Math.PI*1e-9),n=Q(54856e-17,44201e-17,52481e-17),i=Q(1681e3,1795300,2208400),s=Q(43278e5,93046e5,66121e5),o=J(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(e.mul(2239900).add(t.x).cos()).mul(e.pow2().mul(-45282e5).exp());let a=n.mul(s.mul(2*Math.PI).sqrt()).mul(i.mul(e).add(t).cos()).mul(e.pow2().negate().mul(s).exp());return a=Q(a.x.add(o),a.y,a.z).div(10685e-11),rB.mul(a)},lB=Mt(({outsideIOR:r,eta2:t,cosTheta1:e,thinFilmThickness:n,baseF0:i})=>{const s=Oe(r,t,vo(0,.03,n)),o=r.div(s).pow2().mul(J(1).sub(e.pow2())),l=J(1).sub(o).sqrt(),c=Z_(s,r),h=Fc({f0:c,f90:1,dotVH:e}),u=h.oneMinus(),d=s.lessThan(r).select(Math.PI,0),f=J(Math.PI).sub(d),p=oB(i.clamp(0,.9999)),x=Z_(p,s.toVec3()),m=Fc({f0:x,f90:1,dotVH:l}),g=Q(p.x.lessThan(s).select(Math.PI,0),p.y.lessThan(s).select(Math.PI,0),p.z.lessThan(s).select(Math.PI,0)),_=s.mul(n,l,2),y=Q(f).add(g),S=h.mul(m).clamp(1e-5,.9999),w=S.sqrt(),A=u.pow2().mul(m).div(Q(1).sub(S));let R=h.add(A),$=A.sub(u);for(let M=1;M<=2;++M){$=$.mul(w);const b=aB(J(M).mul(_),J(M).mul(y)).mul(2);R=R.add($.mul(b))}return R.max(Q(0))}).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),cB=Mt(({normal:r,viewDir:t,roughness:e})=>{const n=r.dot(t).saturate(),i=e.pow2(),s=ei(e.lessThan(.25),J(-339.2).mul(i).add(J(161.4).mul(e)).sub(25.9),J(-8.48).mul(i).add(J(14.3).mul(e)).sub(9.95)),o=ei(e.lessThan(.25),J(44).mul(i).sub(J(23.7).mul(e)).add(3.26),J(1.97).mul(i).sub(J(3.27).mul(e)).add(.72));return ei(e.lessThan(.25),0,J(.1).mul(e).sub(.025)).add(s.mul(n).add(o).exp()).mul(1/Math.PI).saturate()}),Cp=Q(.04),Pp=J(1);class $v extends Fd{constructor(t=!1,e=!1,n=!1,i=!1,s=!1,o=!1){super(),this.clearcoat=t,this.sheen=e,this.iridescence=n,this.anisotropy=i,this.transmission=s,this.dispersion=o,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(t){if(this.clearcoat===!0&&(this.clearcoatRadiance=Q().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=Q().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=Q().toVar("clearcoatSpecularIndirect")),this.sheen===!0&&(this.sheenSpecularDirect=Q().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=Q().toVar("sheenSpecularIndirect")),this.iridescence===!0){const e=sn.dot(ke).clamp();this.iridescenceFresnel=lB({outsideIOR:J(1),eta2:RT,cosTheta1:e,thinFilmThickness:CT,baseF0:Si}),this.iridescenceF0=R3({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(this.transmission===!0){const e=xg,n=iL.sub(xg).normalize(),i=iv;t.backdrop=sB(i,n,zs,Ee,Si,cd,e,bo,tr,Ex,Pu,PT,IT,FT,this.dispersion?LT:null),t.backdropAlpha=fg,Ee.a.mulAssign(Oe(1,t.backdrop.a,fg))}}computeMultiscattering(t,e,n){const i=sn.dot(ke).clamp(),s=Dv({roughness:zs,dotNV:i}),a=(this.iridescenceF0?yx.mix(Si,this.iridescenceF0):Si).mul(s.x).add(n.mul(s.y)),c=s.x.add(s.y).oneMinus(),h=Si.add(Si.oneMinus().mul(.047619)),u=a.mul(h).div(c.mul(h).oneMinus());t.addAssign(a),e.addAssign(u.mul(c))}direct({lightDirection:t,lightColor:e,reflectedLight:n}){const s=sn.dot(t).clamp().mul(e);if(this.sheen===!0&&this.sheenSpecularDirect.addAssign(s.mul(J3({lightDirection:t}))),this.clearcoat===!0){const a=rc.dot(t).clamp().mul(e);this.clearcoatSpecularDirect.addAssign(a.mul(V_({lightDirection:t,f0:Cp,f90:Pp,roughness:ld,normalView:rc})))}n.directDiffuse.addAssign(s.mul(hl({diffuseColor:Ee.rgb}))),n.directSpecular.addAssign(s.mul(V_({lightDirection:t,f0:Si,f90:1,roughness:zs,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:t,lightPosition:e,halfWidth:n,halfHeight:i,reflectedLight:s,ltc_1:o,ltc_2:a}){const l=e.add(n).sub(i),c=e.sub(n).sub(i),h=e.sub(n).add(i),u=e.add(n).add(i),d=sn,f=ke,p=Un.toVar(),x=tB({N:d,V:f,roughness:zs}),m=o.uv(x).toVar(),g=a.uv(x).toVar(),_=ri(Q(m.x,0,m.y),Q(0,1,0),Q(m.z,0,m.w)).toVar(),y=Si.mul(g.x).add(Si.oneMinus().mul(g.y)).toVar();s.directSpecular.addAssign(t.mul(y).mul(X_({N:d,V:f,P:p,mInv:_,p0:l,p1:c,p2:h,p3:u}))),s.directDiffuse.addAssign(t.mul(Ee).mul(X_({N:d,V:f,P:p,mInv:ri(1,0,0,0,1,0,0,0,1),p0:l,p1:c,p2:h,p3:u})))}indirect(t,e,n){this.indirectDiffuse(t,e,n),this.indirectSpecular(t,e,n),this.ambientOcclusion(t,e,n)}indirectDiffuse({irradiance:t,reflectedLight:e}){e.indirectDiffuse.addAssign(t.mul(hl({diffuseColor:Ee})))}indirectSpecular({radiance:t,iblIrradiance:e,reflectedLight:n}){if(this.sheen===!0&&this.sheenSpecularIndirect.addAssign(e.mul(Ia,cB({normal:sn,viewDir:ke,roughness:xx}))),this.clearcoat===!0){const c=rc.dot(ke).clamp(),h=Hv({dotNV:c,specularColor:Cp,specularF90:Pp,roughness:ld});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(h))}const i=Q().toVar("singleScattering"),s=Q().toVar("multiScattering"),o=e.mul(1/Math.PI);this.computeMultiscattering(i,s,cd);const a=i.add(s),l=Ee.mul(a.r.max(a.g).max(a.b).oneMinus());n.indirectSpecular.addAssign(t.mul(i)),n.indirectSpecular.addAssign(s.mul(o)),n.indirectDiffuse.addAssign(l.mul(o))}ambientOcclusion({ambientOcclusion:t,reflectedLight:e}){const i=sn.dot(ke).clamp().add(t),s=zs.mul(-16).oneMinus().negate().exp2(),o=t.sub(i.pow(s).oneMinus()).clamp();this.clearcoat===!0&&this.clearcoatSpecularIndirect.mulAssign(t),this.sheen===!0&&this.sheenSpecularIndirect.mulAssign(t),e.indirectDiffuse.mulAssign(t),e.indirectSpecular.mulAssign(o)}finish(t){const{outgoingLight:e}=t;if(this.clearcoat===!0){const n=rc.dot(ke).clamp(),i=Fc({dotVH:n,f0:Cp,f90:Pp}),s=e.mul(hg.mul(i).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(hg));e.assign(s)}if(this.sheen===!0){const n=Ia.r.max(Ia.g).max(Ia.b).mul(.157).oneMinus(),i=e.mul(n).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);e.assign(i)}}}function hB(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.material.id!==t.material.id?r.material.id-t.material.id:r.z!==t.z?r.z-t.z:r.id-t.id}function uB(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.z!==t.z?t.z-r.z:r.id-t.id}class dB{constructor(){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparent=[],this.bundles=[],this.lightsNode=new uv([]),this.lightsArray=[],this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(t,e,n,i,s,o){let a=this.renderItems[this.renderItemsIndex];return a===void 0?(a={id:t.id,object:t,geometry:e,material:n,groupOrder:i,renderOrder:t.renderOrder,z:s,group:o},this.renderItems[this.renderItemsIndex]=a):(a.id=t.id,a.object=t,a.geometry=e,a.material=n,a.groupOrder=i,a.renderOrder=t.renderOrder,a.z=s,a.group=o),this.renderItemsIndex++,a}push(t,e,n,i,s,o){const a=this.getNextRenderItem(t,e,n,i,s,o);t.occlusionTest===!0&&this.occlusionQueryCount++,(n.transparent===!0||n.transmission>0?this.transparent:this.opaque).push(a)}unshift(t,e,n,i,s,o){const a=this.getNextRenderItem(t,e,n,i,s,o);(n.transparent===!0?this.transparent:this.opaque).unshift(a)}pushBundle(t){this.bundles.push(t)}pushLight(t){this.lightsArray.push(t)}getLightsNode(){return this.lightsNode.fromLights(this.lightsArray)}sort(t,e){this.opaque.length>1&&this.opaque.sort(t||hB),this.transparent.length>1&&this.transparent.sort(e||uB)}finish(){this.lightsNode.setLights(this.lightsArray);for(let t=this.renderItemsIndex,e=this.renderItems.length;t<e;t++){const n=this.renderItems[t];if(n.id===null)break;n.id=null,n.object=null,n.geometry=null,n.material=null,n.groupOrder=null,n.renderOrder=null,n.z=null,n.group=null}}}class fB{constructor(){this.lists=new Ys}get(t,e){const n=this.lists,i=[t,e];let s=n.get(i);return s===void 0&&(s=new dB,n.set(i,s)),s}dispose(){this.lists=new Ys}}let pB=0;class mB{constructor(){this.id=pB++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new Ie,this.scissor=!1,this.scissorValue=new Ie,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.sampleCount=1,this.width=0,this.height=0,this.isRenderContext=!0}getCacheKey(){return Wv(this)}}function Wv(r){const{textures:t,activeCubeFace:e}=r,n=[e];for(const i of t)n.push(i.id);return fT(n)}class gB{constructor(){this.chainMaps={}}get(t,e,n=null){const i=[t,e];let s;if(n===null)s="default";else{const l=n.texture.format;s=`${n.textures.length}:${l}:${n.samples}:${n.depthBuffer}:${n.stencilBuffer}`}const o=this.getChainMap(s);let a=o.get(i);return a===void 0&&(a=new mB,o.set(i,a)),n!==null&&(a.sampleCount=n.samples===0?1:n.samples),a}getChainMap(t){return this.chainMaps[t]||(this.chainMaps[t]=new Ys)}dispose(){this.chainMaps={}}}const xB=new O;class yB extends zr{constructor(t,e,n){super(),this.renderer=t,this.backend=e,this.info=n}updateRenderTarget(t,e=0){const n=this.get(t),i=t.samples===0?1:t.samples,s=n.depthTextureMips||(n.depthTextureMips={}),o=t.textures,a=this.getSize(o[0]),l=a.width>>e,c=a.height>>e;let h=t.depthTexture||s[e],u=!1;h===void 0&&(h=new Xc,h.format=t.stencilBuffer?rl:uo,h.type=t.stencilBuffer?Vc:vn,h.image.width=l,h.image.height=c,s[e]=h),(n.width!==a.width||a.height!==n.height)&&(u=!0,h.needsUpdate=!0,h.image.width=l,h.image.height=c),n.width=a.width,n.height=a.height,n.textures=o,n.depthTexture=h,n.depth=t.depthBuffer,n.stencil=t.stencilBuffer,n.renderTarget=t,n.sampleCount!==i&&(u=!0,h.needsUpdate=!0,n.sampleCount=i);const d={sampleCount:i};for(let f=0;f<o.length;f++){const p=o[f];u&&(p.needsUpdate=!0),this.updateTexture(p,d)}if(this.updateTexture(h,d),n.initialized!==!0){n.initialized=!0;const f=()=>{t.removeEventListener("dispose",f);for(let p=0;p<o.length;p++)this._destroyTexture(o[p]);this._destroyTexture(h),this.delete(t)};t.addEventListener("dispose",f)}}updateTexture(t,e={}){const n=this.get(t);if(n.initialized===!0&&n.version===t.version)return;const i=t.isRenderTargetTexture||t.isDepthTexture||t.isFramebufferTexture,s=this.backend;if(i&&n.initialized===!0&&(s.destroySampler(t),s.destroyTexture(t)),t.isFramebufferTexture){const h=this.renderer.getRenderTarget();h?t.type=h.texture.type:t.type=ks}const{width:o,height:a,depth:l}=this.getSize(t);if(e.width=o,e.height=a,e.depth=l,e.needsMipmaps=this.needsMipmaps(t),e.levels=e.needsMipmaps?this.getMipLevels(t,o,a):1,i||t.isStorageTexture===!0)s.createSampler(t),s.createTexture(t,e),n.generation=t.version;else if(n.initialized!==!0&&s.createSampler(t),t.version>0){const h=t.image;if(h===void 0)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(h.complete===!1)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(t.images){const u=[];for(const d of t.images)u.push(d);e.images=u}else e.image=h;(n.isDefaultTexture===void 0||n.isDefaultTexture===!0)&&(s.createTexture(t,e),n.isDefaultTexture=!1,n.generation=t.version),t.source.dataReady===!0&&s.updateTexture(t,e),e.needsMipmaps&&t.mipmaps.length===0&&s.generateMipmaps(t)}}else s.createDefaultTexture(t),n.isDefaultTexture=!0,n.generation=t.version;if(n.initialized!==!0){n.initialized=!0,n.generation=t.version,this.info.memory.textures++;const c=()=>{t.removeEventListener("dispose",c),this._destroyTexture(t),this.info.memory.textures--};t.addEventListener("dispose",c)}n.version=t.version}getSize(t,e=xB){let n=t.images?t.images[0]:t.image;return n?(n.image!==void 0&&(n=n.image),e.width=n.width,e.height=n.height,e.depth=t.isCubeTexture?6:n.depth||1):e.width=e.height=e.depth=1,e}getMipLevels(t,e,n){let i;return t.isCompressedTexture?i=t.mipmaps.length:i=Math.floor(Math.log2(Math.max(e,n)))+1,i}needsMipmaps(t){return this.isEnvironmentTexture(t)?!0:t.isCompressedTexture===!0||t.minFilter!==En&&t.minFilter!==si}isEnvironmentTexture(t){const e=t.mapping;return e===Gc||e===kc||e===Mo||e===sl}_destroyTexture(t){this.backend.destroySampler(t),this.backend.destroyTexture(t),this.delete(t)}}class zx extends Ae{constructor(t,e,n,i=1){super(t,e,n),this.a=i}set(t,e,n,i=1){return this.a=i,super.set(t,e,n)}copy(t){return t.a!==void 0&&(this.a=t.a),super.copy(t)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class Gx extends Lo{constructor(t=1,e=32,n=16,i=0,s=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:s,thetaStart:o,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new O,d=new O,f=[],p=[],x=[],m=[];for(let g=0;g<=n;g++){const _=[],y=g/n;let S=0;g===0&&o===0?S=.5/e:g===n&&l===Math.PI&&(S=-.5/e);for(let w=0;w<=e;w++){const A=w/e;u.x=-t*Math.cos(i+A*s)*Math.sin(o+y*a),u.y=t*Math.cos(o+y*a),u.z=t*Math.sin(i+A*s)*Math.sin(o+y*a),p.push(u.x,u.y,u.z),d.copy(u).normalize(),x.push(d.x,d.y,d.z),m.push(A+S,1-y),_.push(c++)}h.push(_)}for(let g=0;g<n;g++)for(let _=0;_<e;_++){const y=h[g][_+1],S=h[g][_],w=h[g+1][_],A=h[g+1][_+1];(g!==0||o>0)&&f.push(y,S,A),(g!==n-1||l<Math.PI)&&f.push(S,w,A)}this.setIndex(f),this.setAttribute("position",new qs(p,3)),this.setAttribute("normal",new qs(x,3)),this.setAttribute("uv",new qs(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Gx(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}const Vi=new zx;class _B extends zr{constructor(t,e){super(),this.renderer=t,this.nodes=e}update(t,e,n){const i=this.renderer,s=this.nodes.getBackgroundNode(t)||t.background;let o=!1;if(s===null)i._clearColor.getRGB(Vi,Ci),Vi.a=i._clearColor.a;else if(s.isColor===!0)s.getRGB(Vi,Ci),Vi.a=1,o=!0;else if(s.isNode===!0){const a=this.get(t),l=s;Vi.copy(i._clearColor);let c=a.backgroundMesh;if(c===void 0){const u=Sx(Qt(l).mul(P_),{getUV:()=>Ud,getTextureLevel:()=>kU});let d=yg();d=d.setZ(d.w);const f=new ln;f.name="Background.material",f.side=Zs,f.depthTest=!1,f.depthWrite=!1,f.fog=!1,f.lights=!1,f.vertexNode=d,f.colorNode=u,a.backgroundMeshNode=u,a.backgroundMesh=c=new Eo(new Gx(1,32,32),f),c.frustumCulled=!1,c.name="Background.mesh",c.onBeforeRender=function(p,x,m){this.matrixWorld.copyPosition(m.matrixWorld)}}const h=l.getCacheKey();a.backgroundCacheKey!==h&&(a.backgroundMeshNode.node=Qt(l).mul(P_),a.backgroundMeshNode.needsUpdate=!0,c.material.needsUpdate=!0,a.backgroundCacheKey=h),e.unshift(c,c.geometry,c.material,0,0,null)}else console.error("THREE.Renderer: Unsupported background configuration.",s);if(i.autoClear===!0||o===!0){Vi.multiplyScalar(Vi.a);const a=n.clearColorValue;a.r=Vi.r,a.g=Vi.g,a.b=Vi.b,a.a=Vi.a,n.depthClearValue=i._clearDepth,n.stencilClearValue=i._clearStencil,n.clearColor=i.autoClearColor===!0,n.clearDepth=i.autoClearDepth===!0,n.clearStencil=i.autoClearStencil===!0}else n.clearColor=!1,n.clearDepth=!1,n.clearStencil=!1}}class MB{constructor(t,e,n,i,s,o,a,l,c,h=[]){this.vertexShader=t,this.fragmentShader=e,this.computeShader=n,this.transforms=h,this.nodeAttributes=i,this.bindings=s,this.updateNodes=o,this.updateBeforeNodes=a,this.updateAfterNodes=l,this.monitor=c,this.usedTimes=0}createBindings(){const t=[];for(const e of this.bindings)if(e.bindings[0].groupNode.shared!==!0){const i=new bg(e.name,[],e.index,e);t.push(i);for(const s of e.bindings)i.bindings.push(s.clone())}else t.push(e);return t}}const Q_=new WeakMap;class SB extends zr{constructor(t,e){super(),this.renderer=t,this.backend=e,this.nodeFrame=new C_,this.nodeBuilderCache=new Map,this.callHashCache=new Ys,this.groupsData=new Ys}updateGroup(t){const e=t.groupNode,n=e.name;if(n===NT.name)return!0;if(n===re.name){const o=this.get(t),a=this.nodeFrame.renderId;return o.renderId!==a?(o.renderId=a,!0):!1}if(n===fF.name){const o=this.get(t),a=this.nodeFrame.frameId;return o.frameId!==a?(o.frameId=a,!0):!1}const i=[e,t];let s=this.groupsData.get(i);return s===void 0&&this.groupsData.set(i,s={}),s.version!==e.version?(s.version=e.version,!0):!1}getForRenderCacheKey(t){return t.initialCacheKey}getForRender(t){const e=this.get(t);let n=e.nodeBuilderState;if(n===void 0){const{nodeBuilderCache:i}=this,s=this.getForRenderCacheKey(t);if(n=i.get(s),n===void 0){const o=this.backend.createNodeBuilder(t.object,this.renderer);o.scene=t.scene,o.material=t.material,o.camera=t.camera,o.context.material=t.material,o.lightsNode=t.lightsNode,o.environmentNode=this.getEnvironmentNode(t.scene),o.fogNode=this.getFogNode(t.scene),o.clippingContext=t.clippingContext,o.build(),n=this._createNodeBuilderState(o),i.set(s,n)}n.usedTimes++,e.nodeBuilderState=n}return n}delete(t){if(t.isRenderObject){const e=this.get(t).nodeBuilderState;e.usedTimes--,e.usedTimes===0&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(t))}return super.delete(t)}getForCompute(t){const e=this.get(t);let n=e.nodeBuilderState;if(n===void 0){const i=this.backend.createNodeBuilder(t,this.renderer);i.build(),n=this._createNodeBuilderState(i),e.nodeBuilderState=n}return n}_createNodeBuilderState(t){return new MB(t.vertexShader,t.fragmentShader,t.computeShader,t.getAttributesArray(),t.getBindings(),t.updateNodes,t.updateBeforeNodes,t.updateAfterNodes,t.monitor,t.transforms)}getEnvironmentNode(t){return t.environmentNode||this.get(t).environmentNode||null}getBackgroundNode(t){return t.backgroundNode||this.get(t).backgroundNode||null}getFogNode(t){return t.fogNode||this.get(t).fogNode||null}getCacheKey(t,e){const n=[t,e],i=this.renderer.info.calls;let s=this.callHashCache.get(n);if(s===void 0||s.callId!==i){const o=this.getEnvironmentNode(t),a=this.getFogNode(t),l=[];e&&l.push(e.getCacheKey(!0)),o&&l.push(o.getCacheKey()),a&&l.push(a.getCacheKey()),l.push(this.renderer.shadowMap.enabled?1:0),s={callId:i,cacheKey:fT(l)},this.callHashCache.set(n,s)}return s.cacheKey}updateScene(t){this.updateEnvironment(t),this.updateFog(t),this.updateBackground(t)}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(t){const e=this.get(t),n=t.background;if(n){const i=t.backgroundBlurriness===0&&e.backgroundBlurriness>0||t.backgroundBlurriness>0&&e.backgroundBlurriness===0;if(e.background!==n||i){let s=null;if(n.isCubeTexture===!0||n.mapping===Gc||n.mapping===kc||n.mapping===Gm)if(t.backgroundBlurriness>0||n.mapping===Gm)s=Lv(n,Ud);else{let o;n.isCubeTexture===!0?o=Nc(n):o=Xe(n),s=zv(o)}else n.isTexture===!0?s=Xe(n,Cc.flipY()).setUpdateMatrix(!0):n.isColor!==!0&&console.error("WebGPUNodes: Unsupported background configuration.",n);e.backgroundNode=s,e.background=n,e.backgroundBlurriness=t.backgroundBlurriness}}else e.backgroundNode&&(delete e.backgroundNode,delete e.background)}updateFog(t){const e=this.get(t),n=t.fog;if(n){if(e.fog!==n){let i=null;if(n.isFogExp2){const s=Ve("color","color",n).setGroup(re),o=Ve("density","float",n).setGroup(re);i=jU(s,o)}else if(n.isFog){const s=Ve("color","color",n).setGroup(re),o=Ve("near","float",n).setGroup(re),a=Ve("far","float",n).setGroup(re);i=XU(s,o,a)}else console.error("WebGPUNodes: Unsupported fog configuration.",n);e.fogNode=i,e.fog=n}}else delete e.fogNode,delete e.fog}updateEnvironment(t){const e=this.get(t),n=t.environment;if(n){if(e.environment!==n){let i=null;n.isCubeTexture===!0?i=Nc(n):n.isTexture===!0?i=Xe(n):console.error("Nodes: Unsupported environment configuration.",n),e.environmentNode=i,e.environment=n}}else e.environmentNode&&(delete e.environmentNode,delete e.environment)}getNodeFrame(t=this.renderer,e=null,n=null,i=null,s=null){const o=this.nodeFrame;return o.renderer=t,o.scene=e,o.object=n,o.camera=i,o.material=s,o}getNodeFrameForRender(t){return this.getNodeFrame(t.renderer,t.scene,t.object,t.camera,t.material)}getOutputCacheKey(){const t=this.renderer;return t.toneMapping+","+t.currentColorSpace}hasOutputChange(t){return Q_.get(t)!==this.getOutputCacheKey()}getOutputNode(t){const e=this.renderer,n=this.getOutputCacheKey(),i=Xe(t,Cc).renderOutput(e.toneMapping,e.currentColorSpace);return Q_.set(t,n),i}updateBefore(t){const e=t.getNodeBuilderState();for(const n of e.updateBeforeNodes)this.getNodeFrameForRender(t).updateBeforeNode(n)}updateAfter(t){const e=t.getNodeBuilderState();for(const n of e.updateAfterNodes)this.getNodeFrameForRender(t).updateAfterNode(n)}updateForCompute(t){const e=this.getNodeFrame(),n=this.getForCompute(t);for(const i of n.updateNodes)e.updateNode(i)}updateForRender(t){const e=this.getNodeFrameForRender(t),n=t.getNodeBuilderState();for(const i of n.updateNodes)e.updateNode(i)}needsRefresh(t){const e=this.getNodeFrameForRender(t);return t.getMonitor().needsRefresh(t,e)}dispose(){super.dispose(),this.nodeFrame=new C_,this.nodeBuilderCache=new Map}}class TB{constructor(t,e){this.scene=t,this.camera=e}clone(){return Object.assign(new this.constructor,this)}}class vB{constructor(){this.lists=new Ys}get(t,e){const n=this.lists,i=[t,e];let s=n.get(i);return s===void 0&&(s=new TB(t,e),n.set(i,s)),s}dispose(){this.lists=new Ys}}class qv{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map,this.colorSpaceNodes=new Map}fromMaterial(t){if(t.isNodeMaterial)return t;let e=null;const n=this.getMaterialNodeClass(t.type);if(n!==null){e=new n;for(const i in t)e[i]=t[i]}return e}addColorSpace(t,e){this.addType(t,e,this.colorSpaceNodes)}getColorSpaceFunction(t){return this.colorSpaceNodes.get(t)||null}addToneMapping(t,e){this.addType(t,e,this.toneMappingNodes)}getToneMappingFunction(t){return this.toneMappingNodes.get(t)||null}getMaterialNodeClass(t){return this.materialNodes.get(t)||null}addMaterial(t,e){this.addType(t,e.name,this.materialNodes)}getLightNodeClass(t){return this.lightNodes.get(t)||null}addLight(t,e){this.addClass(t,e,this.lightNodes)}addType(t,e,n){if(n.has(e)){console.warn(`Redefinition of node ${e}`);return}if(typeof t!="function")throw new Error(`Node class ${t.name} is not a class.`);if(typeof e=="function"||typeof e=="object")throw new Error(`Base class ${e} is not a class.`);n.set(e,t)}addClass(t,e,n){if(n.has(e)){console.warn(`Redefinition of node ${e.name}`);return}if(typeof t!="function")throw new Error(`Node class ${t.name} is not a class.`);if(typeof e!="function")throw new Error(`Base class ${e.name} is not a class.`);n.set(e,t)}}const Zr=new Rx,ru=new O;class Xv{constructor(t=new Mr,e=new Mr,n=new Mr,i=new Mr,s=new Mr,o=new Mr){this.planes=[t,e,n,i,s,o]}set(t,e,n,i,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(s),a[5].copy(o),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=Ki){const n=this.planes,i=t.elements,s=i[0],o=i[1],a=i[2],l=i[3],c=i[4],h=i[5],u=i[6],d=i[7],f=i[8],p=i[9],x=i[10],m=i[11],g=i[12],_=i[13],y=i[14],S=i[15];if(n[0].setComponents(l-s,d-c,m-f,S-g).normalize(),n[1].setComponents(l+s,d+c,m+f,S+g).normalize(),n[2].setComponents(l+o,d+h,m+p,S+_).normalize(),n[3].setComponents(l-o,d-h,m-p,S-_).normalize(),n[4].setComponents(l-a,d-u,m-x,S-y).normalize(),e===Ki)n[5].setComponents(l+a,d+u,m+x,S+y).normalize();else if(e===To)n[5].setComponents(a,u,x,y).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),Zr.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),Zr.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(Zr)}intersectsSprite(t){return Zr.center.set(0,0,0),Zr.radius=.7071067811865476,Zr.applyMatrix4(t.matrixWorld),this.intersectsSphere(Zr)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(ru.x=i.normal.x>0?t.max.x:t.min.x,ru.y=i.normal.y>0?t.max.y:t.min.y,ru.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(ru)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}const J_=new Tv,ou=new Me,Fp=new Ie,Ip=new Xv,au=new an,pa=new Ie;class bB{constructor(t,e={}){this.isRenderer=!0;const{logarithmicDepthBuffer:n=!1,alpha:i=!0,depth:s=!0,stencil:o=!1,antialias:a=!1,samples:l=0,getFallback:c=null}=e;this.domElement=t.getDomElement(),this.backend=t,this.samples=l||a===!0?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=n,this.outputColorSpace=Ot,this.toneMapping=Va,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=s,this.stencil=o,this.clippingPlanes=[],this.info=new AP,this.nodes={library:new qv,modelViewMatrix:null,modelNormalViewMatrix:null},this._getFallback=c,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new Ie(0,0,this._width,this._height),this._scissor=new Ie(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new Ev(new ln),this._quad.material.type="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const h=this.alpha===!0?0:1;this._clearColor=new zx(0,0,0,h),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:N2},this.xr={enabled:!1},this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(u,d,f)=>{await this.compileAsync(u,d);const p=this._renderLists.get(u,d),x=this._renderContexts.get(u,d,this._renderTarget),m=u.overrideMaterial||f.material,g=this._objects.get(f,m,u,d,p.lightsNode,x),{fragmentShader:_,vertexShader:y}=g.getNodeBuilderState();return{fragmentShader:_,vertexShader:y}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return this._initPromise!==null?this._initPromise:(this._initPromise=new Promise(async(t,e)=>{let n=this.backend;try{await n.init(this)}catch(i){if(this._getFallback!==null)try{this.backend=n=this._getFallback(i),await n.init(this)}catch(s){e(s);return}else{e(i);return}}this._nodes=new SB(this,n),this._animation=new a2(this._nodes,this.info),this._attributes=new TP(n),this._background=new _B(this,this._nodes),this._geometries=new EP(this._attributes,this.info),this._textures=new yB(this,n,this.info),this._pipelines=new CP(n,this._nodes),this._bindings=new PP(n,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new _P(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new fB,this._bundles=new vB,this._renderContexts=new gB,this._initialized=!0,t()}),this._initPromise)}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(t,e,n=null){this._initialized===!1&&await this.init();const i=this._nodes.nodeFrame,s=i.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,l=this._compilationPromises,c=t.isScene===!0?t:J_;n===null&&(n=t);const h=this._renderTarget,u=this._renderContexts.get(n,e,h),d=this._activeMipmapLevel,f=[];this._currentRenderContext=u,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=f,i.renderId++,i.update(),u.depth=this.depth,u.stencil=this.stencil,u.clippingContext||(u.clippingContext=new lg),u.clippingContext.updateGlobal(this,e),c.onBeforeRender(this,t,e,h);const p=this._renderLists.get(t,e);if(p.begin(),this._projectObject(t,e,0,p),n!==t&&n.traverseVisible(function(_){_.isLight&&_.layers.test(e.layers)&&p.pushLight(_)}),p.finish(),h!==null){this._textures.updateRenderTarget(h,d);const _=this._textures.get(h);u.textures=_.textures,u.depthTexture=_.depthTexture}else u.textures=null,u.depthTexture=null;this._nodes.updateScene(c),this._background.update(c,p,u);const x=p.opaque,m=p.transparent,g=p.lightsNode;this.opaque===!0&&x.length>0&&this._renderObjects(x,e,c,g),this.transparent===!0&&m.length>0&&this._renderObjects(m,e,c,g),i.renderId=s,this._currentRenderContext=o,this._currentRenderObjectFunction=a,this._compilationPromises=l,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(f)}async renderAsync(t,e){this._initialized===!1&&await this.init();const n=this._renderScene(t,e);await this.backend.resolveTimestampAsync(n,"render")}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}_renderBundle(t,e,n){const{bundleGroup:i,camera:s,renderList:o}=t,a=this._currentRenderContext,l=this._bundles.get(i,s),c=this.backend.get(l);c.renderContexts===void 0&&(c.renderContexts=new Set);const h=i.version!==c.version,u=c.renderContexts.has(a)===!1||h;if(c.renderContexts.add(a),u){this.backend.beginBundle(a),(c.renderObjects===void 0||h)&&(c.renderObjects=[]),this._currentRenderBundle=l;const d=o.opaque;d.length>0&&this._renderObjects(d,s,e,n),this._currentRenderBundle=null,this.backend.finishBundle(a,l),c.version=i.version}else{const{renderObjects:d}=c;for(let f=0,p=d.length;f<p;f++){const x=d[f];this._nodes.needsRefresh(x)&&(this._nodes.updateBefore(x),this._nodes.updateForRender(x),this._bindings.updateForRender(x),this._nodes.updateAfter(x))}}this.backend.addBundle(a,l)}render(t,e){if(this._initialized===!1)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(t,e);this._renderScene(t,e)}_getFrameBufferTarget(){const{currentToneMapping:t,currentColorSpace:e}=this;if(t!==Va===!1&&e!==Ci===!1)return null;const{width:s,height:o}=this.getDrawingBufferSize(ou),{depth:a,stencil:l}=this;let c=this._frameBufferTarget;return c===null&&(c=new Tl(s,o,{depthBuffer:a,stencilBuffer:l,type:Ws,format:gl,colorSpace:Ci,generateMipmaps:!1,minFilter:si,magFilter:si,samples:this.samples}),c.isPostProcessingRenderTarget=!0,this._frameBufferTarget=c),c.depthBuffer=a,c.stencilBuffer=l,c.setSize(s,o),c.viewport.copy(this._viewport),c.scissor.copy(this._scissor),c.viewport.multiplyScalar(this._pixelRatio),c.scissor.multiplyScalar(this._pixelRatio),c.scissorTest=this._scissorTest,c}_renderScene(t,e,n=!0){const i=n?this._getFrameBufferTarget():null,s=this._nodes.nodeFrame,o=s.renderId,a=this._currentRenderContext,l=this._currentRenderObjectFunction,c=t.isScene===!0?t:J_,h=this._renderTarget,u=this._activeCubeFace,d=this._activeMipmapLevel;let f;i!==null?(f=i,this.setRenderTarget(f)):f=h;const p=this._renderContexts.get(t,e,f);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,s.renderId=this.info.calls;const x=this.coordinateSystem;e.coordinateSystem!==x&&(e.coordinateSystem=x,e.updateProjectionMatrix()),t.matrixWorldAutoUpdate===!0&&t.updateMatrixWorld(),e.parent===null&&e.matrixWorldAutoUpdate===!0&&e.updateMatrixWorld();let m=this._viewport,g=this._scissor,_=this._pixelRatio;f!==null&&(m=f.viewport,g=f.scissor,_=1),this.getDrawingBufferSize(ou),Fp.set(0,0,ou.width,ou.height);const y=m.minDepth===void 0?0:m.minDepth,S=m.maxDepth===void 0?1:m.maxDepth;p.viewportValue.copy(m).multiplyScalar(_).floor(),p.viewportValue.width>>=d,p.viewportValue.height>>=d,p.viewportValue.minDepth=y,p.viewportValue.maxDepth=S,p.viewport=p.viewportValue.equals(Fp)===!1,p.scissorValue.copy(g).multiplyScalar(_).floor(),p.scissor=this._scissorTest&&p.scissorValue.equals(Fp)===!1,p.scissorValue.width>>=d,p.scissorValue.height>>=d,p.clippingContext||(p.clippingContext=new lg),p.clippingContext.updateGlobal(this,e),c.onBeforeRender(this,t,e,f),au.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),Ip.setFromProjectionMatrix(au,x);const w=this._renderLists.get(t,e);if(w.begin(),this._projectObject(t,e,0,w),w.finish(),this.sortObjects===!0&&w.sort(this._opaqueSort,this._transparentSort),f!==null){this._textures.updateRenderTarget(f,d);const M=this._textures.get(f);p.textures=M.textures,p.depthTexture=M.depthTexture,p.width=M.width,p.height=M.height,p.renderTarget=f,p.depth=f.depthBuffer,p.stencil=f.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=d,p.height>>=d,p.activeCubeFace=u,p.activeMipmapLevel=d,p.occlusionQueryCount=w.occlusionQueryCount,this._nodes.updateScene(c),this._background.update(c,w,p),this.backend.beginRender(p);const{bundles:A,lightsNode:T,transparent:R,opaque:$}=w;if(A.length>0&&this._renderBundles(A,c,T),this.opaque===!0&&$.length>0&&this._renderObjects($,e,c,T),this.transparent===!0&&R.length>0&&this._renderObjects(R,e,c,T),this.backend.finishRender(p),s.renderId=o,this._currentRenderContext=a,this._currentRenderObjectFunction=l,i!==null){this.setRenderTarget(h,u,d);const M=this._quad;this._nodes.hasOutputChange(f.texture)&&(M.material.fragmentNode=this._nodes.getOutputNode(f.texture),M.material.needsUpdate=!0),this._renderScene(M,M.camera,!1)}return c.onAfterRender(this,t,e,f),p}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(t){this._initialized===!1&&await this.init(),this._animation.setAnimationLoop(t)}async getArrayBufferAsync(t){return await this.backend.getArrayBufferAsync(t)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(t){return t.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(t){return t.set(this._width,this._height)}setPixelRatio(t=1){this._pixelRatio=t,this.setSize(this._width,this._height,!1)}setDrawingBufferSize(t,e,n){this._width=t,this._height=e,this._pixelRatio=n,this.domElement.width=Math.floor(t*n),this.domElement.height=Math.floor(e*n),this.setViewport(0,0,t,e),this._initialized&&this.backend.updateSize()}setSize(t,e,n=!0){this._width=t,this._height=e,this.domElement.width=Math.floor(t*this._pixelRatio),this.domElement.height=Math.floor(e*this._pixelRatio),n===!0&&(this.domElement.style.width=t+"px",this.domElement.style.height=e+"px"),this.setViewport(0,0,t,e),this._initialized&&this.backend.updateSize()}setOpaqueSort(t){this._opaqueSort=t}setTransparentSort(t){this._transparentSort=t}getScissor(t){const e=this._scissor;return t.x=e.x,t.y=e.y,t.width=e.width,t.height=e.height,t}setScissor(t,e,n,i){const s=this._scissor;t.isVector4?s.copy(t):s.set(t,e,n,i)}getScissorTest(){return this._scissorTest}setScissorTest(t){this._scissorTest=t,this.backend.setScissorTest(t)}getViewport(t){return t.copy(this._viewport)}setViewport(t,e,n,i,s=0,o=1){const a=this._viewport;t.isVector4?a.copy(t):a.set(t,e,n,i),a.minDepth=s,a.maxDepth=o}getClearColor(t){return t.copy(this._clearColor)}setClearColor(t,e=1){this._clearColor.set(t),this._clearColor.a=e}getClearAlpha(){return this._clearColor.a}setClearAlpha(t){this._clearColor.a=t}getClearDepth(){return this._clearDepth}setClearDepth(t){this._clearDepth=t}getClearStencil(){return this._clearStencil}setClearStencil(t){this._clearStencil=t}isOccluded(t){const e=this._currentRenderContext;return e&&this.backend.isOccluded(e,t)}clear(t=!0,e=!0,n=!0){if(this._initialized===!1)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(t,e,n);const i=this._renderTarget||this._getFrameBufferTarget();let s=null;if(i!==null&&(this._textures.updateRenderTarget(i),s=this._textures.get(i)),this.backend.clear(t,e,n,s),i!==null&&this._renderTarget===null){const o=this._quad;this._nodes.hasOutputChange(i.texture)&&(o.material.fragmentNode=this._nodes.getOutputNode(i.texture),o.material.needsUpdate=!0),this._renderScene(o,o.camera,!1)}}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(t=!0,e=!0,n=!0){this._initialized===!1&&await this.init(),this.clear(t,e,n)}clearColorAsync(){return this.clearAsync(!0,!1,!1)}clearDepthAsync(){return this.clearAsync(!1,!0,!1)}clearStencilAsync(){return this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this._renderTarget!==null?Va:this.toneMapping}get currentColorSpace(){return this._renderTarget!==null?Ci:this.outputColorSpace}dispose(){this.info.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(t,e=0,n=0){this._renderTarget=t,this._activeCubeFace=e,this._activeMipmapLevel=n}getRenderTarget(){return this._renderTarget}setRenderObjectFunction(t){this._renderObjectFunction=t}getRenderObjectFunction(){return this._renderObjectFunction}async computeAsync(t){this._initialized===!1&&await this.init();const e=this._nodes.nodeFrame,n=e.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,e.renderId=this.info.calls;const i=this.backend,s=this._pipelines,o=this._bindings,a=this._nodes,l=Array.isArray(t)?t:[t];if(l[0]===void 0||l[0].isComputeNode!==!0)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");i.beginCompute(t);for(const c of l){if(s.has(c)===!1){const d=()=>{c.removeEventListener("dispose",d),s.delete(c),o.delete(c),a.delete(c)};c.addEventListener("dispose",d),c.onInit({renderer:this})}a.updateForCompute(c),o.updateForCompute(c);const h=o.getForCompute(c),u=s.getForCompute(c,h);i.compute(t,c,h,u)}i.finishCompute(t),await this.backend.resolveTimestampAsync(t,"compute"),e.renderId=n}async hasFeatureAsync(t){return this._initialized===!1&&await this.init(),this.backend.hasFeature(t)}hasFeature(t){return this._initialized===!1?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(t)}copyFramebufferToTexture(t,e=null){const n=this._currentRenderContext;this._textures.updateTexture(t),e=e===null?pa.set(0,0,t.image.width,t.image.height):e,this.backend.copyFramebufferToTexture(t,n,e)}copyTextureToTexture(t,e,n=null,i=null,s=0){this._textures.updateTexture(t),this._textures.updateTexture(e),this.backend.copyTextureToTexture(t,e,n,i,s)}readRenderTargetPixelsAsync(t,e,n,i,s,o=0,a=0){return this.backend.copyTextureToBuffer(t.textures[o],e,n,i,s,a)}_projectObject(t,e,n,i){if(t.visible===!1)return;if(t.layers.test(e.layers)){if(t.isGroup)n=t.renderOrder;else if(t.isLOD)t.autoUpdate===!0&&t.update(e);else if(t.isLight)i.pushLight(t);else if(t.isSprite){if(!t.frustumCulled||Ip.intersectsSprite(t)){this.sortObjects===!0&&pa.setFromMatrixPosition(t.matrixWorld).applyMatrix4(au);const{geometry:a,material:l}=t;l.visible&&i.push(t,a,l,n,pa.z,null)}}else if(t.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((t.isMesh||t.isLine||t.isPoints)&&(!t.frustumCulled||Ip.intersectsObject(t))){const{geometry:a,material:l}=t;if(this.sortObjects===!0&&(a.boundingSphere===null&&a.computeBoundingSphere(),pa.copy(a.boundingSphere.center).applyMatrix4(t.matrixWorld).applyMatrix4(au)),Array.isArray(l)){const c=a.groups;for(let h=0,u=c.length;h<u;h++){const d=c[h],f=l[d.materialIndex];f&&f.visible&&i.push(t,a,f,n,pa.z,d)}}else l.visible&&i.push(t,a,l,n,pa.z,null)}}if(t.isBundleGroup===!0&&this.backend.beginBundle!==void 0){const a=i;i=this._renderLists.get(t,e),i.begin(),a.pushBundle({bundleGroup:t,camera:e,renderList:i}),i.finish()}const o=t.children;for(let a=0,l=o.length;a<l;a++)this._projectObject(o[a],e,n,i)}_renderBundles(t,e,n){for(const i of t)this._renderBundle(i,e,n)}_renderObjects(t,e,n,i){for(let s=0,o=t.length;s<o;s++){const a=t[s],{object:l,geometry:c,material:h,group:u}=a;if(e.isArrayCamera){const d=e.cameras;for(let f=0,p=d.length;f<p;f++){const x=d[f];if(l.layers.test(x.layers)){const m=x.viewport,g=m.minDepth===void 0?0:m.minDepth,_=m.maxDepth===void 0?1:m.maxDepth,y=this._currentRenderContext.viewportValue;y.copy(m).multiplyScalar(this._pixelRatio).floor(),y.minDepth=g,y.maxDepth=_,this.backend.updateViewport(this._currentRenderContext),this._currentRenderObjectFunction(l,n,x,c,h,u,i)}}}else this._currentRenderObjectFunction(l,n,e,c,h,u,i)}}renderObject(t,e,n,i,s,o,a){let l,c,h;if(t.onBeforeRender(this,e,n,i,s,o),e.overrideMaterial!==null){const u=e.overrideMaterial;s.positionNode&&s.positionNode.isNode&&(l=u.positionNode,u.positionNode=s.positionNode),u.isShadowNodeMaterial&&(u.side=s.shadowSide===null?s.side:s.shadowSide,s.depthNode&&s.depthNode.isNode&&(h=u.depthNode,u.depthNode=s.depthNode),s.shadowNode&&s.shadowNode.isNode&&(c=u.fragmentNode,u.fragmentNode=s.shadowNode),this.localClippingEnabled&&(s.clipShadows?(u.clippingPlanes!==s.clippingPlanes&&(u.clippingPlanes=s.clippingPlanes,u.needsUpdate=!0),u.clipIntersection!==s.clipIntersection&&(u.clipIntersection=s.clipIntersection)):Array.isArray(u.clippingPlanes)&&(u.clippingPlanes=null,u.needsUpdate=!0))),s=u}s.transparent===!0&&s.side===qu&&s.forceSinglePass===!1?(s.side=Zs,this._handleObjectFunction(t,s,e,n,a,o,"backSide"),s.side=vc,this._handleObjectFunction(t,s,e,n,a,o),s.side=qu):this._handleObjectFunction(t,s,e,n,a,o),l!==void 0&&(e.overrideMaterial.positionNode=l),h!==void 0&&(e.overrideMaterial.depthNode=h),c!==void 0&&(e.overrideMaterial.fragmentNode=c),t.onAfterRender(this,e,n,i,s,o)}_renderObjectDirect(t,e,n,i,s,o,a){const l=this._objects.get(t,e,n,i,s,this._currentRenderContext,a);l.drawRange=t.geometry.drawRange,l.group=o;const c=this._nodes.needsRefresh(l);c&&(this._nodes.updateBefore(l),this._geometries.updateForRender(l),this._nodes.updateForRender(l),this._bindings.updateForRender(l)),this._pipelines.updateForRender(l),this._currentRenderBundle!==null&&(this.backend.get(this._currentRenderBundle).renderObjects.push(l),l.bundle=this._currentRenderBundle.scene),this.backend.draw(l,this.info),c&&this._nodes.updateAfter(l)}_createObjectPipeline(t,e,n,i,s,o){const a=this._objects.get(t,e,n,i,s,this._currentRenderContext,o);this._nodes.updateBefore(a),this._geometries.updateForRender(a),this._nodes.updateForRender(a),this._bindings.updateForRender(a),this._pipelines.getForRender(a,this._compilationPromises),this._nodes.updateAfter(a)}get compute(){return this.computeAsync}get compile(){return this.compileAsync}}class kx{constructor(t=""){this.name=t,this.visibility=0}setVisibility(t){this.visibility|=t}clone(){return Object.assign(new this.constructor,this)}}function EB(r){return r+(br-r%br)%br}class Yv extends kx{constructor(t,e=null){super(t),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=e}get byteLength(){return EB(this._buffer.byteLength)}get buffer(){return this._buffer}update(){return!0}}class jv extends Yv{constructor(t,e=null){super(t,e),this.isUniformBuffer=!0}}let AB=0;class Kv extends jv{constructor(t,e){super("UniformBuffer_"+AB++,t?t.value:null),this.nodeUniform=t,this.groupNode=e}get buffer(){return this.nodeUniform.value}}class wB extends jv{constructor(t){super(t),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(t){return this.uniforms.push(t),this}removeUniform(t){const e=this.uniforms.indexOf(t);return e!==-1&&this.uniforms.splice(e,1),this}get values(){return this._values===null&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let t=this._buffer;if(t===null){const e=this.byteLength;t=new Float32Array(new ArrayBuffer(e)),this._buffer=t}return t}get byteLength(){let t=0;for(let e=0,n=this.uniforms.length;e<n;e++){const i=this.uniforms[e],{boundary:s,itemSize:o}=i,a=t%br,l=br-a;a!==0&&l-s<0?t+=br-a:a%s!==0&&(t+=a%s),i.offset=t/this.bytesPerElement,t+=o*this.bytesPerElement}return Math.ceil(t/br)*br}update(){let t=!1;for(const e of this.uniforms)this.updateByType(e)===!0&&(t=!0);return t}updateByType(t){if(t.isNumberUniform)return this.updateNumber(t);if(t.isVector2Uniform)return this.updateVector2(t);if(t.isVector3Uniform)return this.updateVector3(t);if(t.isVector4Uniform)return this.updateVector4(t);if(t.isColorUniform)return this.updateColor(t);if(t.isMatrix3Uniform)return this.updateMatrix3(t);if(t.isMatrix4Uniform)return this.updateMatrix4(t);console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",t)}updateNumber(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s]!==i){const o=this.buffer;o[s]=n[s]=i,e=!0}return e}updateVector2(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s+0]!==i.x||n[s+1]!==i.y){const o=this.buffer;o[s+0]=n[s+0]=i.x,o[s+1]=n[s+1]=i.y,e=!0}return e}updateVector3(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s+0]!==i.x||n[s+1]!==i.y||n[s+2]!==i.z){const o=this.buffer;o[s+0]=n[s+0]=i.x,o[s+1]=n[s+1]=i.y,o[s+2]=n[s+2]=i.z,e=!0}return e}updateVector4(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s+0]!==i.x||n[s+1]!==i.y||n[s+2]!==i.z||n[s+4]!==i.w){const o=this.buffer;o[s+0]=n[s+0]=i.x,o[s+1]=n[s+1]=i.y,o[s+2]=n[s+2]=i.z,o[s+3]=n[s+3]=i.w,e=!0}return e}updateColor(t){let e=!1;const n=this.values,i=t.getValue(),s=t.offset;if(n[s+0]!==i.r||n[s+1]!==i.g||n[s+2]!==i.b){const o=this.buffer;o[s+0]=n[s+0]=i.r,o[s+1]=n[s+1]=i.g,o[s+2]=n[s+2]=i.b,e=!0}return e}updateMatrix3(t){let e=!1;const n=this.values,i=t.getValue().elements,s=t.offset;if(n[s+0]!==i[0]||n[s+1]!==i[1]||n[s+2]!==i[2]||n[s+4]!==i[3]||n[s+5]!==i[4]||n[s+6]!==i[5]||n[s+8]!==i[6]||n[s+9]!==i[7]||n[s+10]!==i[8]){const o=this.buffer;o[s+0]=n[s+0]=i[0],o[s+1]=n[s+1]=i[1],o[s+2]=n[s+2]=i[2],o[s+4]=n[s+4]=i[3],o[s+5]=n[s+5]=i[4],o[s+6]=n[s+6]=i[5],o[s+8]=n[s+8]=i[6],o[s+9]=n[s+9]=i[7],o[s+10]=n[s+10]=i[8],e=!0}return e}updateMatrix4(t){let e=!1;const n=this.values,i=t.getValue().elements,s=t.offset;return RB(n,i,s)===!1&&(this.buffer.set(i,s),NB(n,i,s),e=!0),e}}function NB(r,t,e){for(let n=0,i=t.length;n<i;n++)r[e+n]=t[n]}function RB(r,t,e){for(let n=0,i=t.length;n<i;n++)if(r[e+n]!==t[n])return!1;return!0}let CB=0;class Zv extends wB{constructor(t,e){super(t),this.id=CB++,this.groupNode=e,this.isNodeUniformsGroup=!0}getNodes(){const t=[];for(const e of this.uniforms){const n=e.nodeUniform.node;if(!n)throw new Error("NodeUniformsGroup: Uniform has no node.");t.push(n)}return t}}let PB=0;class FB extends kx{constructor(t,e){super(t),this.id=PB++,this.texture=e,this.version=e?e.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(t){const{texture:e}=this;return t!==this.generation?(this.generation=t,!0):e.isVideoTexture}update(){const{texture:t,version:e}=this;return e!==t.version?(this.version=t.version,!0):!1}}class Gd extends FB{constructor(t,e,n,i=null){super(t,e?e.value:null),this.textureNode=e,this.groupNode=n,this.access=i}needsBindingsUpdate(t){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(t)}update(){const{textureNode:t}=this;return this.texture!==t.value?(this.texture=t.value,!0):super.update()}}class Qv extends Gd{constructor(t,e,n,i){super(t,e,n,i),this.isSampledCubeTexture=!0}}class Jv extends Gd{constructor(t,e,n,i){super(t,e,n,i),this.isSampledTexture3D=!0}}const IB={atan2:"atan",textureDimensions:"textureSize",equals:"equal"},LB={low:"lowp",medium:"mediump",high:"highp"},tM={swizzleAssign:!0,storageBuffer:!1},eM=`
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
`;class DB extends bv{constructor(t,e){super(t,e,new X3),this.uniformGroups={},this.transforms=[],this.extensions={},this.useComparisonMethod=!0}needsColorSpaceToLinearSRGB(t){return t.isVideoTexture===!0&&t.colorSpace!==So}getMethod(t){return IB[t]||t}getOutputStructName(){return""}buildFunctionCode(t){const e=t.layout,n=this.flowShaderNode(t),i=[];for(const o of e.inputs)i.push(this.getType(o.type)+" "+o.name);return`${this.getType(e.type)} ${e.name}( ${i.join(", ")} ) {

	${n.vars}

${n.code}
	return ${n.result};

}`}setupPBO(t){const e=t.value;if(e.pbo===void 0){const n=e.array,i=e.count*e.itemSize,{itemSize:s}=e,o=e.array.constructor.name.toLowerCase().includes("int");let a=o?lx:ax;s===2?a=o?cx:bc:s===3?a=o?$2:ox:s===4&&(a=o?hx:gl);const l={Float32Array:Ti,Uint8Array:ks,Uint16Array:Ca,Uint32Array:vn,Int8Array:mc,Int16Array:gc,Int32Array:Xn,Uint8ClampedArray:ks},c=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(i/s))));let h=Math.ceil(i/s/c);c*h*s<i&&h++;const u=c*h*s,d=new n.constructor(u);d.set(n,0),e.array=d;const f=new WU(e.array,c,h,a,l[e.array.constructor.name]||Ti);f.needsUpdate=!0,f.isPBOTexture=!0;const p=new qc(f,null,null);p.setPrecision("high"),e.pboNode=p,e.pbo=p.value,this.getUniformFromNode(e.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(t,e=this.shaderStage){return t.isNodeUniform&&t.node.isTextureNode!==!0&&t.node.isBufferNode!==!0?e.charAt(0)+"_"+t.name:super.getPropertyName(t,e)}generatePBO(t){const{node:e,indexNode:n}=t,i=e.value;if(this.renderer.backend.has(i)){const h=this.renderer.backend.get(i);h.pbo=i.pbo}const s=this.getUniformFromNode(i.pboNode,"texture",this.shaderStage,this.context.label),o=this.getPropertyName(s);this.increaseUsage(n);const a=n.build(this,"uint"),l=this.getDataFromNode(t);let c=l.propertyName;if(c===void 0){const h=this.getVarFromNode(t);c=this.getPropertyName(h);const u=this.getDataFromNode(e);let d=u.propertySizeName;d===void 0&&(d=c+"Size",this.getVarFromNode(e,d,"uint"),this.addLineFlowCode(`${d} = uint( textureSize( ${o}, 0 ).x )`,t),u.propertySizeName=d);const{itemSize:f}=i,p="."+xl.join("").slice(0,f),x=`ivec2(${a} % ${d}, ${a} / ${d})`,m=this.generateTextureLoad(null,o,x,null,"0");let g="vec4";i.pbo.type===vn?g="uvec4":i.pbo.type===Xn&&(g="ivec4"),this.addLineFlowCode(`${c} = ${g}(${m})${p}`,t),l.propertyName=c}return c}generateTextureLoad(t,e,n,i,s="0"){return i?`texelFetch( ${e}, ivec3( ${n}, ${i} ), ${s} )`:`texelFetch( ${e}, ${n}, ${s} )`}generateTexture(t,e,n,i){return t.isDepthTexture?`texture( ${e}, ${n} ).x`:(i&&(n=`vec3( ${n}, ${i} )`),`texture( ${e}, ${n} )`)}generateTextureLevel(t,e,n,i){return`textureLod( ${e}, ${n}, ${i} )`}generateTextureBias(t,e,n,i){return`texture( ${e}, ${n}, ${i} )`}generateTextureGrad(t,e,n,i){return`textureGrad( ${e}, ${n}, ${i[0]}, ${i[1]} )`}generateTextureCompare(t,e,n,i,s,o=this.shaderStage){if(o==="fragment")return`texture( ${e}, vec3( ${n}, ${i} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}getVars(t){const e=[],n=this.vars[t];if(n!==void 0)for(const i of n)e.push(`${this.getVar(i.type,i.name)};`);return e.join(`
	`)}getUniforms(t){const e=this.uniforms[t],n=[],i={};for(const o of e){let a=null,l=!1;if(o.type==="texture"){const h=o.node.value;let u="";h.isDataTexture===!0&&(h.type===vn?u="u":h.type===Xn&&(u="i")),h.compareFunction?a=`sampler2DShadow ${o.name};`:h.isDataArrayTexture===!0||h.isCompressedArrayTexture===!0?a=`${u}sampler2DArray ${o.name};`:a=`${u}sampler2D ${o.name};`}else if(o.type==="cubeTexture")a=`samplerCube ${o.name};`;else if(o.type==="texture3D")a=`sampler3D ${o.name};`;else if(o.type==="buffer"){const h=o.node,u=this.getType(h.bufferType),d=h.bufferCount,f=d>0?d:"";a=`${h.name} {
	${u} ${o.name}[${f}];
};
`}else a=`${this.getVectorType(o.type)} ${this.getPropertyName(o,t)};`,l=!0;const c=o.node.precision;if(c!==null&&(a=LB[c]+" "+a),l){a="	"+a;const h=o.groupNode.name;(i[h]||(i[h]=[])).push(a)}else a="uniform "+a,n.push(a)}let s="";for(const o in i){const a=i[o];s+=this._getGLSLUniformStruct(t+"_"+o,a.join(`
`))+`
`}return s+=n.join(`
`),s}getTypeFromAttribute(t){let e=super.getTypeFromAttribute(t);if(/^[iu]/.test(e)&&t.gpuType!==Xn){let n=t;t.isInterleavedBufferAttribute&&(n=t.data);const i=n.array;i instanceof Uint32Array||i instanceof Int32Array||(e=e.slice(1))}return e}getAttributes(t){let e="";if(t==="vertex"||t==="compute"){const n=this.getAttributesArray();let i=0;for(const s of n)e+=`layout( location = ${i++} ) in ${s.type} ${s.name};
`}return e}getStructMembers(t){const e=[],n=t.getMemberTypes();for(let i=0;i<n.length;i++){const s=n[i];e.push(`layout( location = ${i} ) out ${s} m${i};`)}return e.join(`
`)}getStructs(t){const e=[],n=this.structs[t];if(n.length===0)return`layout( location = 0 ) out vec4 fragColor;
`;for(let i=0,s=n.length;i<s;i++){const o=n[i];let a=`
`;a+=this.getStructMembers(o),a+=`
`,e.push(a)}return e.join(`

`)}getVaryings(t){let e="";const n=this.varyings;if(t==="vertex"||t==="compute")for(const i of n){t==="compute"&&(i.needsInterpolation=!0);const s=i.type,o=s.includes("int")||s.includes("uv")||s.includes("iv")?"flat ":"";e+=`${o}${i.needsInterpolation?"out":"/*out*/"} ${s} ${i.name};
`}else if(t==="fragment"){for(const i of n)if(i.needsInterpolation){const s=i.type,o=s.includes("int")||s.includes("uv")||s.includes("iv")?"flat ":"";e+=`${o}in ${s} ${i.name};
`}}return e}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce((n,i)=>n*i,1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(t,e,n=this.shaderStage){const i=this.extensions[n]||(this.extensions[n]=new Map);i.has(t)===!1&&i.set(t,{name:t,behavior:e})}getExtensions(t){const e=[];if(t==="vertex"){const i=this.renderer.backend.extensions;this.object.isBatchedMesh&&i.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",t)}const n=this.extensions[t];if(n!==void 0)for(const{name:i,behavior:s}of n.values())e.push(`#extension ${i} : ${s}`);return e.join(`
`)}isAvailable(t){let e=tM[t];if(e===void 0){if(t==="float32Filterable"){const n=this.renderer.backend.extensions;n.has("OES_texture_float_linear")?(n.get("OES_texture_float_linear"),e=!0):e=!1}tM[t]=e}return e}isFlipY(){return!0}registerTransform(t,e){this.transforms.push({varyingName:t,attributeNode:e})}getTransforms(){const t=this.transforms;let e="";for(let n=0;n<t.length;n++){const i=t[n],s=this.getPropertyName(i.attributeNode);e+=`${i.varyingName} = ${s};
	`}return e}_getGLSLUniformStruct(t,e){return`
layout( std140 ) uniform ${t} {
${e}
};`}_getGLSLVertexCode(t){return`#version 300 es

${this.getSignature()}

// extensions 
${t.extensions}

// precision
${eM}

// uniforms
${t.uniforms}

// varyings
${t.varyings}

// attributes
${t.attributes}

// codes
${t.codes}

void main() {

	// vars
	${t.vars}

	// transforms
	${t.transforms}

	// flow
	${t.flow}

	gl_PointSize = 1.0;

}
`}_getGLSLFragmentCode(t){return`#version 300 es

${this.getSignature()}

// precision
${eM}

// uniforms
${t.uniforms}

// varyings
${t.varyings}

// codes
${t.codes}

${t.structs}

void main() {

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}buildCode(){const t=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const e in t){let n=`// code

`;n+=this.flowCode[e];const i=this.flowNodes[e],s=i[i.length-1];for(const a of i){const l=this.getFlowData(a),c=a.name;c&&(n.length>0&&(n+=`
`),n+=`	// flow -> ${c}
	`),n+=`${l.code}
	`,a===s&&e!=="compute"&&(n+=`// result
	`,e==="vertex"?(n+="gl_Position = ",n+=`${l.result};`):e==="fragment"&&(a.outputNode.isOutputStructNode||(n+="fragColor = ",n+=`${l.result};`)))}const o=t[e];o.extensions=this.getExtensions(e),o.uniforms=this.getUniforms(e),o.attributes=this.getAttributes(e),o.varyings=this.getVaryings(e),o.vars=this.getVars(e),o.structs=this.getStructs(e),o.codes=this.getCodes(e),o.transforms=this.getTransforms(e),o.flow=n}this.material!==null?(this.vertexShader=this._getGLSLVertexCode(t.vertex),this.fragmentShader=this._getGLSLFragmentCode(t.fragment)):this.computeShader=this._getGLSLVertexCode(t.compute)}getUniformFromNode(t,e,n,i=null){const s=super.getUniformFromNode(t,e,n,i),o=this.getDataFromNode(t,n,this.globalCache);let a=o.uniformGPU;if(a===void 0){const l=t.groupNode,c=l.name,h=this.getBindGroupArray(c,n);if(e==="texture")a=new Gd(s.name,s.node,l),h.push(a);else if(e==="cubeTexture")a=new Qv(s.name,s.node,l),h.push(a);else if(e==="texture3D")a=new Jv(s.name,s.node,l),h.push(a);else if(e==="buffer"){t.name=`NodeBuffer_${t.id}`,s.name=`buffer${t.id}`;const u=new Kv(t,l);u.name=t.name,h.push(u),a=u}else{const u=this.uniformGroups[n]||(this.uniformGroups[n]={});let d=u[c];d===void 0&&(d=new Zv(n+"_"+c,l),u[c]=d,h.push(d)),a=this.getNodeUniform(s,e),d.addUniform(a)}o.uniformGPU=a}return s}}let Lp=null,Dp=null,ma=null;class tb{constructor(t={}){this.parameters=Object.assign({},t),this.data=new WeakMap,this.renderer=null,this.domElement=null}async init(t){this.renderer=t}begin(){}finish(){}draw(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}createRenderPipeline(){}createComputePipeline(){}destroyPipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}createDefaultTexture(){}createTexture(){}copyTextureToBuffer(){}createAttribute(){}createIndexAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}resolveTimestampAsync(){}hasFeatureAsync(){}hasFeature(){}getInstanceCount(t){const{object:e,geometry:n}=t;return n.isInstancedBufferGeometry?n.instanceCount:e.count>1?e.count:1}getDrawingBufferSize(){return Lp=Lp||new Me,this.renderer.getDrawingBufferSize(Lp)}getScissor(){return Dp=Dp||new Ie,this.renderer.getScissor(Dp)}setScissorTest(){}getClearColor(){const t=this.renderer;return ma=ma||new zx,t.getClearColor(ma),ma.getRGB(ma,this.renderer.currentColorSpace),ma}getDomElement(){let t=this.domElement;return t===null&&(t=this.parameters.canvas!==void 0?this.parameters.canvas:mD(),"setAttribute"in t&&t.setAttribute("data-engine",`three.js r${FS} webgpu`),this.domElement=t),t}set(t,e){this.data.set(t,e)}get(t){let e=this.data.get(t);return e===void 0&&(e={},this.data.set(t,e)),e}has(t){return this.data.has(t)}delete(t){this.data.delete(t)}}let UB=0;class BB{constructor(t,e){this.buffers=[t.bufferGPU,e],this.type=t.type,this.bufferType=t.bufferType,this.pbo=t.pbo,this.byteLength=t.byteLength,this.bytesPerElement=t.BYTES_PER_ELEMENT,this.version=t.version,this.isInteger=t.isInteger,this.activeBufferIndex=0,this.baseId=t.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[this.activeBufferIndex^1]}switchBuffers(){this.activeBufferIndex^=1}}class OB{constructor(t){this.backend=t}createAttribute(t,e){const n=this.backend,{gl:i}=n,s=t.array,o=t.usage||i.STATIC_DRAW,a=t.isInterleavedBufferAttribute?t.data:t,l=n.get(a);let c=l.bufferGPU;c===void 0&&(c=this._createBuffer(i,e,s,o),l.bufferGPU=c,l.bufferType=e,l.version=a.version);let h;if(s instanceof Float32Array)h=i.FLOAT;else if(s instanceof Uint16Array)t.isFloat16BufferAttribute?h=i.HALF_FLOAT:h=i.UNSIGNED_SHORT;else if(s instanceof Int16Array)h=i.SHORT;else if(s instanceof Uint32Array)h=i.UNSIGNED_INT;else if(s instanceof Int32Array)h=i.INT;else if(s instanceof Int8Array)h=i.BYTE;else if(s instanceof Uint8Array)h=i.UNSIGNED_BYTE;else if(s instanceof Uint8ClampedArray)h=i.UNSIGNED_BYTE;else throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+s);let u={bufferGPU:c,bufferType:e,type:h,byteLength:s.byteLength,bytesPerElement:s.BYTES_PER_ELEMENT,version:t.version,pbo:t.pbo,isInteger:h===i.INT||h===i.UNSIGNED_INT||t.gpuType===Xn,id:UB++};if(t.isStorageBufferAttribute||t.isStorageInstancedBufferAttribute){const d=this._createBuffer(i,e,s,o);u=new BB(u,d)}n.set(t,u)}updateAttribute(t){const e=this.backend,{gl:n}=e,i=t.array,s=t.isInterleavedBufferAttribute?t.data:t,o=e.get(s),a=o.bufferType,l=t.isInterleavedBufferAttribute?t.data.updateRanges:t.updateRanges;if(n.bindBuffer(a,o.bufferGPU),l.length===0)n.bufferSubData(a,0,i);else{for(let c=0,h=l.length;c<h;c++){const u=l[c];n.bufferSubData(a,u.start*i.BYTES_PER_ELEMENT,i,u.start,u.count)}s.clearUpdateRanges()}n.bindBuffer(a,null),o.version=s.version}destroyAttribute(t){const e=this.backend,{gl:n}=e;t.isInterleavedBufferAttribute&&e.delete(t.data);const i=e.get(t);n.deleteBuffer(i.bufferGPU),e.delete(t)}async getArrayBufferAsync(t){const e=this.backend,{gl:n}=e,i=t.isInterleavedBufferAttribute?t.data:t,{bufferGPU:s}=e.get(i),o=t.array,a=o.byteLength;n.bindBuffer(n.COPY_READ_BUFFER,s);const l=n.createBuffer();n.bindBuffer(n.COPY_WRITE_BUFFER,l),n.bufferData(n.COPY_WRITE_BUFFER,a,n.STREAM_READ),n.copyBufferSubData(n.COPY_READ_BUFFER,n.COPY_WRITE_BUFFER,0,0,a),await e.utils._clientWaitAsync();const c=new t.array.constructor(o.length);return n.bindBuffer(n.COPY_WRITE_BUFFER,l),n.getBufferSubData(n.COPY_WRITE_BUFFER,0,c),n.deleteBuffer(l),n.bindBuffer(n.COPY_READ_BUFFER,null),n.bindBuffer(n.COPY_WRITE_BUFFER,null),c.buffer}_createBuffer(t,e,n,i){const s=t.createBuffer();return t.bindBuffer(e,s),t.bufferData(e,n,i),t.bindBuffer(e,null),s}}let nM=!1,Up,Xl;class zB{constructor(t){this.backend=t,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},nM===!1&&(this._init(this.gl),nM=!0)}_init(t){Up={[vr]:t.FUNC_ADD,[LS]:t.FUNC_SUBTRACT,[DS]:t.FUNC_REVERSE_SUBTRACT},Xl={[US]:t.ZERO,[BS]:t.ONE,[OS]:t.SRC_COLOR,[Ku]:t.SRC_ALPHA,[$S]:t.SRC_ALPHA_SATURATE,[VS]:t.DST_COLOR,[GS]:t.DST_ALPHA,[zS]:t.ONE_MINUS_SRC_COLOR,[Zu]:t.ONE_MINUS_SRC_ALPHA,[HS]:t.ONE_MINUS_DST_COLOR,[kS]:t.ONE_MINUS_DST_ALPHA}}enable(t){const{enabled:e}=this;e[t]!==!0&&(this.gl.enable(t),e[t]=!0)}disable(t){const{enabled:e}=this;e[t]!==!1&&(this.gl.disable(t),e[t]=!1)}setFlipSided(t){if(this.currentFlipSided!==t){const{gl:e}=this;t?e.frontFace(e.CW):e.frontFace(e.CCW),this.currentFlipSided=t}}setCullFace(t){const{gl:e}=this;t!==E2?(this.enable(e.CULL_FACE),t!==this.currentCullFace&&(t===A2?e.cullFace(e.BACK):t===w2?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):this.disable(e.CULL_FACE),this.currentCullFace=t}setLineWidth(t){const{currentLineWidth:e,gl:n}=this;t!==e&&(n.lineWidth(t),this.currentLineWidth=t)}setBlending(t,e,n,i,s,o,a,l){const{gl:c}=this;if(t===il){this.currentBlendingEnabled===!0&&(this.disable(c.BLEND),this.currentBlendingEnabled=!1);return}if(this.currentBlendingEnabled===!1&&(this.enable(c.BLEND),this.currentBlendingEnabled=!0),t!==IS){if(t!==this.currentBlending||l!==this.currentPremultipledAlpha){if((this.currentBlendEquation!==vr||this.currentBlendEquationAlpha!==vr)&&(c.blendEquation(c.FUNC_ADD),this.currentBlendEquation=vr,this.currentBlendEquationAlpha=vr),l)switch(t){case Rr:c.blendFuncSeparate(c.ONE,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case Xu:c.blendFunc(c.ONE,c.ONE);break;case Yu:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case ju:c.blendFuncSeparate(c.ZERO,c.SRC_COLOR,c.ZERO,c.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}else switch(t){case Rr:c.blendFuncSeparate(c.SRC_ALPHA,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case Xu:c.blendFunc(c.SRC_ALPHA,c.ONE);break;case Yu:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case ju:c.blendFunc(c.ZERO,c.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=t,this.currentPremultipledAlpha=l}return}s=s||e,o=o||n,a=a||i,(e!==this.currentBlendEquation||s!==this.currentBlendEquationAlpha)&&(c.blendEquationSeparate(Up[e],Up[s]),this.currentBlendEquation=e,this.currentBlendEquationAlpha=s),(n!==this.currentBlendSrc||i!==this.currentBlendDst||o!==this.currentBlendSrcAlpha||a!==this.currentBlendDstAlpha)&&(c.blendFuncSeparate(Xl[n],Xl[i],Xl[o],Xl[a]),this.currentBlendSrc=n,this.currentBlendDst=i,this.currentBlendSrcAlpha=o,this.currentBlendDstAlpha=a),this.currentBlending=t,this.currentPremultipledAlpha=!1}setColorMask(t){this.currentColorMask!==t&&(this.gl.colorMask(t,t,t,t),this.currentColorMask=t)}setDepthTest(t){const{gl:e}=this;t?this.enable(e.DEPTH_TEST):this.disable(e.DEPTH_TEST)}setDepthMask(t){this.currentDepthMask!==t&&(this.gl.depthMask(t),this.currentDepthMask=t)}setDepthFunc(t){if(this.currentDepthFunc!==t){const{gl:e}=this;switch(t){case WS:e.depthFunc(e.NEVER);break;case qS:e.depthFunc(e.ALWAYS);break;case XS:e.depthFunc(e.LESS);break;case Qu:e.depthFunc(e.LEQUAL);break;case YS:e.depthFunc(e.EQUAL);break;case jS:e.depthFunc(e.GEQUAL);break;case KS:e.depthFunc(e.GREATER);break;case ZS:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}this.currentDepthFunc=t}}setStencilTest(t){const{gl:e}=this;t?this.enable(e.STENCIL_TEST):this.disable(e.STENCIL_TEST)}setStencilMask(t){this.currentStencilMask!==t&&(this.gl.stencilMask(t),this.currentStencilMask=t)}setStencilFunc(t,e,n){(this.currentStencilFunc!==t||this.currentStencilRef!==e||this.currentStencilFuncMask!==n)&&(this.gl.stencilFunc(t,e,n),this.currentStencilFunc=t,this.currentStencilRef=e,this.currentStencilFuncMask=n)}setStencilOp(t,e,n){(this.currentStencilFail!==t||this.currentStencilZFail!==e||this.currentStencilZPass!==n)&&(this.gl.stencilOp(t,e,n),this.currentStencilFail=t,this.currentStencilZFail=e,this.currentStencilZPass=n)}setMaterial(t,e){const{gl:n}=this;t.side===qu?this.disable(n.CULL_FACE):this.enable(n.CULL_FACE);let i=t.side===Zs;e&&(i=!i),this.setFlipSided(i),t.blending===Rr&&t.transparent===!1?this.setBlending(il):this.setBlending(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),this.setDepthFunc(t.depthFunc),this.setDepthTest(t.depthTest),this.setDepthMask(t.depthWrite),this.setColorMask(t.colorWrite);const s=t.stencilWrite;this.setStencilTest(s),s&&(this.setStencilMask(t.stencilWriteMask),this.setStencilFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),this.setStencilOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),this.setPolygonOffset(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),t.alphaToCoverage===!0&&this.backend.renderer.samples>1?this.enable(n.SAMPLE_ALPHA_TO_COVERAGE):this.disable(n.SAMPLE_ALPHA_TO_COVERAGE)}setPolygonOffset(t,e,n){const{gl:i}=this;t?(this.enable(i.POLYGON_OFFSET_FILL),(this.currentPolygonOffsetFactor!==e||this.currentPolygonOffsetUnits!==n)&&(i.polygonOffset(e,n),this.currentPolygonOffsetFactor=e,this.currentPolygonOffsetUnits=n)):this.disable(i.POLYGON_OFFSET_FILL)}useProgram(t){return this.currentProgram!==t?(this.gl.useProgram(t),this.currentProgram=t,!0):!1}bindFramebuffer(t,e){const{gl:n,currentBoundFramebuffers:i}=this;return i[t]!==e?(n.bindFramebuffer(t,e),i[t]=e,t===n.DRAW_FRAMEBUFFER&&(i[n.FRAMEBUFFER]=e),t===n.FRAMEBUFFER&&(i[n.DRAW_FRAMEBUFFER]=e),!0):!1}drawBuffers(t,e){const{gl:n}=this;let i=[],s=!1;if(t.textures!==null){i=this.currentDrawbuffers.get(e),i===void 0&&(i=[],this.currentDrawbuffers.set(e,i));const o=t.textures;if(i.length!==o.length||i[0]!==n.COLOR_ATTACHMENT0){for(let a=0,l=o.length;a<l;a++)i[a]=n.COLOR_ATTACHMENT0+a;i.length=o.length,s=!0}}else i[0]!==n.BACK&&(i[0]=n.BACK,s=!0);s&&n.drawBuffers(i)}activeTexture(t){const{gl:e,currentTextureSlot:n,maxTextures:i}=this;t===void 0&&(t=e.TEXTURE0+i-1),n!==t&&(e.activeTexture(t),this.currentTextureSlot=t)}bindTexture(t,e,n){const{gl:i,currentTextureSlot:s,currentBoundTextures:o,maxTextures:a}=this;n===void 0&&(s===null?n=i.TEXTURE0+a-1:n=s);let l=o[n];l===void 0&&(l={type:void 0,texture:void 0},o[n]=l),(l.type!==t||l.texture!==e)&&(s!==n&&(i.activeTexture(n),this.currentTextureSlot=n),i.bindTexture(t,e),l.type=t,l.texture=e)}bindBufferBase(t,e,n){const{gl:i}=this,s=`${t}-${e}`;return this.currentBoundBufferBases[s]!==n?(i.bindBufferBase(t,e,n),this.currentBoundBufferBases[s]=n,!0):!1}unbindTexture(){const{gl:t,currentTextureSlot:e,currentBoundTextures:n}=this,i=n[e];i!==void 0&&i.type!==void 0&&(t.bindTexture(i.type,null),i.type=void 0,i.texture=void 0)}}class GB{constructor(t){this.backend=t,this.gl=this.backend.gl,this.extensions=t.extensions}convert(t,e=So){const{gl:n,extensions:i}=this;let s;if(t===ks)return n.UNSIGNED_BYTE;if(t===z2)return n.UNSIGNED_SHORT_4_4_4_4;if(t===G2)return n.UNSIGNED_SHORT_5_5_5_1;if(t===JS)return n.UNSIGNED_INT_5_9_9_9_REV;if(t===mc)return n.BYTE;if(t===gc)return n.SHORT;if(t===Ca)return n.UNSIGNED_SHORT;if(t===Xn)return n.INT;if(t===vn)return n.UNSIGNED_INT;if(t===Ti)return n.FLOAT;if(t===Ws)return n.HALF_FLOAT;if(t===k2)return n.ALPHA;if(t===ox)return n.RGB;if(t===gl)return n.RGBA;if(t===V2)return n.LUMINANCE;if(t===H2)return n.LUMINANCE_ALPHA;if(t===uo)return n.DEPTH_COMPONENT;if(t===rl)return n.DEPTH_STENCIL;if(t===ax)return n.RED;if(t===lx)return n.RED_INTEGER;if(t===bc)return n.RG;if(t===cx)return n.RG_INTEGER;if(t===hx)return n.RGBA_INTEGER;if(t===Bf||t===Au||t===wu||t===Nu)if(e===Ot)if(s=i.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(t===Bf)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(t===Au)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(t===wu)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(t===Nu)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=i.get("WEBGL_compressed_texture_s3tc"),s!==null){if(t===Bf)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===Au)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===wu)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===Nu)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(t===by||t===Ey||t===Ay||t===wy)if(s=i.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(t===by)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===Ey)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===Ay)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===wy)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(t===Ny||t===Hm||t===$m)if(s=i.get("WEBGL_compressed_texture_etc"),s!==null){if(t===Ny||t===Hm)return e===Ot?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(t===$m)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(t===Wm||t===qm||t===Xm||t===Ym||t===jm||t===Km||t===Zm||t===Qm||t===Jm||t===tg||t===eg||t===ng||t===ig||t===sg)if(s=i.get("WEBGL_compressed_texture_astc"),s!==null){if(t===Wm)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(t===qm)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(t===Xm)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(t===Ym)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(t===jm)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(t===Km)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(t===Zm)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(t===Qm)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(t===Jm)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(t===tg)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(t===eg)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(t===ng)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(t===ig)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(t===sg)return e===Ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(t===Of)if(s=i.get("EXT_texture_compression_bptc"),s!==null){if(t===Of)return e===Ot?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(t===W2||t===Ry||t===Cy||t===Py)if(s=i.get("EXT_texture_compression_rgtc"),s!==null){if(t===Of)return s.COMPRESSED_RED_RGTC1_EXT;if(t===Ry)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(t===Cy)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(t===Py)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return t===Vc?n.UNSIGNED_INT_24_8:n[t]!==void 0?n[t]:null}_clientWaitAsync(){const{gl:t}=this,e=t.fenceSync(t.SYNC_GPU_COMMANDS_COMPLETE,0);return t.flush(),new Promise((n,i)=>{function s(){const o=t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0);if(o===t.WAIT_FAILED){t.deleteSync(e),i();return}if(o===t.TIMEOUT_EXPIRED){requestAnimationFrame(s);return}t.deleteSync(e),n()}s()})}}let iM=!1,lu,Bp,sM;class kB{constructor(t){this.backend=t,this.gl=t.gl,this.extensions=t.extensions,this.defaultTextures={},iM===!1&&(this._init(this.gl),iM=!0)}_init(t){lu={[Ju]:t.REPEAT,[Ra]:t.CLAMP_TO_EDGE,[td]:t.MIRRORED_REPEAT},Bp={[En]:t.NEAREST,[km]:t.NEAREST_MIPMAP_NEAREST,[Ha]:t.NEAREST_MIPMAP_LINEAR,[si]:t.LINEAR,[Vm]:t.LINEAR_MIPMAP_NEAREST,[$s]:t.LINEAR_MIPMAP_LINEAR},sM={[eT]:t.NEVER,[aT]:t.ALWAYS,[ux]:t.LESS,[iT]:t.LEQUAL,[nT]:t.EQUAL,[oT]:t.GEQUAL,[sT]:t.GREATER,[rT]:t.NOTEQUAL}}filterFallback(t){const{gl:e}=this;return t===En||t===km||t===Ha?e.NEAREST:e.LINEAR}getGLTextureType(t){const{gl:e}=this;let n;return t.isCubeTexture===!0?n=e.TEXTURE_CUBE_MAP:t.isDataArrayTexture===!0||t.isCompressedArrayTexture===!0?n=e.TEXTURE_2D_ARRAY:t.isData3DTexture===!0?n=e.TEXTURE_3D:n=e.TEXTURE_2D,n}getInternalFormat(t,e,n,i,s=!1){const{gl:o,extensions:a}=this;if(t!==null){if(o[t]!==void 0)return o[t];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+t+"'")}let l=e;return e===o.RED&&(n===o.FLOAT&&(l=o.R32F),n===o.HALF_FLOAT&&(l=o.R16F),n===o.UNSIGNED_BYTE&&(l=o.R8),n===o.UNSIGNED_SHORT&&(l=o.R16),n===o.UNSIGNED_INT&&(l=o.R32UI),n===o.BYTE&&(l=o.R8I),n===o.SHORT&&(l=o.R16I),n===o.INT&&(l=o.R32I)),e===o.RED_INTEGER&&(n===o.UNSIGNED_BYTE&&(l=o.R8UI),n===o.UNSIGNED_SHORT&&(l=o.R16UI),n===o.UNSIGNED_INT&&(l=o.R32UI),n===o.BYTE&&(l=o.R8I),n===o.SHORT&&(l=o.R16I),n===o.INT&&(l=o.R32I)),e===o.RG&&(n===o.FLOAT&&(l=o.RG32F),n===o.HALF_FLOAT&&(l=o.RG16F),n===o.UNSIGNED_BYTE&&(l=o.RG8),n===o.UNSIGNED_SHORT&&(l=o.RG16),n===o.UNSIGNED_INT&&(l=o.RG32UI),n===o.BYTE&&(l=o.RG8I),n===o.SHORT&&(l=o.RG16I),n===o.INT&&(l=o.RG32I)),e===o.RG_INTEGER&&(n===o.UNSIGNED_BYTE&&(l=o.RG8UI),n===o.UNSIGNED_SHORT&&(l=o.RG16UI),n===o.UNSIGNED_INT&&(l=o.RG32UI),n===o.BYTE&&(l=o.RG8I),n===o.SHORT&&(l=o.RG16I),n===o.INT&&(l=o.RG32I)),e===o.RGB&&(n===o.FLOAT&&(l=o.RGB32F),n===o.HALF_FLOAT&&(l=o.RGB16F),n===o.UNSIGNED_BYTE&&(l=o.RGB8),n===o.UNSIGNED_SHORT&&(l=o.RGB16),n===o.UNSIGNED_INT&&(l=o.RGB32UI),n===o.BYTE&&(l=o.RGB8I),n===o.SHORT&&(l=o.RGB16I),n===o.INT&&(l=o.RGB32I),n===o.UNSIGNED_BYTE&&(l=i===Ot&&s===!1?o.SRGB8:o.RGB8),n===o.UNSIGNED_SHORT_5_6_5&&(l=o.RGB565),n===o.UNSIGNED_SHORT_5_5_5_1&&(l=o.RGB5_A1),n===o.UNSIGNED_SHORT_4_4_4_4&&(l=o.RGB4),n===o.UNSIGNED_INT_5_9_9_9_REV&&(l=o.RGB9_E5)),e===o.RGB_INTEGER&&(n===o.UNSIGNED_BYTE&&(l=o.RGB8UI),n===o.UNSIGNED_SHORT&&(l=o.RGB16UI),n===o.UNSIGNED_INT&&(l=o.RGB32UI),n===o.BYTE&&(l=o.RGB8I),n===o.SHORT&&(l=o.RGB16I),n===o.INT&&(l=o.RGB32I)),e===o.RGBA&&(n===o.FLOAT&&(l=o.RGBA32F),n===o.HALF_FLOAT&&(l=o.RGBA16F),n===o.UNSIGNED_BYTE&&(l=o.RGBA8),n===o.UNSIGNED_SHORT&&(l=o.RGBA16),n===o.UNSIGNED_INT&&(l=o.RGBA32UI),n===o.BYTE&&(l=o.RGBA8I),n===o.SHORT&&(l=o.RGBA16I),n===o.INT&&(l=o.RGBA32I),n===o.UNSIGNED_BYTE&&(l=i===Ot&&s===!1?o.SRGB8_ALPHA8:o.RGBA8),n===o.UNSIGNED_SHORT_4_4_4_4&&(l=o.RGBA4),n===o.UNSIGNED_SHORT_5_5_5_1&&(l=o.RGB5_A1)),e===o.RGBA_INTEGER&&(n===o.UNSIGNED_BYTE&&(l=o.RGBA8UI),n===o.UNSIGNED_SHORT&&(l=o.RGBA16UI),n===o.UNSIGNED_INT&&(l=o.RGBA32UI),n===o.BYTE&&(l=o.RGBA8I),n===o.SHORT&&(l=o.RGBA16I),n===o.INT&&(l=o.RGBA32I)),e===o.DEPTH_COMPONENT&&(n===o.UNSIGNED_INT&&(l=o.DEPTH24_STENCIL8),n===o.FLOAT&&(l=o.DEPTH_COMPONENT32F)),e===o.DEPTH_STENCIL&&n===o.UNSIGNED_INT_24_8&&(l=o.DEPTH24_STENCIL8),(l===o.R16F||l===o.R32F||l===o.RG16F||l===o.RG32F||l===o.RGBA16F||l===o.RGBA32F)&&a.get("EXT_color_buffer_float"),l}setTextureParameters(t,e){const{gl:n,extensions:i,backend:s}=this;n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,e.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,e.unpackAlignment),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,n.NONE),n.texParameteri(t,n.TEXTURE_WRAP_S,lu[e.wrapS]),n.texParameteri(t,n.TEXTURE_WRAP_T,lu[e.wrapT]),(t===n.TEXTURE_3D||t===n.TEXTURE_2D_ARRAY)&&n.texParameteri(t,n.TEXTURE_WRAP_R,lu[e.wrapR]),n.texParameteri(t,n.TEXTURE_MAG_FILTER,Bp[e.magFilter]);const o=e.mipmaps!==void 0&&e.mipmaps.length>0,a=e.minFilter===si&&o?$s:e.minFilter;if(n.texParameteri(t,n.TEXTURE_MIN_FILTER,Bp[a]),e.compareFunction&&(n.texParameteri(t,n.TEXTURE_COMPARE_MODE,n.COMPARE_REF_TO_TEXTURE),n.texParameteri(t,n.TEXTURE_COMPARE_FUNC,sM[e.compareFunction])),i.has("EXT_texture_filter_anisotropic")===!0){if(e.magFilter===En||e.minFilter!==Ha&&e.minFilter!==$s||e.type===Ti&&i.has("OES_texture_float_linear")===!1)return;if(e.anisotropy>1){const l=i.get("EXT_texture_filter_anisotropic");n.texParameterf(t,l.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(e.anisotropy,s.getMaxAnisotropy()))}}}createDefaultTexture(t){const{gl:e,backend:n,defaultTextures:i}=this,s=this.getGLTextureType(t);let o=i[s];o===void 0&&(o=e.createTexture(),n.state.bindTexture(s,o),e.texParameteri(s,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(s,e.TEXTURE_MAG_FILTER,e.NEAREST),i[s]=o),n.set(t,{textureGPU:o,glTextureType:s,isDefault:!0})}createTexture(t,e){const{gl:n,backend:i}=this,{levels:s,width:o,height:a,depth:l}=e,c=i.utils.convert(t.format,t.colorSpace),h=i.utils.convert(t.type),u=this.getInternalFormat(t.internalFormat,c,h,t.colorSpace,t.isVideoTexture),d=n.createTexture(),f=this.getGLTextureType(t);i.state.bindTexture(f,d),this.setTextureParameters(f,t),t.isDataArrayTexture||t.isCompressedArrayTexture?n.texStorage3D(n.TEXTURE_2D_ARRAY,s,u,o,a,l):t.isData3DTexture?n.texStorage3D(n.TEXTURE_3D,s,u,o,a,l):t.isVideoTexture||n.texStorage2D(f,s,u,o,a),i.set(t,{textureGPU:d,glTextureType:f,glFormat:c,glType:h,glInternalFormat:u})}copyBufferToTexture(t,e){const{gl:n,backend:i}=this,{textureGPU:s,glTextureType:o,glFormat:a,glType:l}=i.get(e),{width:c,height:h}=e.source.data;n.bindBuffer(n.PIXEL_UNPACK_BUFFER,t),i.state.bindTexture(o,s),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!1),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),n.texSubImage2D(o,0,0,0,c,h,a,l,0),n.bindBuffer(n.PIXEL_UNPACK_BUFFER,null),i.state.unbindTexture()}updateTexture(t,e){const{gl:n}=this,{width:i,height:s}=e,{textureGPU:o,glTextureType:a,glFormat:l,glType:c,glInternalFormat:h}=this.backend.get(t);if(t.isRenderTargetTexture||o===void 0)return;const u=d=>d.isDataTexture?d.image.data:d instanceof ImageBitmap||d instanceof OffscreenCanvas||d instanceof HTMLImageElement||d instanceof HTMLCanvasElement?d:d.data;if(this.backend.state.bindTexture(a,o),this.setTextureParameters(a,t),t.isCompressedTexture){const d=t.mipmaps,f=e.image;for(let p=0;p<d.length;p++){const x=d[p];t.isCompressedArrayTexture?t.format!==n.RGBA?l!==null?n.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY,p,0,0,0,x.width,x.height,f.depth,l,x.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texSubImage3D(n.TEXTURE_2D_ARRAY,p,0,0,0,x.width,x.height,f.depth,l,c,x.data):l!==null?n.compressedTexSubImage2D(n.TEXTURE_2D,p,0,0,x.width,x.height,l,x.data):console.warn("Unsupported compressed texture format")}}else if(t.isCubeTexture){const d=e.images;for(let f=0;f<6;f++){const p=u(d[f]);n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,0,0,i,s,l,c,p)}}else if(t.isDataArrayTexture){const d=e.image;n.texSubImage3D(n.TEXTURE_2D_ARRAY,0,0,0,0,d.width,d.height,d.depth,l,c,d.data)}else if(t.isData3DTexture){const d=e.image;n.texSubImage3D(n.TEXTURE_3D,0,0,0,0,d.width,d.height,d.depth,l,c,d.data)}else if(t.isVideoTexture)t.update(),n.texImage2D(a,0,h,l,c,e.image);else{const d=u(e.image);n.texSubImage2D(a,0,0,0,i,s,l,c,d)}}generateMipmaps(t){const{gl:e,backend:n}=this,{textureGPU:i,glTextureType:s}=n.get(t);n.state.bindTexture(s,i),e.generateMipmap(s)}deallocateRenderBuffers(t){const{gl:e,backend:n}=this;if(t){const i=n.get(t);if(i.renderBufferStorageSetup=void 0,i.framebuffers){for(const s in i.framebuffers)e.deleteFramebuffer(i.framebuffers[s]);delete i.framebuffers}if(i.depthRenderbuffer&&(e.deleteRenderbuffer(i.depthRenderbuffer),delete i.depthRenderbuffer),i.stencilRenderbuffer&&(e.deleteRenderbuffer(i.stencilRenderbuffer),delete i.stencilRenderbuffer),i.msaaFrameBuffer&&(e.deleteFramebuffer(i.msaaFrameBuffer),delete i.msaaFrameBuffer),i.msaaRenderbuffers){for(let s=0;s<i.msaaRenderbuffers.length;s++)e.deleteRenderbuffer(i.msaaRenderbuffers[s]);delete i.msaaRenderbuffers}}}destroyTexture(t){const{gl:e,backend:n}=this,{textureGPU:i,renderTarget:s}=n.get(t);this.deallocateRenderBuffers(s),e.deleteTexture(i),n.delete(t)}copyTextureToTexture(t,e,n=null,i=null,s=0){const{gl:o,backend:a}=this,{state:l}=this.backend,{textureGPU:c,glTextureType:h,glType:u,glFormat:d}=a.get(e);let f,p,x,m,g,_;n!==null?(f=n.max.x-n.min.x,p=n.max.y-n.min.y,x=n.min.x,m=n.min.y):(f=t.image.width,p=t.image.height,x=0,m=0),i!==null?(g=i.x,_=i.y):(g=0,_=0),l.bindTexture(h,c),o.pixelStorei(o.UNPACK_ALIGNMENT,e.unpackAlignment),o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,e.flipY),o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),o.pixelStorei(o.UNPACK_ALIGNMENT,e.unpackAlignment);const y=o.getParameter(o.UNPACK_ROW_LENGTH),S=o.getParameter(o.UNPACK_IMAGE_HEIGHT),w=o.getParameter(o.UNPACK_SKIP_PIXELS),A=o.getParameter(o.UNPACK_SKIP_ROWS),T=o.getParameter(o.UNPACK_SKIP_IMAGES),R=t.isCompressedTexture?t.mipmaps[s]:t.image;o.pixelStorei(o.UNPACK_ROW_LENGTH,R.width),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,R.height),o.pixelStorei(o.UNPACK_SKIP_PIXELS,x),o.pixelStorei(o.UNPACK_SKIP_ROWS,m),t.isDataTexture?o.texSubImage2D(o.TEXTURE_2D,s,g,_,f,p,d,u,R.data):t.isCompressedTexture?o.compressedTexSubImage2D(o.TEXTURE_2D,s,g,_,R.width,R.height,d,R.data):o.texSubImage2D(o.TEXTURE_2D,s,g,_,f,p,d,u,R),o.pixelStorei(o.UNPACK_ROW_LENGTH,y),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,S),o.pixelStorei(o.UNPACK_SKIP_PIXELS,w),o.pixelStorei(o.UNPACK_SKIP_ROWS,A),o.pixelStorei(o.UNPACK_SKIP_IMAGES,T),s===0&&e.generateMipmaps&&o.generateMipmap(o.TEXTURE_2D),l.unbindTexture()}copyFramebufferToTexture(t,e,n){const{gl:i}=this,{state:s}=this.backend,{textureGPU:o}=this.backend.get(t),{x:a,y:l,z:c,w:h}=n,u=t.isDepthTexture===!0||e.renderTarget&&e.renderTarget.samples>0,d=e.renderTarget?e.renderTarget.height:this.backend.gerDrawingBufferSize().y;if(u){const f=a!==0||l!==0;let p,x;if(t.isDepthTexture===!0?(p=i.DEPTH_BUFFER_BIT,x=i.DEPTH_ATTACHMENT,e.stencil&&(p|=i.STENCIL_BUFFER_BIT)):(p=i.COLOR_BUFFER_BIT,x=i.COLOR_ATTACHMENT0),f){const m=this.backend.get(e.renderTarget),g=m.framebuffers[e.getCacheKey()],_=m.msaaFrameBuffer;s.bindFramebuffer(i.DRAW_FRAMEBUFFER,g),s.bindFramebuffer(i.READ_FRAMEBUFFER,_);const y=d-l-h;i.blitFramebuffer(a,y,a+c,y+h,a,y,a+c,y+h,p,i.NEAREST),s.bindFramebuffer(i.READ_FRAMEBUFFER,g),s.bindTexture(i.TEXTURE_2D,o),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,a,y,c,h),s.unbindTexture()}else{const m=i.createFramebuffer();s.bindFramebuffer(i.DRAW_FRAMEBUFFER,m),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,x,i.TEXTURE_2D,o,0),i.blitFramebuffer(0,0,c,h,0,0,c,h,p,i.NEAREST),i.deleteFramebuffer(m)}}else s.bindTexture(i.TEXTURE_2D,o),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,a,d-h-l,c,h),s.unbindTexture();t.generateMipmaps&&this.generateMipmaps(t),this.backend._setFramebuffer(e)}setupRenderBufferStorage(t,e){const{gl:n}=this,i=e.renderTarget,{samples:s,depthTexture:o,depthBuffer:a,stencilBuffer:l,width:c,height:h}=i;if(n.bindRenderbuffer(n.RENDERBUFFER,t),a&&!l){let u=n.DEPTH_COMPONENT24;s>0?(o&&o.isDepthTexture&&o.type===n.FLOAT&&(u=n.DEPTH_COMPONENT32F),n.renderbufferStorageMultisample(n.RENDERBUFFER,s,u,c,h)):n.renderbufferStorage(n.RENDERBUFFER,u,c,h),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,t)}else a&&l&&(s>0?n.renderbufferStorageMultisample(n.RENDERBUFFER,s,n.DEPTH24_STENCIL8,c,h):n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,c,h),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,t))}async copyTextureToBuffer(t,e,n,i,s,o){const{backend:a,gl:l}=this,{textureGPU:c,glFormat:h,glType:u}=this.backend.get(t),d=l.createFramebuffer();l.bindFramebuffer(l.READ_FRAMEBUFFER,d);const f=t.isCubeTexture?l.TEXTURE_CUBE_MAP_POSITIVE_X+o:l.TEXTURE_2D;l.framebufferTexture2D(l.READ_FRAMEBUFFER,l.COLOR_ATTACHMENT0,f,c,0);const p=this._getTypedArrayType(u),x=this._getBytesPerTexel(u,h),g=i*s*x,_=l.createBuffer();l.bindBuffer(l.PIXEL_PACK_BUFFER,_),l.bufferData(l.PIXEL_PACK_BUFFER,g,l.STREAM_READ),l.readPixels(e,n,i,s,h,u,0),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),await a.utils._clientWaitAsync();const y=new p(g/p.BYTES_PER_ELEMENT);return l.bindBuffer(l.PIXEL_PACK_BUFFER,_),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,y),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),l.deleteFramebuffer(d),y}_getTypedArrayType(t){const{gl:e}=this;if(t===e.UNSIGNED_BYTE)return Uint8Array;if(t===e.UNSIGNED_SHORT_4_4_4_4||t===e.UNSIGNED_SHORT_5_5_5_1||t===e.UNSIGNED_SHORT_5_6_5||t===e.UNSIGNED_SHORT)return Uint16Array;if(t===e.UNSIGNED_INT)return Uint32Array;if(t===e.HALF_FLOAT)return Uint16Array;if(t===e.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${t}`)}_getBytesPerTexel(t,e){const{gl:n}=this;let i=0;if(t===n.UNSIGNED_BYTE&&(i=1),(t===n.UNSIGNED_SHORT_4_4_4_4||t===n.UNSIGNED_SHORT_5_5_5_1||t===n.UNSIGNED_SHORT_5_6_5||t===n.UNSIGNED_SHORT||t===n.HALF_FLOAT)&&(i=2),(t===n.UNSIGNED_INT||t===n.FLOAT)&&(i=4),e===n.RGBA)return i*4;if(e===n.RGB)return i*3;if(e===n.ALPHA)return i}}class VB{constructor(t){this.backend=t,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(t){let e=this.extensions[t];return e===void 0&&(e=this.gl.getExtension(t),this.extensions[t]=e),e}has(t){return this.availableExtensions.includes(t)}}class HB{constructor(t){this.backend=t,this.maxAnisotropy=null}getMaxAnisotropy(){if(this.maxAnisotropy!==null)return this.maxAnisotropy;const t=this.backend.gl,e=this.backend.extensions;if(e.has("EXT_texture_filter_anisotropic")===!0){const n=e.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const rM={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class $B{constructor(t){this.gl=t.gl,this.extensions=t.extensions,this.info=t.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(t,e){const{gl:n,mode:i,object:s,type:o,info:a,index:l}=this;l!==0?n.drawElements(i,e,o,t):n.drawArrays(i,t,e),a.update(s,e,i,1)}renderInstances(t,e,n){const{gl:i,mode:s,type:o,index:a,object:l,info:c}=this;n!==0&&(a!==0?i.drawElementsInstanced(s,e,o,t,n):i.drawArraysInstanced(s,t,e,n),c.update(l,e,s,n))}renderMultiDraw(t,e,n){const{extensions:i,mode:s,object:o,info:a}=this;if(n===0)return;const l=i.get("WEBGL_multi_draw");if(l===null)for(let c=0;c<n;c++)this.render(t[c],e[c]);else{this.index!==0?l.multiDrawElementsWEBGL(s,e,0,this.type,t,0,n):l.multiDrawArraysWEBGL(s,t,0,e,0,n);let c=0;for(let h=0;h<n;h++)c+=e[h];a.update(o,c,s,1)}}renderMultiDrawInstances(t,e,n,i){const{extensions:s,mode:o,object:a,info:l}=this;if(n===0)return;const c=s.get("WEBGL_multi_draw");if(c===null)for(let h=0;h<n;h++)this.renderInstances(t[h],e[h],i[h]);else{this.index!==0?c.multiDrawElementsInstancedWEBGL(o,e,0,this.type,t,0,i,0,n):c.multiDrawArraysInstancedWEBGL(o,t,0,e,0,i,0,n);let h=0;for(let u=0;u<n;u++)h+=e[u];for(let u=0;u<i.length;u++)l.update(a,h,o,i[u])}}}class oM extends tb{constructor(t={}){super(t),this.isWebGLBackend=!0}init(t){super.init(t);const e=this.parameters,n=e.context!==void 0?e.context:t.domElement.getContext("webgl2");this.gl=n,this.extensions=new VB(this),this.capabilities=new HB(this),this.attributeUtils=new OB(this),this.textureUtils=new kB(this),this.bufferRenderer=new $B(this),this.state=new zB(this),this.utils=new GB(this),this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.trackTimestamp=e.trackTimestamp===!0,this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile"),this._currentContext=null}get coordinateSystem(){return Ki}async getArrayBufferAsync(t){return await this.attributeUtils.getArrayBufferAsync(t)}initTimestampQuery(t){if(!this.disjoint||!this.trackTimestamp)return;const e=this.get(t);if(this.queryRunning){e.queryQueue||(e.queryQueue=[]),e.queryQueue.push(t);return}e.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),e.activeQuery=null),e.activeQuery=this.gl.createQuery(),e.activeQuery!==null&&(this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT,e.activeQuery),this.queryRunning=!0)}prepareTimestampBuffer(t){if(!this.disjoint||!this.trackTimestamp)return;const e=this.get(t);if(e.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),e.gpuQueries||(e.gpuQueries=[]),e.gpuQueries.push({query:e.activeQuery}),e.activeQuery=null,this.queryRunning=!1,e.queryQueue&&e.queryQueue.length>0)){const n=e.queryQueue.shift();this.initTimestampQuery(n)}}async resolveTimestampAsync(t,e="render"){if(!this.disjoint||!this.trackTimestamp)return;const n=this.get(t);n.gpuQueries||(n.gpuQueries=[]);for(let i=0;i<n.gpuQueries.length;i++){const s=n.gpuQueries[i],o=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT_AVAILABLE),a=this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);if(o&&!a){const l=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT),c=Number(l)/1e6;this.gl.deleteQuery(s.query),n.gpuQueries.splice(i,1),i--,this.renderer.info.updateTimestamp(e,c)}}}getContext(){return this.gl}beginRender(t){const{gl:e}=this,n=this.get(t);if(this.initTimestampQuery(t),n.previousContext=this._currentContext,this._currentContext=t,this._setFramebuffer(t),this.clear(t.clearColor,t.clearDepth,t.clearStencil,t,!1),t.viewport?this.updateViewport(t):e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),t.scissor){const{x:s,y:o,width:a,height:l}=t.scissorValue;e.scissor(s,t.height-l-o,a,l)}const i=t.occlusionQueryCount;i>0&&(n.currentOcclusionQueries=n.occlusionQueries,n.currentOcclusionQueryObjects=n.occlusionQueryObjects,n.lastOcclusionObject=null,n.occlusionQueries=new Array(i),n.occlusionQueryObjects=new Array(i),n.occlusionQueryIndex=0)}finishRender(t){const{gl:e,state:n}=this,i=this.get(t),s=i.previousContext,o=t.occlusionQueryCount;o>0&&(o>i.occlusionQueryIndex&&e.endQuery(e.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(t));const a=t.textures;if(a!==null)for(let l=0;l<a.length;l++){const c=a[l];c.generateMipmaps&&this.generateMipmaps(c)}if(this._currentContext=s,t.textures!==null&&t.renderTarget){const l=this.get(t.renderTarget),{samples:c}=t.renderTarget;if(c>0){const h=l.framebuffers[t.getCacheKey()],u=e.COLOR_BUFFER_BIT,d=l.msaaFrameBuffer,f=t.textures;n.bindFramebuffer(e.READ_FRAMEBUFFER,d),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,h);for(let p=0;p<f.length;p++)if(t.scissor){const{x,y:m,width:g,height:_}=t.scissorValue,y=t.height-_-m;e.blitFramebuffer(x,y,x+g,y+_,x,y,x+g,y+_,u,e.NEAREST),e.invalidateSubFramebuffer(e.READ_FRAMEBUFFER,l.invalidationArray,x,y,g,_)}else e.blitFramebuffer(0,0,t.width,t.height,0,0,t.width,t.height,u,e.NEAREST),e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l.invalidationArray)}}s!==null&&(this._setFramebuffer(s),s.viewport?this.updateViewport(s):e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight)),this.prepareTimestampBuffer(t)}resolveOccludedAsync(t){const e=this.get(t),{currentOcclusionQueries:n,currentOcclusionQueryObjects:i}=e;if(n&&i){const s=new WeakSet,{gl:o}=this;e.currentOcclusionQueryObjects=null,e.currentOcclusionQueries=null;const a=()=>{let l=0;for(let c=0;c<n.length;c++){const h=n[c];h!==null&&o.getQueryParameter(h,o.QUERY_RESULT_AVAILABLE)&&(o.getQueryParameter(h,o.QUERY_RESULT)>0&&s.add(i[c]),n[c]=null,o.deleteQuery(h),l++)}l<n.length?requestAnimationFrame(a):e.occluded=s};a()}}isOccluded(t,e){const n=this.get(t);return n.occluded&&n.occluded.has(e)}updateViewport(t){const e=this.gl,{x:n,y:i,width:s,height:o}=t.viewportValue;e.viewport(n,t.height-o-i,s,o)}setScissorTest(t){const e=this.gl;t?e.enable(e.SCISSOR_TEST):e.disable(e.SCISSOR_TEST)}clear(t,e,n,i=null,s=!0){const{gl:o}=this;i===null&&(i={textures:null,clearColorValue:this.getClearColor()});let a=0;if(t&&(a|=o.COLOR_BUFFER_BIT),e&&(a|=o.DEPTH_BUFFER_BIT),n&&(a|=o.STENCIL_BUFFER_BIT),a!==0){const l=i.clearColorValue||this.getClearColor();if(l.r*=l.a,l.g*=l.a,l.b*=l.a,e&&this.state.setDepthMask(!0),i.textures===null)o.clearColor(l.r,l.g,l.b,l.a),o.clear(a);else{if(s&&this._setFramebuffer(i),t)for(let c=0;c<i.textures.length;c++)o.clearBufferfv(o.COLOR,c,[l.r,l.g,l.b,l.a]);e&&n?o.clearBufferfi(o.DEPTH_STENCIL,0,1,0):e?o.clearBufferfv(o.DEPTH,0,[1]):n&&o.clearBufferiv(o.STENCIL,0,[0])}}}beginCompute(t){const{state:e,gl:n}=this;e.bindFramebuffer(n.FRAMEBUFFER,null),this.initTimestampQuery(t)}compute(t,e,n,i){const{state:s,gl:o}=this;this.discard||(o.enable(o.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:a,transformBuffers:l,attributes:c}=this.get(i),h=this._getVaoKey(null,c),u=this.vaoCache[h];u===void 0?this._createVao(null,c):o.bindVertexArray(u),s.useProgram(a),this._bindUniforms(n);const d=this._getTransformFeedback(l);o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,d),o.beginTransformFeedback(o.POINTS),c[0].isStorageInstancedBufferAttribute?o.drawArraysInstanced(o.POINTS,0,1,e.count):o.drawArrays(o.POINTS,0,e.count),o.endTransformFeedback(),o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,null);for(let f=0;f<l.length;f++){const p=l[f];p.pbo&&this.textureUtils.copyBufferToTexture(p.transformBuffer,p.pbo),p.switchBuffers()}}finishCompute(t){const e=this.gl;this.discard=!1,e.disable(e.RASTERIZER_DISCARD),this.prepareTimestampBuffer(t)}draw(t){const{object:e,pipeline:n,material:i,context:s}=t,{programGPU:o}=this.get(n),{gl:a,state:l}=this,c=this.get(s),h=t.getDrawParameters();if(h===null)return;this._bindUniforms(t.getBindings());const u=e.isMesh&&e.matrixWorld.determinant()<0;l.setMaterial(i,u),l.useProgram(o);let d=t.staticVao;if(d===void 0){const y=this._getVaoKey(t.getIndex(),t.getAttributes());if(d=this.vaoCache[y],d===void 0){let S;({vaoGPU:d,staticVao:S}=this._createVao(t.getIndex(),t.getAttributes())),S&&(t.staticVao=d)}}a.bindVertexArray(d);const f=t.getIndex(),p=c.lastOcclusionObject;if(p!==e&&p!==void 0){if(p!==null&&p.occlusionTest===!0&&(a.endQuery(a.ANY_SAMPLES_PASSED),c.occlusionQueryIndex++),e.occlusionTest===!0){const y=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,y),c.occlusionQueries[c.occlusionQueryIndex]=y,c.occlusionQueryObjects[c.occlusionQueryIndex]=e}c.lastOcclusionObject=e}const x=this.bufferRenderer;e.isPoints?x.mode=a.POINTS:e.isLineSegments?x.mode=a.LINES:e.isLine?x.mode=a.LINE_STRIP:e.isLineLoop?x.mode=a.LINE_LOOP:i.wireframe===!0?(l.setLineWidth(i.wireframeLinewidth*this.renderer.getPixelRatio()),x.mode=a.LINES):x.mode=a.TRIANGLES;const{vertexCount:m,instanceCount:g}=h;let{firstVertex:_}=h;if(x.object=e,f!==null){_*=f.array.BYTES_PER_ELEMENT;const y=this.get(f);x.index=f.count,x.type=y.type}else x.index=0;e.isBatchedMesh?e._multiDrawInstances!==null?x.renderMultiDrawInstances(e._multiDrawStarts,e._multiDrawCounts,e._multiDrawCount,e._multiDrawInstances):this.hasFeature("WEBGL_multi_draw")?x.renderMultiDraw(e._multiDrawStarts,e._multiDrawCounts,e._multiDrawCount):gD("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):g>1?x.renderInstances(_,m,g):x.render(_,m),a.bindVertexArray(null)}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(t){this.textureUtils.createDefaultTexture(t)}createTexture(t,e){this.textureUtils.createTexture(t,e)}updateTexture(t,e){this.textureUtils.updateTexture(t,e)}generateMipmaps(t){this.textureUtils.generateMipmaps(t)}destroyTexture(t){this.textureUtils.destroyTexture(t)}copyTextureToBuffer(t,e,n,i,s,o){return this.textureUtils.copyTextureToBuffer(t,e,n,i,s,o)}createSampler(){}destroySampler(){}createNodeBuilder(t,e){return new DB(t,e)}createProgram(t){const e=this.gl,{stage:n,code:i}=t,s=n==="fragment"?e.createShader(e.FRAGMENT_SHADER):e.createShader(e.VERTEX_SHADER);e.shaderSource(s,i),e.compileShader(s),this.set(t,{shaderGPU:s})}destroyProgram(){console.warn("Abstract class.")}createRenderPipeline(t,e){const n=this.gl,i=t.pipeline,{fragmentProgram:s,vertexProgram:o}=i,a=n.createProgram(),l=this.get(s).shaderGPU,c=this.get(o).shaderGPU;if(n.attachShader(a,l),n.attachShader(a,c),n.linkProgram(a),this.set(i,{programGPU:a,fragmentShader:l,vertexShader:c}),e!==null&&this.parallel){const h=new Promise(u=>{const d=this.parallel,f=()=>{n.getProgramParameter(a,d.COMPLETION_STATUS_KHR)?(this._completeCompile(t,i),u()):requestAnimationFrame(f)};f()});e.push(h);return}this._completeCompile(t,i)}_handleSource(t,e){const n=t.split(`
`),i=[],s=Math.max(e-6,0),o=Math.min(e+6,n.length);for(let a=s;a<o;a++){const l=a+1;i.push(`${l===e?">":" "} ${l}: ${n[a]}`)}return i.join(`
`)}_getShaderErrors(t,e,n){const i=t.getShaderParameter(e,t.COMPILE_STATUS),s=t.getShaderInfoLog(e).trim();if(i&&s==="")return"";const o=/ERROR: 0:(\d+)/.exec(s);if(o){const a=parseInt(o[1]);return n.toUpperCase()+`

`+s+`

`+this._handleSource(t.getShaderSource(e),a)}else return s}_logProgramError(t,e,n){if(this.renderer.debug.checkShaderErrors){const i=this.gl,s=i.getProgramInfoLog(t).trim();if(i.getProgramParameter(t,i.LINK_STATUS)===!1)if(typeof this.renderer.debug.onShaderError=="function")this.renderer.debug.onShaderError(i,t,n,e);else{const o=this._getShaderErrors(i,n,"vertex"),a=this._getShaderErrors(i,e,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(t,i.VALIDATE_STATUS)+`

Program Info Log: `+s+`
`+o+`
`+a)}else s!==""&&console.warn("THREE.WebGLProgram: Program Info Log:",s)}}_completeCompile(t,e){const{state:n,gl:i}=this,s=this.get(e),{programGPU:o,fragmentShader:a,vertexShader:l}=s;i.getProgramParameter(o,i.LINK_STATUS)===!1&&this._logProgramError(o,a,l),n.useProgram(o);const c=t.getBindings();this._setupBindings(c,o),this.set(e,{programGPU:o})}createComputePipeline(t,e){const{state:n,gl:i}=this,s={stage:"fragment",code:`#version 300 es
precision highp float;
void main() {}`};this.createProgram(s);const{computeProgram:o}=t,a=i.createProgram(),l=this.get(s).shaderGPU,c=this.get(o).shaderGPU,h=o.transforms,u=[],d=[];for(let m=0;m<h.length;m++){const g=h[m];u.push(g.varyingName),d.push(g.attributeNode)}i.attachShader(a,l),i.attachShader(a,c),i.transformFeedbackVaryings(a,u,i.SEPARATE_ATTRIBS),i.linkProgram(a),i.getProgramParameter(a,i.LINK_STATUS)===!1&&this._logProgramError(a,l,c),n.useProgram(a),this.createBindings(null,e),this._setupBindings(e,a);const f=o.attributes,p=[],x=[];for(let m=0;m<f.length;m++){const g=f[m].node.attribute;p.push(g),this.has(g)||this.attributeUtils.createAttribute(g,i.ARRAY_BUFFER)}for(let m=0;m<d.length;m++){const g=d[m].attribute;this.has(g)||this.attributeUtils.createAttribute(g,i.ARRAY_BUFFER);const _=this.get(g);x.push(_)}this.set(t,{programGPU:a,transformBuffers:x,attributes:p})}createBindings(t,e){this.updateBindings(t,e)}updateBindings(t,e){if(!t)return;const{gl:n}=this,i=this.get(e),s=this.get(t);i.textureIndex===void 0&&(i.textureIndex=0),s.textureIndex===void 0?s.textureIndex=i.textureIndex:i.textureIndex=s.textureIndex;let o=0;for(const a of t.bindings)if(a.isUniformsGroup||a.isUniformBuffer){const l=a.buffer,c=n.createBuffer();n.bindBuffer(n.UNIFORM_BUFFER,c),n.bufferData(n.UNIFORM_BUFFER,l,n.DYNAMIC_DRAW),this.set(a,{index:t.index*2+o++,bufferGPU:c})}else if(a.isSampledTexture){const{textureGPU:l,glTextureType:c}=this.get(a.texture);this.set(a,{index:i.textureIndex++,textureGPU:l,glTextureType:c})}}updateBinding(t){const e=this.gl;if(t.isUniformsGroup||t.isUniformBuffer){const i=this.get(t).bufferGPU,s=t.buffer;e.bindBuffer(e.UNIFORM_BUFFER,i),e.bufferData(e.UNIFORM_BUFFER,s,e.DYNAMIC_DRAW)}}createIndexAttribute(t){const e=this.gl;this.attributeUtils.createAttribute(t,e.ELEMENT_ARRAY_BUFFER)}createAttribute(t){if(this.has(t))return;const e=this.gl;this.attributeUtils.createAttribute(t,e.ARRAY_BUFFER)}createStorageAttribute(t){if(this.has(t))return;const e=this.gl;this.attributeUtils.createAttribute(t,e.ARRAY_BUFFER)}updateAttribute(t){this.attributeUtils.updateAttribute(t)}destroyAttribute(t){this.attributeUtils.destroyAttribute(t)}updateSize(){}hasFeature(t){const e=Object.keys(rM).filter(i=>rM[i]===t),n=this.extensions;for(let i=0;i<e.length;i++)if(n.has(e[i]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(t,e,n,i){this.textureUtils.copyTextureToTexture(t,e,n,i)}copyFramebufferToTexture(t,e,n){this.textureUtils.copyFramebufferToTexture(t,e,n)}_setFramebuffer(t){const{gl:e,state:n}=this;let i=null;if(t.textures!==null){const s=t.renderTarget,o=this.get(s),{samples:a,depthBuffer:l,stencilBuffer:c}=s,h=s.isWebGLCubeRenderTarget===!0;let u=o.msaaFrameBuffer,d=o.depthRenderbuffer;const f=Wv(t);let p;if(h?(o.cubeFramebuffers||(o.cubeFramebuffers={}),p=o.cubeFramebuffers[f]):(o.framebuffers||(o.framebuffers={}),p=o.framebuffers[f]),p===void 0){p=e.createFramebuffer(),n.bindFramebuffer(e.FRAMEBUFFER,p);const x=t.textures;if(h){o.cubeFramebuffers[f]=p;const{textureGPU:m}=this.get(x[0]),g=this.renderer._activeCubeFace;e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+g,m,0)}else{o.framebuffers[f]=p;for(let m=0;m<x.length;m++){const g=x[m],_=this.get(g);_.renderTarget=t.renderTarget;const y=e.COLOR_ATTACHMENT0+m;e.framebufferTexture2D(e.FRAMEBUFFER,y,e.TEXTURE_2D,_.textureGPU,0)}n.drawBuffers(t,p)}if(t.depthTexture!==null){const m=this.get(t.depthTexture),g=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;e.framebufferTexture2D(e.FRAMEBUFFER,g,e.TEXTURE_2D,m.textureGPU,0)}}if(a>0){if(u===void 0){const x=[];u=e.createFramebuffer(),n.bindFramebuffer(e.FRAMEBUFFER,u);const m=[],g=t.textures;for(let _=0;_<g.length;_++){if(m[_]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,m[_]),x.push(e.COLOR_ATTACHMENT0+_),l){const w=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;x.push(w)}const y=t.textures[_],S=this.get(y);e.renderbufferStorageMultisample(e.RENDERBUFFER,a,S.glInternalFormat,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+_,e.RENDERBUFFER,m[_])}if(o.msaaFrameBuffer=u,o.msaaRenderbuffers=m,d===void 0){d=e.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(d,t),o.depthRenderbuffer=d;const _=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;x.push(_)}o.invalidationArray=x}i=o.msaaFrameBuffer}else i=p}n.bindFramebuffer(e.FRAMEBUFFER,i)}_getVaoKey(t,e){let n=[];if(t!==null){const i=this.get(t);n+=":"+i.id}for(let i=0;i<e.length;i++){const s=this.get(e[i]);n+=":"+s.id}return n}_createVao(t,e){const{gl:n}=this,i=n.createVertexArray();let s="",o=!0;if(n.bindVertexArray(i),t!==null){const a=this.get(t);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,a.bufferGPU),s+=":"+a.id}for(let a=0;a<e.length;a++){const l=e[a],c=this.get(l);s+=":"+c.id,n.bindBuffer(n.ARRAY_BUFFER,c.bufferGPU),n.enableVertexAttribArray(a),(l.isStorageBufferAttribute||l.isStorageInstancedBufferAttribute)&&(o=!1);let h,u;l.isInterleavedBufferAttribute===!0?(h=l.data.stride*c.bytesPerElement,u=l.offset*c.bytesPerElement):(h=0,u=0),c.isInteger?n.vertexAttribIPointer(a,l.itemSize,c.type,h,u):n.vertexAttribPointer(a,l.itemSize,c.type,l.normalized,h,u),l.isInstancedBufferAttribute&&!l.isInterleavedBufferAttribute?n.vertexAttribDivisor(a,l.meshPerAttribute):l.isInterleavedBufferAttribute&&l.data.isInstancedInterleavedBuffer&&n.vertexAttribDivisor(a,l.data.meshPerAttribute)}return n.bindBuffer(n.ARRAY_BUFFER,null),this.vaoCache[s]=i,{vaoGPU:i,staticVao:o}}_getTransformFeedback(t){let e="";for(let s=0;s<t.length;s++)e+=":"+t[s].id;let n=this.transformFeedbackCache[e];if(n!==void 0)return n;const{gl:i}=this;n=i.createTransformFeedback(),i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,n);for(let s=0;s<t.length;s++){const o=t[s];i.bindBufferBase(i.TRANSFORM_FEEDBACK_BUFFER,s,o.transformBuffer)}return i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[e]=n,n}_setupBindings(t,e){const n=this.gl;for(const i of t)for(const s of i.bindings){const a=this.get(s).index;if(s.isUniformsGroup||s.isUniformBuffer){const l=n.getUniformBlockIndex(e,s.name);n.uniformBlockBinding(e,l,a)}else if(s.isSampledTexture){const l=n.getUniformLocation(e,s.name);n.uniform1i(l,a)}}}_bindUniforms(t){const{gl:e,state:n}=this;for(const i of t)for(const s of i.bindings){const o=this.get(s),a=o.index;s.isUniformsGroup||s.isUniformBuffer?n.bindBufferBase(e.UNIFORM_BUFFER,a,o.bufferGPU):s.isSampledTexture&&n.bindTexture(o.glTextureType,o.textureGPU,e.TEXTURE0+a)}}}class WB extends kx{constructor(t,e){super(t),this.texture=e,this.version=e?e.version:0,this.isSampler=!0}}class qB extends WB{constructor(t,e,n){super(t,e?e.value:null),this.textureNode=e,this.groupNode=n}update(){this.texture=this.textureNode.value}}class XB extends Yv{constructor(t,e){super(t,e?e.array:null),this.attribute=e,this.isStorageBuffer=!0}}let YB=0;class jB extends XB{constructor(t,e){super("StorageBuffer_"+YB++,t?t.value:null),this.nodeUniform=t,this.access=t?t.access:Eg.Storage,this.groupNode=e}get buffer(){return this.nodeUniform.value}}class KB extends zr{constructor(t){super(),this.device=t;const e=`
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`,n=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`,i=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;this.mipmapSampler=t.createSampler({minFilter:ud.Linear}),this.flipYSampler=t.createSampler({minFilter:ud.Nearest}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=t.createShaderModule({label:"mipmapVertex",code:e}),this.mipmapFragmentShaderModule=t.createShaderModule({label:"mipmapFragment",code:n}),this.flipYFragmentShaderModule=t.createShaderModule({label:"flipYFragment",code:i})}getTransferPipeline(t){let e=this.transferPipelines[t];return e===void 0&&(e=this.device.createRenderPipeline({label:`mipmap-${t}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:t}]},primitive:{topology:Da.TriangleStrip,stripIndexFormat:cl.Uint32},layout:"auto"}),this.transferPipelines[t]=e),e}getFlipYPipeline(t){let e=this.flipYPipelines[t];return e===void 0&&(e=this.device.createRenderPipeline({label:`flipY-${t}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:t}]},primitive:{topology:Da.TriangleStrip,stripIndexFormat:cl.Uint32},layout:"auto"}),this.flipYPipelines[t]=e),e}flipY(t,e,n=0){const i=e.format,{width:s,height:o}=e.size,a=this.getTransferPipeline(i),l=this.getFlipYPipeline(i),c=this.device.createTexture({size:{width:s,height:o,depthOrArrayLayers:1},format:i,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),h=t.createView({baseMipLevel:0,mipLevelCount:1,dimension:wi.TwoD,baseArrayLayer:n}),u=c.createView({baseMipLevel:0,mipLevelCount:1,dimension:wi.TwoD,baseArrayLayer:0}),d=this.device.createCommandEncoder({}),f=(p,x,m)=>{const g=p.getBindGroupLayout(0),_=this.device.createBindGroup({layout:g,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:x}]}),y=d.beginRenderPass({colorAttachments:[{view:m,loadOp:en.Clear,storeOp:Tn.Store,clearValue:[0,0,0,0]}]});y.setPipeline(p),y.setBindGroup(0,_),y.draw(4,1,0,0),y.end()};f(a,h,u),f(l,u,h),this.device.queue.submit([d.finish()]),c.destroy()}generateMipmaps(t,e,n=0){const i=this.get(t);i.useCount===void 0&&(i.useCount=0,i.layers=[]);const s=i.layers[n]||this._mipmapCreateBundles(t,e,n),o=this.device.createCommandEncoder({});this._mipmapRunBundles(o,s),this.device.queue.submit([o.finish()]),i.useCount!==0&&(i.layers[n]=s),i.useCount++}_mipmapCreateBundles(t,e,n){const i=this.getTransferPipeline(e.format),s=i.getBindGroupLayout(0);let o=t.createView({baseMipLevel:0,mipLevelCount:1,dimension:wi.TwoD,baseArrayLayer:n});const a=[];for(let l=1;l<e.mipLevelCount;l++){const c=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:o}]}),h=t.createView({baseMipLevel:l,mipLevelCount:1,dimension:wi.TwoD,baseArrayLayer:n}),u={colorAttachments:[{view:h,loadOp:en.Clear,storeOp:Tn.Store,clearValue:[0,0,0,0]}]},d=this.device.createRenderBundleEncoder({colorFormats:[e.format]});d.setPipeline(i),d.setBindGroup(0,c),d.draw(4,1,0,0),a.push({renderBundles:[d.finish()],passDescriptor:u}),o=h}return a}_mipmapRunBundles(t,e){const n=e.length;for(let i=0;i<n;i++){const s=e[i],o=t.beginRenderPass(s.passDescriptor);o.executeBundles(s.renderBundles),o.end()}}}const ZB={[eT]:"never",[ux]:"less",[nT]:"equal",[iT]:"less-equal",[sT]:"greater",[oT]:"greater-equal",[aT]:"always",[rT]:"not-equal"},QB=[0,1,3,2,4,5];class JB{constructor(t){this.backend=t,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new Xc,this.depthTexture.name="depthBuffer"}createSampler(t){const e=this.backend,n=e.device,i=e.get(t),s={addressModeU:this._convertAddressMode(t.wrapS),addressModeV:this._convertAddressMode(t.wrapT),addressModeW:this._convertAddressMode(t.wrapR),magFilter:this._convertFilterMode(t.magFilter),minFilter:this._convertFilterMode(t.minFilter),mipmapFilter:this._convertFilterMode(t.minFilter),maxAnisotropy:t.anisotropy};t.isDepthTexture&&t.compareFunction!==null&&(s.compare=ZB[t.compareFunction]),i.sampler=n.createSampler(s)}createDefaultTexture(t){let e;const n=Rg(t);t.isCubeTexture?e=this._getDefaultCubeTextureGPU(n):t.isVideoTexture?this.backend.get(t).externalTexture=this._getDefaultVideoFrame():e=this._getDefaultTextureGPU(n),this.backend.get(t).texture=e}createTexture(t,e={}){const n=this.backend,i=n.get(t);if(i.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");e.needsMipmaps===void 0&&(e.needsMipmaps=!1),e.levels===void 0&&(e.levels=1),e.depth===void 0&&(e.depth=1);const{width:s,height:o,depth:a,levels:l}=e,c=this._getDimension(t),h=t.internalFormat||e.format||Rg(t,n.device);i.format=h;let u=e.sampleCount!==void 0?e.sampleCount:1;u=n.utils.getSampleCount(u);const d=t.isRenderTargetTexture&&!t.isMultisampleRenderTargetTexture?1:u;let f=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;t.isStorageTexture===!0&&(f|=GPUTextureUsage.STORAGE_BINDING),t.isCompressedTexture!==!0&&t.isCompressedArrayTexture!==!0&&(f|=GPUTextureUsage.RENDER_ATTACHMENT);const p={label:t.name,size:{width:s,height:o,depthOrArrayLayers:a},mipLevelCount:l,sampleCount:d,dimension:c,format:h,usage:f};if(t.isVideoTexture){const x=t.source.data,m=new VideoFrame(x);p.size.width=m.displayWidth,p.size.height=m.displayHeight,m.close(),i.externalTexture=x}else{if(h===void 0)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(t);i.texture=n.device.createTexture(p)}if(t.isRenderTargetTexture&&u>1&&!t.isMultisampleRenderTargetTexture){const x=Object.assign({},p);x.label=x.label+"-msaa",x.sampleCount=u,i.msaaTexture=n.device.createTexture(x)}i.initialized=!0,i.textureDescriptorGPU=p}destroyTexture(t){const e=this.backend,n=e.get(t);n.texture.destroy(),n.msaaTexture!==void 0&&n.msaaTexture.destroy(),e.delete(t)}destroySampler(t){const n=this.backend.get(t);delete n.sampler}generateMipmaps(t){const e=this.backend.get(t);if(t.isCubeTexture)for(let n=0;n<6;n++)this._generateMipmaps(e.texture,e.textureDescriptorGPU,n);else{const n=t.image.depth||1;for(let i=0;i<n;i++)this._generateMipmaps(e.texture,e.textureDescriptorGPU,i)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const t=this.backend,{width:e,height:n}=t.getDrawingBufferSize();return this.colorBuffer=t.device.createTexture({label:"colorBuffer",size:{width:e,height:n,depthOrArrayLayers:1},sampleCount:t.utils.getSampleCount(t.renderer.samples),format:t.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(t=!0,e=!1){const n=this.backend,{width:i,height:s}=n.getDrawingBufferSize(),o=this.depthTexture,a=n.get(o).texture;let l,c;if(e?(l=rl,c=Vc):t&&(l=uo,c=vn),a!==void 0){if(o.image.width===i&&o.image.height===s&&o.format===l&&o.type===c)return a;this.destroyTexture(o)}return o.name="depthBuffer",o.format=l,o.type=c,o.image.width=i,o.image.height=s,this.createTexture(o,{sampleCount:n.utils.getSampleCount(n.renderer.samples),width:i,height:s}),n.get(o).texture}updateTexture(t,e){const n=this.backend.get(t),{textureDescriptorGPU:i}=n;if(!(t.isRenderTargetTexture||i===void 0)){if(t.isDataTexture)this._copyBufferToTexture(e.image,n.texture,i,0,t.flipY);else if(t.isDataArrayTexture||t.isData3DTexture)for(let s=0;s<e.image.depth;s++)this._copyBufferToTexture(e.image,n.texture,i,s,t.flipY,s);else if(t.isCompressedTexture||t.isCompressedArrayTexture)this._copyCompressedBufferToTexture(t.mipmaps,n.texture,i);else if(t.isCubeTexture)this._copyCubeMapToTexture(e.images,n.texture,i,t.flipY);else if(t.isVideoTexture){const s=t.source.data;n.externalTexture=s}else this._copyImageToTexture(e.image,n.texture,i,0,t.flipY);n.version=t.version,t.onUpdate&&t.onUpdate(t)}}async copyTextureToBuffer(t,e,n,i,s,o){const a=this.backend.device,l=this.backend.get(t),c=l.texture,h=l.textureDescriptorGPU.format,u=this._getBytesPerTexel(h);let d=i*u;d=Math.ceil(d/256)*256;const f=a.createBuffer({size:i*s*u,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=a.createCommandEncoder();p.copyTextureToBuffer({texture:c,origin:{x:e,y:n,z:o}},{buffer:f,bytesPerRow:d},{width:i,height:s});const x=this._getTypedArrayType(h);a.queue.submit([p.finish()]),await f.mapAsync(GPUMapMode.READ);const m=f.getMappedRange();return new x(m)}_isEnvironmentTexture(t){const e=t.mapping;return e===Gc||e===kc||e===Mo||e===sl}_getDefaultTextureGPU(t){let e=this.defaultTexture[t];if(e===void 0){const n=new rs;n.minFilter=En,n.magFilter=En,this.createTexture(n,{width:1,height:1,format:t}),this.defaultTexture[t]=e=n}return this.backend.get(e).texture}_getDefaultCubeTextureGPU(t){let e=this.defaultTexture[t];if(e===void 0){const n=new Cx;n.minFilter=En,n.magFilter=En,this.createTexture(n,{width:1,height:1,depth:6}),this.defaultCubeTexture[t]=e=n}return this.backend.get(e).texture}_getDefaultVideoFrame(){let t=this.defaultVideoFrame;if(t===null){const e={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=t=new VideoFrame(new Uint8Array([0,0,0,255]),e)}return t}_copyCubeMapToTexture(t,e,n,i){for(let s=0;s<6;s++){const o=t[s],a=i===!0?QB[s]:s;o.isDataTexture?this._copyBufferToTexture(o.image,e,n,a,i):this._copyImageToTexture(o,e,n,a,i)}}_copyImageToTexture(t,e,n,i,s){this.backend.device.queue.copyExternalImageToTexture({source:t},{texture:e,mipLevel:0,origin:{x:0,y:0,z:i}},{width:t.width,height:t.height,depthOrArrayLayers:1}),s===!0&&this._flipY(e,n,i)}_getPassUtils(){let t=this._passUtils;return t===null&&(this._passUtils=t=new KB(this.backend.device)),t}_generateMipmaps(t,e,n=0){this._getPassUtils().generateMipmaps(t,e,n)}_flipY(t,e,n=0){this._getPassUtils().flipY(t,e,n)}_copyBufferToTexture(t,e,n,i,s,o=0){const a=this.backend.device,l=t.data,c=this._getBytesPerTexel(n.format),h=t.width*c;a.queue.writeTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:i}},l,{offset:t.width*t.height*c*o,bytesPerRow:h},{width:t.width,height:t.height,depthOrArrayLayers:1}),s===!0&&this._flipY(e,n,i)}_copyCompressedBufferToTexture(t,e,n){const i=this.backend.device,s=this._getBlockData(n.format),o=n.size.depthOrArrayLayers>1;for(let a=0;a<t.length;a++){const l=t[a],c=l.width,h=l.height,u=o?n.size.depthOrArrayLayers:1,d=Math.ceil(c/s.width)*s.byteLength,f=d*Math.ceil(h/s.height);for(let p=0;p<u;p++)i.queue.writeTexture({texture:e,mipLevel:a,origin:{x:0,y:0,z:p}},l.data,{offset:p*f,bytesPerRow:d,rowsPerImage:Math.ceil(h/s.height)},{width:Math.ceil(c/s.width)*s.width,height:Math.ceil(h/s.height)*s.height,depthOrArrayLayers:1})}}_getBlockData(t){if(t===C.BC1RGBAUnorm||t===C.BC1RGBAUnormSRGB)return{byteLength:8,width:4,height:4};if(t===C.BC2RGBAUnorm||t===C.BC2RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.BC3RGBAUnorm||t===C.BC3RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.BC4RUnorm||t===C.BC4RSNorm)return{byteLength:8,width:4,height:4};if(t===C.BC5RGUnorm||t===C.BC5RGSnorm)return{byteLength:16,width:4,height:4};if(t===C.BC6HRGBUFloat||t===C.BC6HRGBFloat)return{byteLength:16,width:4,height:4};if(t===C.BC7RGBAUnorm||t===C.BC7RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.ETC2RGB8Unorm||t===C.ETC2RGB8UnormSRGB)return{byteLength:8,width:4,height:4};if(t===C.ETC2RGB8A1Unorm||t===C.ETC2RGB8A1UnormSRGB)return{byteLength:8,width:4,height:4};if(t===C.ETC2RGBA8Unorm||t===C.ETC2RGBA8UnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.EACR11Unorm)return{byteLength:8,width:4,height:4};if(t===C.EACR11Snorm)return{byteLength:8,width:4,height:4};if(t===C.EACRG11Unorm)return{byteLength:16,width:4,height:4};if(t===C.EACRG11Snorm)return{byteLength:16,width:4,height:4};if(t===C.ASTC4x4Unorm||t===C.ASTC4x4UnormSRGB)return{byteLength:16,width:4,height:4};if(t===C.ASTC5x4Unorm||t===C.ASTC5x4UnormSRGB)return{byteLength:16,width:5,height:4};if(t===C.ASTC5x5Unorm||t===C.ASTC5x5UnormSRGB)return{byteLength:16,width:5,height:5};if(t===C.ASTC6x5Unorm||t===C.ASTC6x5UnormSRGB)return{byteLength:16,width:6,height:5};if(t===C.ASTC6x6Unorm||t===C.ASTC6x6UnormSRGB)return{byteLength:16,width:6,height:6};if(t===C.ASTC8x5Unorm||t===C.ASTC8x5UnormSRGB)return{byteLength:16,width:8,height:5};if(t===C.ASTC8x6Unorm||t===C.ASTC8x6UnormSRGB)return{byteLength:16,width:8,height:6};if(t===C.ASTC8x8Unorm||t===C.ASTC8x8UnormSRGB)return{byteLength:16,width:8,height:8};if(t===C.ASTC10x5Unorm||t===C.ASTC10x5UnormSRGB)return{byteLength:16,width:10,height:5};if(t===C.ASTC10x6Unorm||t===C.ASTC10x6UnormSRGB)return{byteLength:16,width:10,height:6};if(t===C.ASTC10x8Unorm||t===C.ASTC10x8UnormSRGB)return{byteLength:16,width:10,height:8};if(t===C.ASTC10x10Unorm||t===C.ASTC10x10UnormSRGB)return{byteLength:16,width:10,height:10};if(t===C.ASTC12x10Unorm||t===C.ASTC12x10UnormSRGB)return{byteLength:16,width:12,height:10};if(t===C.ASTC12x12Unorm||t===C.ASTC12x12UnormSRGB)return{byteLength:16,width:12,height:12}}_convertAddressMode(t){let e=Np.ClampToEdge;return t===Ju?e=Np.Repeat:t===td&&(e=Np.MirrorRepeat),e}_convertFilterMode(t){let e=ud.Linear;return(t===En||t===km||t===Ha)&&(e=ud.Nearest),e}_getBytesPerTexel(t){if(t===C.R8Unorm||t===C.R8Snorm||t===C.R8Uint||t===C.R8Sint)return 1;if(t===C.R16Uint||t===C.R16Sint||t===C.R16Float||t===C.RG8Unorm||t===C.RG8Snorm||t===C.RG8Uint||t===C.RG8Sint)return 2;if(t===C.R32Uint||t===C.R32Sint||t===C.R32Float||t===C.RG16Uint||t===C.RG16Sint||t===C.RG16Float||t===C.RGBA8Unorm||t===C.RGBA8UnormSRGB||t===C.RGBA8Snorm||t===C.RGBA8Uint||t===C.RGBA8Sint||t===C.BGRA8Unorm||t===C.BGRA8UnormSRGB||t===C.RGB9E5UFloat||t===C.RGB10A2Unorm||t===C.RG11B10UFloat||t===C.Depth32Float||t===C.Depth24Plus||t===C.Depth24PlusStencil8||t===C.Depth32FloatStencil8)return 4;if(t===C.RG32Uint||t===C.RG32Sint||t===C.RG32Float||t===C.RGBA16Uint||t===C.RGBA16Sint||t===C.RGBA16Float)return 8;if(t===C.RGBA32Uint||t===C.RGBA32Sint||t===C.RGBA32Float)return 16}_getTypedArrayType(t){if(t===C.R8Uint)return Uint8Array;if(t===C.R8Sint)return Int8Array;if(t===C.R8Unorm)return Uint8Array;if(t===C.R8Snorm)return Int8Array;if(t===C.RG8Uint)return Uint8Array;if(t===C.RG8Sint)return Int8Array;if(t===C.RG8Unorm)return Uint8Array;if(t===C.RG8Snorm)return Int8Array;if(t===C.RGBA8Uint)return Uint8Array;if(t===C.RGBA8Sint)return Int8Array;if(t===C.RGBA8Unorm)return Uint8Array;if(t===C.RGBA8Snorm)return Int8Array;if(t===C.R16Uint)return Uint16Array;if(t===C.R16Sint)return Int16Array;if(t===C.RG16Uint)return Uint16Array;if(t===C.RG16Sint)return Int16Array;if(t===C.RGBA16Uint)return Uint16Array;if(t===C.RGBA16Sint)return Int16Array;if(t===C.R16Float||t===C.RG16Float||t===C.RGBA16Float)return Uint16Array;if(t===C.R32Uint)return Uint32Array;if(t===C.R32Sint)return Int32Array;if(t===C.R32Float)return Float32Array;if(t===C.RG32Uint)return Uint32Array;if(t===C.RG32Sint)return Int32Array;if(t===C.RG32Float)return Float32Array;if(t===C.RGBA32Uint)return Uint32Array;if(t===C.RGBA32Sint)return Int32Array;if(t===C.RGBA32Float)return Float32Array;if(t===C.BGRA8Unorm||t===C.BGRA8UnormSRGB)return Uint8Array;if(t===C.RGB10A2Unorm||t===C.RGB9E5UFloat||t===C.RG11B10UFloat)return Uint32Array;if(t===C.Depth32Float)return Float32Array;if(t===C.Depth24Plus||t===C.Depth24PlusStencil8)return Uint32Array;if(t===C.Depth32FloatStencil8)return Float32Array}_getDimension(t){let e;return t.isData3DTexture?e=L_.ThreeD:e=L_.TwoD,e}}function Rg(r,t=null){const e=r.format,n=r.type,i=r.colorSpace;let s;if(r.isFramebufferTexture===!0&&r.type===ks)s=C.BGRA8Unorm;else if(r.isCompressedTexture===!0||r.isCompressedArrayTexture===!0)switch(e){case Au:s=i===Ot?C.BC1RGBAUnormSRGB:C.BC1RGBAUnorm;break;case wu:s=i===Ot?C.BC2RGBAUnormSRGB:C.BC2RGBAUnorm;break;case Nu:s=i===Ot?C.BC3RGBAUnormSRGB:C.BC3RGBAUnorm;break;case Hm:s=i===Ot?C.ETC2RGB8UnormSRGB:C.ETC2RGB8Unorm;break;case $m:s=i===Ot?C.ETC2RGBA8UnormSRGB:C.ETC2RGBA8Unorm;break;case Wm:s=i===Ot?C.ASTC4x4UnormSRGB:C.ASTC4x4Unorm;break;case qm:s=i===Ot?C.ASTC5x4UnormSRGB:C.ASTC5x4Unorm;break;case Xm:s=i===Ot?C.ASTC5x5UnormSRGB:C.ASTC5x5Unorm;break;case Ym:s=i===Ot?C.ASTC6x5UnormSRGB:C.ASTC6x5Unorm;break;case jm:s=i===Ot?C.ASTC6x6UnormSRGB:C.ASTC6x6Unorm;break;case Km:s=i===Ot?C.ASTC8x5UnormSRGB:C.ASTC8x5Unorm;break;case Zm:s=i===Ot?C.ASTC8x6UnormSRGB:C.ASTC8x6Unorm;break;case Qm:s=i===Ot?C.ASTC8x8UnormSRGB:C.ASTC8x8Unorm;break;case Jm:s=i===Ot?C.ASTC10x5UnormSRGB:C.ASTC10x5Unorm;break;case tg:s=i===Ot?C.ASTC10x6UnormSRGB:C.ASTC10x6Unorm;break;case eg:s=i===Ot?C.ASTC10x8UnormSRGB:C.ASTC10x8Unorm;break;case ng:s=i===Ot?C.ASTC10x10UnormSRGB:C.ASTC10x10Unorm;break;case ig:s=i===Ot?C.ASTC12x10UnormSRGB:C.ASTC12x10Unorm;break;case sg:s=i===Ot?C.ASTC12x12UnormSRGB:C.ASTC12x12Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",e)}else switch(e){case gl:switch(n){case mc:s=C.RGBA8Snorm;break;case gc:s=C.RGBA16Sint;break;case Ca:s=C.RGBA16Uint;break;case vn:s=C.RGBA32Uint;break;case Xn:s=C.RGBA32Sint;break;case ks:s=i===Ot?C.RGBA8UnormSRGB:C.RGBA8Unorm;break;case Ws:s=C.RGBA16Float;break;case Ti:s=C.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",n)}break;case ox:switch(n){case JS:s=C.RGB9E5UFloat;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",n)}break;case ax:switch(n){case mc:s=C.R8Snorm;break;case gc:s=C.R16Sint;break;case Ca:s=C.R16Uint;break;case vn:s=C.R32Uint;break;case Xn:s=C.R32Sint;break;case ks:s=C.R8Unorm;break;case Ws:s=C.R16Float;break;case Ti:s=C.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",n)}break;case bc:switch(n){case mc:s=C.RG8Snorm;break;case gc:s=C.RG16Sint;break;case Ca:s=C.RG16Uint;break;case vn:s=C.RG32Uint;break;case Xn:s=C.RG32Sint;break;case ks:s=C.RG8Unorm;break;case Ws:s=C.RG16Float;break;case Ti:s=C.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",n)}break;case uo:switch(n){case Ca:s=C.Depth16Unorm;break;case vn:s=C.Depth24Plus;break;case Ti:s=C.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",n)}break;case rl:switch(n){case Vc:s=C.Depth24PlusStencil8;break;case Ti:t&&t.features.has(Ag.Depth32FloatStencil8)===!1&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),s=C.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",n)}break;case lx:switch(n){case Xn:s=C.R32Sint;break;case vn:s=C.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",n)}break;case cx:switch(n){case Xn:s=C.RG32Sint;break;case vn:s=C.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",n)}break;case hx:switch(n){case Xn:s=C.RGBA32Sint;break;case vn:s=C.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",n)}break;default:console.error("WebGPURenderer: Unsupported texture format.",e)}return s}const tO=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,eO=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig,aM={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"},nO=r=>{r=r.trim();const t=r.match(tO);if(t!==null&&t.length===4){const e=t[2],n=[];let i=null;for(;(i=eO.exec(e))!==null;)n.push({name:i[1],type:i[2]});const s=[];for(let h=0;h<n.length;h++){const{name:u,type:d}=n[h];let f=d;f.startsWith("texture")&&(f=d.split("<")[0]),f=aM[f]||f,s.push(new Lx(f,u))}const o=r.substring(t[0].length),a=t[3]||"void",l=t[1]!==void 0?t[1]:"";return{type:aM[a]||a,inputs:s,name:l,inputsCode:e,blockCode:o,outputType:a}}else throw new Error("FunctionNode: Function is not a WGSL code.")};class iO extends Ox{constructor(t){const{type:e,inputs:n,name:i,inputsCode:s,blockCode:o,outputType:a}=nO(t);super(e,n,i),this.inputsCode=s,this.blockCode=o,this.outputType=a}getCode(t=this.name){const e=this.outputType!=="void"?"-> "+this.outputType:"";return`fn ${t} ( ${this.inputsCode.trim()} ) ${e}`+this.blockCode}}class sO extends Gv{parseFunction(t){return new iO(t)}}const ga=self.GPUShaderStage,cu={vertex:ga?ga.VERTEX:1,fragment:ga?ga.FRAGMENT:2,compute:ga?ga.COMPUTE:4},lM={instance:!0,swizzleAssign:!1,storageBuffer:!0},rO={"^^":"tsl_xor"},oO={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",imat2:"mat2x2<i32>",umat2:"mat2x2<u32>",bmat2:"mat2x2<bool>",mat3:"mat3x3<f32>",imat3:"mat3x3<i32>",umat3:"mat3x3<u32>",bmat3:"mat3x3<bool>",mat4:"mat4x4<f32>",imat4:"mat4x4<i32>",umat4:"mat4x4<u32>",bmat4:"mat4x4<bool>"},Fs={tsl_xor:new In("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new In("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new In("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new In("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new In("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new In("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new In("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new In("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new In("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping:new In(`
fn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {

	let uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );

	return ( ( uvScaled % dimension ) + dimension ) % dimension;

}
`),biquadraticTexture:new In(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, level : i32 ) -> vec4f {

	let iRes = vec2i( textureDimensions( map, level ) );
	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2i( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2i( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2i( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2i( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)},cc={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};/Windows/g.test(navigator.userAgent)&&(Fs.pow_float=new In("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),Fs.pow_vec2=new In("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[Fs.pow_float]),Fs.pow_vec3=new In("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[Fs.pow_float]),Fs.pow_vec4=new In("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[Fs.pow_float]),cc.pow_float="tsl_pow_float",cc.pow_vec2="tsl_pow_vec2",cc.pow_vec3="tsl_pow_vec3",cc.pow_vec4="tsl_pow_vec4");let eb="";/Firefox/g.test(navigator.userAgent)!==!0&&(eb+=`diagnostic( off, derivative_uniformity );
`);class aO extends bv{constructor(t,e){super(t,e,new sO),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(t){return t.isVideoTexture===!0&&t.colorSpace!==So}_generateTextureSample(t,e,n,i,s=this.shaderStage){return s==="fragment"?i?`textureSample( ${e}, ${e}_sampler, ${n}, ${i} )`:`textureSample( ${e}, ${e}_sampler, ${n} )`:this.isFilteredTexture(t)?this.generateFilteredTexture(t,e,n):this.generateTextureLod(t,e,n,"0")}_generateVideoSample(t,e,n=this.shaderStage){if(n==="fragment")return`textureSampleBaseClampToEdge( ${t}, ${t}_sampler, vec2<f32>( ${e}.x, 1.0 - ${e}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${n} shader.`)}_generateTextureSampleLevel(t,e,n,i,s,o=this.shaderStage){return o==="fragment"&&this.isUnfilterable(t)===!1?`textureSampleLevel( ${e}, ${e}_sampler, ${n}, ${i} )`:this.isFilteredTexture(t)?this.generateFilteredTexture(t,e,n,i):this.generateTextureLod(t,e,n,i)}generateFilteredTexture(t,e,n,i="0"){return this._include("biquadraticTexture"),`tsl_biquadraticTexture( ${e}, ${n}, i32( ${i} ) )`}generateTextureLod(t,e,n,i="0"){this._include("repeatWrapping");const s=t.isMultisampleRenderTargetTexture===!0?`textureDimensions( ${e} )`:`textureDimensions( ${e}, 0 )`;return`textureLoad( ${e}, tsl_repeatWrapping( ${n}, ${s} ), i32( ${i} ) )`}generateTextureLoad(t,e,n,i,s="0u"){return i?`textureLoad( ${e}, ${n}, ${i}, ${s} )`:`textureLoad( ${e}, ${n}, ${s} )`}generateTextureStore(t,e,n,i){return`textureStore( ${e}, ${n}, ${i} )`}isUnfilterable(t){return this.getComponentTypeFromTexture(t)!=="float"||!this.isAvailable("float32Filterable")&&t.isDataTexture===!0&&t.type===Ti||t.isMultisampleRenderTargetTexture===!0}generateTexture(t,e,n,i,s=this.shaderStage){let o=null;return t.isVideoTexture===!0?o=this._generateVideoSample(e,n,s):this.isUnfilterable(t)?o=this.generateTextureLod(t,e,n,"0",i,s):o=this._generateTextureSample(t,e,n,i,s),o}generateTextureGrad(t,e,n,i,s,o=this.shaderStage){if(o==="fragment")return`textureSampleGrad( ${e}, ${e}_sampler, ${n},  ${i[0]}, ${i[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${o} shader.`)}generateTextureCompare(t,e,n,i,s,o=this.shaderStage){if(o==="fragment")return`textureSampleCompare( ${e}, ${e}_sampler, ${n}, ${i} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}generateTextureLevel(t,e,n,i,s,o=this.shaderStage){let a=null;return t.isVideoTexture===!0?a=this._generateVideoSample(e,n,o):a=this._generateTextureSampleLevel(t,e,n,i,s,o),a}generateTextureBias(t,e,n,i,s,o=this.shaderStage){if(o==="fragment")return`textureSampleBias( ${e}, ${e}_sampler, ${n}, ${i} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${o} shader.`)}getPropertyName(t,e=this.shaderStage){if(t.isNodeVarying===!0&&t.needsInterpolation===!0){if(e==="vertex")return`varyings.${t.name}`}else if(t.isNodeUniform===!0){const n=t.name,i=t.type;return i==="texture"||i==="cubeTexture"||i==="storageTexture"||i==="texture3D"?n:i==="buffer"||i==="storageBuffer"?`NodeBuffer_${t.id}.${n}`:t.groupNode.name+"."+n}return super.getPropertyName(t)}getOutputStructName(){return"output"}_getUniformGroupCount(t){return Object.keys(this.uniforms[t]).length}getFunctionOperator(t){const e=rO[t];return e!==void 0?(this._include(e),e):null}getStorageAccess(t){if(t.isStorageTextureNode)switch(t.access){case I_.ReadOnly:return"read";case I_.WriteOnly:return"write";default:return"read_write"}else switch(t.access){case Eg.Storage:return"read_write";case Eg.ReadOnlyStorage:return"read";default:return"write"}}getUniformFromNode(t,e,n,i=null){const s=super.getUniformFromNode(t,e,n,i),o=this.getDataFromNode(t,n,this.globalCache);if(o.uniformGPU===void 0){let a;const l=t.groupNode,c=l.name,h=this.getBindGroupArray(c,n);if(e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="texture3D"){let u=null;if(e==="texture"||e==="storageTexture"?u=new Gd(s.name,s.node,l,t.access?t.access:null):e==="cubeTexture"?u=new Qv(s.name,s.node,l,t.access?t.access:null):e==="texture3D"&&(u=new Jv(s.name,s.node,l,t.access?t.access:null)),u.store=t.isStorageTextureNode===!0,u.setVisibility(cu[n]),n==="fragment"&&this.isUnfilterable(t.value)===!1&&u.store===!1){const d=new qB(`${s.name}_sampler`,s.node,l);d.setVisibility(cu[n]),h.push(d,u),a=[d,u]}else h.push(u),a=[u]}else if(e==="buffer"||e==="storageBuffer"){const u=e==="storageBuffer"?jB:Kv,d=new u(t,l);d.setVisibility(cu[n]),h.push(d),a=d}else{const u=this.uniformGroups[n]||(this.uniformGroups[n]={});let d=u[c];d===void 0&&(d=new Zv(c,l),d.setVisibility(cu[n]),u[c]=d,h.push(d)),a=this.getNodeUniform(s,e),d.addUniform(a)}o.uniformGPU=a}return s}getBuiltin(t,e,n,i=this.shaderStage){const s=this.builtins[i]||(this.builtins[i]=new Map);return s.has(t)===!1&&s.set(t,{name:t,property:e,type:n}),e}hasBuiltin(t,e=this.shaderStage){return this.builtins[e]!==void 0&&this.builtins[e].has(t)}getVertexIndex(){return this.shaderStage==="vertex"?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(t){const e=t.layout,n=this.flowShaderNode(t),i=[];for(const o of e.inputs)i.push(o.name+" : "+this.getType(o.type));let s=`fn ${e.name}( ${i.join(", ")} ) -> ${this.getType(e.type)} {
${n.vars}
${n.code}
`;return n.result&&(s+=`	return ${n.result};
`),s+=`
}
`,s}getInstanceIndex(){return this.shaderStage==="vertex"?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}isFlipY(){return!1}enableDirective(t,e=this.shaderStage){(this.directives[e]||(this.directives[e]=new Set)).add(t)}getDirectives(t){const e=[],n=this.directives[t];if(n!==void 0)for(const i of n)e.push(`enable ${i};`);return e.join(`
`)}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}getBuiltins(t){const e=[],n=this.builtins[t];if(n!==void 0)for(const{name:i,property:s,type:o}of n.values())e.push(`@builtin( ${i} ) ${s} : ${o}`);return e.join(`,
	`)}getScopedArray(t,e,n,i){return this.scopedArrays.has(t)===!1&&this.scopedArrays.set(t,{name:t,scope:e,bufferType:n,bufferCount:i}),t}getScopedArrays(t){if(t!=="compute")return;const e=[];for(const{name:n,scope:i,bufferType:s,bufferCount:o}of this.scopedArrays.values()){const a=this.getType(s);e.push(`var<${i}> ${n}: array< ${a}, ${o} >;`)}return e.join(`
`)}getAttributes(t){const e=[];if(t==="compute"&&(this.getBuiltin("global_invocation_id","id","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",t),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),t==="vertex"||t==="compute"){const n=this.getBuiltins("attribute");n&&e.push(n);const i=this.getAttributesArray();for(let s=0,o=i.length;s<o;s++){const a=i[s],l=a.name,c=this.getType(a.type);e.push(`@location( ${s} ) ${l} : ${c}`)}}return e.join(`,
	`)}getStructMembers(t){const e=[],n=t.getMemberTypes();for(let s=0;s<n.length;s++){const o=n[s];e.push(`	@location( ${s} ) m${s} : ${o}<f32>`)}const i=this.getBuiltins("output");return i&&e.push("	"+i),e.join(`,
`)}getStructs(t){const e=[],n=this.structs[t];for(let i=0,s=n.length;i<s;i++){const o=n[i],a=o.name;let l=`struct ${a} {
`;l+=this.getStructMembers(o),l+=`
}`,e.push(l),e.push(`
var<private> output : ${a};

`)}return e.join(`

`)}getVar(t,e){return`var ${e} : ${this.getType(t)}`}getVars(t){const e=[],n=this.vars[t];if(n!==void 0)for(const i of n)e.push(`	${this.getVar(i.type,i.name)};`);return`
${e.join(`
`)}
`}getVaryings(t){const e=[];if(t==="vertex"&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),t==="vertex"||t==="fragment"){const s=this.varyings,o=this.vars[t];for(let a=0;a<s.length;a++){const l=s[a];if(l.needsInterpolation){let c=`@location( ${a} )`;/^(int|uint|ivec|uvec)/.test(l.type)&&(c+=" @interpolate( flat )"),e.push(`${c} ${l.name} : ${this.getType(l.type)}`)}else t==="vertex"&&o.includes(l)===!1&&o.push(l)}}const n=this.getBuiltins(t);n&&e.push(n);const i=e.join(`,
	`);return t==="vertex"?this._getWGSLStruct("VaryingsStruct","	"+i):i}getUniforms(t){const e=this.uniforms[t],n=[],i=[],s=[],o={};for(const l of e){const c=l.groupNode.name,h=this.bindingsIndexes[c];if(l.type==="texture"||l.type==="cubeTexture"||l.type==="storageTexture"||l.type==="texture3D"){const u=l.node.value;t==="fragment"&&this.isUnfilterable(u)===!1&&l.node.isStorageTextureNode!==!0&&(u.isDepthTexture===!0&&u.compareFunction!==null?n.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name}_sampler : sampler_comparison;`):n.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name}_sampler : sampler;`));let d,f="";if(u.isMultisampleRenderTargetTexture===!0&&(f="_multisampled"),u.isCubeTexture===!0)d="texture_cube<f32>";else if(u.isDataArrayTexture===!0||u.isCompressedArrayTexture===!0)d="texture_2d_array<f32>";else if(u.isDepthTexture===!0)d=`texture_depth${f}_2d`;else if(u.isVideoTexture===!0)d="texture_external";else if(u.isData3DTexture===!0)d="texture_3d<f32>";else if(l.node.isStorageTextureNode===!0){const p=Rg(u),x=this.getStorageAccess(l.node);d=`texture_storage_2d<${p}, ${x}>`}else{const p=this.getComponentTypeFromTexture(u).charAt(0);d=`texture${f}_2d<${p}32>`}n.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name} : ${d};`)}else if(l.type==="buffer"||l.type==="storageBuffer"){const u=l.node,d=this.getType(u.bufferType),f=u.bufferCount,p=f>0?", "+f:"",x=u.isAtomic?`atomic<${d}>`:`${d}`,m=`	${l.name} : array< ${x}${p} >
`,g=u.isStorageBufferNode?`storage, ${this.getStorageAccess(u)}`:"uniform";i.push(this._getWGSLStructBinding("NodeBuffer_"+u.id,m,g,h.binding++,h.group))}else{const u=this.getType(this.getVectorType(l.type)),d=l.groupNode.name;(o[d]||(o[d]={index:h.binding++,id:h.group,snippets:[]})).snippets.push(`	${l.name} : ${u}`)}}for(const l in o){const c=o[l];s.push(this._getWGSLStructBinding(l,c.snippets.join(`,
`),"uniform",c.index,c.id))}let a=n.join(`
`);return a+=i.join(`
`),a+=s.join(`
`),a}buildCode(){const t=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const e in t){const n=t[e];n.uniforms=this.getUniforms(e),n.attributes=this.getAttributes(e),n.varyings=this.getVaryings(e),n.structs=this.getStructs(e),n.vars=this.getVars(e),n.codes=this.getCodes(e),n.directives=this.getDirectives(e),n.scopedArrays=this.getScopedArrays(e);let i=`// code

`;i+=this.flowCode[e];const s=this.flowNodes[e],o=s[s.length-1],a=o.outputNode,l=a!==void 0&&a.isOutputStructNode===!0;for(const c of s){const h=this.getFlowData(c),u=c.name;if(u&&(i.length>0&&(i+=`
`),i+=`	// flow -> ${u}
	`),i+=`${h.code}
	`,c===o&&e!=="compute"){if(i+=`// result

	`,e==="vertex")i+=`varyings.Vertex = ${h.result};`;else if(e==="fragment")if(l)n.returnType=a.nodeType,i+=`return ${h.result};`;else{let d="	@location(0) color: vec4<f32>";const f=this.getBuiltins("output");f&&(d+=`,
	`+f),n.returnType="OutputStruct",n.structs+=this._getWGSLStruct("OutputStruct",d),n.structs+=`
var<private> output : OutputStruct;

`,i+=`output.color = ${h.result};

	return output;`}}}n.flow=i}this.material!==null?(this.vertexShader=this._getWGSLVertexCode(t.vertex),this.fragmentShader=this._getWGSLFragmentCode(t.fragment)):this.computeShader=this._getWGSLComputeCode(t.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(t,e=null){let n;return e!==null&&(n=this._getWGSLMethod(t+"_"+e)),n===void 0&&(n=this._getWGSLMethod(t)),n||t}getType(t){return oO[t]||t}isAvailable(t){let e=lM[t];return e===void 0&&(t==="float32Filterable"&&(e=this.renderer.hasFeature("float32-filterable")),lM[t]=e),e}_getWGSLMethod(t){return Fs[t]!==void 0&&this._include(t),cc[t]}_include(t){const e=Fs[t];return e.build(this),this.currentFunctionNode!==null&&this.currentFunctionNode.includes.push(e),e}_getWGSLVertexCode(t){return`${this.getSignature()}
// directives
${t.directives}

// uniforms
${t.uniforms}

// varyings
${t.varyings}
var<private> varyings : VaryingsStruct;

// codes
${t.codes}

@vertex
fn main( ${t.attributes} ) -> VaryingsStruct {

	// vars
	${t.vars}

	// flow
	${t.flow}

	return varyings;

}
`}_getWGSLFragmentCode(t){return`${this.getSignature()}
// global
${eb}

// uniforms
${t.uniforms}

// structs
${t.structs}

// codes
${t.codes}

@fragment
fn main( ${t.varyings} ) -> ${t.returnType} {

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}_getWGSLComputeCode(t,e){return`${this.getSignature()}
// directives
${t.directives}

// system
var<private> instanceIndex : u32;

// locals
${t.scopedArrays}

// uniforms
${t.uniforms}

// codes
${t.codes}

@compute @workgroup_size( ${e} )
fn main( ${t.attributes} ) {

	// system
	instanceIndex = id.x + id.y * numWorkgroups.x * u32(${e}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${e});

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}_getWGSLStruct(t,e){return`
struct ${t} {
${e}
};`}_getWGSLStructBinding(t,e,n,i=0,s=0){const o=t+"Struct";return`${this._getWGSLStruct(o,e)}
@binding( ${i} ) @group( ${s} )
var<${n}> ${t} : ${o};`}}class lO{constructor(t){this.backend=t}getCurrentDepthStencilFormat(t){let e;return t.depthTexture!==null?e=this.getTextureFormatGPU(t.depthTexture):t.depth&&t.stencil?e=C.Depth24PlusStencil8:t.depth&&(e=C.Depth24Plus),e}getTextureFormatGPU(t){return this.backend.get(t).format}getCurrentColorFormat(t){let e;return t.textures!==null?e=this.getTextureFormatGPU(t.textures[0]):e=this.getPreferredCanvasFormat(),e}getCurrentColorSpace(t){return t.textures!==null?t.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(t,e){if(t.isPoints)return Da.PointList;if(t.isLineSegments||t.isMesh&&e.wireframe===!0)return Da.LineList;if(t.isLine)return Da.LineStrip;if(t.isMesh)return Da.TriangleList}getSampleCount(t){let e=1;return t>1&&(e=Math.pow(2,Math.floor(Math.log2(t))),e===2&&(e=4)),e}getSampleCountRenderContext(t){return t.textures!==null?this.getSampleCount(t.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){return navigator.userAgent.includes("Quest")?C.BGRA8Unorm:navigator.gpu.getPreferredCanvasFormat()}}const cO=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),hO=new Map([[yT,["float16"]]]),uO=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class dO{constructor(t){this.backend=t}createAttribute(t,e){const n=this._getBufferAttribute(t),i=this.backend,s=i.get(n);let o=s.buffer;if(o===void 0){const a=i.device;let l=n.array;if(t.normalized===!1&&(l.constructor===Int16Array||l.constructor===Uint16Array)){const h=new Uint32Array(l.length);for(let u=0;u<l.length;u++)h[u]=l[u];l=h}if(n.array=l,(n.isStorageBufferAttribute||n.isStorageInstancedBufferAttribute)&&n.itemSize===3){l=new l.constructor(n.count*4);for(let h=0;h<n.count;h++)l.set(n.array.subarray(h*3,h*3+3),h*4);n.itemSize=4,n.array=l}const c=l.byteLength+(4-l.byteLength%4)%4;o=a.createBuffer({label:n.name,size:c,usage:e,mappedAtCreation:!0}),new l.constructor(o.getMappedRange()).set(l),o.unmap(),s.buffer=o}}updateAttribute(t){const e=this._getBufferAttribute(t),n=this.backend,i=n.device,s=n.get(e).buffer,o=e.array,a=e.updateRanges;if(a.length===0)i.queue.writeBuffer(s,0,o,0);else{for(let l=0,c=a.length;l<c;l++){const h=a[l];i.queue.writeBuffer(s,0,o,h.start*o.BYTES_PER_ELEMENT,h.count*o.BYTES_PER_ELEMENT)}e.clearUpdateRanges()}}createShaderVertexBuffers(t){const e=t.getAttributes(),n=new Map;for(let i=0;i<e.length;i++){const s=e[i],o=s.array.BYTES_PER_ELEMENT,a=this._getBufferAttribute(s);let l=n.get(a);if(l===void 0){let u,d;s.isInterleavedBufferAttribute===!0?(u=s.data.stride*o,d=s.data.isInstancedInterleavedBuffer?tu.Instance:tu.Vertex):(u=s.itemSize*o,d=s.isInstancedBufferAttribute?tu.Instance:tu.Vertex),s.normalized===!1&&(s.array.constructor===Int16Array||s.array.constructor===Uint16Array)&&(u=4),l={arrayStride:u,attributes:[],stepMode:d},n.set(a,l)}const c=this._getVertexFormat(s),h=s.isInterleavedBufferAttribute===!0?s.offset*o:0;l.attributes.push({shaderLocation:i,offset:h,format:c})}return Array.from(n.values())}destroyAttribute(t){const e=this.backend;e.get(this._getBufferAttribute(t)).buffer.destroy(),e.delete(t)}async getArrayBufferAsync(t){const e=this.backend,n=e.device,s=e.get(this._getBufferAttribute(t)).buffer,o=s.size,a=n.createBuffer({label:t.name,size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),l=n.createCommandEncoder({});l.copyBufferToBuffer(s,0,a,0,o),a.unmap();const c=l.finish();return n.queue.submit([c]),await a.mapAsync(GPUMapMode.READ),a.getMappedRange()}_getVertexFormat(t){const{itemSize:e,normalized:n}=t,i=t.array.constructor,s=t.constructor;let o;if(e==1)o=uO.get(i);else{const l=(hO.get(s)||cO.get(i))[n?1:0];if(l){const c=i.BYTES_PER_ELEMENT*e,u=Math.floor((c+3)/4)*4/i.BYTES_PER_ELEMENT;if(u%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");o=`${l}x${u}`}}return o||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),o}_getBufferAttribute(t){return t.isInterleavedBufferAttribute&&(t=t.data),t}}class fO{constructor(t){this.backend=t,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(t){const n=this.backend.device,i=[];let s=0;for(const o of t.bindings){const a={binding:s++,visibility:o.visibility};if(o.isUniformBuffer||o.isStorageBuffer){const l={};o.isStorageBuffer&&(l.type=o.access),a.buffer=l}else if(o.isSampler){const l={};o.texture.isDepthTexture&&o.texture.compareFunction!==null&&(l.type="comparison"),a.sampler=l}else if(o.isSampledTexture&&o.texture.isVideoTexture)a.externalTexture={};else if(o.isSampledTexture&&o.store){const l=this.backend.get(o.texture).texture.format,c=o.access;a.storageTexture={format:l,access:c}}else if(o.isSampledTexture){const l={};if(o.texture.isMultisampleRenderTargetTexture===!0&&(l.multisampled=!0),o.texture.isDepthTexture)l.sampleType=Wl.Depth;else if(o.texture.isDataTexture||o.texture.isDataArrayTexture||o.texture.isData3DTexture){const c=o.texture.type;c===Xn?l.sampleType=Wl.SInt:c===vn?l.sampleType=Wl.UInt:c===Ti&&(this.backend.hasFeature("float32-filterable")?l.sampleType=Wl.Float:l.sampleType=Wl.UnfilterableFloat)}o.isSampledCubeTexture?l.viewDimension=wi.Cube:o.texture.isDataArrayTexture||o.texture.isCompressedArrayTexture?l.viewDimension=wi.TwoDArray:o.isSampledTexture3D&&(l.viewDimension=wi.ThreeD),a.texture=l}else console.error(`WebGPUBindingUtils: Unsupported binding "${o}".`);i.push(a)}return n.createBindGroupLayout({entries:i})}createBindings(t){const{backend:e,bindGroupLayoutCache:n}=this,i=e.get(t);let s=n.get(t.bindingsReference);s===void 0&&(s=this.createBindingsLayout(t),n.set(t.bindingsReference,s));const o=this.createBindGroup(t,s);i.layout=s,i.group=o}updateBinding(t){const e=this.backend,n=e.device,i=t.buffer,s=e.get(t).buffer;n.queue.writeBuffer(s,0,i,0)}createBindGroup(t,e){const n=this.backend,i=n.device;let s=0;const o=[];for(const a of t.bindings){if(a.isUniformBuffer){const l=n.get(a);if(l.buffer===void 0){const c=a.byteLength,h=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,u=i.createBuffer({label:"bindingBuffer_"+a.name,size:c,usage:h});l.buffer=u}o.push({binding:s,resource:{buffer:l.buffer}})}else if(a.isStorageBuffer){const l=n.get(a);if(l.buffer===void 0){const c=a.attribute;l.buffer=n.get(c).buffer}o.push({binding:s,resource:{buffer:l.buffer}})}else if(a.isSampler){const l=n.get(a.texture);o.push({binding:s,resource:l.sampler})}else if(a.isSampledTexture){const l=n.get(a.texture);let c;if(l.externalTexture!==void 0)c=i.importExternalTexture({source:l.externalTexture});else{const h=a.store?1:l.texture.mipLevelCount,u=`view-${l.texture.width}-${l.texture.height}-${h}`;if(c=l[u],c===void 0){const d=VU.All;let f;a.isSampledCubeTexture?f=wi.Cube:a.isSampledTexture3D?f=wi.ThreeD:a.texture.isDataArrayTexture||a.texture.isCompressedArrayTexture?f=wi.TwoDArray:f=wi.TwoD,c=l[u]=l.texture.createView({aspect:d,dimension:f,mipLevelCount:h})}}o.push({binding:s,resource:c})}s++}return i.createBindGroup({label:"bindGroup_"+t.name,layout:e,entries:o})}}class pO{constructor(t){this.backend=t}_getSampleCount(t){return this.backend.utils.getSampleCountRenderContext(t)}createRenderPipeline(t,e){const{object:n,material:i,geometry:s,pipeline:o}=t,{vertexProgram:a,fragmentProgram:l}=o,c=this.backend,h=c.device,u=c.utils,d=c.get(o),f=[];for(const M of t.getBindings()){const b=c.get(M);f.push(b.layout)}const p=c.attributeUtils.createShaderVertexBuffers(t);let x;i.transparent===!0&&i.blending!==il&&(x=this._getBlending(i));let m={};i.stencilWrite===!0&&(m={compare:this._getStencilCompare(i),failOp:this._getStencilOperation(i.stencilFail),depthFailOp:this._getStencilOperation(i.stencilZFail),passOp:this._getStencilOperation(i.stencilZPass)});const g=this._getColorWriteMask(i),_=[];if(t.context.textures!==null){const M=t.context.textures;for(let b=0;b<M.length;b++){const k=u.getTextureFormatGPU(M[b]);_.push({format:k,blend:x,writeMask:g})}}else{const M=u.getCurrentColorFormat(t.context);_.push({format:M,blend:x,writeMask:g})}const y=c.get(a).module,S=c.get(l).module,w=this._getPrimitiveState(n,s,i),A=this._getDepthCompare(i),T=u.getCurrentDepthStencilFormat(t.context),R=this._getSampleCount(t.context),$={label:`renderPipeline_${i.name||i.type}_${i.id}`,vertex:Object.assign({},y,{buffers:p}),fragment:Object.assign({},S,{targets:_}),primitive:w,depthStencil:{format:T,depthWriteEnabled:i.depthWrite,depthCompare:A,stencilFront:m,stencilBack:{},stencilReadMask:i.stencilFuncMask,stencilWriteMask:i.stencilWriteMask},multisample:{count:R,alphaToCoverageEnabled:i.alphaToCoverage&&R>1},layout:h.createPipelineLayout({bindGroupLayouts:f})};if(e===null)d.pipeline=h.createRenderPipeline($);else{const M=new Promise(b=>{h.createRenderPipelineAsync($).then(k=>{d.pipeline=k,b()})});e.push(M)}}createBundleEncoder(t){const e=this.backend,{utils:n,device:i}=e,s=n.getCurrentDepthStencilFormat(t),o=n.getCurrentColorFormat(t),a=this._getSampleCount(t),l={label:"renderBundleEncoder",colorFormats:[o],depthStencilFormat:s,sampleCount:a};return i.createRenderBundleEncoder(l)}createComputePipeline(t,e){const n=this.backend,i=n.device,s=n.get(t.computeProgram).module,o=n.get(t),a=[];for(const l of e){const c=n.get(l);a.push(c.layout)}o.pipeline=i.createComputePipeline({compute:s,layout:i.createPipelineLayout({bindGroupLayouts:a})})}_getBlending(t){let e,n;const i=t.blending,s=t.blendSrc,o=t.blendDst,a=t.blendEquation;if(i===IS){const l=t.blendSrcAlpha!==null?t.blendSrcAlpha:s,c=t.blendDstAlpha!==null?t.blendDstAlpha:o,h=t.blendEquationAlpha!==null?t.blendEquationAlpha:a;e={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(o),operation:this._getBlendOperation(a)},n={srcFactor:this._getBlendFactor(l),dstFactor:this._getBlendFactor(c),operation:this._getBlendOperation(h)}}else{const l=t.premultipliedAlpha,c=(h,u,d,f)=>{e={srcFactor:h,dstFactor:u,operation:Kr.Add},n={srcFactor:d,dstFactor:f,operation:Kr.Add}};if(l)switch(i){case Rr:c(Wt.One,Wt.OneMinusSrcAlpha,Wt.One,Wt.OneMinusSrcAlpha);break;case Xu:c(Wt.One,Wt.One,Wt.One,Wt.One);break;case Yu:c(Wt.Zero,Wt.OneMinusSrc,Wt.Zero,Wt.One);break;case ju:c(Wt.Zero,Wt.Src,Wt.Zero,Wt.SrcAlpha);break}else switch(i){case Rr:c(Wt.SrcAlpha,Wt.OneMinusSrcAlpha,Wt.One,Wt.OneMinusSrcAlpha);break;case Xu:c(Wt.SrcAlpha,Wt.One,Wt.SrcAlpha,Wt.One);break;case Yu:c(Wt.Zero,Wt.OneMinusSrc,Wt.Zero,Wt.One);break;case ju:c(Wt.Zero,Wt.Src,Wt.Zero,Wt.Src);break}}if(e!==void 0&&n!==void 0)return{color:e,alpha:n};console.error("THREE.WebGPURenderer: Invalid blending: ",i)}_getBlendFactor(t){let e;switch(t){case US:e=Wt.Zero;break;case BS:e=Wt.One;break;case OS:e=Wt.Src;break;case zS:e=Wt.OneMinusSrc;break;case Ku:e=Wt.SrcAlpha;break;case Zu:e=Wt.OneMinusSrcAlpha;break;case VS:e=Wt.Dst;break;case HS:e=Wt.OneMinusDstColor;break;case GS:e=Wt.DstAlpha;break;case kS:e=Wt.OneMinusDstAlpha;break;case $S:e=Wt.SrcAlphaSaturated;break;case MP:e=Wt.Constant;break;case SP:e=Wt.OneMinusConstant;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",t)}return e}_getStencilCompare(t){let e;const n=t.stencilFunc;switch(n){case eP:e=Sn.Never;break;case og:e=Sn.Always;break;case nP:e=Sn.Less;break;case sP:e=Sn.LessEqual;break;case iP:e=Sn.Equal;break;case aP:e=Sn.GreaterEqual;break;case rP:e=Sn.Greater;break;case oP:e=Sn.NotEqual;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",n)}return e}_getStencilOperation(t){let e;switch(t){case no:e=mr.Keep;break;case Y2:e=mr.Zero;break;case j2:e=mr.Replace;break;case tP:e=mr.Invert;break;case K2:e=mr.IncrementClamp;break;case Z2:e=mr.DecrementClamp;break;case Q2:e=mr.IncrementWrap;break;case J2:e=mr.DecrementWrap;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",e)}return e}_getBlendOperation(t){let e;switch(t){case vr:e=Kr.Add;break;case LS:e=Kr.Subtract;break;case DS:e=Kr.ReverseSubtract;break;case R2:e=Kr.Min;break;case C2:e=Kr.Max;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",t)}return e}_getPrimitiveState(t,e,n){const i={},s=this.backend.utils;switch(i.topology=s.getPrimitiveTopology(t,n),e.index!==null&&t.isLine===!0&&t.isLineSegments!==!0&&(i.stripIndexFormat=e.index.array instanceof Uint16Array?cl.Uint16:cl.Uint32),n.side){case vc:i.frontFace=Ap.CCW,i.cullMode=wp.Back;break;case Zs:i.frontFace=Ap.CCW,i.cullMode=wp.Front;break;case qu:i.frontFace=Ap.CCW,i.cullMode=wp.None;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",n.side);break}return i}_getColorWriteMask(t){return t.colorWrite===!0?F_.All:F_.None}_getDepthCompare(t){let e;if(t.depthTest===!1)e=Sn.Always;else{const n=t.depthFunc;switch(n){case WS:e=Sn.Never;break;case qS:e=Sn.Always;break;case XS:e=Sn.Less;break;case Qu:e=Sn.LessEqual;break;case YS:e=Sn.Equal;break;case jS:e=Sn.GreaterEqual;break;case KS:e=Sn.Greater;break;case ZS:e=Sn.NotEqual;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",n)}}return e}}class mO extends tb{constructor(t={}){super(t),this.isWebGPUBackend=!0,this.parameters.alpha=t.alpha===void 0?!0:t.alpha,this.parameters.requiredLimits=t.requiredLimits===void 0?{}:t.requiredLimits,this.trackTimestamp=t.trackTimestamp===!0,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new lO(this),this.attributeUtils=new dO(this),this.bindingUtils=new fO(this),this.pipelineUtils=new pO(this),this.textureUtils=new JB(this),this.occludedResolveCache=new Map}async init(t){await super.init(t);const e=this.parameters;let n;if(e.device===void 0){const o={powerPreference:e.powerPreference},a=await navigator.gpu.requestAdapter(o);if(a===null)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const l=Object.values(Ag),c=[];for(const u of l)a.features.has(u)&&c.push(u);const h={requiredFeatures:c,requiredLimits:e.requiredLimits};n=await a.requestDevice(h)}else n=e.device;const i=e.context!==void 0?e.context:t.domElement.getContext("webgpu");this.device=n,this.context=i;const s=e.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(Ag.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:s}),this.updateSize()}get coordinateSystem(){return To}async getArrayBufferAsync(t){return await this.attributeUtils.getArrayBufferAsync(t)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let t=this.defaultRenderPassdescriptor;if(t===null){const n=this.renderer;t={colorAttachments:[{view:null}],depthStencilAttachment:{view:this.textureUtils.getDepthBuffer(n.depth,n.stencil).createView()}};const i=t.colorAttachments[0];this.renderer.samples>0?i.view=this.colorBuffer.createView():i.resolveTarget=void 0,this.defaultRenderPassdescriptor=t}const e=t.colorAttachments[0];return this.renderer.samples>0?e.resolveTarget=this.context.getCurrentTexture().createView():e.view=this.context.getCurrentTexture().createView(),t}_getRenderPassDescriptor(t){const e=t.renderTarget,n=this.get(e);let i=n.descriptors;if(i===void 0||n.width!==e.width||n.height!==e.height||n.activeMipmapLevel!==e.activeMipmapLevel||n.samples!==e.samples){i={},n.descriptors=i;const a=()=>{e.removeEventListener("dispose",a),this.delete(e)};e.addEventListener("dispose",a)}const s=t.getCacheKey();let o=i[s];if(o===void 0){const a=t.textures,l=[];for(let u=0;u<a.length;u++){const d=this.get(a[u]),f=d.texture.createView({baseMipLevel:t.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:t.activeCubeFace,dimension:wi.TwoD});let p,x;d.msaaTexture!==void 0?(p=d.msaaTexture.createView(),x=f):(p=f,x=void 0),l.push({view:p,resolveTarget:x,loadOp:en.Load,storeOp:Tn.Store})}const h={view:this.get(t.depthTexture).texture.createView()};o={colorAttachments:l,depthStencilAttachment:h},i[s]=o,n.width=e.width,n.height=e.height,n.samples=e.samples,n.activeMipmapLevel=e.activeMipmapLevel}return o}beginRender(t){const e=this.get(t),n=this.device,i=t.occlusionQueryCount;let s;i>0&&(e.currentOcclusionQuerySet&&e.currentOcclusionQuerySet.destroy(),e.currentOcclusionQueryBuffer&&e.currentOcclusionQueryBuffer.destroy(),e.currentOcclusionQuerySet=e.occlusionQuerySet,e.currentOcclusionQueryBuffer=e.occlusionQueryBuffer,e.currentOcclusionQueryObjects=e.occlusionQueryObjects,s=n.createQuerySet({type:"occlusion",count:i}),e.occlusionQuerySet=s,e.occlusionQueryIndex=0,e.occlusionQueryObjects=new Array(i),e.lastOcclusionObject=null);let o;t.textures===null?o=this._getDefaultRenderPassDescriptor():o=this._getRenderPassDescriptor(t),this.initTimestampQuery(t,o),o.occlusionQuerySet=s;const a=o.depthStencilAttachment;if(t.textures!==null){const h=o.colorAttachments;for(let u=0;u<h.length;u++){const d=h[u];t.clearColor?(d.clearValue=u===0?t.clearColorValue:{r:0,g:0,b:0,a:1},d.loadOp=en.Clear,d.storeOp=Tn.Store):(d.loadOp=en.Load,d.storeOp=Tn.Store)}}else{const h=o.colorAttachments[0];t.clearColor?(h.clearValue=t.clearColorValue,h.loadOp=en.Clear,h.storeOp=Tn.Store):(h.loadOp=en.Load,h.storeOp=Tn.Store)}t.depth&&(t.clearDepth?(a.depthClearValue=t.clearDepthValue,a.depthLoadOp=en.Clear,a.depthStoreOp=Tn.Store):(a.depthLoadOp=en.Load,a.depthStoreOp=Tn.Store)),t.stencil&&(t.clearStencil?(a.stencilClearValue=t.clearStencilValue,a.stencilLoadOp=en.Clear,a.stencilStoreOp=Tn.Store):(a.stencilLoadOp=en.Load,a.stencilStoreOp=Tn.Store));const l=n.createCommandEncoder({label:"renderContext_"+t.id}),c=l.beginRenderPass(o);if(e.descriptor=o,e.encoder=l,e.currentPass=c,e.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},e.renderBundles=[],t.viewport&&this.updateViewport(t),t.scissor){const{x:h,y:u,width:d,height:f}=t.scissorValue;c.setScissorRect(h,u,d,f)}}finishRender(t){const e=this.get(t),n=t.occlusionQueryCount;if(e.renderBundles.length>0&&e.currentPass.executeBundles(e.renderBundles),n>e.occlusionQueryIndex&&e.currentPass.endOcclusionQuery(),e.currentPass.end(),n>0){const i=n*8;let s=this.occludedResolveCache.get(i);s===void 0&&(s=this.device.createBuffer({size:i,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(i,s));const o=this.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});e.encoder.resolveQuerySet(e.occlusionQuerySet,0,n,s,0),e.encoder.copyBufferToBuffer(s,0,o,0,i),e.occlusionQueryBuffer=o,this.resolveOccludedAsync(t)}if(this.prepareTimestampBuffer(t,e.encoder),this.device.queue.submit([e.encoder.finish()]),t.textures!==null){const i=t.textures;for(let s=0;s<i.length;s++){const o=i[s];o.generateMipmaps===!0&&this.textureUtils.generateMipmaps(o)}}}isOccluded(t,e){const n=this.get(t);return n.occluded&&n.occluded.has(e)}async resolveOccludedAsync(t){const e=this.get(t),{currentOcclusionQueryBuffer:n,currentOcclusionQueryObjects:i}=e;if(n&&i){const s=new WeakSet;e.currentOcclusionQueryObjects=null,e.currentOcclusionQueryBuffer=null,await n.mapAsync(GPUMapMode.READ);const o=n.getMappedRange(),a=new BigUint64Array(o);for(let l=0;l<i.length;l++)a[l]!==BigInt(0)&&s.add(i[l]);n.destroy(),e.occluded=s}}updateViewport(t){const{currentPass:e}=this.get(t),{x:n,y:i,width:s,height:o,minDepth:a,maxDepth:l}=t.viewportValue;e.setViewport(n,i,s,o,a,l)}clear(t,e,n,i=null){const s=this.device,o=this.renderer;let a=[],l,c,h,u;if(t){const p=this.getClearColor();if(this.renderer.alpha===!0){const x=p.a;c={r:p.r*x,g:p.g*x,b:p.b*x,a:x}}else c={r:p.r,g:p.g,b:p.b,a:p.a}}if(i===null){h=o.depth,u=o.stencil;const p=this._getDefaultRenderPassDescriptor();if(t){a=p.colorAttachments;const x=a[0];x.clearValue=c,x.loadOp=en.Clear,x.storeOp=Tn.Store}(h||u)&&(l=p.depthStencilAttachment)}else{if(h=i.depth,u=i.stencil,t)for(const p of i.textures){const x=this.get(p),m=x.texture.createView();let g,_;x.msaaTexture!==void 0?(g=x.msaaTexture.createView(),_=m):(g=m,_=void 0),a.push({view:g,resolveTarget:_,clearValue:c,loadOp:en.Clear,storeOp:Tn.Store})}(h||u)&&(l={view:this.get(i.depthTexture).texture.createView()})}h&&(e?(l.depthLoadOp=en.Clear,l.depthClearValue=o.getClearDepth(),l.depthStoreOp=Tn.Store):(l.depthLoadOp=en.Load,l.depthStoreOp=Tn.Store)),u&&(n?(l.stencilLoadOp=en.Clear,l.stencilClearValue=o.getClearStencil(),l.stencilStoreOp=Tn.Store):(l.stencilLoadOp=en.Load,l.stencilStoreOp=Tn.Store));const d=s.createCommandEncoder({});d.beginRenderPass({colorAttachments:a,depthStencilAttachment:l}).end(),s.queue.submit([d.finish()])}beginCompute(t){const e=this.get(t),n={};this.initTimestampQuery(t,n),e.cmdEncoderGPU=this.device.createCommandEncoder(),e.passEncoderGPU=e.cmdEncoderGPU.beginComputePass(n)}compute(t,e,n,i){const{passEncoderGPU:s}=this.get(t),o=this.get(i).pipeline;s.setPipeline(o);for(let h=0,u=n.length;h<u;h++){const d=n[h],f=this.get(d);s.setBindGroup(h,f.group)}const a=this.device.limits.maxComputeWorkgroupsPerDimension,l=this.get(e);l.dispatchSize===void 0&&(l.dispatchSize={x:0,y:1,z:1});const{dispatchSize:c}=l;e.dispatchCount>a?(c.x=Math.min(e.dispatchCount,a),c.y=Math.ceil(e.dispatchCount/a)):c.x=e.dispatchCount,s.dispatchWorkgroups(c.x,c.y,c.z)}finishCompute(t){const e=this.get(t);e.passEncoderGPU.end(),this.prepareTimestampBuffer(t,e.cmdEncoderGPU),this.device.queue.submit([e.cmdEncoderGPU.finish()])}draw(t,e){const{object:n,context:i,pipeline:s}=t,o=t.getBindings(),a=this.get(i),l=this.get(s).pipeline,c=a.currentSets,h=a.currentPass,u=t.getDrawParameters();if(u===null)return;c.pipeline!==l&&(h.setPipeline(l),c.pipeline=l);const d=c.bindingGroups;for(let m=0,g=o.length;m<g;m++){const _=o[m],y=this.get(_);d[_.index]!==_.id&&(h.setBindGroup(_.index,y.group),d[_.index]=_.id)}const f=t.getIndex(),p=f!==null;if(p===!0&&c.index!==f){const m=this.get(f).buffer,g=f.array instanceof Uint16Array?cl.Uint16:cl.Uint32;h.setIndexBuffer(m,g),c.index=f}const x=t.getVertexBuffers();for(let m=0,g=x.length;m<g;m++){const _=x[m];if(c.attributes[m]!==_){const y=this.get(_).buffer;h.setVertexBuffer(m,y),c.attributes[m]=_}}if(a.occlusionQuerySet!==void 0){const m=a.lastOcclusionObject;m!==n&&(m!==null&&m.occlusionTest===!0&&(h.endOcclusionQuery(),a.occlusionQueryIndex++),n.occlusionTest===!0&&(h.beginOcclusionQuery(a.occlusionQueryIndex),a.occlusionQueryObjects[a.occlusionQueryIndex]=n),a.lastOcclusionObject=n)}if(n.isBatchedMesh===!0){const m=n._multiDrawStarts,g=n._multiDrawCounts,_=n._multiDrawCount,y=n._multiDrawInstances,S=p?f.array.BYTES_PER_ELEMENT:1;for(let w=0;w<_;w++){const A=y?y[w]:1,T=A>1?0:w;h.drawIndexed(g[w],A,m[w]/S,0,T)}}else if(p===!0){const{vertexCount:m,instanceCount:g,firstVertex:_}=u;h.drawIndexed(m,g,_,0,0),e.update(n,m,g)}else{const{vertexCount:m,instanceCount:g,firstVertex:_}=u;h.draw(m,g,_,0),e.update(n,m,g)}}needsRenderUpdate(t){const e=this.get(t),{object:n,material:i}=t,s=this.utils,o=s.getSampleCountRenderContext(t.context),a=s.getCurrentColorSpace(t.context),l=s.getCurrentColorFormat(t.context),c=s.getCurrentDepthStencilFormat(t.context),h=s.getPrimitiveTopology(n,i);let u=!1;return(e.material!==i||e.materialVersion!==i.version||e.transparent!==i.transparent||e.blending!==i.blending||e.premultipliedAlpha!==i.premultipliedAlpha||e.blendSrc!==i.blendSrc||e.blendDst!==i.blendDst||e.blendEquation!==i.blendEquation||e.blendSrcAlpha!==i.blendSrcAlpha||e.blendDstAlpha!==i.blendDstAlpha||e.blendEquationAlpha!==i.blendEquationAlpha||e.colorWrite!==i.colorWrite||e.depthWrite!==i.depthWrite||e.depthTest!==i.depthTest||e.depthFunc!==i.depthFunc||e.stencilWrite!==i.stencilWrite||e.stencilFunc!==i.stencilFunc||e.stencilFail!==i.stencilFail||e.stencilZFail!==i.stencilZFail||e.stencilZPass!==i.stencilZPass||e.stencilFuncMask!==i.stencilFuncMask||e.stencilWriteMask!==i.stencilWriteMask||e.side!==i.side||e.alphaToCoverage!==i.alphaToCoverage||e.sampleCount!==o||e.colorSpace!==a||e.colorFormat!==l||e.depthStencilFormat!==c||e.primitiveTopology!==h||e.clippingContextCacheKey!==t.clippingContext.cacheKey)&&(e.material=i,e.materialVersion=i.version,e.transparent=i.transparent,e.blending=i.blending,e.premultipliedAlpha=i.premultipliedAlpha,e.blendSrc=i.blendSrc,e.blendDst=i.blendDst,e.blendEquation=i.blendEquation,e.blendSrcAlpha=i.blendSrcAlpha,e.blendDstAlpha=i.blendDstAlpha,e.blendEquationAlpha=i.blendEquationAlpha,e.colorWrite=i.colorWrite,e.depthWrite=i.depthWrite,e.depthTest=i.depthTest,e.depthFunc=i.depthFunc,e.stencilWrite=i.stencilWrite,e.stencilFunc=i.stencilFunc,e.stencilFail=i.stencilFail,e.stencilZFail=i.stencilZFail,e.stencilZPass=i.stencilZPass,e.stencilFuncMask=i.stencilFuncMask,e.stencilWriteMask=i.stencilWriteMask,e.side=i.side,e.alphaToCoverage=i.alphaToCoverage,e.sampleCount=o,e.colorSpace=a,e.colorFormat=l,e.depthStencilFormat=c,e.primitiveTopology=h,e.clippingContextCacheKey=t.clippingContext.cacheKey,u=!0),u}getRenderCacheKey(t){const{object:e,material:n}=t,i=this.utils,s=t.context;return[n.transparent,n.blending,n.premultipliedAlpha,n.blendSrc,n.blendDst,n.blendEquation,n.blendSrcAlpha,n.blendDstAlpha,n.blendEquationAlpha,n.colorWrite,n.depthWrite,n.depthTest,n.depthFunc,n.stencilWrite,n.stencilFunc,n.stencilFail,n.stencilZFail,n.stencilZPass,n.stencilFuncMask,n.stencilWriteMask,n.side,i.getSampleCountRenderContext(s),i.getCurrentColorSpace(s),i.getCurrentColorFormat(s),i.getCurrentDepthStencilFormat(s),i.getPrimitiveTopology(e,n),t.clippingContext.cacheKey].join()}createSampler(t){this.textureUtils.createSampler(t)}destroySampler(t){this.textureUtils.destroySampler(t)}createDefaultTexture(t){this.textureUtils.createDefaultTexture(t)}createTexture(t,e){this.textureUtils.createTexture(t,e)}updateTexture(t,e){this.textureUtils.updateTexture(t,e)}generateMipmaps(t){this.textureUtils.generateMipmaps(t)}destroyTexture(t){this.textureUtils.destroyTexture(t)}copyTextureToBuffer(t,e,n,i,s,o){return this.textureUtils.copyTextureToBuffer(t,e,n,i,s,o)}initTimestampQuery(t,e){if(!this.trackTimestamp)return;const n=this.get(t);if(!n.timeStampQuerySet){const i=this.device.createQuerySet({type:"timestamp",count:2});Object.assign(e,{timestampWrites:{querySet:i,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}}),n.timeStampQuerySet=i}}prepareTimestampBuffer(t,e){if(!this.trackTimestamp)return;const n=this.get(t),i=2*BigInt64Array.BYTES_PER_ELEMENT;n.currentTimestampQueryBuffers===void 0&&(n.currentTimestampQueryBuffers={resolveBuffer:this.device.createBuffer({label:"timestamp resolve buffer",size:i,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),resultBuffer:this.device.createBuffer({label:"timestamp result buffer",size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),isMappingPending:!1});const{resolveBuffer:s,resultBuffer:o,isMappingPending:a}=n.currentTimestampQueryBuffers;a!==!0&&(e.resolveQuerySet(n.timeStampQuerySet,0,2,s,0),e.copyBufferToBuffer(s,0,o,0,i))}async resolveTimestampAsync(t,e="render"){if(!this.trackTimestamp)return;const n=this.get(t);if(n.currentTimestampQueryBuffers===void 0)return;const{resultBuffer:i,isMappingPending:s}=n.currentTimestampQueryBuffers;s!==!0&&(n.currentTimestampQueryBuffers.isMappingPending=!0,i.mapAsync(GPUMapMode.READ).then(()=>{const o=new BigUint64Array(i.getMappedRange()),a=Number(o[1]-o[0])/1e6;this.renderer.info.updateTimestamp(e,a),i.unmap(),n.currentTimestampQueryBuffers.isMappingPending=!1}))}createNodeBuilder(t,e){return new aO(t,e)}createProgram(t){const e=this.get(t);e.module={module:this.device.createShaderModule({code:t.code,label:t.stage}),entryPoint:"main"}}destroyProgram(t){this.delete(t)}createRenderPipeline(t,e){this.pipelineUtils.createRenderPipeline(t,e)}createComputePipeline(t,e){this.pipelineUtils.createComputePipeline(t,e)}beginBundle(t){const e=this.get(t);e._currentPass=e.currentPass,e._currentSets=e.currentSets,e.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},e.currentPass=this.pipelineUtils.createBundleEncoder(t)}finishBundle(t,e){const n=this.get(t),s=n.currentPass.finish();this.get(e).bundleGPU=s,n.currentSets=n._currentSets,n.currentPass=n._currentPass}addBundle(t,e){this.get(t).renderBundles.push(this.get(e).bundleGPU)}createBindings(t){this.bindingUtils.createBindings(t)}updateBindings(t){this.bindingUtils.createBindings(t)}updateBinding(t){this.bindingUtils.updateBinding(t)}createIndexAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(t){this.attributeUtils.updateAttribute(t)}destroyAttribute(t){this.attributeUtils.destroyAttribute(t)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(t){return this.device.features.has(t)}copyTextureToTexture(t,e,n=null,i=null,s=0){let o=0,a=0,l=0,c=0,h=0,u=0,d=t.image.width,f=t.image.height;n!==null&&(c=n.x,h=n.y,u=n.z||0,d=n.width,f=n.height),i!==null&&(o=i.x,a=i.y,l=i.z||0);const p=this.device.createCommandEncoder({label:"copyTextureToTexture_"+t.id+"_"+e.id}),x=this.get(t).texture,m=this.get(e).texture;p.copyTextureToTexture({texture:x,mipLevel:s,origin:{x:c,y:h,z:u}},{texture:m,mipLevel:s,origin:{x:o,y:a,z:l}},[d,f,1]),this.device.queue.submit([p.finish()])}copyFramebufferToTexture(t,e,n){const i=this.get(e),{encoder:s,descriptor:o}=i;let a=null;e.renderTarget?t.isDepthTexture?a=this.get(e.depthTexture).texture:a=this.get(e.textures[0]).texture:t.isDepthTexture?a=this.textureUtils.getDepthBuffer(e.depth,e.stencil):a=this.context.getCurrentTexture();const l=this.get(t).texture;if(a.format!==l.format){console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",a.format,l.format);return}i.currentPass.end(),s.copyTextureToTexture({texture:a,origin:{x:n.x,y:n.y,z:0}},{texture:l},[n.z,n.w]),t.generateMipmaps&&this.textureUtils.generateMipmaps(t);for(let c=0;c<o.colorAttachments.length;c++)o.colorAttachments[c].loadOp=en.Load;e.depth&&(o.depthStencilAttachment.depthLoadOp=en.Load),e.stencil&&(o.depthStencilAttachment.stencilLoadOp=en.Load),i.currentPass=s.beginRenderPass(o),i.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null}}}class nb extends oi{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Ae(16777215),this.specular=new Ae(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ae(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ir,this.normalScale=new Me(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ur,this.combine=bd,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}const gO=new nb;class xO extends ln{static get type(){return"MeshPhongNodeMaterial"}constructor(t){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(gO),this.setValues(t)}setupEnvironment(t){const e=super.setupEnvironment(t);return e?new Bx(e):null}setupLightingModel(){return new Vv}setupVariants(){const t=(this.shininessNode?J(this.shininessNode):CL).max(1e-4);dg.assign(t);const e=this.specularNode||FL;Si.assign(e)}copy(t){return this.shininessNode=t.shininessNode,this.specularNode=t.specularNode,super.copy(t)}}class Vx extends oi{constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Ae(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ae(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ir,this.normalScale=new Me(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ur,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}const yO=new Vx;class ib extends ln{static get type(){return"MeshStandardNodeMaterial"}constructor(t){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(yO),this.setValues(t)}setupEnvironment(t){let e=super.setupEnvironment(t);return e===null&&t.environmentNode&&(e=t.environmentNode),e?new z3(e):null}setupLightingModel(){return new $v}setupSpecular(){const t=Oe(Q(.04),Ee.rgb,ad);Si.assign(t),cd.assign(1)}setupVariants(){const t=this.metalnessNode?J(this.metalnessNode):DL;ad.assign(t);let e=this.roughnessNode?J(this.roughnessNode):LL;e=Uv({roughness:e}),zs.assign(e),this.setupSpecular(),Ee.assign(Qt(Ee.rgb.mul(t.oneMinus()),Ee.a))}copy(t){return this.emissiveNode=t.emissiveNode,this.metalnessNode=t.metalnessNode,this.roughnessNode=t.roughnessNode,super.copy(t)}}class sb extends Vx{constructor(t){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Me(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return bn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Ae(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Ae(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Ae(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(t)}get anisotropy(){return this._anisotropy}set anisotropy(t){this._anisotropy>0!=t>0&&this.version++,this._anisotropy=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){this._iridescence>0!=t>0&&this.version++,this._iridescence=t}get dispersion(){return this._dispersion}set dispersion(t){this._dispersion>0!=t>0&&this.version++,this._dispersion=t}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=t.anisotropy,this.anisotropyRotation=t.anisotropyRotation,this.anisotropyMap=t.anisotropyMap,this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.dispersion=t.dispersion,this.ior=t.ior,this.iridescence=t.iridescence,this.iridescenceMap=t.iridescenceMap,this.iridescenceIOR=t.iridescenceIOR,this.iridescenceThicknessRange=[...t.iridescenceThicknessRange],this.iridescenceThicknessMap=t.iridescenceThicknessMap,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}const _O=new sb;class MO extends ib{static get type(){return"MeshPhysicalNodeMaterial"}constructor(t){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(_O),this.setValues(t)}get useClearcoat(){return this.clearcoat>0||this.clearcoatNode!==null}get useIridescence(){return this.iridescence>0||this.iridescenceNode!==null}get useSheen(){return this.sheen>0||this.sheenNode!==null}get useAnisotropy(){return this.anisotropy>0||this.anisotropyNode!==null}get useTransmission(){return this.transmission>0||this.transmissionNode!==null}get useDispersion(){return this.dispersion>0||this.dispersionNode!==null}setupSpecular(){const t=this.iorNode?J(this.iorNode):jL;Pu.assign(t),Si.assign(Oe(hd($T(Pu.sub(1).div(Pu.add(1))).mul(IL),Q(1)).mul(i_),Ee.rgb,ad)),cd.assign(Oe(i_,1,ad))}setupLightingModel(){return new $v(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(t){if(super.setupVariants(t),this.useClearcoat){const e=this.clearcoatNode?J(this.clearcoatNode):BL,n=this.clearcoatRoughnessNode?J(this.clearcoatRoughnessNode):OL;hg.assign(e),ld.assign(Uv({roughness:n}))}if(this.useSheen){const e=this.sheenNode?Q(this.sheenNode):kL,n=this.sheenRoughnessNode?J(this.sheenRoughnessNode):VL;Ia.assign(e),xx.assign(n)}if(this.useIridescence){const e=this.iridescenceNode?J(this.iridescenceNode):$L,n=this.iridescenceIORNode?J(this.iridescenceIORNode):WL,i=this.iridescenceThicknessNode?J(this.iridescenceThicknessNode):qL;yx.assign(e),RT.assign(n),CT.assign(i)}if(this.useAnisotropy){const e=(this.anisotropyNode?Tt(this.anisotropyNode):HL).toVar();io.assign(e.length()),On(io.equal(0),()=>{e.assign(Tt(1,0))}).Else(()=>{e.divAssign(Tt(io)),io.assign(io.saturate())}),ug.assign(io.pow2().mix(zs.pow2(),1)),Cu.assign(oc[0].mul(e.x).add(oc[1].mul(e.y))),Xa.assign(oc[1].mul(e.x).sub(oc[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?J(this.transmissionNode):XL,n=this.thicknessNode?J(this.thicknessNode):YL,i=this.attenuationDistanceNode?J(this.attenuationDistanceNode):KL,s=this.attenuationColorNode?Q(this.attenuationColorNode):ZL;if(fg.assign(e),PT.assign(n),FT.assign(i),IT.assign(s),this.useDispersion){const o=this.dispersionNode?J(this.dispersionNode):eD;LT.assign(o)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?Q(this.clearcoatNormalNode):zL}setup(t){t.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(t),super.setup(t)}copy(t){return this.clearcoatNode=t.clearcoatNode,this.clearcoatRoughnessNode=t.clearcoatRoughnessNode,this.clearcoatNormalNode=t.clearcoatNormalNode,this.sheenNode=t.sheenNode,this.sheenRoughnessNode=t.sheenRoughnessNode,this.iridescenceNode=t.iridescenceNode,this.iridescenceIORNode=t.iridescenceIORNode,this.iridescenceThicknessNode=t.iridescenceThicknessNode,this.specularIntensityNode=t.specularIntensityNode,this.specularColorNode=t.specularColorNode,this.transmissionNode=t.transmissionNode,this.thicknessNode=t.thicknessNode,this.attenuationDistanceNode=t.attenuationDistanceNode,this.attenuationColorNode=t.attenuationColorNode,this.dispersionNode=t.dispersionNode,this.anisotropyNode=t.anisotropyNode,super.copy(t)}}class rb extends oi{constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Ae(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ae(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ir,this.normalScale=new Me(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const SO=Mt(({normal:r,lightDirection:t,builder:e})=>{const n=r.dot(t),i=Tt(n.mul(.5).add(.5),0);if(e.material.gradientMap){const s=Er("gradientMap","texture").context({getUV:()=>i});return Q(s.r)}else{const s=i.fwidth().mul(.5);return Oe(Q(.7),Q(1),vo(J(.7).sub(s.x),J(.7).add(s.x),i.x))}});class TO extends Fd{direct({lightDirection:t,lightColor:e,reflectedLight:n},i,s){const o=SO({normal:nv,lightDirection:t,builder:s}).mul(e);n.directDiffuse.addAssign(o.mul(hl({diffuseColor:Ee.rgb})))}indirect({ambientOcclusion:t,irradiance:e,reflectedLight:n}){n.indirectDiffuse.addAssign(e.mul(hl({diffuseColor:Ee}))),n.indirectDiffuse.mulAssign(t)}}const vO=new rb;class bO extends ln{static get type(){return"MeshToonNodeMaterial"}constructor(t){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(vO),this.setValues(t)}setupLightingModel(){return new TO}}class EO extends Sl{static get type(){return"BasicLightMapNode"}constructor(t=null){super(),this.lightMapNode=t}setup(t){const e=J(1/Math.PI);t.context.irradianceLightMap=this.lightMapNode.mul(e)}}const AO=new Od;class wO extends ln{static get type(){return"MeshBasicNodeMaterial"}constructor(t){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(AO),this.setValues(t)}setupNormal(){return ns}setupEnvironment(t){const e=super.setupEnvironment(t);return e?new Bx(e):null}setupLightMap(t){let e=null;return t.material.lightMap&&(e=new EO(cv)),e}setupOutgoingLight(){return Ee.rgb}setupLightingModel(){return new kv}}class ob extends oi{constructor(t){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Ae(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ae(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ir,this.normalScale=new Me(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ur,this.combine=bd,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}const NO=new ob;class RO extends ln{static get type(){return"MeshLambertNodeMaterial"}constructor(t){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(NO),this.setValues(t)}setupEnvironment(t){const e=super.setupEnvironment(t);return e?new Bx(e):null}setupLightingModel(){return new Vv(!1)}}class ab extends oi{constructor(t){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ir,this.normalScale=new Me(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}const CO=new ab;class PO extends ln{static get type(){return"MeshNormalNodeMaterial"}constructor(t){super(),this.lights=!1,this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(CO),this.setValues(t)}setupDiffuseColor(){const t=this.opacityNode?J(this.opacityNode):lv;Ee.assign(Qt(s3(sn),t))}}class lb extends oi{constructor(t){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Ae(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ir,this.normalScale=new Me(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this.fog=t.fog,this}}const FO=new lb;class IO extends ln{static get type(){return"MeshMatcapNodeMaterial"}constructor(t){super(),this.lights=!1,this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(FO),this.setValues(t)}setupVariants(t){const e=DU;let n;t.material.matcap?n=Er("matcap","texture").context({getUV:()=>e}):n=Q(Oe(.2,.8,e.y)),Ee.rgb.mulAssign(n.rgb)}}class Hx extends oi{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Ae(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const LO=new Hx;class DO extends ln{static get type(){return"LineBasicNodeMaterial"}constructor(t){super(),this.isLineBasicNodeMaterial=!0,this.lights=!1,this.setDefaultValues(LO),this.setValues(t)}}class cb extends Hx{constructor(t){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}const UO=new cb;class BO extends ln{static get type(){return"LineDashedNodeMaterial"}constructor(t){super(),this.isLineDashedNodeMaterial=!0,this.lights=!1,this.setDefaultValues(UO),this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(t)}setupVariants(){const t=this.offsetNode,e=this.dashScaleNode?J(this.dashScaleNode):QL,n=this.dashSizeNode?J(this.dashSizeNode):JL,i=this.dashSizeNode?J(this.dashGapNode):tD;Xf.assign(n),Yy.assign(i);const s=Js(js("lineDistance").mul(e));(t?s.add(t):s).mod(Xf.add(Yy)).greaterThan(Xf).discard()}}class hb extends oi{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Ae(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const OO=new hb;class zO extends ln{static get type(){return"PointsNodeMaterial"}constructor(t){super(),this.isPointsNodeMaterial=!0,this.lights=!1,this.transparent=!0,this.sizeNode=null,this.setDefaultValues(OO),this.setValues(t)}copy(t){return this.sizeNode=t.sizeNode,super.copy(t)}}class ub extends oi{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Ae(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const GO=new ub;class kO extends ln{static get type(){return"SpriteNodeMaterial"}constructor(t){super(),this.isSpriteNodeMaterial=!0,this.lights=!1,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(GO),this.setValues(t)}setupPosition({object:t,camera:e,context:n}){const i=this.sizeAttenuation,{positionNode:s,rotationNode:o,scaleNode:a}=this,l=zn;let c=Ld.mul(Q(s||0)),h=Tt(bo[0].xyz.length(),bo[1].xyz.length());a!==null&&(h=h.mul(a)),!i&&e.isPerspectiveCamera&&(h=h.mul(c.z.negate()));let u=l.xy;if(t.center&&t.center.isVector2===!0){const x=vI("center","vec2");u=u.sub(x.sub(.5))}u=u.mul(h);const d=J(o||GL),f=OU(u,d);c=Qt(c.xy.add(f),c.zw);const p=Ex.mul(c);return n.vertex=l,p}copy(t){return this.positionNode=t.positionNode,this.rotationNode=t.rotationNode,this.scaleNode=t.scaleNode,super.copy(t)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(t){this._useSizeAttenuation!==t&&(this._useSizeAttenuation=t,this.needsUpdate=!0)}}class db extends oi{constructor(t){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Ae(0),this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.fog=t.fog,this}}class VO extends Fd{constructor(){super(),this.shadowNode=J(1).toVar("shadowMask")}direct({shadowMask:t}){this.shadowNode.mulAssign(t)}finish(t){Ee.a.mulAssign(this.shadowNode.oneMinus()),t.outgoingLight.rgb.assign(Ee.rgb)}}const HO=new db;class $O extends ln{static get type(){return"ShadowNodeMaterial"}constructor(t){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(HO),this.setValues(t)}setupLightingModel(){return new VO}}class Uo extends ai{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new Ae(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}}const Op=new an,cM=new O,hM=new O;class $x{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Me(512,512),this.map=null,this.mapPass=null,this.matrix=new an,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Xv,this._frameExtents=new Me(1,1),this._viewportCount=1,this._viewports=[new Ie(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;cM.setFromMatrixPosition(t.matrixWorld),e.position.copy(cM),hM.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(hM),e.updateMatrixWorld(),Op.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Op),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(Op)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}const uM=new an,Yl=new O,zp=new O;class WO extends $x{constructor(){super(new Bs(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Me(4,2),this._viewportCount=6,this._viewports=[new Ie(2,1,1,1),new Ie(0,1,1,1),new Ie(3,1,1,1),new Ie(1,1,1,1),new Ie(3,0,1,1),new Ie(1,0,1,1)],this._cubeDirections=[new O(1,0,0),new O(-1,0,0),new O(0,0,1),new O(0,0,-1),new O(0,1,0),new O(0,-1,0)],this._cubeUps=[new O(0,1,0),new O(0,1,0),new O(0,1,0),new O(0,1,0),new O(0,0,1),new O(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,s=t.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),Yl.setFromMatrixPosition(t.matrixWorld),n.position.copy(Yl),zp.copy(n.position),zp.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(zp),n.updateMatrixWorld(),i.makeTranslation(-Yl.x,-Yl.y,-Yl.z),uM.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(uM)}}class qO extends Uo{constructor(t,e,n=0,i=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new WO}get power(){return this.intensity*4*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class XO extends $x{constructor(){super(new Px(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class YO extends Uo{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(ai.DEFAULT_UP),this.updateMatrix(),this.target=new ai,this.shadow=new XO}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class jO extends Uo{constructor(t,e,n=10,i=10){super(t,e),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}class KO extends $x{constructor(){super(new Bs(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,n=Tc*2*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=t.distance||e.far;(n!==e.fov||i!==e.aspect||s!==e.far)&&(e.fov=n,e.aspect=i,e.far=s,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}class fb extends Uo{constructor(t,e,n=0,i=Math.PI/3,s=0,o=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(ai.DEFAULT_UP),this.updateMatrix(),this.target=new ai,this.distance=n,this.angle=i,this.penumbra=s,this.decay=o,this.map=null,this.shadow=new KO}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class ZO extends Uo{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class QO extends Uo{constructor(t,e,n){super(t,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(ai.DEFAULT_UP),this.updateMatrix(),this.groundColor=new Ae(e)}copy(t,e){return super.copy(t,e),this.groundColor.copy(t.groundColor),this}}class JO{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new O)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,i=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.282095),e.addScaledVector(o[1],.488603*i),e.addScaledVector(o[2],.488603*s),e.addScaledVector(o[3],.488603*n),e.addScaledVector(o[4],1.092548*(n*i)),e.addScaledVector(o[5],1.092548*(i*s)),e.addScaledVector(o[6],.315392*(3*s*s-1)),e.addScaledVector(o[7],1.092548*(n*s)),e.addScaledVector(o[8],.546274*(n*n-i*i)),e}getIrradianceAt(t,e){const n=t.x,i=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.886227),e.addScaledVector(o[1],2*.511664*i),e.addScaledVector(o[2],2*.511664*s),e.addScaledVector(o[3],2*.511664*n),e.addScaledVector(o[4],2*.429043*n*i),e.addScaledVector(o[5],2*.429043*i*s),e.addScaledVector(o[6],.743125*s*s-.247708),e.addScaledVector(o[7],2*.429043*n*s),e.addScaledVector(o[8],.429043*(n*n-i*i)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+i*3);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+i*3);return t}static getBasisAt(t,e){const n=t.x,i=t.y,s=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*s,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*s,e[6]=.315392*(3*s*s-1),e[7]=1.092548*n*s,e[8]=.546274*(n*n-i*i)}}class tz extends Uo{constructor(t=new JO,e=1){super(void 0,e),this.isLightProbe=!0,this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}class ez extends fb{constructor(t,e,n,i,s,o){super(t,e,n,i,s,o),this.iesMap=null}copy(t,e){return super.copy(t,e),this.iesMap=t.iesMap,this}}class nz extends qv{constructor(){super(),this.addMaterial(xO,nb),this.addMaterial(ib,Vx),this.addMaterial(MO,sb),this.addMaterial(bO,rb),this.addMaterial(wO,Od),this.addMaterial(RO,ob),this.addMaterial(PO,ab),this.addMaterial(IO,lb),this.addMaterial(DO,Hx),this.addMaterial(BO,cb),this.addMaterial(zO,hb),this.addMaterial(kO,ub),this.addMaterial($O,db),this.addLight(F3,qO),this.addLight(I3,YO),this.addLight(L3,jO),this.addLight(Bv,fb),this.addLight(U3,ZO),this.addLight(B3,QO),this.addLight(O3,tz),this.addLight(D3,ez),this.addToneMapping(l3,I2),this.addToneMapping(c3,L2),this.addToneMapping(h3,D2),this.addToneMapping(d3,U2),this.addToneMapping(g3,B2),this.addToneMapping(x3,O2),this.addColorSpace(a3,gg(Ci,Ot)),this.addColorSpace(o3,gg(Ot,Ci))}}class iz extends bB{constructor(t={}){let e;t.forceWebGL?e=oM:(e=mO,t.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new oM(t)));const n=new e(t);super(n,t),this.nodes.library=new nz,this.isWebGPURenderer=!0}}/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const pb="169",sz=1,Cg=0,mb=300,rz=301,oz=302,dM=1e3,hu=1001,fM=1002,fd=1003,gb=1006,xb=1008,az=1009,lz=1013,yb=1014,cz=1015,hz=1016,uz=1020,dz=1023,Gp=1026,pM=1027,mM=0,fz=1,pd="",Is="srgb",kd="srgb-linear",pz="display-p3",_b="display-p3-linear",Pg="linear",gM="srgb",xM="rec709",yM="p3",md=35044,hc=2e3,Fg=2001;class Vd{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const i=this._listeners[t];if(i!==void 0){const s=i.indexOf(e);s!==-1&&i.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,t);t.target=null}}}const Cn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let _M=1234567;const Mb=Math.PI/180,Sb=180/Math.PI;function mo(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Cn[r&255]+Cn[r>>8&255]+Cn[r>>16&255]+Cn[r>>24&255]+"-"+Cn[t&255]+Cn[t>>8&255]+"-"+Cn[t>>16&15|64]+Cn[t>>24&255]+"-"+Cn[e&63|128]+Cn[e>>8&255]+"-"+Cn[e>>16&255]+Cn[e>>24&255]+Cn[n&255]+Cn[n>>8&255]+Cn[n>>16&255]+Cn[n>>24&255]).toLowerCase()}function Yn(r,t,e){return Math.max(t,Math.min(e,r))}function Wx(r,t){return(r%t+t)%t}function mz(r,t,e,n,i){return n+(r-t)*(i-n)/(e-t)}function gz(r,t,e){return r!==t?(e-r)/(t-r):0}function _c(r,t,e){return(1-e)*r+e*t}function xz(r,t,e,n){return _c(r,t,1-Math.exp(-e*n))}function yz(r,t=1){return t-Math.abs(Wx(r,t*2)-t)}function _z(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function Mz(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function Sz(r,t){return r+Math.floor(Math.random()*(t-r+1))}function Tz(r,t){return r+Math.random()*(t-r)}function vz(r){return r*(.5-Math.random())}function bz(r){r!==void 0&&(_M=r);let t=_M+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function Ez(r){return r*Mb}function Az(r){return r*Sb}function wz(r){return(r&r-1)===0&&r!==0}function Nz(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function Rz(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function Cz(r,t,e,n,i){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+n)/2),h=o((t+n)/2),u=s((t-n)/2),d=o((t-n)/2),f=s((n-t)/2),p=o((n-t)/2);switch(i){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*p,l*f,a*c);break;case"YXY":r.set(l*f,a*h,l*p,a*c);break;case"ZYZ":r.set(l*p,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function Yi(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function Re(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const Tb={DEG2RAD:Mb,RAD2DEG:Sb,generateUUID:mo,clamp:Yn,euclideanModulo:Wx,mapLinear:mz,inverseLerp:gz,lerp:_c,damp:xz,pingpong:yz,smoothstep:_z,smootherstep:Mz,randInt:Sz,randFloat:Tz,randFloatSpread:vz,seededRandom:bz,degToRad:Ez,radToDeg:Az,isPowerOfTwo:wz,ceilPowerOfTwo:Nz,floorPowerOfTwo:Rz,setQuaternionFromProperEuler:Cz,normalize:Re,denormalize:Yi};class Fi{constructor(t=0,e=0){Fi.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Yn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*n-o*i+t.x,this.y=s*i+o*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class xs{constructor(t,e,n,i,s,o,a,l,c){xs.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c)}set(t,e,n,i,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=i,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=n,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],f=n[5],p=n[8],x=i[0],m=i[3],g=i[6],_=i[1],y=i[4],S=i[7],w=i[2],A=i[5],T=i[8];return s[0]=o*x+a*_+l*w,s[3]=o*m+a*y+l*A,s[6]=o*g+a*S+l*T,s[1]=c*x+h*_+u*w,s[4]=c*m+h*y+u*A,s[7]=c*g+h*S+u*T,s[2]=d*x+f*_+p*w,s[5]=d*m+f*y+p*A,s[8]=d*g+f*S+p*T,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-n*s*h+n*a*l+i*s*c-i*o*l}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,p=e*u+n*d+i*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/p;return t[0]=u*x,t[1]=(i*c-h*n)*x,t[2]=(a*n-i*o)*x,t[3]=d*x,t[4]=(h*e-i*l)*x,t[5]=(i*s-a*e)*x,t[6]=f*x,t[7]=(n*l-c*e)*x,t[8]=(o*e-n*s)*x,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*o+c*a)+o+t,-i*c,i*l,-i*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(kp.makeScale(t,e)),this}rotate(t){return this.premultiply(kp.makeRotation(-t)),this}translate(t,e){return this.premultiply(kp.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const kp=new xs;function MM(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}const SM=new xs().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),TM=new xs().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),jl={[kd]:{transfer:Pg,primaries:xM,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r,fromReference:r=>r},[Is]:{transfer:gM,primaries:xM,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r.convertSRGBToLinear(),fromReference:r=>r.convertLinearToSRGB()},[_b]:{transfer:Pg,primaries:yM,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.applyMatrix3(TM),fromReference:r=>r.applyMatrix3(SM)},[pz]:{transfer:gM,primaries:yM,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.convertSRGBToLinear().applyMatrix3(TM),fromReference:r=>r.applyMatrix3(SM).convertLinearToSRGB()}},Pz=new Set([kd,_b]),Mi={enabled:!0,_workingColorSpace:kd,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(r){if(!Pz.has(r))throw new Error(`Unsupported working color space, "${r}".`);this._workingColorSpace=r},convert:function(r,t,e){if(this.enabled===!1||t===e||!t||!e)return r;const n=jl[t].toReference,i=jl[e].fromReference;return i(n(r))},fromWorkingColorSpace:function(r,t){return this.convert(r,this._workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this._workingColorSpace)},getPrimaries:function(r){return jl[r].primaries},getTransfer:function(r){return r===pd?Pg:jl[r].transfer},getLuminanceCoefficients:function(r,t=this._workingColorSpace){return r.fromArray(jl[t].luminanceCoefficients)}};function ja(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Vp(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let xa;class Fz{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{xa===void 0&&(xa=MM("canvas")),xa.width=t.width,xa.height=t.height;const n=xa.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=xa}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=MM("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),s=i.data;for(let o=0;o<s.length;o++)s[o]=ja(s[o]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(ja(e[n]/255)*255):e[n]=ja(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let Iz=0;class vb{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:Iz++}),this.uuid=mo(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?s.push(Hp(i[o].image)):s.push(Hp(i[o]))}else s=Hp(i);n.url=s}return e||(t.images[this.uuid]=n),n}}function Hp(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?Fz.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Lz=0;class hs extends Vd{constructor(t=hs.DEFAULT_IMAGE,e=hs.DEFAULT_MAPPING,n=hu,i=hu,s=gb,o=xb,a=dz,l=az,c=hs.DEFAULT_ANISOTROPY,h=pd){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Lz++}),this.uuid=mo(),this.name="",this.source=new vb(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new Fi(0,0),this.repeat=new Fi(1,1),this.center=new Fi(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new xs,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==mb)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case dM:t.x=t.x-Math.floor(t.x);break;case hu:t.x=t.x<0?0:1;break;case fM:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case dM:t.y=t.y-Math.floor(t.y);break;case hu:t.y=t.y<0?0:1;break;case fM:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}hs.DEFAULT_IMAGE=null;hs.DEFAULT_MAPPING=mb;hs.DEFAULT_ANISOTROPY=1;class ps{constructor(t=0,e=0,n=0,i=1){ps.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*e+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*e+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*e+o[7]*n+o[11]*i+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,s;const l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],p=l[9],x=l[2],m=l[6],g=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-x)<.01&&Math.abs(p-m)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+x)<.1&&Math.abs(p+m)<.1&&Math.abs(c+f+g-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const y=(c+1)/2,S=(f+1)/2,w=(g+1)/2,A=(h+d)/4,T=(u+x)/4,R=(p+m)/4;return y>S&&y>w?y<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(y),i=A/n,s=T/n):S>w?S<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(S),n=A/i,s=R/i):w<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(w),n=T/s,i=R/s),this.set(n,i,s,e),this}let _=Math.sqrt((m-p)*(m-p)+(u-x)*(u-x)+(d-h)*(d-h));return Math.abs(_)<.001&&(_=1),this.x=(m-p)/_,this.y=(u-x)/_,this.z=(d-h)/_,this.w=Math.acos((c+f+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class bb extends Vd{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new ps(0,0,t,e),this.scissorTest=!1,this.viewport=new ps(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:gb,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const s=new hs(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let n=0,i=t.textures.length;n<i;n++)this.textures[n]=t.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new vb(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Kc{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,s,o,a){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[o+0],f=s[o+1],p=s[o+2],x=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=x;return}if(u!==x||l!==d||c!==f||h!==p){let m=1-a;const g=l*d+c*f+h*p+u*x,_=g>=0?1:-1,y=1-g*g;if(y>Number.EPSILON){const w=Math.sqrt(y),A=Math.atan2(w,g*_);m=Math.sin(m*A)/w,a=Math.sin(a*A)/w}const S=a*_;if(l=l*m+d*S,c=c*m+f*S,h=h*m+p*S,u=u*m+x*S,m===1-a){const w=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=w,c*=w,h*=w,u*=w}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,n,i,s,o){const a=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[o],d=s[o+1],f=s[o+2],p=s[o+3];return t[e]=a*p+h*u+l*f-c*d,t[e+1]=l*p+h*d+c*u-a*f,t[e+2]=c*p+h*f+a*d-l*u,t[e+3]=h*p-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(n/2),h=a(i/2),u=a(s/2),d=l(n/2),f=l(i/2),p=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"YXZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"ZXY":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"ZYX":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"YZX":this._x=d*h*u+c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u-d*f*p;break;case"XZY":this._x=d*h*u-c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=n+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-i)*f}else if(n>a&&n>u){const f=2*Math.sqrt(1+n-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(i+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-n-u);this._w=(s-c)/f,this._x=(i+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-n-a);this._w=(o-i)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Yn(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=n*h+o*a+i*c-s*l,this._y=i*h+o*l+s*a-n*c,this._z=s*h+o*c+n*l-i*a,this._w=o*h-n*a-i*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*t._w+n*t._x+i*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*n+e*this._x,this._y=f*i+e*this._y,this._z=f*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class le{constructor(t=0,e=0,n=0){le.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(vM.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(vM.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*i,this.y=s[1]*e+s[4]*n+s[7]*i,this.z=s[2]*e+s[5]*n+s[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=t.elements,o=1/(s[3]*e+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*e+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*e+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=2*(o*i-a*n),h=2*(a*e-s*i),u=2*(s*n-o*e);return this.x=e+l*c+o*u-a*h,this.y=n+l*h+a*c-s*u,this.z=i+l*u+s*h-o*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i,this.y=s[1]*e+s[5]*n+s[9]*i,this.z=s[2]*e+s[6]*n+s[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=i*l-s*a,this.y=s*o-n*l,this.z=n*a-i*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return $p.copy(this).projectOnVector(t),this.sub($p)}reflect(t){return this.sub($p.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Yn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const $p=new le,vM=new Kc;class Ji{constructor(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){Ji.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m)}set(t,e,n,i,s,o,a,l,c,h,u,d,f,p,x,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=s,g[5]=o,g[9]=a,g[13]=l,g[2]=c,g[6]=h,g[10]=u,g[14]=d,g[3]=f,g[7]=p,g[11]=x,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Ji().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/ya.setFromMatrixColumn(t,0).length(),s=1/ya.setFromMatrixColumn(t,1).length(),o=1/ya.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*o,e[9]=n[9]*o,e[10]=n[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,s=t.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+p*c,e[5]=d-x*c,e[9]=-a*l,e[2]=x-d*c,e[6]=p+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d+x*a,e[4]=p*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=x+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,p=c*h,x=c*u;e[0]=d-x*a,e[4]=-o*u,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=x-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,p=a*h,x=a*u;e[0]=l*h,e[4]=p*c-f,e[8]=d*c+x,e[1]=l*u,e[5]=x*c+d,e[9]=f*c-p,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=x-d*u,e[8]=p*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+p,e[10]=d-x*u}else if(t.order==="XZY"){const d=o*l,f=o*c,p=a*l,x=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+x,e[5]=o*h,e[9]=f*u-p,e[2]=p*u-f,e[6]=a*h,e[10]=x*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Dz,t,Uz)}lookAt(t,e,n){const i=this.elements;return yi.subVectors(t,e),yi.lengthSq()===0&&(yi.z=1),yi.normalize(),gr.crossVectors(n,yi),gr.lengthSq()===0&&(Math.abs(n.z)===1?yi.x+=1e-4:yi.z+=1e-4,yi.normalize(),gr.crossVectors(n,yi)),gr.normalize(),uu.crossVectors(yi,gr),i[0]=gr.x,i[4]=uu.x,i[8]=yi.x,i[1]=gr.y,i[5]=uu.y,i[9]=yi.y,i[2]=gr.z,i[6]=uu.z,i[10]=yi.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,o=n[0],a=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],f=n[13],p=n[2],x=n[6],m=n[10],g=n[14],_=n[3],y=n[7],S=n[11],w=n[15],A=i[0],T=i[4],R=i[8],$=i[12],M=i[1],b=i[5],k=i[9],z=i[13],Z=i[2],nt=i[6],q=i[10],rt=i[14],W=i[3],dt=i[7],ft=i[11],yt=i[15];return s[0]=o*A+a*M+l*Z+c*W,s[4]=o*T+a*b+l*nt+c*dt,s[8]=o*R+a*k+l*q+c*ft,s[12]=o*$+a*z+l*rt+c*yt,s[1]=h*A+u*M+d*Z+f*W,s[5]=h*T+u*b+d*nt+f*dt,s[9]=h*R+u*k+d*q+f*ft,s[13]=h*$+u*z+d*rt+f*yt,s[2]=p*A+x*M+m*Z+g*W,s[6]=p*T+x*b+m*nt+g*dt,s[10]=p*R+x*k+m*q+g*ft,s[14]=p*$+x*z+m*rt+g*yt,s[3]=_*A+y*M+S*Z+w*W,s[7]=_*T+y*b+S*nt+w*dt,s[11]=_*R+y*k+S*q+w*ft,s[15]=_*$+y*z+S*rt+w*yt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],p=t[3],x=t[7],m=t[11],g=t[15];return p*(+s*l*u-i*c*u-s*a*d+n*c*d+i*a*f-n*l*f)+x*(+e*l*f-e*c*d+s*o*d-i*o*f+i*c*h-s*l*h)+m*(+e*c*u-e*a*f-s*o*u+n*o*f+s*a*h-n*c*h)+g*(-i*a*h-e*l*u+e*a*d+i*o*u-n*o*d+n*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],p=t[12],x=t[13],m=t[14],g=t[15],_=u*m*c-x*d*c+x*l*f-a*m*f-u*l*g+a*d*g,y=p*d*c-h*m*c-p*l*f+o*m*f+h*l*g-o*d*g,S=h*x*c-p*u*c+p*a*f-o*x*f-h*a*g+o*u*g,w=p*u*l-h*x*l-p*a*d+o*x*d+h*a*m-o*u*m,A=e*_+n*y+i*S+s*w;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const T=1/A;return t[0]=_*T,t[1]=(x*d*s-u*m*s-x*i*f+n*m*f+u*i*g-n*d*g)*T,t[2]=(a*m*s-x*l*s+x*i*c-n*m*c-a*i*g+n*l*g)*T,t[3]=(u*l*s-a*d*s-u*i*c+n*d*c+a*i*f-n*l*f)*T,t[4]=y*T,t[5]=(h*m*s-p*d*s+p*i*f-e*m*f-h*i*g+e*d*g)*T,t[6]=(p*l*s-o*m*s-p*i*c+e*m*c+o*i*g-e*l*g)*T,t[7]=(o*d*s-h*l*s+h*i*c-e*d*c-o*i*f+e*l*f)*T,t[8]=S*T,t[9]=(p*u*s-h*x*s-p*n*f+e*x*f+h*n*g-e*u*g)*T,t[10]=(o*x*s-p*a*s+p*n*c-e*x*c-o*n*g+e*a*g)*T,t[11]=(h*a*s-o*u*s-h*n*c+e*u*c+o*n*f-e*a*f)*T,t[12]=w*T,t[13]=(h*x*i-p*u*i+p*n*d-e*x*d-h*n*m+e*u*m)*T,t[14]=(p*a*i-o*x*i-p*n*l+e*x*l+o*n*m-e*a*m)*T,t[15]=(o*u*i-h*a*i+h*n*l-e*u*l-o*n*d+e*a*d)*T,this}scale(t){const e=this.elements,n=t.x,i=t.y,s=t.z;return e[0]*=n,e[4]*=i,e[8]*=s,e[1]*=n,e[5]*=i,e[9]*=s,e[2]*=n,e[6]*=i,e[10]*=s,e[3]*=n,e[7]*=i,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),s=1-n,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+n,c*a-i*l,c*l+i*a,0,c*a+i*l,h*a+n,h*l-i*o,0,c*l-i*a,h*l+i*o,s*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,s,o){return this.set(1,n,s,0,t,1,o,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,p=s*u,x=o*h,m=o*u,g=a*u,_=l*c,y=l*h,S=l*u,w=n.x,A=n.y,T=n.z;return i[0]=(1-(x+g))*w,i[1]=(f+S)*w,i[2]=(p-y)*w,i[3]=0,i[4]=(f-S)*A,i[5]=(1-(d+g))*A,i[6]=(m+_)*A,i[7]=0,i[8]=(p+y)*T,i[9]=(m-_)*T,i[10]=(1-(d+x))*T,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let s=ya.set(i[0],i[1],i[2]).length();const o=ya.set(i[4],i[5],i[6]).length(),a=ya.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),t.x=i[12],t.y=i[13],t.z=i[14],Hi.copy(this);const c=1/s,h=1/o,u=1/a;return Hi.elements[0]*=c,Hi.elements[1]*=c,Hi.elements[2]*=c,Hi.elements[4]*=h,Hi.elements[5]*=h,Hi.elements[6]*=h,Hi.elements[8]*=u,Hi.elements[9]*=u,Hi.elements[10]*=u,e.setFromRotationMatrix(Hi),n.x=s,n.y=o,n.z=a,this}makePerspective(t,e,n,i,s,o,a=hc){const l=this.elements,c=2*s/(e-t),h=2*s/(n-i),u=(e+t)/(e-t),d=(n+i)/(n-i);let f,p;if(a===hc)f=-(o+s)/(o-s),p=-2*o*s/(o-s);else if(a===Fg)f=-o/(o-s),p=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,i,s,o,a=hc){const l=this.elements,c=1/(e-t),h=1/(n-i),u=1/(o-s),d=(e+t)*c,f=(n+i)*h;let p,x;if(a===hc)p=(o+s)*u,x=-2*u;else if(a===Fg)p=s*u,x=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=x,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const ya=new le,Hi=new Ji,Dz=new le(0,0,0),Uz=new le(1,1,1),gr=new le,uu=new le,yi=new le,bM=new Ji,EM=new Kc;class Hd{constructor(t=0,e=0,n=0,i=Hd.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,s=i[0],o=i[4],a=i[8],l=i[1],c=i[5],h=i[9],u=i[2],d=i[6],f=i[10];switch(e){case"XYZ":this._y=Math.asin(Yn(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Yn(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(Yn(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-Yn(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(Yn(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-Yn(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return bM.makeRotationFromQuaternion(t),this.setFromRotationMatrix(bM,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return EM.setFromEuler(this),this.setFromQuaternion(EM,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Hd.DEFAULT_ORDER="XYZ";class Bz{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let Oz=0;const AM=new le,_a=new Kc,Cs=new Ji,du=new le,Kl=new le,zz=new le,Gz=new Kc,wM=new le(1,0,0),NM=new le(0,1,0),RM=new le(0,0,1),CM={type:"added"},kz={type:"removed"},Ma={type:"childadded",child:null},Wp={type:"childremoved",child:null};class go extends Vd{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Oz++}),this.uuid=mo(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=go.DEFAULT_UP.clone();const t=new le,e=new Hd,n=new Kc,i=new le(1,1,1);function s(){n.setFromEuler(e,!1)}function o(){e.setFromQuaternion(n,void 0,!1)}e._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Ji},normalMatrix:{value:new xs}}),this.matrix=new Ji,this.matrixWorld=new Ji,this.matrixAutoUpdate=go.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=go.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Bz,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return _a.setFromAxisAngle(t,e),this.quaternion.multiply(_a),this}rotateOnWorldAxis(t,e){return _a.setFromAxisAngle(t,e),this.quaternion.premultiply(_a),this}rotateX(t){return this.rotateOnAxis(wM,t)}rotateY(t){return this.rotateOnAxis(NM,t)}rotateZ(t){return this.rotateOnAxis(RM,t)}translateOnAxis(t,e){return AM.copy(t).applyQuaternion(this.quaternion),this.position.add(AM.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(wM,t)}translateY(t){return this.translateOnAxis(NM,t)}translateZ(t){return this.translateOnAxis(RM,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Cs.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?du.copy(t):du.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Kl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Cs.lookAt(Kl,du,this.up):Cs.lookAt(du,Kl,this.up),this.quaternion.setFromRotationMatrix(Cs),i&&(Cs.extractRotation(i.matrixWorld),_a.setFromRotationMatrix(Cs),this.quaternion.premultiply(_a.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(CM),Ma.child=t,this.dispatchEvent(Ma),Ma.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(kz),Wp.child=t,this.dispatchEvent(Wp),Wp.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Cs.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Cs.multiply(t.parent.matrixWorld)),t.applyMatrix4(Cs),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(CM),Ma.child=t,this.dispatchEvent(Ma),Ma.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Kl,t,zz),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Kl,Gz,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));i.material=a}else i.material=s(t.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];i.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(n.geometries=a),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f),p.length>0&&(n.nodes=p)}return n.object=i,n;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}}go.DEFAULT_UP=new le(0,1,0);go.DEFAULT_MATRIX_AUTO_UPDATE=!0;go.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Eb={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},xr={h:0,s:0,l:0},fu={h:0,s:0,l:0};function qp(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}class qx{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Is){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,Mi.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=Mi.workingColorSpace){return this.r=t,this.g=e,this.b=n,Mi.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=Mi.workingColorSpace){if(t=Wx(t,1),e=Yn(e,0,1),n=Yn(n,0,1),e===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+e):n+e-n*e,o=2*n-s;this.r=qp(o,s,t+1/3),this.g=qp(o,s,t),this.b=qp(o,s,t-1/3)}return Mi.toWorkingColorSpace(this,i),this}setStyle(t,e=Is){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=i[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Is){const n=Eb[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=ja(t.r),this.g=ja(t.g),this.b=ja(t.b),this}copyLinearToSRGB(t){return this.r=Vp(t.r),this.g=Vp(t.g),this.b=Vp(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Is){return Mi.fromWorkingColorSpace(Pn.copy(this),t),Math.round(Yn(Pn.r*255,0,255))*65536+Math.round(Yn(Pn.g*255,0,255))*256+Math.round(Yn(Pn.b*255,0,255))}getHexString(t=Is){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Mi.workingColorSpace){Mi.fromWorkingColorSpace(Pn.copy(this),e);const n=Pn.r,i=Pn.g,s=Pn.b,o=Math.max(n,i,s),a=Math.min(n,i,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=Mi.workingColorSpace){return Mi.fromWorkingColorSpace(Pn.copy(this),e),t.r=Pn.r,t.g=Pn.g,t.b=Pn.b,t}getStyle(t=Is){Mi.fromWorkingColorSpace(Pn.copy(this),t);const e=Pn.r,n=Pn.g,i=Pn.b;return t!==Is?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){return this.getHSL(xr),this.setHSL(xr.h+t,xr.s+e,xr.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(xr),t.getHSL(fu);const n=_c(xr.h,fu.h,e),i=_c(xr.s,fu.s,e),s=_c(xr.l,fu.l,e);return this.setHSL(n,i,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,s=t.elements;return this.r=s[0]*e+s[3]*n+s[6]*i,this.g=s[1]*e+s[4]*n+s[7]*i,this.b=s[2]*e+s[5]*n+s[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Pn=new qx;qx.NAMES=Eb;const tn=new le,pu=new Fi;class Ab{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=md,this.updateRanges=[],this.gpuType=cz,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)pu.fromBufferAttribute(this,e),pu.applyMatrix3(t),this.setXY(e,pu.x,pu.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)tn.fromBufferAttribute(this,e),tn.applyMatrix3(t),this.setXYZ(e,tn.x,tn.y,tn.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)tn.fromBufferAttribute(this,e),tn.applyMatrix4(t),this.setXYZ(e,tn.x,tn.y,tn.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)tn.fromBufferAttribute(this,e),tn.applyNormalMatrix(t),this.setXYZ(e,tn.x,tn.y,tn.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)tn.fromBufferAttribute(this,e),tn.transformDirection(t),this.setXYZ(e,tn.x,tn.y,tn.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=Yi(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Re(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Yi(e,this.array)),e}setX(t,e){return this.normalized&&(e=Re(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Yi(e,this.array)),e}setY(t,e){return this.normalized&&(e=Re(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Yi(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Re(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Yi(e,this.array)),e}setW(t,e){return this.normalized&&(e=Re(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=Re(e,this.array),n=Re(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=Re(e,this.array),n=Re(n,this.array),i=Re(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=Re(e,this.array),n=Re(n,this.array),i=Re(i,this.array),s=Re(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==md&&(t.usage=this.usage),t}}class Vz{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=md,this.updateRanges=[],this.version=0,this.uuid=mo()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,s=this.stride;i<s;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=mo()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=mo()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Hn=new le;class Xx{constructor(t,e,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)Hn.fromBufferAttribute(this,e),Hn.applyMatrix4(t),this.setXYZ(e,Hn.x,Hn.y,Hn.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Hn.fromBufferAttribute(this,e),Hn.applyNormalMatrix(t),this.setXYZ(e,Hn.x,Hn.y,Hn.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Hn.fromBufferAttribute(this,e),Hn.transformDirection(t),this.setXYZ(e,Hn.x,Hn.y,Hn.z);return this}getComponent(t,e){let n=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(n=Yi(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Re(n,this.array)),this.data.array[t*this.data.stride+this.offset+e]=n,this}setX(t,e){return this.normalized&&(e=Re(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=Re(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=Re(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=Re(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=Yi(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=Yi(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=Yi(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=Yi(e,this.array)),e}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=Re(e,this.array),n=Re(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=Re(e,this.array),n=Re(n,this.array),i=Re(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=Re(e,this.array),n=Re(n,this.array),i=Re(i,this.array),s=Re(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[i+s])}return new Ab(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Xx(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class Hz extends Ab{constructor(t,e,n,i=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Xp=new le,$z=new le,Wz=new xs;class qz{constructor(t=new le(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Xp.subVectors(n,e).cross($z.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(Xp),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:e.copy(t.start).addScaledVector(n,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||Wz.getNormalMatrix(t),i=this.coplanarPoint(Xp).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}class Xz extends hs{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=fd,this.minFilter=fd,this.generateMipmaps=!1,this.needsUpdate=!0}}class wb extends hs{constructor(t,e,n,i,s,o,a,l,c,h=Gp){if(h!==Gp&&h!==pM)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===Gp&&(n=yb),n===void 0&&h===pM&&(n=uz),super(null,i,s,o,a,l,h,n,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:fd,this.minFilter=l!==void 0?l:fd,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}function Ig(r,t=0){let e=3735928559^t,n=1103547991^t;if(r instanceof Array)for(let i=0,s;i<r.length;i++)s=r[i],e=Math.imul(e^s,2654435761),n=Math.imul(n^s,1597334677);else for(let i=0,s;i<r.length;i++)s=r.charCodeAt(i),e=Math.imul(e^s,2654435761),n=Math.imul(n^s,1597334677);return e=Math.imul(e^e>>>16,2246822507),e^=Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(e^e>>>13,3266489909),4294967296*(2097151&n)+(e>>>0)}const Yz=(...r)=>Ig(r);function jz(r,t=!1){const e=[];r.isNode===!0&&(e.push(r.id),r=r.getSelf());for(const{property:n,childNode:i}of Lg(r))e.push(e,Ig(n.slice(0,-4)),i.getCacheKey(t));return Ig(e)}function*Lg(r,t=!1){for(const e in r){if(e.startsWith("_")===!0)continue;const n=r[e];if(Array.isArray(n)===!0)for(let i=0;i<n.length;i++){const s=n[i];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:i,childNode:s})}else if(n&&n.isNode===!0)yield{property:e,childNode:n};else if(typeof n=="object")for(const i in n){const s=n[i];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:i,childNode:s})}}}function Ar(r){if(r==null)return null;const t=typeof r;return r.isNode===!0?"node":t==="number"?"float":t==="boolean"?"bool":t==="string"?"string":t==="function"?"shader":r.isVector2===!0?"vec2":r.isVector3===!0?"vec3":r.isVector4===!0?"vec4":r.isMatrix3===!0?"mat3":r.isMatrix4===!0?"mat4":r.isColor===!0?"color":r instanceof ArrayBuffer?"ArrayBuffer":null}function Nb(r,...t){const e=r?r.slice(-4):void 0;return t.length===1&&(e==="vec2"?t=[t[0],t[0]]:e==="vec3"?t=[t[0],t[0],t[0]]:e==="vec4"&&(t=[t[0],t[0],t[0],t[0]])),r==="color"?new qx(...t):e==="vec2"?new Fi(...t):e==="vec3"?new le(...t):e==="vec4"?new ps(...t):e==="mat3"?new xs(...t):e==="mat4"?new Ji(...t):r==="bool"?t[0]||!1:r==="float"||r==="int"||r==="uint"?t[0]||0:r==="string"?t[0]||"":r==="ArrayBuffer"?Zz(t[0]):null}function Kz(r){let t="";const e=new Uint8Array(r);for(let n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return btoa(t)}function Zz(r){return Uint8Array.from(atob(r),t=>t.charCodeAt(0)).buffer}const PM={VERTEX:"vertex",FRAGMENT:"fragment"},rn={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},Zc=["x","y","z","w"];let Qz=0;class ce extends Vd{static get type(){return"Node"}constructor(t=null){super(),this.nodeType=t,this.updateType=rn.NONE,this.updateBeforeType=rn.NONE,this.updateAfterType=rn.NONE,this.uuid=Tb.generateUUID(),this.version=0,this._cacheKey=null,this._cacheKeyVersion=0,this.global=!1,this.isNode=!0,Object.defineProperty(this,"id",{value:Qz++})}set needsUpdate(t){t===!0&&this.version++}get type(){return this.constructor.type}onUpdate(t,e){return this.updateType=e,this.update=t.bind(this.getSelf()),this}onFrameUpdate(t){return this.onUpdate(t,rn.FRAME)}onRenderUpdate(t){return this.onUpdate(t,rn.RENDER)}onObjectUpdate(t){return this.onUpdate(t,rn.OBJECT)}onReference(t){return this.updateReference=t.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:t}of Lg(this))yield t}dispose(){this.dispatchEvent({type:"dispose"})}traverse(t){t(this);for(const e of this.getChildren())e.traverse(t)}getCacheKey(t=!1){return t=t||this.version!==this._cacheKeyVersion,(t===!0||this._cacheKey===null)&&(this._cacheKey=jz(this,t),this._cacheKeyVersion=this.version),this._cacheKey}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(t){const e=this.getNodeType(t);return t.getElementType(e)}getNodeType(t){const e=t.getNodeProperties(this);return e.outputNode?e.outputNode.getNodeType(t):this.nodeType}getShared(t){const e=this.getHash(t);return t.getNodeFromHash(e)||this}setup(t){const e=t.getNodeProperties(this);let n=0;for(const i of this.getChildren())e["node"+n++]=i;return null}analyze(t){if(t.increaseUsage(this)===1){const n=t.getNodeProperties(this);for(const i of Object.values(n))i&&i.isNode===!0&&i.build(t)}}generate(t,e){const{outputNode:n}=t.getNodeProperties(this);if(n&&n.isNode===!0)return n.build(t,e)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(t,e=null){const n=this.getShared(t);if(this!==n)return n.build(t,e);t.addNode(this),t.addChain(this);let i=null;const s=t.getBuildStage();if(s==="setup"){this.updateReference(t);const o=t.getNodeProperties(this);if(o.initialized!==!0){const a=t.stack.nodes.length;o.initialized=!0,o.outputNode=this.setup(t),o.outputNode!==null&&t.stack.nodes.length;for(const l of Object.values(o))l&&l.isNode===!0&&l.build(t)}}else if(s==="analyze")this.analyze(t);else if(s==="generate")if(this.generate.length===1){const a=this.getNodeType(t),l=t.getDataFromNode(this);i=l.snippet,i===void 0?(i=this.generate(t)||"",l.snippet=i):l.flowCodes!==void 0&&t.context.nodeBlock!==void 0&&t.addFlowCodeHierarchy(this,t.context.nodeBlock),i=t.format(i,a,e)}else i=this.generate(t,e)||"";return t.removeChain(this),i}getSerializeChildren(){return Lg(this)}serialize(t){const e=this.getSerializeChildren(),n={};for(const{property:i,index:s,childNode:o}of e)s!==void 0?(n[i]===void 0&&(n[i]=Number.isInteger(s)?[]:{}),n[i][s]=o.toJSON(t.meta).uuid):n[i]=o.toJSON(t.meta).uuid;Object.keys(n).length>0&&(t.inputNodes=n)}deserialize(t){if(t.inputNodes!==void 0){const e=t.meta.nodes;for(const n in t.inputNodes)if(Array.isArray(t.inputNodes[n])){const i=[];for(const s of t.inputNodes[n])i.push(e[s]);this[n]=i}else if(typeof t.inputNodes[n]=="object"){const i={};for(const s in t.inputNodes[n]){const o=t.inputNodes[n][s];i[s]=e[o]}this[n]=i}else{const i=t.inputNodes[n];this[n]=e[i]}}}toJSON(t){const{uuid:e,type:n}=this,i=t===void 0||typeof t=="string";i&&(t={textures:{},images:{},nodes:{}});let s=t.nodes[e];s===void 0&&(s={uuid:e,type:n,meta:t,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},i!==!0&&(t.nodes[s.uuid]=s),this.serialize(s),delete s.meta);function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}if(i){const a=o(t.textures),l=o(t.images),c=o(t.nodes);a.length>0&&(s.textures=a),l.length>0&&(s.images=l),c.length>0&&(s.nodes=c)}return s}}class Qc extends ce{static get type(){return"ArrayElementNode"}constructor(t,e){super(),this.node=t,this.indexNode=e,this.isArrayElementNode=!0}getNodeType(t){return this.node.getElementType(t)}generate(t){const e=this.node.build(t),n=this.indexNode.build(t,"uint");return`${e}[ ${n} ]`}}class Rb extends ce{static get type(){return"ConvertNode"}constructor(t,e){super(),this.node=t,this.convertTo=e}getNodeType(t){const e=this.node.getNodeType(t);let n=null;for(const i of this.convertTo.split("|"))(n===null||t.getTypeLength(e)===t.getTypeLength(i))&&(n=i);return n}serialize(t){super.serialize(t),t.convertTo=this.convertTo}deserialize(t){super.deserialize(t),this.convertTo=t.convertTo}generate(t,e){const n=this.node,i=this.getNodeType(t),s=n.build(t,i);return t.format(s,i,e)}}class li extends ce{static get type(){return"TempNode"}constructor(t){super(t),this.isTempNode=!0}hasDependencies(t){return t.getDataFromNode(this).usageCount>1}build(t,e){if(t.getBuildStage()==="generate"){const i=t.getVectorType(this.getNodeType(t,e)),s=t.getDataFromNode(this);if(s.propertyName!==void 0)return t.format(s.propertyName,i,e);if(i!=="void"&&e!=="void"&&this.hasDependencies(t)){const o=super.build(t,i),a=t.getVarFromNode(this,null,i),l=t.getPropertyName(a);return t.addLineFlowCode(`${l} = ${o}`,this),s.snippet=o,s.propertyName=l,t.format(s.propertyName,i,e)}}return super.build(t,e)}}class Jz extends li{static get type(){return"JoinNode"}constructor(t=[],e=null){super(e),this.nodes=t}getNodeType(t){return this.nodeType!==null?t.getVectorType(this.nodeType):t.getTypeFromLength(this.nodes.reduce((e,n)=>e+t.getTypeLength(n.getNodeType(t)),0))}generate(t,e){const n=this.getNodeType(t),i=this.nodes,s=t.getComponentType(n),o=[];for(const l of i){let c=l.build(t);const h=t.getComponentType(l.getNodeType(t));h!==s&&(c=t.format(c,h,s)),o.push(c)}const a=`${t.getType(n)}( ${o.join(", ")} )`;return t.format(a,n,e)}}const tG=Zc.join("");class FM extends ce{static get type(){return"SplitNode"}constructor(t,e="x"){super(),this.node=t,this.components=e,this.isSplitNode=!0}getVectorLength(){let t=this.components.length;for(const e of this.components)t=Math.max(Zc.indexOf(e)+1,t);return t}getComponentType(t){return t.getComponentType(this.node.getNodeType(t))}getNodeType(t){return t.getTypeFromLength(this.components.length,this.getComponentType(t))}generate(t,e){const n=this.node,i=t.getTypeLength(n.getNodeType(t));let s=null;if(i>1){let o=null;this.getVectorLength()>=i&&(o=t.getTypeFromLength(this.getVectorLength(),this.getComponentType(t)));const l=n.build(t,o);this.components.length===i&&this.components===tG.slice(0,this.components.length)?s=t.format(l,o,e):s=t.format(`${l}.${this.components}`,this.getNodeType(t),e)}else s=n.build(t,e);return s}serialize(t){super.serialize(t),t.components=this.components}deserialize(t){super.deserialize(t),this.components=t.components}}class eG extends li{static get type(){return"SetNode"}constructor(t,e,n){super(),this.sourceNode=t,this.components=e,this.targetNode=n}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{sourceNode:e,components:n,targetNode:i}=this,s=this.getNodeType(t),o=t.getTypeFromLength(n.length,i.getNodeType(t)),a=i.build(t,o),l=e.build(t,s),c=t.getTypeLength(s),h=[];for(let u=0;u<c;u++){const d=Zc[u];d===n[0]?(h.push(a),u+=n.length-1):h.push(l+"."+d)}return`${t.getType(s)}( ${h.join(", ")} )`}}class nG extends li{static get type(){return"FlipNode"}constructor(t,e){super(),this.sourceNode=t,this.components=e}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{components:e,sourceNode:n}=this,i=this.getNodeType(t),s=n.build(t),o=t.getVarFromNode(this),a=t.getPropertyName(o);t.addLineFlowCode(a+" = "+s,this);const l=t.getTypeLength(i),c=[];let h=0;for(let u=0;u<l;u++){const d=Zc[u];d===e[h]?(c.push("1.0 - "+(a+"."+d)),h++):c.push(a+"."+d)}return`${t.getType(i)}( ${c.join(", ")} )`}}class Yx extends ce{static get type(){return"InputNode"}constructor(t,e=null){super(e),this.isInputNode=!0,this.value=t,this.precision=null}getNodeType(){return this.nodeType===null?Ar(this.value):this.nodeType}getInputType(t){return this.getNodeType(t)}setPrecision(t){return this.precision=t,this}serialize(t){super.serialize(t),t.value=this.value,this.value&&this.value.toArray&&(t.value=this.value.toArray()),t.valueType=Ar(this.value),t.nodeType=this.nodeType,t.valueType==="ArrayBuffer"&&(t.value=Kz(t.value)),t.precision=this.precision}deserialize(t){super.deserialize(t),this.nodeType=t.nodeType,this.value=Array.isArray(t.value)?Nb(t.valueType,...t.value):t.value,this.precision=t.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(t.value))}generate(){console.warn("Abstract function.")}}class er extends Yx{static get type(){return"ConstNode"}constructor(t,e=null){super(t,e),this.isConstNode=!0}generateConst(t){return t.generateConst(this.getNodeType(t),this.value)}generate(t,e){const n=this.getNodeType(t);return t.format(this.generateConst(t),n,e)}}let Cb=null;const Ua=new Map;function K(r,t){if(Ua.has(r)){console.warn(`Redefinition of method chaining ${r}`);return}if(typeof t!="function")throw new Error(`Node element ${r} is not a function`);Ua.set(r,t)}const Pb=r=>r.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),IM=r=>Pb(r).split("").sort().join(""),Fb={setup(r,t){const e=t.shift();return r(qd(e),...t)},get(r,t,e){if(typeof t=="string"&&r[t]===void 0){if(r.isStackNode!==!0&&t==="assign")return(...n)=>(Cb.assign(e,...n),e);if(Ua.has(t)){const n=Ua.get(t);return r.isStackNode?(...i)=>e.add(n(...i)):(...i)=>n(e,...i)}else{if(t==="self")return r;if(t.endsWith("Assign")&&Ua.has(t.slice(0,t.length-6))){const n=Ua.get(t.slice(0,t.length-6));return r.isStackNode?(...i)=>e.assign(i[0],n(...i)):(...i)=>e.assign(n(e,...i))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0)return t=Pb(t),xt(new FM(e,t));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=IM(t.slice(3).toLowerCase()),n=>xt(new eG(r,t,n));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=IM(t.slice(4).toLowerCase()),()=>xt(new nG(xt(r),t));if(t==="width"||t==="height"||t==="depth")return t==="width"?t="x":t==="height"?t="y":t==="depth"&&(t="z"),xt(new FM(r,t));if(/^\d+$/.test(t)===!0)return xt(new Qc(e,new er(Number(t),"uint")))}}}return Reflect.get(r,t,e)},set(r,t,e,n){return typeof t=="string"&&r[t]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0||t==="width"||t==="height"||t==="depth"||/^\d+$/.test(t)===!0)?(n[t].assign(e),!0):Reflect.set(r,t,e,n)}},Yp=new WeakMap,LM=new WeakMap,iG=function(r,t=null){const e=Ar(r);if(e==="node"){let n=Yp.get(r);return n===void 0&&(n=new Proxy(r,Fb),Yp.set(r,n),Yp.set(n,n)),n}else{if(t===null&&(e==="float"||e==="boolean")||e&&e!=="shader"&&e!=="string")return xt(Dg(r,t));if(e==="shader")return cn(r)}return r},sG=function(r,t=null){for(const e in r)r[e]=xt(r[e],t);return r},rG=function(r,t=null){const e=r.length;for(let n=0;n<e;n++)r[n]=xt(r[n],t);return r},oG=function(r,t=null,e=null,n=null){const i=s=>xt(n!==null?Object.assign(s,n):s);return t===null?(...s)=>i(new r(...Ka(s))):e!==null?(e=xt(e),(...s)=>i(new r(t,...Ka(s),e))):(...s)=>i(new r(t,...Ka(s)))},aG=function(r,...t){return xt(new r(...Ka(t)))};class lG extends ce{constructor(t,e){super(),this.shaderNode=t,this.inputNodes=e}getNodeType(t){return this.shaderNode.nodeType||this.getOutputNode(t).getNodeType(t)}call(t){const{shaderNode:e,inputNodes:n}=this,i=t.getNodeProperties(e);if(i.onceOutput)return i.onceOutput;let s=null;if(e.layout){let o=LM.get(t.constructor);o===void 0&&(o=new WeakMap,LM.set(t.constructor,o));let a=o.get(e);a===void 0&&(a=xt(t.buildFunctionNode(e)),o.set(e,a)),t.currentFunctionNode!==null&&t.currentFunctionNode.includes.push(a),s=xt(a.call(n))}else{const o=e.jsFunc,a=n!==null?o(n,t):o(t);s=xt(a)}return e.once&&(i.onceOutput=s),s}getOutputNode(t){const e=t.getNodeProperties(this);return e.outputNode===null&&(e.outputNode=this.setupOutput(t)),e.outputNode}setup(t){return this.getOutputNode(t)}setupOutput(t){return t.addStack(),t.stack.outputNode=this.call(t),t.removeStack()}generate(t,e){return this.getOutputNode(t).build(t,e)}}class cG extends ce{constructor(t,e){super(e),this.jsFunc=t,this.layout=null,this.global=!0,this.once=!1}setLayout(t){return this.layout=t,this}call(t=null){return qd(t),xt(new lG(this,t))}setup(){return this.call()}}const hG=[!1,!0],uG=[0,1,2,3],dG=[-1,-2],Ib=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],jx=new Map;for(const r of hG)jx.set(r,new er(r));const Kx=new Map;for(const r of uG)Kx.set(r,new er(r,"uint"));const Zx=new Map([...Kx].map(r=>new er(r.value,"int")));for(const r of dG)Zx.set(r,new er(r,"int"));const $d=new Map([...Zx].map(r=>new er(r.value)));for(const r of Ib)$d.set(r,new er(r));for(const r of Ib)$d.set(-r,new er(-r));const Wd={bool:jx,uint:Kx,ints:Zx,float:$d},DM=new Map([...jx,...$d]),Dg=(r,t)=>DM.has(r)?DM.get(r):r.isNode===!0?r:new er(r,t),fG=r=>{try{return r.getNodeType()}catch{return}},dn=function(r,t=null){return(...e)=>{if((e.length===0||!["bool","float","int","uint"].includes(r)&&e.every(i=>typeof i!="object"))&&(e=[Nb(r,...e)]),e.length===1&&t!==null&&t.has(e[0]))return xt(t.get(e[0]));if(e.length===1){const i=Dg(e[0],r);return fG(i)===r?xt(i):xt(new Rb(i,r))}const n=e.map(i=>Dg(i));return xt(new Jz(n,r))}},pG=r=>r!=null?r.nodeType||r.convertTo||(typeof r=="string"?r:null):null;function mG(r,t){return new Proxy(new cG(r,t),Fb)}const xt=(r,t=null)=>iG(r,t),qd=(r,t=null)=>new sG(r,t),Ka=(r,t=null)=>new rG(r,t),at=(...r)=>new oG(...r),Bt=(...r)=>new aG(...r),cn=(r,t)=>{const e=new mG(r,t),n=(...i)=>{let s;return qd(i),i[0]&&i[0].isNode?s=[...i]:s=i[0],e.call(s)};return n.shaderNode=e,n.setLayout=i=>(e.setLayout(i),n),n.once=()=>(e.once=!0,n),n};K("toGlobal",r=>(r.global=!0,r));const Qx=(...r)=>Cb.If(...r);function gG(r){return r}K("append",gG);const Ug=new dn("color"),ae=new dn("float",Wd.float),ul=new dn("int",Wd.ints),xG=new dn("uint",Wd.uint),yG=new dn("bool",Wd.bool),Zt=new dn("vec2"),_G=new dn("ivec2"),MG=new dn("uvec2"),SG=new dn("bvec2"),ge=new dn("vec3"),TG=new dn("ivec3"),vG=new dn("uvec3"),bG=new dn("bvec3"),Ao=new dn("vec4"),EG=new dn("ivec4"),AG=new dn("uvec4"),wG=new dn("bvec4"),Lb=new dn("mat2"),Xd=new dn("mat3"),NG=new dn("mat4");K("toColor",Ug);K("toFloat",ae);K("toInt",ul);K("toUint",xG);K("toBool",yG);K("toVec2",Zt);K("toIVec2",_G);K("toUVec2",MG);K("toBVec2",SG);K("toVec3",ge);K("toIVec3",TG);K("toUVec3",vG);K("toBVec3",bG);K("toVec4",Ao);K("toIVec4",EG);K("toUVec4",AG);K("toBVec4",wG);K("toMat2",Lb);K("toMat3",Xd);K("toMat4",NG);const RG=at(Qc),CG=(r,t)=>xt(new Rb(xt(r),t));K("element",RG);K("convert",CG);class Db extends ce{static get type(){return"UniformGroupNode"}constructor(t,e=!1,n=1){super("string"),this.name=t,this.version=0,this.shared=e,this.order=n,this.isUniformGroup=!0}set needsUpdate(t){t===!0&&this.version++}serialize(t){super.serialize(t),t.name=this.name,t.version=this.version,t.shared=this.shared}deserialize(t){super.deserialize(t),this.name=t.name,this.version=t.version,this.shared=t.shared}}const PG=r=>new Db(r),FG=(r,t=0)=>new Db(r,!0,t),wo=FG("render"),IG=PG("object");class vl extends Yx{static get type(){return"UniformNode"}constructor(t,e=null){super(t,e),this.isUniformNode=!0,this.name="",this.groupNode=IG}label(t){return this.name=t,this}setGroup(t){return this.groupNode=t,this}getGroup(){return this.groupNode}getUniformHash(t){return this.getHash(t)}onUpdate(t,e){const n=this.getSelf();return t=t.bind(n),super.onUpdate(i=>{const s=t(i,n);s!==void 0&&(this.value=s)},e)}generate(t,e){const n=this.getNodeType(t),i=this.getUniformHash(t);let s=t.getNodeFromHash(i);s===void 0&&(t.setHashNode(this,i),s=this);const o=s.getInputType(t),a=t.getUniformFromNode(s,o,t.shaderStage,this.name||t.context.label),l=t.getPropertyName(a);return t.context.label!==void 0&&delete t.context.label,t.format(l,n,e)}}const Gn=(r,t)=>{const e=pG(t||r),n=r&&r.isNode===!0?r.node&&r.node.value||r.value:r;return xt(new vl(n,e))};class Ub extends ce{static get type(){return"PropertyNode"}constructor(t,e=null,n=!1){super(t),this.name=e,this.varying=n,this.isPropertyNode=!0}getHash(t){return this.name||super.getHash(t)}isGlobal(){return!0}generate(t){let e;return this.varying===!0?(e=t.getVaryingFromNode(this,this.name),e.needsInterpolation=!0):e=t.getVarFromNode(this,this.name),t.getPropertyName(e)}}const Aa=(r,t)=>xt(new Ub(r,t)),UM=Bt(Ub,"vec4","DiffuseColor");class LG extends li{static get type(){return"AssignNode"}constructor(t,e){super(),this.targetNode=t,this.sourceNode=e}hasDependencies(){return!1}getNodeType(t,e){return e!=="void"?this.targetNode.getNodeType(t):"void"}needsSplitAssign(t){const{targetNode:e}=this;if(t.isAvailable("swizzleAssign")===!1&&e.isSplitNode&&e.components.length>1){const n=t.getTypeLength(e.node.getNodeType(t));return Zc.join("").slice(0,n)!==e.components}return!1}generate(t,e){const{targetNode:n,sourceNode:i}=this,s=this.needsSplitAssign(t),o=n.getNodeType(t),a=n.context({assign:!0}).build(t),l=i.build(t,o),c=i.getNodeType(t),h=t.getDataFromNode(this);let u;if(h.initialized===!0)e!=="void"&&(u=a);else if(s){const d=t.getVarFromNode(this,null,o),f=t.getPropertyName(d);t.addLineFlowCode(`${f} = ${l}`,this);const p=n.node.context({assign:!0}).build(t);for(let x=0;x<n.components.length;x++){const m=n.components[x];t.addLineFlowCode(`${p}.${m} = ${f}[ ${x} ]`,this)}e!=="void"&&(u=a)}else u=`${a} = ${l}`,(e==="void"||c==="void")&&(t.addLineFlowCode(u,this),e!=="void"&&(u=a));return h.initialized=!0,t.format(u,o,e)}}const DG=at(LG);K("assign",DG);class UG extends li{static get type(){return"FunctionCallNode"}constructor(t=null,e={}){super(),this.functionNode=t,this.parameters=e}setParameters(t){return this.parameters=t,this}getParameters(){return this.parameters}getNodeType(t){return this.functionNode.getNodeType(t)}generate(t){const e=[],n=this.functionNode,i=n.getInputs(t),s=this.parameters;if(Array.isArray(s))for(let a=0;a<s.length;a++){const l=i[a],c=s[a];e.push(c.build(t,l.type))}else for(const a of i){const l=s[a.name];if(l!==void 0)e.push(l.build(t,a.type));else throw new Error(`FunctionCallNode: Input '${a.name}' not found in FunctionNode.`)}return`${n.build(t,"property")}( ${e.join(", ")} )`}}const BG=(r,...t)=>(t=t.length>1||t[0]&&t[0].isNode===!0?Ka(t):qd(t[0]),xt(new UG(xt(r),t)));K("call",BG);class Ge extends li{static get type(){return"OperatorNode"}constructor(t,e,n,...i){if(super(),i.length>0){let s=new Ge(t,e,n);for(let o=0;o<i.length-1;o++)s=new Ge(t,s,i[o]);e=s,n=i[i.length-1]}this.op=t,this.aNode=e,this.bNode=n}getNodeType(t,e){const n=this.op,i=this.aNode,s=this.bNode,o=i.getNodeType(t),a=typeof s<"u"?s.getNodeType(t):null;if(o==="void"||a==="void")return"void";if(n==="%")return o;if(n==="~"||n==="&"||n==="|"||n==="^"||n===">>"||n==="<<")return t.getIntegerType(o);if(n==="!"||n==="=="||n==="&&"||n==="||"||n==="^^")return"bool";if(n==="<"||n===">"||n==="<="||n===">="){const l=e?t.getTypeLength(e):Math.max(t.getTypeLength(o),t.getTypeLength(a));return l>1?`bvec${l}`:"bool"}else return o==="float"&&t.isMatrix(a)?a:t.isMatrix(o)&&t.isVector(a)?t.getVectorFromMatrix(o):t.isVector(o)&&t.isMatrix(a)?t.getVectorFromMatrix(a):t.getTypeLength(a)>t.getTypeLength(o)?a:o}generate(t,e){const n=this.op,i=this.aNode,s=this.bNode,o=this.getNodeType(t,e);let a=null,l=null;o!=="void"?(a=i.getNodeType(t),l=typeof s<"u"?s.getNodeType(t):null,n==="<"||n===">"||n==="<="||n===">="||n==="=="?t.isVector(a)?l=a:a!==l&&(a=l="float"):n===">>"||n==="<<"?(a=o,l=t.changeComponentType(l,"uint")):t.isMatrix(a)&&t.isVector(l)?l=t.getVectorFromMatrix(a):t.isVector(a)&&t.isMatrix(l)?a=t.getVectorFromMatrix(l):a=l=o):a=l=o;const c=i.build(t,a),h=typeof s<"u"?s.build(t,l):null,u=t.getTypeLength(e),d=t.getFunctionOperator(n);if(e!=="void")return n==="<"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} < ${h} )`,o,e):n==="<="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} <= ${h} )`,o,e):n===">"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} > ${h} )`,o,e):n===">="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} >= ${h} )`,o,e):n==="!"||n==="~"?t.format(`(${n}${c})`,a,e):d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`( ${c} ${n} ${h} )`,o,e);if(a!=="void")return d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`${c} ${n} ${h}`,o,e)}serialize(t){super.serialize(t),t.op=this.op}deserialize(t){super.deserialize(t),this.op=t.op}}const No=at(Ge,"+"),gd=at(Ge,"-"),Yd=at(Ge,"*"),Bb=at(Ge,"/"),Ob=at(Ge,"%"),OG=at(Ge,"=="),zG=at(Ge,"!="),GG=at(Ge,"<"),kG=at(Ge,">"),VG=at(Ge,"<="),HG=at(Ge,">="),$G=at(Ge,"&&"),WG=at(Ge,"||"),qG=at(Ge,"!"),XG=at(Ge,"^^"),YG=at(Ge,"&"),jG=at(Ge,"~"),KG=at(Ge,"|"),ZG=at(Ge,"^"),QG=at(Ge,"<<"),JG=at(Ge,">>");K("add",No);K("sub",gd);K("mul",Yd);K("div",Bb);K("modInt",Ob);K("equal",OG);K("notEqual",zG);K("lessThan",GG);K("greaterThan",kG);K("lessThanEqual",VG);K("greaterThanEqual",HG);K("and",$G);K("or",WG);K("not",qG);K("xor",XG);K("bitAnd",YG);K("bitNot",jG);K("bitOr",KG);K("bitXor",ZG);K("shiftLeft",QG);K("shiftRight",JG);const t4=(...r)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),Ob(...r));K("remainder",t4);class I extends li{static get type(){return"MathNode"}constructor(t,e,n=null,i=null){super(),this.method=t,this.aNode=e,this.bNode=n,this.cNode=i}getInputType(t){const e=this.aNode.getNodeType(t),n=this.bNode?this.bNode.getNodeType(t):null,i=this.cNode?this.cNode.getNodeType(t):null,s=t.isMatrix(e)?0:t.getTypeLength(e),o=t.isMatrix(n)?0:t.getTypeLength(n),a=t.isMatrix(i)?0:t.getTypeLength(i);return s>o&&s>a?e:o>a?n:a>s?i:e}getNodeType(t){const e=this.method;return e===I.LENGTH||e===I.DISTANCE||e===I.DOT?"float":e===I.CROSS?"vec3":e===I.ALL?"bool":e===I.EQUALS?t.changeComponentType(this.aNode.getNodeType(t),"bool"):e===I.MOD?this.aNode.getNodeType(t):this.getInputType(t)}generate(t,e){const n=this.method,i=this.getNodeType(t),s=this.getInputType(t),o=this.aNode,a=this.bNode,l=this.cNode,c=t.renderer.isWebGLRenderer===!0;if(n===I.TRANSFORM_DIRECTION){let h=o,u=a;t.isMatrix(h.getNodeType(t))?u=Ao(ge(u),0):h=Ao(ge(h),0);const d=Yd(h,u).xyz;return zb(d).build(t,e)}else{if(n===I.NEGATE)return t.format("( - "+o.build(t,s)+" )",i,e);if(n===I.ONE_MINUS)return gd(1,o).build(t,e);if(n===I.RECIPROCAL)return Bb(1,o).build(t,e);if(n===I.DIFFERENCE)return n0(gd(o,a)).build(t,e);{const h=[];return n===I.CROSS||n===I.MOD?h.push(o.build(t,i),a.build(t,i)):c&&n===I.STEP?h.push(o.build(t,t.getTypeLength(o.getNodeType(t))===1?"float":s),a.build(t,s)):c&&(n===I.MIN||n===I.MAX)||n===I.MOD?h.push(o.build(t,s),a.build(t,t.getTypeLength(a.getNodeType(t))===1?"float":s)):n===I.REFRACT?h.push(o.build(t,s),a.build(t,s),l.build(t,"float")):n===I.MIX?h.push(o.build(t,s),a.build(t,s),l.build(t,t.getTypeLength(l.getNodeType(t))===1?"float":s)):(h.push(o.build(t,s)),a!==null&&h.push(a.build(t,s)),l!==null&&h.push(l.build(t,s))),t.format(`${t.getMethod(n,i)}( ${h.join(", ")} )`,i,e)}}}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}}I.ALL="all";I.ANY="any";I.EQUALS="equals";I.RADIANS="radians";I.DEGREES="degrees";I.EXP="exp";I.EXP2="exp2";I.LOG="log";I.LOG2="log2";I.SQRT="sqrt";I.INVERSE_SQRT="inversesqrt";I.FLOOR="floor";I.CEIL="ceil";I.NORMALIZE="normalize";I.FRACT="fract";I.SIN="sin";I.COS="cos";I.TAN="tan";I.ASIN="asin";I.ACOS="acos";I.ATAN="atan";I.ABS="abs";I.SIGN="sign";I.LENGTH="length";I.NEGATE="negate";I.ONE_MINUS="oneMinus";I.DFDX="dFdx";I.DFDY="dFdy";I.ROUND="round";I.RECIPROCAL="reciprocal";I.TRUNC="trunc";I.FWIDTH="fwidth";I.BITCAST="bitcast";I.TRANSPOSE="transpose";I.ATAN2="atan2";I.MIN="min";I.MAX="max";I.MOD="mod";I.STEP="step";I.REFLECT="reflect";I.DISTANCE="distance";I.DIFFERENCE="difference";I.DOT="dot";I.CROSS="cross";I.POW="pow";I.TRANSFORM_DIRECTION="transformDirection";I.MIX="mix";I.CLAMP="clamp";I.REFRACT="refract";I.SMOOTHSTEP="smoothstep";I.FACEFORWARD="faceforward";const e4=ae(Math.PI),n4=ae(Math.PI*2),i4=at(I,I.ALL),s4=at(I,I.ANY),r4=at(I,I.EQUALS),o4=at(I,I.RADIANS),a4=at(I,I.DEGREES),l4=at(I,I.EXP),c4=at(I,I.EXP2),h4=at(I,I.LOG),u4=at(I,I.LOG2),Jx=at(I,I.SQRT),d4=at(I,I.INVERSE_SQRT),f4=at(I,I.FLOOR),p4=at(I,I.CEIL),zb=at(I,I.NORMALIZE),t0=at(I,I.FRACT),e0=at(I,I.SIN),Gb=at(I,I.COS),m4=at(I,I.TAN),g4=at(I,I.ASIN),x4=at(I,I.ACOS),y4=at(I,I.ATAN),n0=at(I,I.ABS),kb=at(I,I.SIGN),_4=at(I,I.LENGTH),M4=at(I,I.NEGATE),S4=at(I,I.ONE_MINUS),T4=at(I,I.DFDX),v4=at(I,I.DFDY),b4=at(I,I.ROUND),E4=at(I,I.RECIPROCAL),A4=at(I,I.TRUNC),w4=at(I,I.FWIDTH);I.BITCAST;const N4=at(I,I.TRANSPOSE),R4=at(I,I.ATAN2),C4=at(I,I.MIN),Bg=at(I,I.MAX),Vb=at(I,I.MOD),Hb=at(I,I.STEP),P4=at(I,I.REFLECT),F4=at(I,I.DISTANCE),I4=at(I,I.DIFFERENCE),i0=at(I,I.DOT),L4=at(I,I.CROSS),$b=at(I,I.POW),D4=at(I,I.POW,2),U4=at(I,I.POW,3),B4=at(I,I.POW,4),O4=at(I,I.TRANSFORM_DIRECTION),z4=r=>Yd(kb(r),$b(n0(r),1/3)),G4=r=>i0(r,r),Ls=at(I,I.MIX),xd=(r,t=0,e=1)=>xt(new I(I.CLAMP,xt(r),xt(t),xt(e))),k4=r=>xd(r),V4=at(I,I.REFRACT),Og=at(I,I.SMOOTHSTEP),H4=at(I,I.FACEFORWARD),$4=cn(([r])=>{const n=43758.5453,i=i0(r.xy,Zt(12.9898,78.233)),s=Vb(i,e4);return t0(e0(s).mul(n))}),W4=(r,t,e)=>Ls(t,e,r),q4=(r,t,e)=>Og(t,e,r);K("all",i4);K("any",s4);K("equals",r4);K("radians",o4);K("degrees",a4);K("exp",l4);K("exp2",c4);K("log",h4);K("log2",u4);K("sqrt",Jx);K("inverseSqrt",d4);K("floor",f4);K("ceil",p4);K("normalize",zb);K("fract",t0);K("sin",e0);K("cos",Gb);K("tan",m4);K("asin",g4);K("acos",x4);K("atan",y4);K("abs",n0);K("sign",kb);K("length",_4);K("lengthSq",G4);K("negate",M4);K("oneMinus",S4);K("dFdx",T4);K("dFdy",v4);K("round",b4);K("reciprocal",E4);K("trunc",A4);K("fwidth",w4);K("atan2",R4);K("min",C4);K("max",Bg);K("mod",Vb);K("step",Hb);K("reflect",P4);K("distance",F4);K("dot",i0);K("cross",L4);K("pow",$b);K("pow2",D4);K("pow3",U4);K("pow4",B4);K("transformDirection",O4);K("mix",W4);K("clamp",xd);K("refract",V4);K("smoothstep",q4);K("faceForward",H4);K("difference",I4);K("saturate",k4);K("cbrt",z4);K("transpose",N4);K("rand",$4);class X4 extends ce{static get type(){return"ConditionalNode"}constructor(t,e,n=null){super(),this.condNode=t,this.ifNode=e,this.elseNode=n}getNodeType(t){const e=this.ifNode.getNodeType(t);if(this.elseNode!==null){const n=this.elseNode.getNodeType(t);if(t.getTypeLength(n)>t.getTypeLength(e))return n}return e}setup(t){const e=this.condNode.cache(),n=this.ifNode.cache(),i=this.elseNode?this.elseNode.cache():null,s=t.context.nodeBlock;t.getDataFromNode(n).parentNodeBlock=s,i!==null&&(t.getDataFromNode(i).parentNodeBlock=s);const o=t.getNodeProperties(this);o.condNode=e,o.ifNode=n.context({nodeBlock:n}),o.elseNode=i?i.context({nodeBlock:i}):null}generate(t,e){const n=this.getNodeType(t),i=t.getDataFromNode(this);if(i.nodeProperty!==void 0)return i.nodeProperty;const{condNode:s,ifNode:o,elseNode:a}=t.getNodeProperties(this),l=e!=="void",c=l?Aa(n).build(t):"";i.nodeProperty=c;const h=s.build(t,"bool");t.addFlowCode(`
${t.tab}if ( ${h} ) {

`).addFlowTab();let u=o.build(t,n);if(u&&(l?u=c+" = "+u+";":u="return "+u+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+u+`

`+t.tab+"}"),a!==null){t.addFlowCode(` else {

`).addFlowTab();let d=a.build(t,n);d&&(l?d=c+" = "+d+";":d="return "+d+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+d+`

`+t.tab+`}

`)}else t.addFlowCode(`

`);return t.format(c,n,e)}}const s0=at(X4);K("select",s0);const Y4=(...r)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),s0(...r));K("cond",Y4);class j4 extends ce{static get type(){return"ContextNode"}constructor(t,e={}){super(),this.isContextNode=!0,this.node=t,this.value=e}getScope(){return this.node.getScope()}getNodeType(t){return this.node.getNodeType(t)}analyze(t){this.node.build(t)}setup(t){const e=t.getContext();t.setContext({...t.context,...this.value});const n=this.node.build(t);return t.setContext(e),n}generate(t,e){const n=t.getContext();t.setContext({...t.context,...this.value});const i=this.node.build(t,e);return t.setContext(n),i}}const Wb=at(j4),K4=(r,t)=>Wb(r,{label:t});K("context",Wb);K("label",K4);class Z4 extends ce{static get type(){return"VarNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.global=!0,this.isVarNode=!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}generate(t){const{node:e,name:n}=this,i=t.getVarFromNode(this,n,t.getVectorType(this.getNodeType(t))),s=t.getPropertyName(i),o=e.build(t,i.type);return t.addLineFlowCode(`${s} = ${o}`,this),s}}const qb=at(Z4);K("temp",qb);K("toVar",(...r)=>qb(...r).append());class Q4 extends ce{static get type(){return"VaryingNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.isVaryingNode=!0}isGlobal(){return!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}setupVarying(t){const e=t.getNodeProperties(this);let n=e.varying;if(n===void 0){const i=this.name,s=this.getNodeType(t);e.varying=n=t.getVaryingFromNode(this,i,s),e.node=this.node}return n.needsInterpolation||(n.needsInterpolation=t.shaderStage==="fragment"),n}setup(t){this.setupVarying(t)}analyze(t){return this.setupVarying(t),this.node.analyze(t)}generate(t){const e=t.getNodeProperties(this),n=this.setupVarying(t);if(e.propertyName===void 0){const i=this.getNodeType(t),s=t.getPropertyName(n,PM.VERTEX);t.flowNodeFromShaderStage(PM.VERTEX,this.node,i,s),e.propertyName=s}return t.getPropertyName(n)}}const bl=at(Q4);K("varying",bl);const Jc="WorkingColorSpace",r0="OutputColorSpace";function BM(r){let t=null;return r===kd?t="Linear":r===Is&&(t="sRGB"),t}function J4(r,t){return BM(r)+"To"+BM(t)}class jd extends li{static get type(){return"ColorSpaceNode"}constructor(t,e,n){super("vec4"),this.colorNode=t,this.source=e,this.target=n}getColorSpace(t,e){return e===Jc?Mi.workingColorSpace:e===r0?t.context.outputColorSpace||t.renderer.outputColorSpace:e}setup(t){const{renderer:e}=t,{colorNode:n}=this,i=this.getColorSpace(t,this.source),s=this.getColorSpace(t,this.target);if(i===s)return n;const o=J4(i,s);let a=null;const l=e.nodes.library.getColorSpaceFunction(o);return l!==null?a=Ao(l(n.rgb),n.a):(console.error("ColorSpaceNode: Unsupported Color Space configuration.",o),a=n),a}}const tk=r=>xt(new jd(xt(r),Jc,r0)),ek=r=>xt(new jd(xt(r),r0,Jc)),nk=(r,t)=>xt(new jd(xt(r),Jc,t)),Xb=(r,t)=>xt(new jd(xt(r),t,Jc));K("toOutputColorSpace",tk);K("toWorkingColorSpace",ek);K("workingToColorSpace",nk);K("colorSpaceToWorking",Xb);let ik=class extends Qc{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),n=this.referenceNode.getNodeType(),i=this.getNodeType();return t.format(e,n,i)}};class sk extends ce{static get type(){return"ReferenceBaseNode"}constructor(t,e,n=null,i=null){super(),this.property=t,this.uniformType=e,this.object=n,this.count=i,this.properties=t.split("."),this.reference=n,this.node=null,this.group=null,this.updateType=rn.OBJECT}setGroup(t){return this.group=t,this}element(t){return xt(new ik(this,xt(t)))}setNodeType(t){const e=Gn(null,t).getSelf();this.group!==null&&e.setGroup(this.group),this.node=e}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let n=t[e[0]];for(let i=1;i<e.length;i++)n=n[e[i]];return n}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}}class rk extends sk{static get type(){return"RendererReferenceNode"}constructor(t,e,n=null){super(t,e,n),this.renderer=n,this.setGroup(wo)}updateReference(t){return this.reference=this.renderer!==null?this.renderer:t.renderer,this.reference}}const ok=(r,t,e)=>xt(new rk(r,t,e));class ak extends li{static get type(){return"ToneMappingNode"}constructor(t,e=ck,n=null){super("vec3"),this.toneMapping=t,this.exposureNode=e,this.colorNode=n}getCacheKey(){return Yz(super.getCacheKey(),this.toneMapping)}setup(t){const e=this.colorNode||t.context.color,n=this.toneMapping;if(n===Cg)return e;let i=null;const s=t.renderer.nodes.library.getToneMappingFunction(n);return s!==null?i=Ao(s(e.rgb,this.exposureNode),e.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",n),i=e),i}}const lk=(r,t,e)=>xt(new ak(r,xt(t),xt(e))),ck=ok("toneMappingExposure","float");K("toneMapping",(r,t,e)=>lk(t,e,r));class hk extends Yx{static get type(){return"BufferAttributeNode"}constructor(t,e=null,n=0,i=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferStride=n,this.bufferOffset=i,this.usage=md,this.instanced=!1,this.attribute=null,this.global=!0,t&&t.isBufferAttribute===!0&&(this.attribute=t,this.usage=t.usage,this.instanced=t.isInstancedBufferAttribute)}getHash(t){if(this.bufferStride===0&&this.bufferOffset===0){let e=t.globalCache.getData(this.value);return e===void 0&&(e={node:this},t.globalCache.setData(this.value,e)),e.node.uuid}return this.uuid}getNodeType(t){return this.bufferType===null&&(this.bufferType=t.getTypeFromAttribute(this.attribute)),this.bufferType}setup(t){if(this.attribute!==null)return;const e=this.getNodeType(t),n=this.value,i=t.getTypeLength(e),s=this.bufferStride||i,o=this.bufferOffset,a=n.isInterleavedBuffer===!0?n:new Vz(n,s),l=new Xx(a,i,o);a.setUsage(this.usage),this.attribute=l,this.attribute.isInstancedBufferAttribute=this.instanced}generate(t){const e=this.getNodeType(t),n=t.getBufferAttributeFromNode(this,e),i=t.getPropertyName(n);let s=null;return t.shaderStage==="vertex"||t.shaderStage==="compute"?(this.name=i,s=i):s=bl(this).build(t,e),s}getInputType(){return"bufferAttribute"}setUsage(t){return this.usage=t,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=t),this}setInstanced(t){return this.instanced=t,this}}const Yb=(r,t,e,n)=>xt(new hk(r,t,e,n)),uk=(r,t,e,n)=>Yb(r,t,e,n).setInstanced(!0);K("toAttribute",r=>Yb(r.value));class dk extends ce{static get type(){return"ComputeNode"}constructor(t,e,n=[64]){super("void"),this.isComputeNode=!0,this.computeNode=t,this.count=e,this.workgroupSize=n,this.dispatchCount=0,this.version=1,this.updateBeforeType=rn.OBJECT,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}updateDispatchCount(){const{count:t,workgroupSize:e}=this;let n=e[0];for(let i=1;i<e.length;i++)n*=e[i];this.dispatchCount=Math.ceil(t/n)}onInit(){}updateBefore({renderer:t}){t.compute(this)}generate(t){const{shaderStage:e}=t;if(e==="compute"){const n=this.computeNode.build(t,"void");n!==""&&t.addLineFlowCode(n,this)}}}const fk=(r,t,e)=>xt(new dk(xt(r),t,e));K("compute",fk);class pk extends ce{static get type(){return"CacheNode"}constructor(t,e=!0){super(),this.node=t,this.parent=e,this.isCacheNode=!0}getNodeType(t){return this.node.getNodeType(t)}build(t,...e){const n=t.getCache(),i=t.getCacheFromNode(this,this.parent);t.setCache(i);const s=this.node.build(t,...e);return t.setCache(n),s}}const mk=(r,...t)=>xt(new pk(xt(r),...t));K("cache",mk);class gk extends ce{static get type(){return"BypassNode"}constructor(t,e){super(),this.isBypassNode=!0,this.outputNode=t,this.callNode=e}getNodeType(t){return this.outputNode.getNodeType(t)}generate(t){const e=this.callNode.build(t,"void");return e!==""&&t.addLineFlowCode(e,this),this.outputNode.build(t)}}const xk=at(gk);K("bypass",xk);class jb extends ce{static get type(){return"RemapNode"}constructor(t,e,n,i=ae(0),s=ae(1)){super(),this.node=t,this.inLowNode=e,this.inHighNode=n,this.outLowNode=i,this.outHighNode=s,this.doClamp=!0}setup(){const{node:t,inLowNode:e,inHighNode:n,outLowNode:i,outHighNode:s,doClamp:o}=this;let a=t.sub(e).div(n.sub(e));return o===!0&&(a=a.clamp()),a.mul(s.sub(i)).add(i)}}const yk=at(jb,null,null,{doClamp:!1}),_k=at(jb);K("remap",yk);K("remapClamp",_k);class Mk extends ce{static get type(){return"ExpressionNode"}constructor(t="",e="void"){super(e),this.snippet=t}generate(t,e){const n=this.getNodeType(t),i=this.snippet;if(n==="void")t.addLineFlowCode(i,this);else return t.format(`( ${i} )`,n,e)}}const yd=at(Mk),Sk=r=>(r?s0(r,yd("discard")):yd("discard")).append();K("discard",Sk);class Tk extends li{static get type(){return"RenderOutputNode"}constructor(t,e,n){super("vec4"),this.colorNode=t,this.toneMapping=e,this.outputColorSpace=n,this.isRenderOutput=!0}setup({context:t}){let e=this.colorNode||t.color;const n=(this.toneMapping!==null?this.toneMapping:t.toneMapping)||Cg,i=(this.outputColorSpace!==null?this.outputColorSpace:t.outputColorSpace)||pd;return n!==Cg&&(e=e.toneMapping(n)),i!==pd&&i!==Mi.workingColorSpace&&(e=e.workingToColorSpace(i)),e}}const vk=(r,t=null,e=null)=>xt(new Tk(xt(r),t,e));K("renderOutput",vk);class bk extends ce{static get type(){return"AttributeNode"}constructor(t,e=null){super(e),this.global=!0,this._attributeName=t}getHash(t){return this.getAttributeName(t)}getNodeType(t){let e=this.nodeType;if(e===null){const n=this.getAttributeName(t);if(t.hasGeometryAttribute(n)){const i=t.geometry.getAttribute(n);e=t.getTypeFromAttribute(i)}else e="float"}return e}setAttributeName(t){return this._attributeName=t,this}getAttributeName(){return this._attributeName}generate(t){const e=this.getAttributeName(t),n=this.getNodeType(t);if(t.hasGeometryAttribute(e)===!0){const s=t.geometry.getAttribute(e),o=t.getTypeFromAttribute(s),a=t.getAttribute(e,o);return t.shaderStage==="vertex"?t.format(a.name,o,n):bl(this).build(t,n)}else return console.warn(`AttributeNode: Vertex attribute "${e}" not found on geometry.`),t.generateConst(n)}serialize(t){super.serialize(t),t.global=this.global,t._attributeName=this._attributeName}deserialize(t){super.deserialize(t),this.global=t.global,this._attributeName=t._attributeName}}const th=(r,t)=>xt(new bk(r,t)),eh=r=>th("uv"+(r>0?r:""),"vec2");class Ek extends ce{static get type(){return"TextureSizeNode"}constructor(t,e=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=t,this.levelNode=e}generate(t,e){const n=this.textureNode.build(t,"property"),i=this.levelNode===null?"0":this.levelNode.build(t,"int");return t.format(`${t.getMethod("textureDimensions")}( ${n}, ${i} )`,this.getNodeType(t),e)}}const OM=at(Ek);class Ak extends vl{static get type(){return"MaxMipLevelNode"}constructor(t){super(0),this._textureNode=t,this.updateType=rn.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const t=this.texture,e=t.images,n=e&&e.length>0?e[0]&&e[0].image||e[0]:t.image;if(n&&n.width!==void 0){const{width:i,height:s}=n;this.value=Math.log2(Math.max(i,s))}}}const wk=at(Ak);class Kd extends vl{static get type(){return"TextureNode"}constructor(t,e=null,n=null,i=null){super(t),this.isTextureNode=!0,this.uvNode=e,this.levelNode=n,this.biasNode=i,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=rn.NONE,this.referenceNode=null,this._value=t,this._matrixUniform=null,this.setUpdateMatrix(e===null)}set value(t){this.referenceNode?this.referenceNode.value=t:this._value=t}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===yb?"uvec4":this.value.type===lz?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return eh(this.value.channel)}updateReference(){return this.value}getTransformedUV(t){return this._matrixUniform===null&&(this._matrixUniform=Gn(this.value.matrix)),this._matrixUniform.mul(ge(t,1)).xy}setUpdateMatrix(t){return this.updateMatrix=t,this.updateType=t?rn.FRAME:rn.NONE,this}setupUV(t,e){const n=this.value;return t.isFlipY()&&(n.isRenderTargetTexture===!0||n.isFramebufferTexture===!0||n.isDepthTexture===!0)&&(this.sampler?e=e.flipY():e=e.setY(ul(OM(this,this.levelNode).y).sub(e.y).sub(1))),e}setup(t){const e=t.getNodeProperties(this);e.referenceNode=this.referenceNode;let n=this.uvNode;(n===null||t.context.forceUVContext===!0)&&t.context.getUV&&(n=t.context.getUV(this)),n||(n=this.getDefaultUV()),this.updateMatrix===!0&&(n=this.getTransformedUV(n)),n=this.setupUV(t,n);let i=this.levelNode;i===null&&t.context.getTextureLevel&&(i=t.context.getTextureLevel(this)),e.uvNode=n,e.levelNode=i,e.biasNode=this.biasNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e.depthNode=this.depthNode}generateUV(t,e){return e.build(t,this.sampler===!0?"vec2":"ivec2")}generateSnippet(t,e,n,i,s,o,a,l){const c=this.value;let h;return i?h=t.generateTextureLevel(c,e,n,i,o):s?h=t.generateTextureBias(c,e,n,s,o):l?h=t.generateTextureGrad(c,e,n,l,o):a?h=t.generateTextureCompare(c,e,n,a,o):this.sampler===!1?h=t.generateTextureLoad(c,e,n,o):h=t.generateTexture(c,e,n,o),h}generate(t,e){const n=t.getNodeProperties(this),i=this.value;if(!i||i.isTexture!==!0)throw new Error("TextureNode: Need a three.js texture.");const s=super.generate(t,"property");if(e==="sampler")return s+"_sampler";if(t.isReference(e))return s;{const o=t.getDataFromNode(this);let a=o.propertyName;if(a===void 0){const{uvNode:h,levelNode:u,biasNode:d,compareNode:f,depthNode:p,gradNode:x}=n,m=this.generateUV(t,h),g=u?u.build(t,"float"):null,_=d?d.build(t,"float"):null,y=p?p.build(t,"int"):null,S=f?f.build(t,"float"):null,w=x?[x[0].build(t,"vec2"),x[1].build(t,"vec2")]:null,A=t.getVarFromNode(this);a=t.getPropertyName(A);const T=this.generateSnippet(t,s,m,g,_,y,S,w);t.addLineFlowCode(`${a} = ${T}`,this),o.snippet=T,o.propertyName=a}let l=a;const c=this.getNodeType(t);return t.needsToWorkingColorSpace(i)&&(l=Xb(yd(l,c),i.colorSpace).setup(t).build(t,c)),t.format(l,c,e)}}setSampler(t){return this.sampler=t,this}getSampler(){return this.sampler}uv(t){const e=this.clone();return e.uvNode=xt(t),e.referenceNode=this.getSelf(),xt(e)}blur(t){const e=this.clone();return e.biasNode=xt(t).mul(wk(e)),e.referenceNode=this.getSelf(),xt(e)}level(t){const e=this.clone();return e.levelNode=xt(t),e.referenceNode=this.getSelf(),xt(e)}size(t){return OM(this,t)}bias(t){const e=this.clone();return e.biasNode=xt(t),e.referenceNode=this.getSelf(),xt(e)}compare(t){const e=this.clone();return e.compareNode=xt(t),e.referenceNode=this.getSelf(),xt(e)}grad(t,e){const n=this.clone();return n.gradNode=[xt(t),xt(e)],n.referenceNode=this.getSelf(),xt(n)}depth(t){const e=this.clone();return e.depthNode=xt(t),e.referenceNode=this.getSelf(),xt(e)}serialize(t){super.serialize(t),t.value=this.value.toJSON(t.meta).uuid,t.sampler=this.sampler,t.updateMatrix=this.updateMatrix,t.updateType=this.updateType}deserialize(t){super.deserialize(t),this.value=t.meta.textures[t.value],this.sampler=t.sampler,this.updateMatrix=t.updateMatrix,this.updateType=t.updateType}update(){const t=this.value,e=this._matrixUniform;e!==null&&(e.value=t.matrix),t.matrixAutoUpdate===!0&&t.updateMatrix()}clone(){const t=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return t.sampler=this.sampler,t}}const nh=at(Kd),Zl=Gn("float").label("cameraNear").setGroup(wo).onRenderUpdate(({camera:r})=>r.near),Ql=Gn("float").label("cameraFar").setGroup(wo).onRenderUpdate(({camera:r})=>r.far),Zd=Gn("mat4").label("cameraViewMatrix").setGroup(wo).onRenderUpdate(({camera:r})=>r.matrixWorldInverse);class _e extends ce{static get type(){return"Object3DNode"}constructor(t,e=null){super(),this.scope=t,this.object3d=e,this.updateType=rn.OBJECT,this._uniformNode=new vl(null)}getNodeType(){const t=this.scope;if(t===_e.WORLD_MATRIX)return"mat4";if(t===_e.POSITION||t===_e.VIEW_POSITION||t===_e.DIRECTION||t===_e.SCALE)return"vec3"}update(t){const e=this.object3d,n=this._uniformNode,i=this.scope;if(i===_e.WORLD_MATRIX)n.value=e.matrixWorld;else if(i===_e.POSITION)n.value=n.value||new le,n.value.setFromMatrixPosition(e.matrixWorld);else if(i===_e.SCALE)n.value=n.value||new le,n.value.setFromMatrixScale(e.matrixWorld);else if(i===_e.DIRECTION)n.value=n.value||new le,e.getWorldDirection(n.value);else if(i===_e.VIEW_POSITION){const s=t.camera;n.value=n.value||new le,n.value.setFromMatrixPosition(e.matrixWorld),n.value.applyMatrix4(s.matrixWorldInverse)}}generate(t){const e=this.scope;return e===_e.WORLD_MATRIX?this._uniformNode.nodeType="mat4":(e===_e.POSITION||e===_e.VIEW_POSITION||e===_e.DIRECTION||e===_e.SCALE)&&(this._uniformNode.nodeType="vec3"),this._uniformNode.build(t)}serialize(t){super.serialize(t),t.scope=this.scope}deserialize(t){super.deserialize(t),this.scope=t.scope}}_e.WORLD_MATRIX="worldMatrix";_e.POSITION="position";_e.SCALE="scale";_e.VIEW_POSITION="viewPosition";_e.DIRECTION="direction";_e.DIRECTION;_e.WORLD_MATRIX;_e.POSITION;_e.SCALE;_e.VIEW_POSITION;class ms extends _e{static get type(){return"ModelNode"}constructor(t){super(t)}update(t){this.object3d=t.object,super.update(t)}}ms.DIRECTION;const Nk=Bt(ms,ms.WORLD_MATRIX);ms.POSITION;ms.SCALE;ms.VIEW_POSITION;const Rk=Gn(new xs).onObjectUpdate(({object:r},t)=>t.value.getNormalMatrix(r.matrixWorld)),Kb=Zd.mul(Nk).toVar("modelViewMatrix"),Ck=th("position","vec3"),Pk=Ck.varying("positionLocal"),Ri=Kb.mul(Pk).xyz.varying("v_positionView"),Zb=Ri.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");class Fk extends ce{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(t){const{renderer:e,material:n}=t;return e.coordinateSystem===hc&&n.side===sz?"false":t.getFrontFacing()}}const Ik=Bt(Fk),o0=ae(Ik).mul(2).sub(1),Lk=th("normal","vec3"),Dk=cn(r=>r.geometry.hasAttribute("normal")===!1?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),ge(0,1,0)):Lk,"vec3").once()().toVar("normalLocal"),Uk=Ri.dFdx().cross(Ri.dFdy()).normalize().toVar("normalFlat"),dl=cn(r=>{let t;return r.material.flatShading===!0?t=Uk:t=bl(Jb(Dk),"v_normalView").normalize(),t},"vec3").once()().toVar("normalView"),Qb=cn(r=>r.context.setupNormal(),"vec3").once()().mul(o0).toVar("transformedNormalView"),Jb=cn(([r],t)=>{const e=t.renderer.nodes.modelNormalViewMatrix;if(e!==null)return e.transformDirection(r);const n=Rk.mul(r);return Zd.transformDirection(n)}),Bk=Gn(0).onReference(({material:r})=>r).onRenderUpdate(({material:r})=>r.refractionRatio),Ok=Zb.negate().reflect(Qb),zk=Zb.negate().refract(Qb,Bk),Gk=Ok.transformDirection(Zd).toVar("reflectVector"),kk=zk.transformDirection(Zd).toVar("reflectVector");class Vk extends Kd{static get type(){return"CubeTextureNode"}constructor(t,e=null,n=null,i=null){super(t,e,n,i),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const t=this.value;return t.mapping===rz?Gk:t.mapping===oz?kk:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',t.mapping),ge(0,0,0))}setUpdateMatrix(){}setupUV(t,e){const n=this.value;return t.renderer.coordinateSystem===Fg||!n.isRenderTargetTexture?ge(e.x.negate(),e.yz):e}generateUV(t,e){return e.build(t,"vec3")}}const Hk=at(Vk);class t1 extends vl{static get type(){return"BufferNode"}constructor(t,e,n=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferCount=n}getElementType(t){return this.getNodeType(t)}getInputType(){return"buffer"}}const e1=(r,t,e)=>xt(new t1(r,t,e));class $k extends Qc{static get type(){return"UniformArrayElementNode"}constructor(t,e){super(t,e),this.isArrayBufferElementNode=!0}generate(t){const e=super.generate(t),n=this.getNodeType();return t.format(e,"vec4",n)}}class Wk extends t1{static get type(){return"UniformArrayNode"}constructor(t,e=null){super(null,"vec4"),this.array=t,this.elementType=e,this._elementType=null,this._elementLength=0,this.updateType=rn.RENDER,this.isArrayBufferNode=!0}getElementType(){return this.elementType||this._elementType}getElementLength(){return this._elementLength}update(){const{array:t,value:e}=this,n=this.getElementLength(),i=this.getElementType();if(n===1)for(let s=0;s<t.length;s++){const o=s*4;e[o]=t[s]}else if(i==="color")for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.r,e[o+1]=a.g,e[o+2]=a.b||0}else for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.x,e[o+1]=a.y,e[o+2]=a.z||0,e[o+3]=a.w||0}}setup(t){const e=this.array.length;this._elementType=this.elementType===null?Ar(this.array[0]):this.elementType,this._elementLength=t.getTypeLength(this._elementType);let n=Float32Array;return this._elementType.charAt(0)==="i"?n=Int32Array:this._elementType.charAt(0)==="u"&&(n=Uint32Array),this.value=new n(e*4),this.bufferCount=e,this.bufferType=t.changeComponentType("vec4",t.getComponentType(this._elementType)),super.setup(t)}element(t){return xt(new $k(this,xt(t)))}}const zg=(r,t)=>xt(new Wk(r,t));class qk extends Qc{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),n=this.referenceNode.getNodeType(),i=this.getNodeType();return t.format(e,n,i)}}class n1 extends ce{static get type(){return"ReferenceNode"}constructor(t,e,n=null,i=null){super(),this.property=t,this.uniformType=e,this.object=n,this.count=i,this.properties=t.split("."),this.reference=n,this.node=null,this.group=null,this.name=null,this.updateType=rn.OBJECT}element(t){return xt(new qk(this,xt(t)))}setGroup(t){return this.group=t,this}label(t){return this.name=t,this}setNodeType(t){let e=null;this.count!==null?e=e1(null,t,this.count):Array.isArray(this.getValueFromReference())?e=zg(null,t):t==="texture"?e=nh(null):t==="cubeTexture"?e=Hk(null):e=Gn(null,t),this.group!==null&&e.setGroup(this.group),this.name!==null&&e.label(this.name),this.node=e.getSelf()}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let n=t[e[0]];for(let i=1;i<e.length;i++)n=n[e[i]];return n}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}}const Ro=(r,t,e)=>xt(new n1(r,t,e));class Xk extends n1{static get type(){return"MaterialReferenceNode"}constructor(t,e,n=null){super(t,e,n),this.material=n,this.isMaterialReferenceNode=!0}updateReference(t){return this.reference=this.material!==null?this.material:t.material,this.reference}}const Yk=(r,t,e)=>xt(new Xk(r,t,e)),i1=cn(r=>(r.geometry.hasAttribute("tangent")===!1&&r.geometry.computeTangents(),th("tangent","vec4")))(),jk=i1.xyz.toVar("tangentLocal"),s1=Kb.mul(Ao(jk,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),Kk=r=>r.mul(i1.w).xyz,Zk=bl(Kk(dl.cross(s1)),"v_bitangentView").normalize().toVar("bitangentView"),Qk=Xd(s1,Zk,dl),Jk=cn(r=>{const{eye_pos:t,surf_norm:e,mapN:n,uv:i}=r,s=t.dFdx(),o=t.dFdy(),a=i.dFdx(),l=i.dFdy(),c=e,h=o.cross(c),u=c.cross(s),d=h.mul(a.x).add(u.mul(l.x)),f=h.mul(a.y).add(u.mul(l.y)),p=d.dot(d).max(f.dot(f)),x=o0.mul(p.inverseSqrt());return No(d.mul(n.x,x),f.mul(n.y,x),c.mul(n.z)).normalize()});class tV extends li{static get type(){return"NormalMapNode"}constructor(t,e=null){super("vec3"),this.node=t,this.scaleNode=e,this.normalMapType=mM}setup(t){const{normalMapType:e,scaleNode:n}=this;let i=this.node.mul(2).sub(1);n!==null&&(i=ge(i.xy.mul(n),i.z));let s=null;return e===fz?s=Jb(i):e===mM&&(t.hasGeometryAttribute("tangent")===!0?s=Qk.mul(i).normalize():s=Jk({eye_pos:Ri,surf_norm:dl,mapN:i,uv:eh()})),s}}const zM=at(tV),eV=cn(({textureNode:r,bumpScale:t})=>{const e=i=>r.cache().context({getUV:s=>i(s.uvNode||eh()),forceUVContext:!0}),n=ae(e(i=>i));return Zt(ae(e(i=>i.add(i.dFdx()))).sub(n),ae(e(i=>i.add(i.dFdy()))).sub(n)).mul(t)}),nV=cn(r=>{const{surf_pos:t,surf_norm:e,dHdxy:n}=r,i=t.dFdx().normalize(),s=t.dFdy().normalize(),o=e,a=s.cross(o),l=o.cross(i),c=i.dot(a).mul(o0),h=c.sign().mul(n.x.mul(a).add(n.y.mul(l)));return c.abs().mul(e).sub(h).normalize()});class iV extends li{static get type(){return"BumpMapNode"}constructor(t,e=null){super("vec3"),this.textureNode=t,this.scaleNode=e}setup(){const t=this.scaleNode!==null?this.scaleNode:1,e=eV({textureNode:this.textureNode,bumpScale:t});return nV({surf_pos:Ri,surf_norm:dl,dHdxy:e})}}const sV=at(iV),GM=new Map;class X extends ce{static get type(){return"MaterialNode"}constructor(t){super(),this.scope=t}getCache(t,e){let n=GM.get(t);return n===void 0&&(n=Yk(t,e),GM.set(t,n)),n}getFloat(t){return this.getCache(t,"float")}getColor(t){return this.getCache(t,"color")}getTexture(t){return this.getCache(t==="map"?"map":t+"Map","texture")}setup(t){const e=t.context.material,n=this.scope;let i=null;if(n===X.COLOR){const s=e.color!==void 0?this.getColor(n):ge();e.map&&e.map.isTexture===!0?i=s.mul(this.getTexture("map")):i=s}else if(n===X.OPACITY){const s=this.getFloat(n);e.alphaMap&&e.alphaMap.isTexture===!0?i=s.mul(this.getTexture("alpha")):i=s}else if(n===X.SPECULAR_STRENGTH)e.specularMap&&e.specularMap.isTexture===!0?i=this.getTexture("specular").r:i=ae(1);else if(n===X.SPECULAR_INTENSITY){const s=this.getFloat(n);e.specularMap?i=s.mul(this.getTexture(n).a):i=s}else if(n===X.SPECULAR_COLOR){const s=this.getColor(n);e.specularColorMap&&e.specularColorMap.isTexture===!0?i=s.mul(this.getTexture(n).rgb):i=s}else if(n===X.ROUGHNESS){const s=this.getFloat(n);e.roughnessMap&&e.roughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).g):i=s}else if(n===X.METALNESS){const s=this.getFloat(n);e.metalnessMap&&e.metalnessMap.isTexture===!0?i=s.mul(this.getTexture(n).b):i=s}else if(n===X.EMISSIVE){const s=this.getFloat("emissiveIntensity"),o=this.getColor(n).mul(s);e.emissiveMap&&e.emissiveMap.isTexture===!0?i=o.mul(this.getTexture(n)):i=o}else if(n===X.NORMAL)e.normalMap?(i=zM(this.getTexture("normal"),this.getCache("normalScale","vec2")),i.normalMapType=e.normalMapType):e.bumpMap?i=sV(this.getTexture("bump").r,this.getFloat("bumpScale")):i=dl;else if(n===X.CLEARCOAT){const s=this.getFloat(n);e.clearcoatMap&&e.clearcoatMap.isTexture===!0?i=s.mul(this.getTexture(n).r):i=s}else if(n===X.CLEARCOAT_ROUGHNESS){const s=this.getFloat(n);e.clearcoatRoughnessMap&&e.clearcoatRoughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).r):i=s}else if(n===X.CLEARCOAT_NORMAL)e.clearcoatNormalMap?i=zM(this.getTexture(n),this.getCache(n+"Scale","vec2")):i=dl;else if(n===X.SHEEN){const s=this.getColor("sheenColor").mul(this.getFloat("sheen"));e.sheenColorMap&&e.sheenColorMap.isTexture===!0?i=s.mul(this.getTexture("sheenColor").rgb):i=s}else if(n===X.SHEEN_ROUGHNESS){const s=this.getFloat(n);e.sheenRoughnessMap&&e.sheenRoughnessMap.isTexture===!0?i=s.mul(this.getTexture(n).a):i=s,i=i.clamp(.07,1)}else if(n===X.ANISOTROPY)if(e.anisotropyMap&&e.anisotropyMap.isTexture===!0){const s=this.getTexture(n);i=Lb(Jl.x,Jl.y,Jl.y.negate(),Jl.x).mul(s.rg.mul(2).sub(Zt(1)).normalize().mul(s.b))}else i=Jl;else if(n===X.IRIDESCENCE_THICKNESS){const s=Ro("1","float",e.iridescenceThicknessRange);if(e.iridescenceThicknessMap){const o=Ro("0","float",e.iridescenceThicknessRange);i=s.sub(o).mul(this.getTexture(n).g).add(o)}else i=s}else if(n===X.TRANSMISSION){const s=this.getFloat(n);e.transmissionMap?i=s.mul(this.getTexture(n).r):i=s}else if(n===X.THICKNESS){const s=this.getFloat(n);e.thicknessMap?i=s.mul(this.getTexture(n).g):i=s}else if(n===X.IOR)i=this.getFloat(n);else if(n===X.LIGHT_MAP)i=this.getTexture(n).rgb.mul(this.getFloat("lightMapIntensity"));else if(n===X.AO_MAP)i=this.getTexture(n).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const s=this.getNodeType(t);i=this.getCache(n,s)}return i}}X.ALPHA_TEST="alphaTest";X.COLOR="color";X.OPACITY="opacity";X.SHININESS="shininess";X.SPECULAR="specular";X.SPECULAR_STRENGTH="specularStrength";X.SPECULAR_INTENSITY="specularIntensity";X.SPECULAR_COLOR="specularColor";X.REFLECTIVITY="reflectivity";X.ROUGHNESS="roughness";X.METALNESS="metalness";X.NORMAL="normal";X.CLEARCOAT="clearcoat";X.CLEARCOAT_ROUGHNESS="clearcoatRoughness";X.CLEARCOAT_NORMAL="clearcoatNormal";X.EMISSIVE="emissive";X.ROTATION="rotation";X.SHEEN="sheen";X.SHEEN_ROUGHNESS="sheenRoughness";X.ANISOTROPY="anisotropy";X.IRIDESCENCE="iridescence";X.IRIDESCENCE_IOR="iridescenceIOR";X.IRIDESCENCE_THICKNESS="iridescenceThickness";X.IOR="ior";X.TRANSMISSION="transmission";X.THICKNESS="thickness";X.ATTENUATION_DISTANCE="attenuationDistance";X.ATTENUATION_COLOR="attenuationColor";X.LINE_SCALE="scale";X.LINE_DASH_SIZE="dashSize";X.LINE_GAP_SIZE="gapSize";X.LINE_WIDTH="linewidth";X.LINE_DASH_OFFSET="dashOffset";X.POINT_WIDTH="pointWidth";X.DISPERSION="dispersion";X.LIGHT_MAP="light";X.AO_MAP="ao";X.ALPHA_TEST;X.COLOR;X.SHININESS;X.EMISSIVE;X.OPACITY;X.SPECULAR;X.SPECULAR_INTENSITY;X.SPECULAR_COLOR;X.SPECULAR_STRENGTH;X.REFLECTIVITY;X.ROUGHNESS;X.METALNESS;X.CLEARCOAT;X.CLEARCOAT_ROUGHNESS;X.ROTATION;X.SHEEN;X.SHEEN_ROUGHNESS;X.ANISOTROPY;X.IRIDESCENCE;X.IRIDESCENCE_IOR;X.IRIDESCENCE_THICKNESS;X.TRANSMISSION;X.THICKNESS;X.IOR;X.ATTENUATION_DISTANCE;X.ATTENUATION_COLOR;X.LINE_SCALE;X.LINE_DASH_SIZE;X.LINE_GAP_SIZE;X.LINE_WIDTH;X.LINE_DASH_OFFSET;X.POINT_WIDTH;X.DISPERSION;X.LIGHT_MAP;X.AO_MAP;const Jl=Gn(new Fi).onReference(function(r){return r.material}).onRenderUpdate(function({material:r}){this.value.set(r.anisotropy*Math.cos(r.anisotropyRotation),r.anisotropy*Math.sin(r.anisotropyRotation))});class ze extends ce{static get type(){return"IndexNode"}constructor(t){super("uint"),this.scope=t,this.isInstanceIndexNode=!0}generate(t){const e=this.getNodeType(t),n=this.scope;let i;if(n===ze.VERTEX)i=t.getVertexIndex();else if(n===ze.INSTANCE)i=t.getInstanceIndex();else if(n===ze.DRAW)i=t.getDrawIndex();else if(n===ze.INVOCATION_LOCAL)i=t.getInvocationLocalIndex();else if(n===ze.INVOCATION_SUBGROUP)i=t.getInvocationSubgroupIndex();else if(n===ze.SUBGROUP)i=t.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+n);let s;return t.shaderStage==="vertex"||t.shaderStage==="compute"?s=i:s=bl(this).build(t,e),s}}ze.VERTEX="vertex";ze.INSTANCE="instance";ze.SUBGROUP="subgroup";ze.INVOCATION_LOCAL="invocationLocal";ze.INVOCATION_SUBGROUP="invocationSubgroup";ze.DRAW="draw";ze.VERTEX;const rV=Bt(ze,ze.INSTANCE);ze.SUBGROUP;ze.INVOCATION_SUBGROUP;ze.INVOCATION_LOCAL;ze.DRAW;class oV extends ce{static get type(){return"LoopNode"}constructor(t=[]){super(),this.params=t}getVarName(t){return String.fromCharCode(105+t)}getProperties(t){const e=t.getNodeProperties(this);if(e.stackNode!==void 0)return e;const n={};for(let s=0,o=this.params.length-1;s<o;s++){const a=this.params[s],l=a.isNode!==!0&&a.name||this.getVarName(s),c=a.isNode!==!0&&a.type||"int";n[l]=yd(l,c)}const i=t.addStack();return e.returnsNode=this.params[this.params.length-1](n,i,t),e.stackNode=i,t.removeStack(),e}getNodeType(t){const{returnsNode:e}=this.getProperties(t);return e?e.getNodeType(t):"void"}setup(t){this.getProperties(t)}generate(t){const e=this.getProperties(t),n=this.params,i=e.stackNode;for(let a=0,l=n.length-1;a<l;a++){const c=n[a];let h=null,u=null,d=null,f=null,p=null,x=null;c.isNode?(f="int",d=this.getVarName(a),h="0",u=c.build(t,f),p="<"):(f=c.type||"int",d=c.name||this.getVarName(a),h=c.start,u=c.end,p=c.condition,x=c.update,typeof h=="number"?h=h.toString():h&&h.isNode&&(h=h.build(t,f)),typeof u=="number"?u=u.toString():u&&u.isNode&&(u=u.build(t,f)),h!==void 0&&u===void 0?(h=h+" - 1",u="0",p=">="):u!==void 0&&h===void 0&&(h="0",p="<"),p===void 0&&(Number(h)>Number(u)?p=">=":p="<"));const m={start:h,end:u,condition:p},g=m.start,_=m.end;let y="",S="",w="";x||(f==="int"||f==="uint"?p.includes("<")?x="++":x="--":p.includes("<")?x="+= 1.":x="-= 1."),y+=t.getVar(f,d)+" = "+g,S+=d+" "+p+" "+_,w+=d+" "+x;const A=`for ( ${y}; ${S}; ${w} )`;t.addFlowCode((a===0?`
`:"")+t.tab+A+` {

`).addFlowTab()}const s=i.build(t,"void"),o=e.returnsNode?e.returnsNode.build(t):"";t.removeFlowTab().addFlowCode(`
`+t.tab+s);for(let a=0,l=this.params.length-1;a<l;a++)t.addFlowCode((a===0?"":t.tab)+`}

`).removeFlowTab();return t.addFlowTab(),o}}const Ba=(...r)=>xt(new oV(Ka(r,"int"))).append();let tc,ec;class nn extends ce{static get type(){return"ScreenNode"}constructor(t){super(),this.scope=t,this.isViewportNode=!0}getNodeType(){return this.scope===nn.VIEWPORT?"vec4":"vec2"}getUpdateType(){let t=rn.NONE;return(this.scope===nn.SIZE||this.scope===nn.VIEWPORT)&&(t=rn.RENDER),this.updateType=t,t}update({renderer:t}){const e=t.getRenderTarget();this.scope===nn.VIEWPORT?e!==null?ec.copy(e.viewport):(t.getViewport(ec),ec.multiplyScalar(t.getPixelRatio())):e!==null?(tc.width=e.width,tc.height=e.height):t.getDrawingBufferSize(tc)}setup(){const t=this.scope;let e=null;return t===nn.SIZE?e=Gn(tc||(tc=new Fi)):t===nn.VIEWPORT?e=Gn(ec||(ec=new ps)):e=Zt(Qd.div(kM)),e}generate(t){if(this.scope===nn.COORDINATE){let e=t.getFragCoord();if(t.isFlipY()){const n=t.getNodeProperties(kM).outputNode.build(t);e=`${t.getType("vec2")}( ${e}.x, ${n}.y - ${e}.y )`}return e}return super.generate(t)}}nn.COORDINATE="coordinate";nn.VIEWPORT="viewport";nn.SIZE="size";nn.UV="uv";const a0=Bt(nn,nn.UV),kM=Bt(nn,nn.SIZE),Qd=Bt(nn,nn.COORDINATE),r1=Bt(nn,nn.VIEWPORT);r1.zw;r1.xy;const nc=new Fi;class aV extends Kd{static get type(){return"ViewportTextureNode"}constructor(t=a0,e=null,n=null){n===null&&(n=new Xz,n.minFilter=xb),super(n,t,e),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=rn.FRAME}updateBefore(t){const e=t.renderer;e.getDrawingBufferSize(nc);const n=this.value;(n.image.width!==nc.width||n.image.height!==nc.height)&&(n.image.width=nc.width,n.image.height=nc.height,n.needsUpdate=!0);const i=n.generateMipmaps;n.generateMipmaps=this.generateMipmaps,e.copyFramebufferToTexture(n),n.generateMipmaps=i}clone(){const t=new this.constructor(this.uvNode,this.levelNode,this.value);return t.generateMipmaps=this.generateMipmaps,t}}let jp=null;class lV extends aV{static get type(){return"ViewportDepthTextureNode"}constructor(t=a0,e=null){jp===null&&(jp=new wb),super(t,e,jp)}}const cV=at(lV);class ni extends ce{static get type(){return"ViewportDepthNode"}constructor(t,e=null){super("float"),this.scope=t,this.valueNode=e,this.isViewportDepthNode=!0}generate(t){const{scope:e}=this;return e===ni.DEPTH_BASE?t.getFragDepth():super.generate(t)}setup({camera:t}){const{scope:e}=this,n=this.valueNode;let i=null;if(e===ni.DEPTH_BASE)n!==null&&(i=a1().assign(n));else if(e===ni.DEPTH)t.isPerspectiveCamera?i=hV(Ri.z,Zl,Ql):i=Ou(Ri.z,Zl,Ql);else if(e===ni.LINEAR_DEPTH)if(n!==null)if(t.isPerspectiveCamera){const s=o1(n,Zl,Ql);i=Ou(s,Zl,Ql)}else i=n;else i=Ou(Ri.z,Zl,Ql);return i}}ni.DEPTH_BASE="depthBase";ni.DEPTH="depth";ni.LINEAR_DEPTH="linearDepth";const Ou=(r,t,e)=>r.add(t).div(t.sub(e)),hV=(r,t,e)=>t.add(r).mul(e).div(e.sub(t).mul(r)),o1=(r,t,e)=>t.mul(e).div(e.sub(t).mul(r).sub(e)),a1=at(ni,ni.DEPTH_BASE),uV=Bt(ni,ni.DEPTH),dV=at(ni,ni.LINEAR_DEPTH);cV();uV.assign=r=>a1(r);class Ic extends ce{static get type(){return"ClippingNode"}constructor(t=Ic.DEFAULT){super(),this.scope=t}setup(t){super.setup(t);const e=t.clippingContext,{localClipIntersection:n,localClippingCount:i,globalClippingCount:s}=e,o=s+i,a=n?o-i:o;return this.scope===Ic.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(e.planes,o,a):this.setupDefault(e.planes,o,a)}setupAlphaToCoverage(t,e,n){return cn(()=>{const i=zg(t),s=Aa("float","distanceToPlane"),o=Aa("float","distanceToGradient"),a=Aa("float","clipOpacity");a.assign(1);let l;if(Ba(n,({i:c})=>{l=i.element(c),s.assign(Ri.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),a.mulAssign(Og(o.negate(),o,s)),a.equal(0).discard()}),n<e){const c=Aa("float","unionclipOpacity");c.assign(1),Ba({start:n,end:e},({i:h})=>{l=i.element(h),s.assign(Ri.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),c.mulAssign(Og(o.negate(),o,s).oneMinus())}),a.mulAssign(c.oneMinus())}UM.a.mulAssign(a),UM.a.equal(0).discard()})()}setupDefault(t,e,n){return cn(()=>{const i=zg(t);let s;if(Ba(n,({i:o})=>{s=i.element(o),Ri.dot(s.xyz).greaterThan(s.w).discard()}),n<e){const o=Aa("bool","clipped");o.assign(!0),Ba({start:n,end:e},({i:a})=>{s=i.element(a),o.assign(Ri.dot(s.xyz).greaterThan(s.w).and(o))}),o.discard()}})()}}Ic.ALPHA_TO_COVERAGE="alphaToCoverage";Ic.DEFAULT="default";ge(.04);ae(1);const fV=cn(([r,t])=>{const e=r.toVar();e.assign(Yd(2,e).sub(1));const n=ge(e,1).toVar();return Qx(t.equal(0),()=>{n.assign(n.zyx)}).ElseIf(t.equal(1),()=>{n.assign(n.xzy),n.xz.mulAssign(-1)}).ElseIf(t.equal(2),()=>{n.x.mulAssign(-1)}).ElseIf(t.equal(3),()=>{n.assign(n.zyx),n.xz.mulAssign(-1)}).ElseIf(t.equal(4),()=>{n.assign(n.xzy),n.xy.mulAssign(-1)}).ElseIf(t.equal(5),()=>{n.z.mulAssign(-1)}),n}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]});cn(({texture:r,uv:t})=>{const n=ge().toVar();return Qx(t.x.lessThan(1e-4),()=>{n.assign(ge(1,0,0))}).ElseIf(t.y.lessThan(1e-4),()=>{n.assign(ge(0,1,0))}).ElseIf(t.z.lessThan(1e-4),()=>{n.assign(ge(0,0,1))}).ElseIf(t.x.greaterThan(1-1e-4),()=>{n.assign(ge(-1,0,0))}).ElseIf(t.y.greaterThan(1-1e-4),()=>{n.assign(ge(0,-1,0))}).ElseIf(t.z.greaterThan(1-1e-4),()=>{n.assign(ge(0,0,-1))}).Else(()=>{const s=r.uv(t.add(ge(-.01,0,0))).r.sub(r.uv(t.add(ge(.01,0,0))).r),o=r.uv(t.add(ge(0,-.01,0))).r.sub(r.uv(t.add(ge(0,.01,0))).r),a=r.uv(t.add(ge(0,0,-.01))).r.sub(r.uv(t.add(ge(0,0,.01))).r);n.assign(ge(s,o,a))}),n.normalize()});class qn extends ce{static get type(){return"CodeNode"}constructor(t="",e=[],n=""){super("code"),this.isCodeNode=!0,this.code=t,this.language=n,this.includes=e}isGlobal(){return!0}setIncludes(t){return this.includes=t,this}getIncludes(){return this.includes}generate(t){const e=this.getIncludes(t);for(const i of e)i.build(t);const n=t.getCodeFromNode(this,this.getNodeType(t));return n.code=this.code,n.code}serialize(t){super.serialize(t),t.code=this.code,t.language=this.language}deserialize(t){super.deserialize(t),this.code=t.code,this.language=t.language}}const Kp=fV(eh(),th("faceIndex")).normalize();ge(Kp.x,Kp.y.negate(),Kp.z);class Zi extends vl{static get type(){return"TimerNode"}constructor(t=Zi.LOCAL,e=1,n=0){super(n),this.scope=t,this.scale=e,this.updateType=rn.FRAME}update(t){const e=this.scope,n=this.scale;e===Zi.LOCAL?this.value+=t.deltaTime*n:e===Zi.DELTA?this.value=t.deltaTime*n:e===Zi.FRAME?this.value=t.frameId:this.value=t.time*n}serialize(t){super.serialize(t),t.scope=this.scope,t.scale=this.scale}deserialize(t){super.deserialize(t),this.scope=t.scope,this.scale=t.scale}}Zi.LOCAL="local";Zi.GLOBAL="global";Zi.DELTA="delta";Zi.FRAME="frame";const l1=(r,t=0)=>xt(new Zi(Zi.LOCAL,r,t));class yn extends ce{static get type(){return"OscNode"}constructor(t=yn.SINE,e=l1()){super(),this.method=t,this.timeNode=e}getNodeType(t){return this.timeNode.getNodeType(t)}setup(){const t=this.method,e=xt(this.timeNode);let n=null;return t===yn.SINE?n=e.add(.75).mul(Math.PI*2).sin().mul(.5).add(.5):t===yn.SQUARE?n=e.fract().round():t===yn.TRIANGLE?n=e.add(.5).fract().mul(2).sub(1).abs():t===yn.SAWTOOTH&&(n=e.fract()),n}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}}yn.SINE="sine";yn.SQUARE="square";yn.TRIANGLE="triangle";yn.SAWTOOTH="sawtooth";yn.SINE;yn.SQUARE;yn.TRIANGLE;yn.SAWTOOTH;new qz;new le;new le;new le;new Ji;new le(0,0,-1);new ps;new le;new le;new ps;new Fi;new bb;a0.flipX();class us extends ce{static get type(){return"SceneNode"}constructor(t=us.BACKGROUND_BLURRINESS,e=null){super(),this.scope=t,this.scene=e}setup(t){const e=this.scope,n=this.scene!==null?this.scene:t.scene;let i;return e===us.BACKGROUND_BLURRINESS?i=Ro("backgroundBlurriness","float",n):e===us.BACKGROUND_INTENSITY?i=Ro("backgroundIntensity","float",n):console.error("THREE.SceneNode: Unknown scope:",e),i}}us.BACKGROUND_BLURRINESS="backgroundBlurriness";us.BACKGROUND_INTENSITY="backgroundIntensity";us.BACKGROUND_BLURRINESS;us.BACKGROUND_INTENSITY;const pV=new Fi;class mV extends Kd{static get type(){return"PassTextureNode"}constructor(t,e){super(e),this.passNode=t,this.setUpdateMatrix(!1)}setup(t){return t.object.isQuadMesh&&this.passNode.build(t),super.setup(t)}clone(){return new this.constructor(this.passNode,this.value)}}class VM extends mV{static get type(){return"PassMultipleTextureNode"}constructor(t,e,n=!1){super(t,null),this.textureName=e,this.previousTexture=n}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(t){return this.updateTexture(),super.setup(t)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class Jd extends li{static get type(){return"PassNode"}constructor(t,e,n,i={}){super("vec4"),this.scope=t,this.scene=e,this.camera=n,this.options=i,this._pixelRatio=1,this._width=1,this._height=1;const s=new wb;s.isRenderTargetTexture=!0,s.name="depth";const o=new bb(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:hz,...i});o.texture.name="output",o.depthTexture=s,this.renderTarget=o,this.updateBeforeType=rn.FRAME,this._textures={output:o.texture,depth:s},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=Gn(0),this._cameraFar=Gn(0),this._mrt=null,this.isPassNode=!0}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(t){let e=this._textures[t];return e===void 0&&(e=this.renderTarget.texture.clone(),e.isRenderTargetTexture=!0,e.name=t,this._textures[t]=e,this.renderTarget.textures.push(e)),e}getPreviousTexture(t){let e=this._previousTextures[t];return e===void 0&&(e=this.getTexture(t).clone(),e.isRenderTargetTexture=!0,this._previousTextures[t]=e),e}toggleTexture(t){const e=this._previousTextures[t];if(e!==void 0){const n=this._textures[t],i=this.renderTarget.textures.indexOf(n);this.renderTarget.textures[i]=e,this._textures[t]=e,this._previousTextures[t]=n,this._textureNodes[t].updateTexture(),this._previousTextureNodes[t].updateTexture()}}getTextureNode(t="output"){let e=this._textureNodes[t];return e===void 0&&(this._textureNodes[t]=e=xt(new VM(this,t)),this._textureNodes[t].updateTexture()),e}getPreviousTextureNode(t="output"){let e=this._previousTextureNodes[t];return e===void 0&&(this._textureNodes[t]===void 0&&this.getTextureNode(t),this._previousTextureNodes[t]=e=xt(new VM(this,t,!0)),this._previousTextureNodes[t].updateTexture()),e}getViewZNode(t="depth"){let e=this._viewZNodes[t];if(e===void 0){const n=this._cameraNear,i=this._cameraFar;this._viewZNodes[t]=e=o1(this.getTextureNode(t),n,i)}return e}getLinearDepthNode(t="depth"){let e=this._linearDepthNodes[t];if(e===void 0){const n=this._cameraNear,i=this._cameraFar,s=this.getViewZNode(t);this._linearDepthNodes[t]=e=Ou(s,n,i)}return e}setup({renderer:t}){return this.renderTarget.samples=this.options.samples===void 0?t.samples:this.options.samples,t.backend.isWebGLBackend===!0&&(this.renderTarget.samples=0),this.renderTarget.depthTexture.isMultisampleRenderTargetTexture=this.renderTarget.samples>1,this.scope===Jd.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(t){const{renderer:e}=t,{scene:n,camera:i}=this;this._pixelRatio=e.getPixelRatio();const s=e.getSize(pV);this.setSize(s.width,s.height);const o=e.getRenderTarget(),a=e.getMRT();this._cameraNear.value=i.near,this._cameraFar.value=i.far;for(const l in this._previousTextures)this.toggleTexture(l);e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),e.render(n,i),e.setRenderTarget(o),e.setMRT(a)}setSize(t,e){this._width=t,this._height=e;const n=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget.setSize(n,i)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}Jd.COLOR="color";Jd.DEPTH="depth";let Qr=null,Jr=null;class gV extends ce{static get type(){return"RangeNode"}constructor(t=ae(),e=ae()){super(),this.minNode=t,this.maxNode=e}getVectorLength(t){const e=t.getTypeLength(Ar(this.minNode.value)),n=t.getTypeLength(Ar(this.maxNode.value));return e>n?e:n}getNodeType(t){return t.object.count>1?t.getTypeFromLength(this.getVectorLength(t)):"float"}setup(t){const e=t.object;let n=null;if(e.count>1){const i=this.minNode.value,s=this.maxNode.value,o=t.getTypeLength(Ar(i)),a=t.getTypeLength(Ar(s));Qr=Qr||new ps,Jr=Jr||new ps,Qr.setScalar(0),Jr.setScalar(0),o===1?Qr.setScalar(i):i.isColor?Qr.set(i.r,i.g,i.b):Qr.set(i.x,i.y,i.z||0,i.w||0),a===1?Jr.setScalar(s):s.isColor?Jr.set(s.r,s.g,s.b):Jr.set(s.x,s.y,s.z||0,s.w||0);const l=4,c=l*e.count,h=new Float32Array(c);for(let d=0;d<c;d++){const f=d%l,p=Qr.getComponent(f),x=Jr.getComponent(f);h[d]=Tb.lerp(p,x,Math.random())}const u=this.getNodeType(t);if(e.count<=4096)n=e1(h,"vec4",e.count).element(rV).convert(u);else{const d=new Hz(h,4);t.geometry.setAttribute("__range"+this.id,d),n=uk(d).convert(u)}}else n=ae(0);return n}}const mu=at(gV);cn(({depthTexture:r,shadowCoord:t})=>nh(r,t.xy).compare(t.z));cn(({depthTexture:r,shadowCoord:t,shadow:e})=>{const n=(x,m)=>nh(r,x).compare(m),i=Ro("mapSize","vec2",e).setGroup(wo),s=Ro("radius","float",e).setGroup(wo),o=Zt(1).div(i),a=o.x.negate().mul(s),l=o.y.negate().mul(s),c=o.x.mul(s),h=o.y.mul(s),u=a.div(2),d=l.div(2),f=c.div(2),p=h.div(2);return No(n(t.xy.add(Zt(a,l)),t.z),n(t.xy.add(Zt(0,l)),t.z),n(t.xy.add(Zt(c,l)),t.z),n(t.xy.add(Zt(u,d)),t.z),n(t.xy.add(Zt(0,d)),t.z),n(t.xy.add(Zt(f,d)),t.z),n(t.xy.add(Zt(a,0)),t.z),n(t.xy.add(Zt(u,0)),t.z),n(t.xy,t.z),n(t.xy.add(Zt(f,0)),t.z),n(t.xy.add(Zt(c,0)),t.z),n(t.xy.add(Zt(u,p)),t.z),n(t.xy.add(Zt(0,p)),t.z),n(t.xy.add(Zt(f,p)),t.z),n(t.xy.add(Zt(a,h)),t.z),n(t.xy.add(Zt(0,h)),t.z),n(t.xy.add(Zt(c,h)),t.z)).mul(1/17)});cn(({depthTexture:r,shadowCoord:t,shadow:e})=>{const n=(h,u)=>nh(r,h).compare(u),i=Ro("mapSize","vec2",e).setGroup(wo),s=Zt(1).div(i),o=s.x,a=s.y,l=t.xy,c=t0(l.mul(i).add(.5));return l.subAssign(c.mul(s)),No(n(l,t.z),n(l.add(Zt(o,0)),t.z),n(l.add(Zt(0,a)),t.z),n(l.add(s),t.z),Ls(n(l.add(Zt(o.negate(),0)),t.z),n(l.add(Zt(o.mul(2),0)),t.z),c.x),Ls(n(l.add(Zt(o.negate(),a)),t.z),n(l.add(Zt(o.mul(2),a)),t.z),c.x),Ls(n(l.add(Zt(0,a.negate())),t.z),n(l.add(Zt(0,a.mul(2))),t.z),c.y),Ls(n(l.add(Zt(o,a.negate())),t.z),n(l.add(Zt(o,a.mul(2))),t.z),c.y),Ls(Ls(n(l.add(Zt(o.negate(),a.negate())),t.z),n(l.add(Zt(o.mul(2),a.negate())),t.z),c.x),Ls(n(l.add(Zt(o.negate(),a.mul(2))),t.z),n(l.add(Zt(o.mul(2),a.mul(2))),t.z),c.x),c.y)).mul(1/9)});cn(({depthTexture:r,shadowCoord:t})=>{const e=ae(1).toVar(),n=nh(r).uv(t.xy).rg,i=Hb(t.z,n.x);return Qx(i.notEqual(ae(1)),()=>{const s=t.z.sub(n.x),o=Bg(0,n.y.mul(n.y));let a=o.div(o.add(s.mul(s)));a=xd(gd(a,.3).div(.95-.3)),e.assign(xd(Bg(i,a)))}),e});cn(({samples:r,radius:t,size:e,shadowPass:n})=>{const i=ae(0).toVar(),s=ae(0).toVar(),o=r.lessThanEqual(ae(1)).select(ae(0),ae(2).div(r.sub(1))),a=r.lessThanEqual(ae(1)).select(ae(0),ae(-1));Ba({start:ul(0),end:ul(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(ae(c).mul(o)),u=n.uv(No(Qd.xy,Zt(0,h).mul(t)).div(e)).x;i.addAssign(u),s.addAssign(u.mul(u))}),i.divAssign(r),s.divAssign(r);const l=Jx(s.sub(i.mul(i)));return Zt(i,l)});cn(({samples:r,radius:t,size:e,shadowPass:n})=>{const i=ae(0).toVar(),s=ae(0).toVar(),o=r.lessThanEqual(ae(1)).select(ae(0),ae(2).div(r.sub(1))),a=r.lessThanEqual(ae(1)).select(ae(0),ae(-1));Ba({start:ul(0),end:ul(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(ae(c).mul(o)),u=n.uv(No(Qd.xy,Zt(h,0).mul(t)).div(e));i.addAssign(u.x),s.addAssign(No(u.y.mul(u.y),u.x.mul(u.x)))}),i.divAssign(r),s.divAssign(r);const l=Jx(s.sub(i.mul(i)));return Zt(i,l)});ge(1.6605,-.1246,-.0182),ge(-.5876,1.1329,-.1006),ge(-.0728,-.0083,1.1187);ge(.6274,.0691,.0164),ge(.3293,.9195,.088),ge(.0433,.0113,.8956);class xV extends ce{constructor(t){super(),this.scope=t}generate(t){const{scope:e}=this,{renderer:n}=t;n.backend.isWebGLBackend===!0?t.addFlowCode(`	// ${e}Barrier 
`):t.addLineFlowCode(`${e}Barrier()`,this)}}at(xV);class ys extends li{static get type(){return"AtomicFunctionNode"}constructor(t,e,n,i=null){super("uint"),this.method=t,this.pointerNode=e,this.valueNode=n,this.storeNode=i}getInputType(t){return this.pointerNode.getNodeType(t)}getNodeType(t){return this.getInputType(t)}generate(t){const e=this.method,n=this.getNodeType(t),i=this.getInputType(t),s=this.pointerNode,o=this.valueNode,a=[];a.push(`&${s.build(t,i)}`),a.push(o.build(t,i));const l=`${t.getMethod(e,n)}( ${a.join(", ")} )`;if(this.storeNode!==null){const c=this.storeNode.build(t,i);t.addLineFlowCode(`${c} = ${l}`,this)}else t.addLineFlowCode(l,this)}}ys.ATOMIC_LOAD="atomicLoad";ys.ATOMIC_STORE="atomicStore";ys.ATOMIC_ADD="atomicAdd";ys.ATOMIC_SUB="atomicSub";ys.ATOMIC_MAX="atomicMax";ys.ATOMIC_MIN="atomicMin";ys.ATOMIC_AND="atomicAnd";ys.ATOMIC_OR="atomicOr";ys.ATOMIC_XOR="atomicXor";at(ys);const Sa=self.GPUShaderStage;Sa&&Sa.VERTEX,Sa&&Sa.FRAGMENT,Sa&&Sa.COMPUTE;const to={tsl_xor:new qn("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new qn("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new qn("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new qn("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new qn("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new qn("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new qn("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new qn("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new qn("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping:new qn(`
fn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {

	let uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );

	return ( ( uvScaled % dimension ) + dimension ) % dimension;

}
`),biquadraticTexture:new qn(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, level : i32 ) -> vec4f {

	let iRes = vec2i( textureDimensions( map, level ) );
	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2i( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2i( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2i( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2i( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)},gu={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};/Windows/g.test(navigator.userAgent)&&(to.pow_float=new qn("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),to.pow_vec2=new qn("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[to.pow_float]),to.pow_vec3=new qn("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[to.pow_float]),to.pow_vec4=new qn("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[to.pow_float]),gu.pow_float="tsl_pow_float",gu.pow_vec2="tsl_pow_vec2",gu.pow_vec3="tsl_pow_vec3",gu.pow_vec4="tsl_pow_vec4");typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:pb}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=pb);const yV=()=>{const r=Oc();r.position.set(4,2,5).multiplyScalar(.7);const t=Bc();t.background=new oe(2103577);const e=new FC({transparent:!0,depthWrite:!1,blending:Zp}),n=Gn(.08);console.log(e),e.scaleNode=mu(0,1).mul(n);const i=l1(),s=mu(0,1),o=s.pow(1.5).mul(5).toVar(),a=3,c=mu(0,a).floor().mul(n4.div(a)).add(i.mul(s.oneMinus())),h=ge(Gb(c),0,e0(c)).mul(o),u=mu(new U(-1,-1,-1),new U(1,1,1)).pow(3).mul(s).add(.2);e.positionNode=h.add(u);const d=Gn(Ug("#c4c4c4")),f=Gn(Ug("#311599")),p=Ls(d,f,s.oneMinus().pow(2).oneMinus()),x=ae(.1).div(eh().sub(.5).length()).sub(.2);e.colorNode=Ao(p,x);const m=new ES(new Fo(1,1),e,2e4);t.add(m);const _=zc({title:"Particulas with TSL",description:"WebGPU permite un rendimiento gráfico de alta eficiencia. En este caso, se utiliza para renderizar una simulación de partículas compleja, donde miles de partículas se procesan con alta precisión sin comprometer la velocidad. La ejecución asíncrona, implementada mediante la técnica de bucle de animación, garantiza que cada cuadro se renderice sin bloquear la actualización de la cámara o los controles, lo que permite una experiencia fluida e interactiva. La adaptación del tamaño del render y la cámara se maneja dinámicamente, manteniendo la eficiencia gráfica y asegurando que el rendimiento no se vea afectado, incluso si se redimensiona la ventana. Esto permite que el flujo de renderizado ocurra en paralelo a otras operaciones, clave en aplicaciones que requieren gráficos de alta calidad y respuestas rápidas."}),y=new iz({antialias:!0,canvas:_,alpha:!0});y.setAnimationLoop(w);const S=n2(r,y);S.enableZoom=!1;async function w(){i2(y,r),S.update(),y.render(t,r)}},_V=()=>{const t=zc({title:"Wireframe cube (template)",description:"Sit enim deserunt ex ut minim et. Ut esse cillum esse labore adipisicing amet pariatur ad. Incididunt dolor nisi sit fugiat fugiat ex proident velit qui aute aliquip culpa consequat. Commodo dolor Lorem veniam consectetur. Proident et cupidatat veniam tempor."}),e=Td(t),n=Oc(),i=Bc(),s=new Dn(new Uc(1,1,1),new Dc({color:16711680,wireframe:!0}));i.add(s);function o(){vd(e,n),s.rotation.x+=.01,s.rotation.y+=.01,e.render(i,n),requestAnimationFrame(o)}o()};function MV(){const t=zc({title:"Torus made with ThreeJS",description:"Sit enim deserunt ex ut minim et. Ut esse cillum esse labore adipisicing amet pariatur ad. Incididunt dolor nisi sit fugiat fugiat ex proident velit qui aute aliquip culpa consequat. Commodo dolor Lorem veniam consectetur. Proident et cupidatat veniam tempor."}),e=Bc(),n=Oc(),i=Td(t),s=sx(n,i);s.enableZoom=!1;const o=new Dn(new nx(.7),new Dc({color:65535,wireframe:!0}));e.add(o);function a(){vd(i,n),o.rotation.x+=.01,o.rotation.y-=.01,requestAnimationFrame(a),i.render(e,n),s.update()}a()}yV();r2();o2();_V();MV();
